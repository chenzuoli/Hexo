{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/fourleafclover-16x16.png","path":"images/fourleafclover-16x16.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/fourleafclover-32x32.png","path":"images/fourleafclover-32x32.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatCode.jpg","path":"images/wechatCode.jpg","modified":1,"renderable":1},{"_id":"themes/next/source/images/wechatPay.png","path":"images/wechatPay.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/sky_cloud.jpeg","path":"images/sky_cloud.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/love.js","path":"js/src/love.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/src/wangEditor.js","path":"js/src/wangEditor.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":1,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":1,"renderable":1},{"_id":"themes/next/source/images/star_sky.jpeg","path":"images/star_sky.jpeg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":1,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"9f0993fbc4a4e3bd86ac7f325fc212d05e46820a","modified":1560267578253},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1544536633105},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1544536633105},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1544536633105},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1544536633105},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1544536633106},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1544536633106},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1544536633106},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1544536633106},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1544536633106},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1544536633107},{"_id":"themes/next/README.cn.md","hash":"58ffe752bc4b7f0069fcd6304bbc2d5ff7b80f89","modified":1544536633107},{"_id":"themes/next/README.md","hash":"aa2fb15ef016074b10755323c99025df506d5ca3","modified":1544536633107},{"_id":"themes/next/_config.yml","hash":"103792c83b903a0825827608db6814d9ac8c37c2","modified":1564795629098},{"_id":"themes/next/_config.yml.bak","hash":"e650a0a5f555eb68623e0cba75f3bb87b132b56e","modified":1544536633108},{"_id":"themes/next/bower.json","hash":"6d6ae7531cf3fedc97c58cdad664f5793eb3cc88","modified":1544536633108},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1544536633108},{"_id":"themes/next/package.json","hash":"93a74dbc0fe3a1208a02e9cec3c15c2375339cc1","modified":1544536633124},{"_id":"source/_drafts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1555726424896},{"_id":"source/about/index.md","hash":"bf4b4bef02d0d943bf0e856cdcf82e722ab757c3","modified":1555827021870},{"_id":"source/categories/index.md","hash":"75a93f491db85b93dfd111a24a8f2a5fd22692f3","modified":1544536633104},{"_id":"source/schedule/index.md","hash":"6248081151d7723990c12097cbd75cabe15ad686","modified":1544536633105},{"_id":"source/tags/index.md","hash":"f3e89605b92940bbbd62c1f79665b860aafdcf36","modified":1544536633105},{"_id":"source/_posts/.DS_Store","hash":"1c54591a654aa7e3517ab2d1d0750fdbe5e6d724","modified":1568821827929},{"_id":"source/_posts/2018年全球各国谋杀比例.md","hash":"a458cd81838a1c3c931212e9d78a6276e039dd70","modified":1565263452789},{"_id":"source/_posts/2019年世界上最好的机场.md","hash":"3b3d4e5d3956ee3801ae04a0d832a82c5e301865","modified":1555815217793},{"_id":"source/_posts/2019年全球最具价值的餐饮品牌.md","hash":"970bc8d57765a6bf09b3df904ddff1c37b843eff","modified":1555814620527},{"_id":"source/_posts/Accumulator must be registered before send to executor.md","hash":"4e0a73fc721e9830ff6151d99c17193be902e507","modified":1544536632955},{"_id":"source/_posts/Average speed of mobile internet connections, 2019.md","hash":"1162193415c7679ea5db3d85e894b83d83ffc88f","modified":1555814816519},{"_id":"source/_posts/DAPP到底是什么？.md","hash":"4223cc1839458652ef550c3accedd7c818c5c8ab","modified":1565799050088},{"_id":"source/_posts/ETL工具类.md","hash":"e28acac971c3526696cdbf1dc47fd8f3e74ab181","modified":1544536632956},{"_id":"source/_posts/ElasticSearch集群环境搭建.md","hash":"1c3e45d02435d3d37188796569034fc5babd4753","modified":1567783632395},{"_id":"source/_posts/Flink学习.md","hash":"fe83406a3fe0d7bd59ca1dda5437ba0a096affd4","modified":1566918528341},{"_id":"source/_posts/Git服务器端配置详解.md","hash":"85b5544bbc72c290b30546f20ed123d317c39062","modified":1563592357135},{"_id":"source/_posts/Highest Divorce Rate by Country.md","hash":"e4425160eeb6e8e63cf33ba70e60a34ed7dfc0cd","modified":1555815225754},{"_id":"source/_posts/Japan Economy Data.md","hash":"8abe4d81895800ca93f4ec732f95c9e3c38d7a72","modified":1555819572844},{"_id":"source/_posts/Linux命令相关.md","hash":"b5eb13249d95a23476b5f8c889f2f716d7f1cad3","modified":1564244822428},{"_id":"source/_posts/MVC设计模式.md","hash":"e5cbe015d585b472335e05791bd7260e375640a1","modified":1568556817707},{"_id":"source/_posts/P2P（PeerToPeer）网络原理.md","hash":"a273568e660aac8c4f4ec0ae24f4a35da5309e37","modified":1568903623505},{"_id":"source/_posts/Solidity学习.md","hash":"4dd9cd88cf10b38bb5eb9b64a918330e4c6f8da1","modified":1568477335073},{"_id":"source/_posts/Starbucks.md","hash":"12d0d8fb40b0a30af7c5e9f63003292a95373573","modified":1557845905060},{"_id":"source/_posts/The world's Top 100 Airports for 2018.md","hash":"8823196691a862242e5096344de360a5791a074d","modified":1555820061698},{"_id":"source/_posts/The world’s most famous athletes, 2019.md","hash":"b0cc42fa96ee3be945b1e14e6c5576c4f402d805","modified":1555816544346},{"_id":"source/_posts/Top universities in medicine, 2018.md","hash":"5c5825bd58b082424b0fa48514c626e8e42b6af0","modified":1555816650619},{"_id":"source/_posts/Turkish.md","hash":"55307839e74f625ebf1b76b3b2f163efec778947","modified":1558446926191},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解.md","hash":"17dbe208d23bb0aae662d7965796cc4651710b68","modified":1544536632957},{"_id":"source/_posts/World's most expensive cities, 2019. (cost of livi.md","hash":"342c7d1430879d24e49b73f391c04665b56ce2c0","modified":1555816867277},{"_id":"source/_posts/airbnb开源调度系统airflow的一些命令及使用方法.md","hash":"2195a3ad949ca256ca65bd9c50af5369b7e0e811","modified":1565263772766},{"_id":"source/_posts/ambari管理监控hadoop生态系统的环境安装及问题解答.md","hash":"83ad187cc285e00336ba4dcc212031fdcb5e6fb0","modified":1544536632962},{"_id":"source/_posts/c3p0数据库连接池的使用方法.md","hash":"4f305ba5a283c0af5f7269eca9031c239018f8e8","modified":1544536632964},{"_id":"source/_posts/createWebsiteHelp.md","hash":"541e0049b387d9386c40aa4983bb4f62dc97e146","modified":1544536632968},{"_id":"source/_posts/debezium实时同步mysql、postgresql数据介绍.md","hash":"3106ad10e89c7e72854e8cbba9c79cdf1d0c25c1","modified":1563593284524},{"_id":"source/_posts/go语言学习.md","hash":"0b38e7ee704219e31a3483e95ae676fc036d1ee5","modified":1568538135776},{"_id":"source/_posts/hive相关.md","hash":"2f126c5e6ff8508a77b9fe8dfef4048105a6816b","modified":1563723149932},{"_id":"source/_posts/java操作hbase工具类.md","hash":"405ef1fa90ad40a11cee973cc15818b03f5f8f5e","modified":1544536632972},{"_id":"source/_posts/kafka命令行基本操作.md","hash":"39de46878b5ab986439b739c4c12663cb541b3fb","modified":1544536632973},{"_id":"source/_posts/kafka集群搭建.md","hash":"4c6ccbf858aa90b3bd8afc0f58733bd57f6d85ec","modified":1567221697299},{"_id":"source/_posts/linux高效编程.md","hash":"809378288196b6fea8053796e1d59214b335860a","modified":1544536632973},{"_id":"source/_posts/spark基于zookeeper的高可用搭建.md","hash":"859858e8ebf200a522317dbfa7446a4b3534dce7","modified":1544536632973},{"_id":"source/_posts/ubuntu防火墙操作.md","hash":"f1652c0e1e75766cec96b394f1f3166ffc19d3fe","modified":1544536632974},{"_id":"source/_posts/windows-C盘垃圾清理.md","hash":"ebde7011a1efd6d94300b112194868e7506f8685","modified":1544536632974},{"_id":"source/_posts/windows下vim打开文件中文乱码.md","hash":"3f62b0ce8418dfe2b81f4d23003f1ed3c46bb982","modified":1544536632974},{"_id":"source/_posts/三星集团.md","hash":"a7b836594f922bddd9d536f39ef650938ffa5dd9","modified":1555816995087},{"_id":"source/_posts/世界上钻石价格排行.md","hash":"6e8b02dcd6803c5b397cc7fcc9b58373701506e5","modified":1556337388032},{"_id":"source/_posts/世界十大语言排名.md","hash":"4e94478f36b6359af5f4d458ed21cb9efc6ca5e7","modified":1560268610072},{"_id":"source/_posts/世界各国人民平均汽车拥有量.md","hash":"0836a0cc8d88ba4fe5fcac5f116cc2107cfb74ac","modified":1561771205611},{"_id":"source/_posts/世界失业率排行.md","hash":"2ebde91f0968924d937389b3a2542de623167c97","modified":1558231672387},{"_id":"source/_posts/中本聪(Satoshi Nakamoto)&比特币.md","hash":"8eb54d7eabb4e65986590a8b12d39ec95f6e35ab","modified":1555817206502},{"_id":"source/_posts/人们最有可能帮助陌生人的十大国家.md","hash":"0c56a087f4adee814bf199991d6bae2ddea93f12","modified":1555950127108},{"_id":"source/_posts/以太坊.md","hash":"bd6924ef98318700383a232965c7f902a58b25df","modified":1568434736919},{"_id":"source/_posts/以太坊（Ethereum）简介.md","hash":"3c68e5ef6d589d668a891afaa78fed32848de128","modified":1556036656961},{"_id":"source/_posts/儿童贫困率排行.md","hash":"9a80ac8a67374f987cbc6e1176009d9e2726aec5","modified":1558231558427},{"_id":"source/_posts/全球各国人均GDP排行.md","hash":"577a80f16f4d359de399f5813af1ecc2e760cbb4","modified":1557240881643},{"_id":"source/_posts/全球奢侈珠宝品牌排名.md","hash":"c99d77611b63b9303707b3f4d67bdecc9926116a","modified":1556119607530},{"_id":"source/_posts/全球最受欢迎的无广告网站-维基百科.md","hash":"974ed7cdab3ac979a69191cf043b268f72350fc9","modified":1556963921038},{"_id":"source/_posts/公链如此多，而应用却寥寥无几.md","hash":"057e761aabe4b2a3529bded3deb74144050e6609","modified":1564884288967},{"_id":"source/_posts/北京租房小中介骗局.md","hash":"c7a2cde0f12fe17e081852a3392eb076d57a1d1d","modified":1544536632995},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比.md","hash":"bd5c5d7312d8b94e61f3b583528a3ae7bb944fde","modified":1556552238646},{"_id":"source/_posts/区块链三大共识机制.md","hash":"d80a47c2161d1a80216e3d41f4dc4e2c5979afec","modified":1567927711065},{"_id":"source/_posts/区块链应用.md","hash":"55638be4c5fd66bafc42998ec3f11387f01b7c70","modified":1544536633074},{"_id":"source/_posts/区块链技术存在的问题.md","hash":"7b0eb3dcce5ddc1e41e7b47d4579d2a376d4be31","modified":1544536633075},{"_id":"source/_posts/单台服务器安装spark、hadoop服务文档.md","hash":"5c68e599a95ae1c10550a266084b1093602bac6f","modified":1544536633081},{"_id":"source/_posts/印度处于领先地位的产品.md","hash":"955551a496ca28e74b52df1e05b22c588d449d40","modified":1555817910296},{"_id":"source/_posts/各国得诺奖数.md","hash":"ab7759c572685ba4e2eddb7315dcf46fbab88b8c","modified":1555818457734},{"_id":"source/_posts/大O表示法（时间复杂度）.md","hash":"9cbb564ad56dd03fcb65c25d44556bf099e817f6","modified":1568528670048},{"_id":"source/_posts/尼古拉·特斯拉.md","hash":"abcee992ce37808b4185dc897d9705440a60a4b9","modified":1555819976331},{"_id":"source/_posts/并发与并行.md","hash":"d575db708a7493d6cbc4e967c92fc5c3fd30752f","modified":1566124366264},{"_id":"source/_posts/德国的世界品牌.md","hash":"3eb3e8cae4ebd1f810fb51f320312a30080ae238","modified":1555818714069},{"_id":"source/_posts/恒星币（XLM）.md","hash":"08c82e04aaa4450218b93ac4e8dc08668d7a8985","modified":1555818813152},{"_id":"source/_posts/截至2019年5月5日世界上最富有的人排行.md","hash":"38b46ddbe92222106e5fef4c0c206698c55c521b","modified":1557064931574},{"_id":"source/_posts/拜占庭问题.md","hash":"3066b61d18daf380cae174a650a79d8eff5e7046","modified":1567923643423},{"_id":"source/_posts/搭建maven私服nexus.md","hash":"630a7ba52f24f081f8d590dc49a1b0d4a879b673","modified":1544536633094},{"_id":"source/_posts/搭建zookeeper集群.md","hash":"203f335d702ef8fd2ef740abddb6dc07539f6c0d","modified":1567221717832},{"_id":"source/_posts/操作mysql工具类.md","hash":"c514bcec35c322fc16af1fae1c9d863bfe03b49c","modified":1544536633094},{"_id":"source/_posts/数据仓库元数据管理系统.md","hash":"bd8241866b6b4dd796692d1ea02a72497c808e03","modified":1569079585733},{"_id":"source/_posts/数据仓库模型设计.md","hash":"dff3261f349dbffb33502006db7fecdd12ffac39","modified":1568903370644},{"_id":"source/_posts/数据库、数据仓库、数据集市的区别与联系.md","hash":"9f07b6344df7eb059e3115ac6ee296087661e833","modified":1568735921816},{"_id":"source/_posts/数据结构与算法.md","hash":"45134e077c2002d3173369b7d22434b42e99a19b","modified":1568430419489},{"_id":"source/_posts/最健康的国家指数，2019年.md","hash":"af05fa5d98196e5b73aa18d90f68534162404106","modified":1555817853813},{"_id":"source/_posts/比原链-共享经济平台简介.md","hash":"2de465e8cfc98b4ee12285800c9dedf5d875d16b","modified":1564884032873},{"_id":"source/_posts/比特币原理.md","hash":"8416ac1fa50c23adc5c896f1d2c1980954d70037","modified":1568378248025},{"_id":"source/_posts/比特币双花攻击.md","hash":"ed72bdcdb6fc155856b457cbd51e6fa93cf095c1","modified":1568044814470},{"_id":"source/_posts/比特币本质其实是UTXO.md","hash":"a665a84af936e806ee5bfbd1bb62ce6de804c205","modified":1568045024604},{"_id":"source/_posts/游戏市场营收排名.md","hash":"079069f13cb26ff52590b3ad3f69f062f28f31a0","modified":1555818893544},{"_id":"source/_posts/瑞波币（XRP）.md","hash":"a3a1b1869e9dc56efbf14837561e6be0d9bff3e6","modified":1555819038134},{"_id":"source/_posts/程序设计.md","hash":"9e212f2b1f8aa6b6c4c3a86cdc0486bd1b28dde7","modified":1568370693776},{"_id":"source/_posts/简单排序.md","hash":"6091bfb2ce4988433d4198d163a9cf6ab87dbebf","modified":1568555049096},{"_id":"source/_posts/美国软件巨头Oracle简介.md","hash":"e4742cbaf3776c0ff1bf0d0d21a17d5a10a58bc3","modified":1557568803354},{"_id":"source/_posts/英国构成国.md","hash":"844a327075c8f1253cec15446768d260cd01a11c","modified":1562478137657},{"_id":"source/_posts/说英语的国家.md","hash":"d9218c41d3efb4ba43b484bfa7f8d169f335e24c","modified":1561719902955},{"_id":"source/_posts/读取配置文件工具类.md","hash":"576837b87035dd6017475538bfdefb04ddc14a72","modified":1544536633102},{"_id":"source/_posts/身份证号校验工具类IdentityUtil.md","hash":"5e704b0034e845c68c691b21f5950a4cc9f6bf38","modified":1544536633103},{"_id":"source/_posts/道路质量排行.md","hash":"e6595da555cbe02648f0e9ac38ec3141daecd037","modified":1555819178461},{"_id":"source/_posts/重温《头号玩家》VR游戏中的区块链世界.md","hash":"5d107475fcadd8016e946c71092a9e479f44b9e5","modified":1566711004143},{"_id":"source/_posts/阿甘正传剪辑.md","hash":"2d8406bd5a5821cbe7513ae04648b08259a2cfee","modified":1564803212626},{"_id":"source/_posts/阿里巴巴mysql数据库binlog的增量订阅与消费组件canal.md","hash":"7ff040265d2a0a3147ab60a3b589f842db1eef35","modified":1544536633104},{"_id":"source/_posts/零知识证明.md","hash":"1d639eaf8fbb1a10b738e5589f30e8f1322323dd","modified":1568649413140},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1544536633108},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1544536633109},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1544536633109},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1544536633109},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1544536633109},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1544536633109},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1544536633109},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1544536633109},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1544536633110},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1544536633110},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1544536633110},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1544536633110},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1544536633110},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1544536633110},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1544536633111},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1544536633111},{"_id":"themes/next/layout/_layout.swig","hash":"917170aac8575659e11f42af0ff086a8a868dc97","modified":1544536633112},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1544536633123},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1544536633123},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1544536633123},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1544536633123},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1544536633124},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1544536633124},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1544536633124},{"_id":"themes/next/scripts/merge-configs.js","hash":"cb617ddf692f56e6b6129564d52e302f50b28243","modified":1544536633124},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1544536633125},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1544536633189},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1544536633189},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1544536633196},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633146},{"_id":"source/_posts/DAPP到底是什么？/blockchain.jpeg","hash":"3a738d8b65187bdf136483cace74db02cbb063e0","modified":1565797571812},{"_id":"source/_posts/DAPP到底是什么？/dapp.jpg","hash":"193a647d734cfce7fa3e9d70a99063a6fd55778a","modified":1565797762561},{"_id":"source/_posts/DAPP到底是什么？/dapp_app.png","hash":"fc25af40367877494bba71b2d14f0e816582e01f","modified":1565798246392},{"_id":"source/_posts/ElasticSearch集群环境搭建/es.jpeg","hash":"e892d1b81f72be632b57d367901d1c47a7f656f4","modified":1567783307720},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/node.jpg","hash":"c9d9323d63d634d4542859dcac6ab49b6dcb99aa","modified":1568821789183},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/p2p_network.jpg","hash":"62765206e3dce395ab390a786faaa51272bc60ba","modified":1568821849391},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/p2p_new.jpg","hash":"b24ff7393f4730f93d24c81e10e8490533641f39","modified":1568821870633},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/peer2peer.jpeg","hash":"18ff78854c924a69f09eb57371a4ebade5962fc1","modified":1568903527777},{"_id":"source/_posts/Solidity学习/solidity.jpg","hash":"208472dd0dee6320dc0c8115c6e6074b051f8ed3","modified":1568475309818},{"_id":"source/_posts/Turkish/Turkishjpeg.jpeg","hash":"3fee8ff58a09402ee69b46884dccc71eeb9ec334","modified":1558446902861},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解/deskNumMappingPort.png","hash":"dcd6ddbfeeb3ad4418bb54c480a8ef295a29a326","modified":1544536632958},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解/vnc_viewer_connect_test.png","hash":"0a0704bc2f0a0724bfd57bf8a425d253dd3724af","modified":1544536632961},{"_id":"source/_posts/createWebsiteHelp/customDomain1.png","hash":"0cf08a59e3977038753c69f06f5e96df764331f7","modified":1544536632970},{"_id":"source/_posts/createWebsiteHelp/customDomain2.png","hash":"3eacc935efae8b9393dc2518f34f8f5c30844ca7","modified":1544536632971},{"_id":"source/_posts/createWebsiteHelp/domainMapping.png","hash":"1760827a725b28c0c1ac0f696f2acbe6894ae815","modified":1544536632972},{"_id":"source/_posts/debezium实时同步mysql、postgresql数据介绍/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1563714321544},{"_id":"source/_posts/kafka集群搭建/kafka-logo.png","hash":"c9b07153b313e619e3c0fb4b07d63c45dfcb5621","modified":1567221350212},{"_id":"source/_posts/windows下vim打开文件中文乱码/_vimrc.png","hash":"da9bf20c5196957a53e5e5bee745998b4ea2b9da","modified":1544536632975},{"_id":"source/_posts/windows下vim打开文件中文乱码/gvim客户端.png","hash":"839b2044fc206b62c21ba66f20c252216809b10c","modified":1544536632980},{"_id":"source/_posts/windows下vim打开文件中文乱码/gvim客户端菜单乱码.png","hash":"34f91029191bde60170f296277be404d384e9c46","modified":1544536632980},{"_id":"source/_posts/windows下vim打开文件中文乱码/gvim查找.png","hash":"0ed9a167030cbb508ffec5812b6eeef36717e03b","modified":1544536632981},{"_id":"source/_posts/世界上钻石价格排行/400px-Koh-i-Noor_old_version_copy.jpg","hash":"e8b52df6037eff87afa7f92810b97c2cd82663c2","modified":1556357762720},{"_id":"source/_posts/以太坊/Ethereum_founder.jpg","hash":"0e0f2d577348c299ebb5a64ce771b90299842f0a","modified":1568475237810},{"_id":"source/_posts/儿童贫困率排行/child_poverty_rate.jpeg","hash":"039926f1bb1d924051bd5db2d094a780d19c806b","modified":1558231217226},{"_id":"source/_posts/全球各国人均GDP排行/lusenbao.png","hash":"1ac029ca25c13297a4630996513c34f66b6a83e4","modified":1557240288093},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_tps.png","hash":"3600ebd3c5f6e9b406790cb01dfd07fe7e5291da","modified":1556551341457},{"_id":"source/_posts/单台服务器安装spark、hadoop服务文档/spark-default.conf.png","hash":"ed55f6e1d104a7621b866517adb3cde2321e6eb7","modified":1544536633082},{"_id":"source/_posts/搭建zookeeper集群/zookeeper_small.gif","hash":"33565264b6696f3f5d61fa35a9b21e6edbc08523","modified":1567220063501},{"_id":"source/_posts/数据仓库模型设计/schema_difference.jpg","hash":"7201f876d69f9030ebc64b4927e56bac951effd8","modified":1568735238604},{"_id":"source/_posts/数据仓库模型设计/star-model.jpg","hash":"19ec4c4d6d38f5b679968df2559074386d747736","modified":1568903360555},{"_id":"source/_posts/数据仓库模型设计/star_schema_example.jpg","hash":"b3d150339fd7874bee0e2eaa956248811a1e5f28","modified":1568735150779},{"_id":"source/_posts/数据库、数据仓库、数据集市的区别与联系/data-relationship.jpeg","hash":"f8989f270dc049a4e4a93652c2ea4dc637686d98","modified":1568731753771},{"_id":"source/_posts/数据库、数据仓库、数据集市的区别与联系/data_warehouse.jpeg","hash":"7ab4bb6917421aa11186b8a1cf4eed08e577ff27","modified":1568731698638},{"_id":"source/_posts/数据结构与算法/data.jpeg","hash":"f4e1d04c37d398c369eb6f0bfde9f807607c4dad","modified":1568211109313},{"_id":"source/_posts/比特币双花攻击/attack_chain.png","hash":"b0f3ae94a4db22738308d40e5c72246167e12d47","modified":1568043911204},{"_id":"source/_posts/比特币双花攻击/back_chain.png","hash":"144fa8bdbbf63819ccee8ca7f1850e4dc6973855","modified":1568043862594},{"_id":"source/_posts/比特币双花攻击/chain.png","hash":"0b24858b725e1c1371e263aad4c46d5373a3ea04","modified":1568043799069},{"_id":"source/_posts/简单排序/simple_sort.jpeg","hash":"5337294e7691dcc687fc3a2f6786ea74920829e7","modified":1568538355650},{"_id":"source/_posts/美国软件巨头Oracle简介/oracle_cloud.jpg","hash":"8d4208361f6b1076735e98747ba1b5e7be61db8a","modified":1557566918198},{"_id":"source/_posts/英国构成国/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1562477941338},{"_id":"source/_posts/零知识证明/zero-knowledge-proof.jpg","hash":"44bdf7f587000ebc4b81eff2494a638722288320","modified":1568648416809},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1544536633111},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1544536633111},{"_id":"themes/next/layout/_custom_ad/adsunit.ejs","hash":"2e6e6cfdcf8b889b268fc61a2f24e2977c01c577","modified":1565883974591},{"_id":"themes/next/layout/_custom_ad/google_adsense.ejs","hash":"66f3457b6cd7fac315a780b64669097c3f3c8a35","modified":1555730074956},{"_id":"themes/next/layout/_macro/article-end-tag.swig","hash":"3ff34989cab5d624504e3aaaf656c5dc0d61cdbc","modified":1565883909732},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1544536633112},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1544536633112},{"_id":"themes/next/layout/_macro/post.swig","hash":"c952dc7f30d8be777da798cdb224c84bfe991a11","modified":1544536633113},{"_id":"themes/next/layout/_macro/publishArticle.swig","hash":"2d85190b38b7aa494871c4b93df2fa99eb724028","modified":1544536633113},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1544536633113},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"9efc455894921a66bbc074055d3b39c8a34a48a4","modified":1544536633113},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1544536633113},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1544536633114},{"_id":"themes/next/layout/_partials/footer.swig","hash":"24bc82f35b4c4495e7f29582b930730946c78987","modified":1558257776440},{"_id":"themes/next/layout/_partials/footer.swig.bak","hash":"7ae6a75a2183b4ff1c6ab391dcc000ae2cc8d782","modified":1544536633114},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1544536633114},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1544536633114},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1544536633115},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1544536633115},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1544536633115},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"9a53982695b662ed4ac969ec5deed4121c701ae8","modified":1544536633116},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1544536633117},{"_id":"themes/next/layout/_scripts/lean-analytics.swig","hash":"ec35f1f34a209a1525bbf7eb2fec466b7c2a97a7","modified":1544536633117},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1544536633117},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1544536633121},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1544536633121},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1544536633121},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1544536633121},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1544536633122},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1544536633122},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1544536633122},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1544536633125},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1544536633125},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1544536633125},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1544536633125},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1544536633125},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1544536633126},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1544536633126},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1544536633126},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1544536633126},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1544536633146},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1544536633146},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1544536633146},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1544536633147},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1544536633147},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1544536633147},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1544536633147},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1544536633148},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1544536633148},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1544536633148},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1544536633148},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1544536633148},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1544536633149},{"_id":"themes/next/source/images/fourleafclover-16x16.png","hash":"12f92db682245facc4ee02ad8fef26c26cbb4daf","modified":1544536633149},{"_id":"themes/next/source/images/fourleafclover-32x32.png","hash":"ca304a922ca5aea85dc2dacd63b51c940a1a9482","modified":1544536633149},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544536633149},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1544536633149},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1544536633150},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1544536633150},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1544536633150},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1544536633150},{"_id":"themes/next/source/images/wechatCode.jpg","hash":"ef2de688e38c7c6117dedf239d38fad686a41b3b","modified":1544536633151},{"_id":"themes/next/source/images/wechatPay.png","hash":"2cdecb454f2a97a2412001cc502c3fb45e68d057","modified":1544536633151},{"_id":"source/_posts/Flink学习/flink-header-logo.svg","hash":"fe5a2786f66b48b627dcaf3279eeea0b0e2abcc9","modified":1566835640291},{"_id":"source/_posts/Flink学习/water_mark-event_time-process_time.png","hash":"d14ec4ce730f711fee994ecba64395432aa2b5ce","modified":1566833920818},{"_id":"source/_posts/Linux命令相关/linux.jpeg","hash":"fa4acb7e1e2d970f15bcf74f18a6d3a18360da81","modified":1564244123854},{"_id":"source/_posts/MVC设计模式/mvc.png","hash":"2fd2ee7405898da4cb30d2830e6a939eec82f299","modified":1568556166111},{"_id":"source/_posts/Starbucks/starbucks.jpeg","hash":"cfce64e2341d4f53eb5ba16f129c1a02b9ffc83f","modified":1557845607752},{"_id":"source/_posts/ambari管理监控hadoop生态系统的环境安装及问题解答/VBoxManageError.png","hash":"8b85333132f80bf105de91960fe3a0f9722aa965","modified":1544536632963},{"_id":"source/_posts/debezium实时同步mysql、postgresql数据介绍/5DCA7786FF43D058BBB827BC521EFBDE","hash":"1f2f41bb16f474effdaa0c78da5283a47d2bb1ae","modified":1563592048867},{"_id":"source/_posts/debezium实时同步mysql、postgresql数据介绍/A91E335CC16D805E66B44CD76ADF4383","hash":"f668aaebf081986b0b3a8f772cb68cb4bb13fedc","modified":1563592048870},{"_id":"source/_posts/世界上钻石价格排行/Koh-i-Noor.jpeg","hash":"6ef1ff4830e5a84c13511fe6945cfc22e527e24e","modified":1556337200929},{"_id":"source/_posts/世界各国人民平均汽车拥有量/car_model.jpeg","hash":"bed2613f08970efb97cdecf40907fc2d03c7ba61","modified":1561771151495},{"_id":"source/_posts/以太坊（Ethereum）简介/500px-VitalikButerinProfile.jpg","hash":"67d5a6ce027e2d37ba7eae529b5d9d6fa5813bf1","modified":1556035316998},{"_id":"source/_posts/以太坊（Ethereum）简介/800px-Ethereum_logo_2014.svg.png","hash":"1051a103de6ef00c6337072afe97304cc040e778","modified":1556036423644},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比/xrp_speed.png","hash":"0947b69ecc7232a426bcf9f9fc23f49f9d6831e2","modified":1555430283678},{"_id":"source/_posts/数据仓库模型设计/galaxy_schema.jpg","hash":"fd42111038f14c5c65b8bc926917a129f723d8ed","modified":1568735213740},{"_id":"source/_posts/数据仓库模型设计/galaxy_schema_example.jpg","hash":"e456fae5c821ea82b7d41fbe7861a2d2939c586b","modified":1568735223591},{"_id":"source/_posts/数据仓库模型设计/snowflake_schema.jpg","hash":"256920d996cf6e1d390f5748d21224d2eaf92ae6","modified":1568735166815},{"_id":"source/_posts/数据仓库模型设计/snowflake_schema_example.jpg","hash":"adab2d16322596a3ef28fe020ffdce8f4bceeb95","modified":1568735179423},{"_id":"source/_posts/数据仓库模型设计/star_schema.jpg","hash":"c5fd890d72de183418b949f2ce6f9e1078381d5e","modified":1568735139511},{"_id":"source/_posts/数据结构与算法/city_data.jpeg","hash":"0008adfbca47943331f547f03d1d3f70a5ab799b","modified":1568338678155},{"_id":"source/_posts/数据结构与算法/delete_from_array.png","hash":"1919ff8ba0eab2371db2ae77885f9575adf2a56a","modified":1568212316982},{"_id":"source/_posts/数据结构与算法/half_search.png","hash":"53ba59f4e7008ff953c550879210567aef2a1c40","modified":1568422397275},{"_id":"source/_posts/比特币原理/exchange.png","hash":"fa445eaf1e50c9f4938bc819d41abe5ac57e3345","modified":1544536633098},{"_id":"source/_posts/比特币本质其实是UTXO/btc.jpeg","hash":"6803d65f1be8104a4b07731681622a3f91d5a573","modified":1568042728499},{"_id":"source/_posts/简单排序/bubble_sort.png","hash":"e1e001f9e16223634efa4f8b6529b397e1d9b82a","modified":1568538525281},{"_id":"source/_posts/英国构成国/Britain_countris.png","hash":"d6e982f8332b1e83c9a28c203683718c1e0dc4d8","modified":1562475835623},{"_id":"source/_posts/英国构成国/TheBritainCounties.png","hash":"09c15a3eaed7cabaf6793bc5492d55588c371608","modified":1562476588925},{"_id":"source/_posts/英国构成国/William Wallace.webp","hash":"b54d6dc07242b3d5345fe86f307b6d628a3a1514","modified":1562477910046},{"_id":"source/_posts/说英语的国家/English_letter.jpeg","hash":"22c796705631fe22a07519a3bd214709178a5a00","modified":1561720695580},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633117},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633117},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633139},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633139},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633140},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633145},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1544536633146},{"_id":"themes/next/source/images/sky_cloud.jpeg","hash":"8cd4c50a29b510eae9d592cddea9662d5907c8c4","modified":1558260146646},{"_id":"source/_posts/Japan Economy Data/japan_economy_data.jpg","hash":"905e8fcbd3e5108235972018a46deecc4399e861","modified":1555816008136},{"_id":"source/_posts/go语言学习/golanguage.png","hash":"fdfbfaa86ceed7953c4df328434c59f29cc8a1e2","modified":1566702890325},{"_id":"source/_posts/全球奢侈珠宝品牌排名/hand-bricks-rings-ring.jpg","hash":"ba38f93959bb17e8d066684527be5307aa00c305","modified":1556119983091},{"_id":"source/_posts/并发与并行/concurrency_and_parallelism.png","hash":"b56076887439e48fc72a4491e94a1649c281b598","modified":1566108640835},{"_id":"source/_posts/截至2019年5月5日世界上最富有的人排行/kindle.jpeg","hash":"0100b8dc877c8ead8fe94ff93faee13ea9c1e2df","modified":1557064430832},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"294bd6163345328f167cc40d5f441bb29b46e856","modified":1555729939866},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1544536633114},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1544536633115},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1544536633115},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1544536633115},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1544536633115},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1544536633116},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1544536633116},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1544536633116},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","hash":"8fc0358397af9e3416202998793866f6c66004ae","modified":1544536633116},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1544536633117},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1544536633117},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1544536633117},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1544536633118},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1544536633118},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1544536633118},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1544536633118},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1544536633118},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1544536633118},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1544536633119},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1544536633119},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1544536633119},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1544536633119},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1544536633119},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1544536633119},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1544536633119},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1544536633120},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1544536633120},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1544536633120},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1544536633120},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1544536633120},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1544536633120},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1544536633121},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1544536633121},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1544536633121},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1544536633122},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1544536633123},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1544536633123},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1544536633123},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"14248181b9b6f53c7dc278a9df7a572897adcdad","modified":1561720602671},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1544536633139},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1544536633139},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1544536633139},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1544536633145},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1544536633145},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1544536633145},{"_id":"themes/next/source/css/_variables/base.styl","hash":"90b45496d13080b70c594791b014d25012f5c3ad","modified":1544536633145},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1544536633152},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1544536633152},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1544536633152},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1544536633152},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1544536633153},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1544536633153},{"_id":"themes/next/source/js/src/love.js","hash":"9e8e79d69ad8338761272f86fe5cad0ad5e503cc","modified":1544536633153},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1544536633153},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1544536633153},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1544536633154},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1544536633154},{"_id":"themes/next/source/js/src/utils.js","hash":"dbdc3d1300eec7da9632608ebc0e5b697779dad7","modified":1544536633154},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1544536633160},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1544536633163},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1544536633163},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1544536633167},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1544536633167},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1544536633167},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1544536633167},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1544536633168},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1544536633168},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1544536633168},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1544536633168},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1544536633168},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1544536633178},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1544536633178},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1544536633178},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1544536633179},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1544536633179},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1544536633179},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1544536633179},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1544536633180},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1544536633180},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1544536633180},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1544536633180},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1544536633180},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1544536633181},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1544536633181},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1544536633181},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1544536633181},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1544536633181},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1544536633181},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1544536633182},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1544536633182},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1544536633182},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1544536633182},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1544536633182},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1544536633182},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1544536633183},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1544536633183},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1544536633183},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1544536633187},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1544536633187},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1544536633188},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1544536633189},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1544536633189},{"_id":"source/_posts/世界十大语言排名/language_index.jpeg","hash":"7592cb3aabf9a7e71d0ff19616e31cce6d6369b9","modified":1560268053532},{"_id":"source/_posts/全球最受欢迎的无广告网站-维基百科/Www.wikipedia.org_screenshot_2018.png","hash":"cf66528876ff0a05f028a382ca9cb81973dc97f5","modified":1556959594682},{"_id":"source/_posts/全球最受欢迎的无广告网站-维基百科/Wiki-donate.jpg","hash":"d1e28ba857a1dd690118a38b508751a8551fc13a","modified":1556961112234},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_state.png","hash":"7a443a3d861b5f39050e86cb7a80c49af9b331b9","modified":1556547109198},{"_id":"source/_posts/大O表示法（时间复杂度）/3.png","hash":"a7e1fd8321668683d179129ab9cb070f138aa0bf","modified":1568528343406},{"_id":"source/_posts/大O表示法（时间复杂度）/5.png","hash":"600cbab495d9e92175a5a63a9021cc2b51ee72d0","modified":1568528388446},{"_id":"source/_posts/大O表示法（时间复杂度）/time_complex_degree.png","hash":"c774f63d3d4d64c79610e7a80f29513ede41e2a2","modified":1568527884688},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1544536633178},{"_id":"source/_posts/区块链三大共识机制/blockchain.jpeg","hash":"c4dac8d9ce98c5bd01567ad5fa33e470e83710f2","modified":1567525565981},{"_id":"source/_posts/大O表示法（时间复杂度）/2.png","hash":"d1ca9e55468f6b79fdeebb03aa7c52ac81eeb8b1","modified":1568528326524},{"_id":"source/_posts/比特币双花攻击/btc.jpeg","hash":"d585666deb3420365f6381ef34a9fb0d7c517cc0","modified":1568043594056},{"_id":"source/_posts/美国软件巨头Oracle简介/tech.jpeg","hash":"0b49a7caba888aca54242e52f464db7c76eb41c7","modified":1557568550619},{"_id":"source/_posts/重温《头号玩家》VR游戏中的区块链世界/ready-player-one.jpg","hash":"6c5dcf7d177e37b16973d8e359db3521d1ea9ca1","modified":1566702671851},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1544536633122},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1544536633122},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1544536633126},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1544536633127},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1544536633127},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1544536633127},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1544536633127},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1544536633130},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1544536633134},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1544536633138},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1544536633138},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1544536633138},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1544536633138},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1544536633138},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1544536633139},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1544536633139},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1544536633140},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1544536633140},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1544536633140},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1544536633140},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1544536633141},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1544536633141},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1544536633141},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1544536633142},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1544536633143},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1544536633143},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"02fb8fa6b6c252b6bed469539cd057716606a787","modified":1544536633143},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1544536633143},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1544536633143},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1544536633144},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1544536633144},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1544536633144},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1544536633144},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"bcf52192942c0afc410c74a0fb458e7936ddc3d5","modified":1544536633145},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1544536633145},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1544536633154},{"_id":"themes/next/source/js/src/wangEditor.js","hash":"f32147951c240a6d2895010fed3ade4d781c4a6e","modified":1544536633155},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1544536633158},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1544536633159},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1544536633159},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1544536633163},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1544536633166},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1544536633166},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1544536633166},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1544536633167},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1544536633168},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1544536633169},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1544536633169},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1544536633170},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1544536633186},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1544536633187},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解/vnc_viewer_connect_appearance.png","hash":"7fda12204a57bdf5418b591df84d6ed030782e28","modified":1544536632961},{"_id":"source/_posts/人们最有可能帮助陌生人的十大国家/soldier-military-uniform-american.jpg","hash":"f2658bcfc5ff3270fd420e6fe1a72f7df3433196","modified":1555948952483},{"_id":"source/_posts/以太坊/Ethereum.jpeg","hash":"2bdc2d9f88bfc52bf04c29e618cdd3ec04dca0ee","modified":1566702252472},{"_id":"source/_posts/公链如此多，而应用却寥寥无几/pexels-photo-730552.jpeg","hash":"efd2612e4a39b5c01a8b00ca9cc8dc82859e152f","modified":1564883452004},{"_id":"source/_posts/简单排序/select_sort.png","hash":"8ec68f987d215240cf585fca144b196c50158ab6","modified":1568538644274},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1544536633159},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1544536633177},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1544536633177},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1544536633188},{"_id":"source/_posts/世界十大语言排名/language.jpeg","hash":"01e8aaf9f0f477297db3b4e126bbc7d175ebe579","modified":1560267757693},{"_id":"source/_posts/数据仓库元数据管理系统/warehouse.jpeg","hash":"f1252afff3dfcd6eb3a3e4f7719bf56a146967d5","modified":1569078924950},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1544536633127},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1544536633127},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1544536633128},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1544536633128},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1544536633128},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1544536633128},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1544536633128},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1544536633129},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1544536633129},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1544536633129},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1544536633129},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1544536633129},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1544536633130},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1544536633130},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1544536633130},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1544536633130},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1544536633130},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1544536633131},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1544536633131},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1544536633131},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1544536633131},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1544536633131},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1544536633131},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1544536633132},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1544536633132},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1544536633132},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1544536633132},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1544536633132},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1544536633132},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"77c92a449ce84d558d26d052681f2e0dd77c70c9","modified":1544536633133},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1544536633134},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1544536633134},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1544536633134},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1544536633134},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1544536633134},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1544536633135},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1544536633136},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1544536633136},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1544536633136},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1544536633136},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1544536633136},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1544536633137},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1544536633137},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1544536633137},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1544536633137},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1544536633137},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1544536633142},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1544536633142},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1544536633144},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1544536633157},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1544536633157},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1544536633157},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1544536633157},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1544536633158},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1544536633164},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1544536633165},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1544536633165},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1544536633165},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1544536633165},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1544536633171},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1544536633172},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1544536633176},{"_id":"source/_posts/go语言学习/go_execute_process.png","hash":"b7410515440510bb26b40ee90563088bdd2f5b6e","modified":1568526328408},{"_id":"source/_posts/全球各国人均GDP排行/index_of_per_capita_gdp_countries.png","hash":"41ec151d3293938c496f1c36cb800c9086bb3241","modified":1557238114325},{"_id":"source/_posts/大O表示法（时间复杂度）/4.png","hash":"db548a0988b9cc9190eefcfb2f1403e53dc4edc3","modified":1568528372349},{"_id":"source/_posts/大O表示法（时间复杂度）/6.png","hash":"e38fac30ae7240d149a0fbb5f7fc45b20b1c9704","modified":1568528407792},{"_id":"source/_posts/比原链-共享经济平台简介/structure-light-led-movement-158826.jpeg","hash":"9565c6c2f50a175e59460af54fdd5ae7736a21e6","modified":1564883876464},{"_id":"source/_posts/程序设计/program_design.jpeg","hash":"2c0d92dd9382f827a69af38fc9c4a251d972de91","modified":1568343084972},{"_id":"source/_posts/简单排序/insert_sort_2.png","hash":"0056c9e7c1d7e86efde31e47d2e5cef86b2d7f9d","modified":1568538732700},{"_id":"source/_posts/Solidity学习/solidity_Ballot_error.png","hash":"b32252d9c4796cc653abf76788030344c22e8996","modified":1568475109885},{"_id":"source/_posts/2018年全球各国谋杀比例/anonymous-black-and-white-blackmailing-64699.jpg","hash":"81c4f2dda6684e5ecc55b78be330c9c315387fd7","modified":1564880414965},{"_id":"source/_posts/世界失业率排行/unemployment.jpeg","hash":"d229decde8956a0cb1c99ca5998d1c79e159fbb4","modified":1558231609126},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1544536633162},{"_id":"source/_posts/拜占庭问题/Byzantine.jpeg","hash":"c8eea24c01dba3f26f5e3ae562d6e4a715170099","modified":1566124216127},{"_id":"source/_posts/简单排序/insert_sort_3.png","hash":"d7c855952a38c3c802892f717d1391ac9d3ce00d","modified":1568538749862},{"_id":"themes/next/source/images/star_sky.jpeg","hash":"1bd141f5503f2efb096eaf20db1f5ae57b0fdadb","modified":1558259119921},{"_id":"source/_posts/简单排序/insert_sort_1.png","hash":"8ad6f30cc460e0cbf08175092a2070b85796174c","modified":1568538713651},{"_id":"source/_posts/大O表示法（时间复杂度）/1.png","hash":"669bb072852280a37e91ac6eb4dc497e8a8d347b","modified":1568528309077},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1544536633175},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1544536633186},{"_id":"source/_posts/说英语的国家/English_country.png","hash":"9e6f73164b37bffa0f214409a8c048497ae54ed0","modified":1561719497905},{"_id":"source/_posts/北京租房小中介骗局/leavehouse.jpg","hash":"e38b8287c8d4f3bd4728b9bcd0fb6521f03fb071","modified":1544536633070},{"_id":"source/_posts/英国构成国/Britain.png","hash":"4d45df065826826f6b184abbd1c8a1353f8628a0","modified":1562476447109},{"_id":"source/_posts/北京租房小中介骗局/daxionghouse.jpg","hash":"3bef627d60cafdca830d2ee5e9e1bbf4743d43e6","modified":1544536633025}],"Category":[{"name":"世界排名","_id":"ck0tpl0rx002efbs6rkx0yyzr"},{"name":"大数据","_id":"ck0tpl0sq002mfbs6nsfm2tcb"},{"name":"区块链","_id":"ck0tpl0t2002yfbs6xdhgmwet"},{"name":"工具类","_id":"ck0tpl0t30030fbs6tkxm44jq"},{"name":"环境搭建","_id":"ck0tpl0t60032fbs61cwi7q42"},{"name":"git","_id":"ck0tpl0t70034fbs6wf6e3i7t"},{"name":"操作系统","_id":"ck0tpl0tf003afbs67vvfip0h"},{"name":"经济","_id":"ck0tpl0tj003cfbs6miost6jd"},{"name":"程序设计","_id":"ck0tpl0tl003efbs6q9vqll6k"},{"name":"调度系统","_id":"ck0tpl0u1003tfbs6wfk96nm7"},{"name":"环境安装","_id":"ck0tpl0u3003vfbs6aplhh18y"},{"name":"数据库","_id":"ck0tpl0u5003xfbs6lbbr34jc"},{"name":"组件","_id":"ck0tpl0u6003zfbs6i095c8ja"},{"name":"计算机语言","_id":"ck0tpl0u70041fbs63auap945"},{"name":"IT","_id":"ck0tpl0u80043fbs63cx00gry"},{"name":"消息队列","_id":"ck0tpl0u90045fbs6b3ju8dq9"},{"name":"windows","_id":"ck0tpl0ud004bfbs61rhcar6d"},{"name":"ubuntu","_id":"ck0tpl0ue004dfbs6nzo82j43"},{"name":"数字货币","_id":"ck0tpl0ul004qfbs6d7wa321x"},{"name":"个人黑名单","_id":"ck0tpl0uw0054fbs6h5u31t6c"},{"name":"数据结构与算法","_id":"ck0tpl0v3005ffbs61whl9yr0"},{"name":"人物","_id":"ck0tpl0v4005hfbs6hujedwpy"},{"name":"maven","_id":"ck0tpl0vc005tfbs6qpbfhtbg"},{"name":"数据仓库","_id":"ck0tpl0vf005xfbs6dubyvkbx"},{"name":"数据结构","_id":"ck0tpl0vj0063fbs6u9fnbh3z"},{"name":"世界国家","_id":"ck0tpl0vs006gfbs646lnf51h"},{"name":"公司","_id":"ck0tpl0vt006ifbs6um1y5zsr"},{"name":"语言","_id":"ck0tpl0vu006kfbs6vihxwq2l"},{"name":"监控组件","_id":"ck0tpl0w3006ufbs6wp5xgjgl"},{"name":"视频剪辑","_id":"ck0tpl0w4006wfbs6tkcehvt1"},{"name":"Dapp","parent":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl11t0088fbs6vbzlcdpb"},{"name":"实时计算","parent":"ck0tpl0sq002mfbs6nsfm2tcb","_id":"ck0tpl11x008ffbs66mx4ehoz"},{"name":"hive","parent":"ck0tpl0u80043fbs63cx00gry","_id":"ck0tpl11z008lfbs6hbuf3xb5"},{"name":"HBase","_id":"ck0tpl16l00effbs6jmvvz0gk"}],"Data":[],"Page":[{"title":"about me","date":"2018-01-12T06:36:19.000Z","type":"about","comments":0,"_content":"\n## 关于我\n一枚喜欢健身、数字货币、股票、美食、财经、新闻、生活的程序猿，欢迎分享知识。\nFrom chenzuoli\nQQ：2536888617\nEmail: chenzuoli709@gmail.com\n","source":"about/index.md","raw":"---\ntitle: about me\ndate: 2018-01-12 14:36:19\ntype: about\ncomments: false\n---\n\n## 关于我\n一枚喜欢健身、数字货币、股票、美食、财经、新闻、生活的程序猿，欢迎分享知识。\nFrom chenzuoli\nQQ：2536888617\nEmail: chenzuoli709@gmail.com\n","updated":"2019-04-21T06:10:21.870Z","path":"about/index.html","layout":"page","_id":"ck0tpl0j70000fbs6sa1bw8ra","content":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>一枚喜欢健身、数字货币、股票、美食、财经、新闻、生活的程序猿，欢迎分享知识。<br>From chenzuoli<br>QQ：2536888617<br>Email: <a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"关于我\"><a href=\"#关于我\" class=\"headerlink\" title=\"关于我\"></a>关于我</h2><p>一枚喜欢健身、数字货币、股票、美食、财经、新闻、生活的程序猿，欢迎分享知识。<br>From chenzuoli<br>QQ：2536888617<br>Email: <a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a></p>\n"},{"title":"标签","date":"2018-01-12T06:23:21.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2018-01-12 14:23:21\ntype: tags\ncomments: false\n---\n","updated":"2018-12-11T13:57:13.105Z","path":"tags/index.html","layout":"page","_id":"ck0tpl0jf0002fbs6mhrc4ej9","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"分类","date":"2018-01-12T06:30:07.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2018-01-12 14:30:07\ntype: categories\ncomments: false\n---\n","updated":"2018-12-11T13:57:13.104Z","path":"categories/index.html","layout":"page","_id":"ck0tpl0ji0004fbs62b6npcvx","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"schedule","date":"2018-01-12T06:53:51.000Z","_content":"","source":"schedule/index.md","raw":"---\ntitle: schedule\ndate: 2018-01-12 14:53:51\n---\n","updated":"2018-12-11T13:57:13.105Z","path":"schedule/index.html","comments":1,"layout":"page","_id":"ck0tpl0jl0006fbs63314p15x","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"2018年全球各国谋杀比例","date":"2019-08-04T00:58:47.000Z","_content":"\nMurders rate per 100,000 people, last available year.\n2018年，每10万人中被谋杀的比例如下：\n\n<!-- more -->\n\n![picture](2018年全球各国谋杀比例/anonymous-black-and-white-blackmailing-64699.jpg)\n\n|     比例     |   国家   |\n| :----------: | :------: |\n| 🇭🇳HON: 90  | 洪都拉斯 |\n| 🇻🇪VEN: 54  | 委内瑞拉 |\n| 🇧🇷BRA: 25  |   巴西   |\n| 🇲🇽MEX 21.5 |  墨西哥  |\n| 🇳🇬NIG: 20  |  尼日尔  |\n| 🇷🇺RUS: 9.2 |  俄罗斯  |\n| 🇵🇰PAK: 7.7 | 巴基斯坦 |\n| 🇺🇸USA: 4.7 |   美国   |\n| 🇮🇳IND: 3.5 |   印度   |\n| 🇹🇷TUR: 2.6 |  土耳其  |\n| 🇨🇦CAN: 1.6 |  加拿大  |\n| 🇦🇺AUS 1.1  | 澳大利亚 |\n|  🇨🇳CHN: 1  |   中国   |\n|  🇬🇧GBR: 1  |   英国   |\n|  🇫🇷FRA: 1  |   法国   |\n| 🇰🇷KOR: 0.9 |   韩国   |\n| 🇮🇹ITA: 0.9 |  意大利  |\n| 🇩🇪GER: 0.8 |   德国   |\n| 🇪🇸ESP: 0.8 |  西班牙  |\n| 🇦🇪UAE: 0.7 |  阿联酋  |\n| 🇯🇵JPN: 0.3 |   日本   |\n","source":"_posts/2018年全球各国谋杀比例.md","raw":"---\ntitle: 2018年全球各国谋杀比例\ndate: 2019-08-04 08:58:47\ntags: 谋杀比例\ncategories: 世界排名\n---\n\nMurders rate per 100,000 people, last available year.\n2018年，每10万人中被谋杀的比例如下：\n\n<!-- more -->\n\n![picture](2018年全球各国谋杀比例/anonymous-black-and-white-blackmailing-64699.jpg)\n\n|     比例     |   国家   |\n| :----------: | :------: |\n| 🇭🇳HON: 90  | 洪都拉斯 |\n| 🇻🇪VEN: 54  | 委内瑞拉 |\n| 🇧🇷BRA: 25  |   巴西   |\n| 🇲🇽MEX 21.5 |  墨西哥  |\n| 🇳🇬NIG: 20  |  尼日尔  |\n| 🇷🇺RUS: 9.2 |  俄罗斯  |\n| 🇵🇰PAK: 7.7 | 巴基斯坦 |\n| 🇺🇸USA: 4.7 |   美国   |\n| 🇮🇳IND: 3.5 |   印度   |\n| 🇹🇷TUR: 2.6 |  土耳其  |\n| 🇨🇦CAN: 1.6 |  加拿大  |\n| 🇦🇺AUS 1.1  | 澳大利亚 |\n|  🇨🇳CHN: 1  |   中国   |\n|  🇬🇧GBR: 1  |   英国   |\n|  🇫🇷FRA: 1  |   法国   |\n| 🇰🇷KOR: 0.9 |   韩国   |\n| 🇮🇹ITA: 0.9 |  意大利  |\n| 🇩🇪GER: 0.8 |   德国   |\n| 🇪🇸ESP: 0.8 |  西班牙  |\n| 🇦🇪UAE: 0.7 |  阿联酋  |\n| 🇯🇵JPN: 0.3 |   日本   |\n","slug":"2018年全球各国谋杀比例","published":1,"updated":"2019-08-08T11:24:12.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0j90001fbs6qzinggbp","content":"<p>Murders rate per 100,000 people, last available year.<br>2018年，每10万人中被谋杀的比例如下：</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2019/08/04/2018年全球各国谋杀比例/anonymous-black-and-white-blackmailing-64699.jpg\" alt=\"picture\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">比例</th>\n<th align=\"center\">国家</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">🇭🇳HON: 90</td>\n<td align=\"center\">洪都拉斯</td>\n</tr>\n<tr>\n<td align=\"center\">🇻🇪VEN: 54</td>\n<td align=\"center\">委内瑞拉</td>\n</tr>\n<tr>\n<td align=\"center\">🇧🇷BRA: 25</td>\n<td align=\"center\">巴西</td>\n</tr>\n<tr>\n<td align=\"center\">🇲🇽MEX 21.5</td>\n<td align=\"center\">墨西哥</td>\n</tr>\n<tr>\n<td align=\"center\">🇳🇬NIG: 20</td>\n<td align=\"center\">尼日尔</td>\n</tr>\n<tr>\n<td align=\"center\">🇷🇺RUS: 9.2</td>\n<td align=\"center\">俄罗斯</td>\n</tr>\n<tr>\n<td align=\"center\">🇵🇰PAK: 7.7</td>\n<td align=\"center\">巴基斯坦</td>\n</tr>\n<tr>\n<td align=\"center\">🇺🇸USA: 4.7</td>\n<td align=\"center\">美国</td>\n</tr>\n<tr>\n<td align=\"center\">🇮🇳IND: 3.5</td>\n<td align=\"center\">印度</td>\n</tr>\n<tr>\n<td align=\"center\">🇹🇷TUR: 2.6</td>\n<td align=\"center\">土耳其</td>\n</tr>\n<tr>\n<td align=\"center\">🇨🇦CAN: 1.6</td>\n<td align=\"center\">加拿大</td>\n</tr>\n<tr>\n<td align=\"center\">🇦🇺AUS 1.1</td>\n<td align=\"center\">澳大利亚</td>\n</tr>\n<tr>\n<td align=\"center\">🇨🇳CHN: 1</td>\n<td align=\"center\">中国</td>\n</tr>\n<tr>\n<td align=\"center\">🇬🇧GBR: 1</td>\n<td align=\"center\">英国</td>\n</tr>\n<tr>\n<td align=\"center\">🇫🇷FRA: 1</td>\n<td align=\"center\">法国</td>\n</tr>\n<tr>\n<td align=\"center\">🇰🇷KOR: 0.9</td>\n<td align=\"center\">韩国</td>\n</tr>\n<tr>\n<td align=\"center\">🇮🇹ITA: 0.9</td>\n<td align=\"center\">意大利</td>\n</tr>\n<tr>\n<td align=\"center\">🇩🇪GER: 0.8</td>\n<td align=\"center\">德国</td>\n</tr>\n<tr>\n<td align=\"center\">🇪🇸ESP: 0.8</td>\n<td align=\"center\">西班牙</td>\n</tr>\n<tr>\n<td align=\"center\">🇦🇪UAE: 0.7</td>\n<td align=\"center\">阿联酋</td>\n</tr>\n<tr>\n<td align=\"center\">🇯🇵JPN: 0.3</td>\n<td align=\"center\">日本</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>Murders rate per 100,000 people, last available year.<br>2018年，每10万人中被谋杀的比例如下：</p>","more":"<p><img src=\"/2019/08/04/2018年全球各国谋杀比例/anonymous-black-and-white-blackmailing-64699.jpg\" alt=\"picture\"></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">比例</th>\n<th align=\"center\">国家</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">🇭🇳HON: 90</td>\n<td align=\"center\">洪都拉斯</td>\n</tr>\n<tr>\n<td align=\"center\">🇻🇪VEN: 54</td>\n<td align=\"center\">委内瑞拉</td>\n</tr>\n<tr>\n<td align=\"center\">🇧🇷BRA: 25</td>\n<td align=\"center\">巴西</td>\n</tr>\n<tr>\n<td align=\"center\">🇲🇽MEX 21.5</td>\n<td align=\"center\">墨西哥</td>\n</tr>\n<tr>\n<td align=\"center\">🇳🇬NIG: 20</td>\n<td align=\"center\">尼日尔</td>\n</tr>\n<tr>\n<td align=\"center\">🇷🇺RUS: 9.2</td>\n<td align=\"center\">俄罗斯</td>\n</tr>\n<tr>\n<td align=\"center\">🇵🇰PAK: 7.7</td>\n<td align=\"center\">巴基斯坦</td>\n</tr>\n<tr>\n<td align=\"center\">🇺🇸USA: 4.7</td>\n<td align=\"center\">美国</td>\n</tr>\n<tr>\n<td align=\"center\">🇮🇳IND: 3.5</td>\n<td align=\"center\">印度</td>\n</tr>\n<tr>\n<td align=\"center\">🇹🇷TUR: 2.6</td>\n<td align=\"center\">土耳其</td>\n</tr>\n<tr>\n<td align=\"center\">🇨🇦CAN: 1.6</td>\n<td align=\"center\">加拿大</td>\n</tr>\n<tr>\n<td align=\"center\">🇦🇺AUS 1.1</td>\n<td align=\"center\">澳大利亚</td>\n</tr>\n<tr>\n<td align=\"center\">🇨🇳CHN: 1</td>\n<td align=\"center\">中国</td>\n</tr>\n<tr>\n<td align=\"center\">🇬🇧GBR: 1</td>\n<td align=\"center\">英国</td>\n</tr>\n<tr>\n<td align=\"center\">🇫🇷FRA: 1</td>\n<td align=\"center\">法国</td>\n</tr>\n<tr>\n<td align=\"center\">🇰🇷KOR: 0.9</td>\n<td align=\"center\">韩国</td>\n</tr>\n<tr>\n<td align=\"center\">🇮🇹ITA: 0.9</td>\n<td align=\"center\">意大利</td>\n</tr>\n<tr>\n<td align=\"center\">🇩🇪GER: 0.8</td>\n<td align=\"center\">德国</td>\n</tr>\n<tr>\n<td align=\"center\">🇪🇸ESP: 0.8</td>\n<td align=\"center\">西班牙</td>\n</tr>\n<tr>\n<td align=\"center\">🇦🇪UAE: 0.7</td>\n<td align=\"center\">阿联酋</td>\n</tr>\n<tr>\n<td align=\"center\">🇯🇵JPN: 0.3</td>\n<td align=\"center\">日本</td>\n</tr>\n</tbody></table>"},{"title":"2019年全球最具价值的餐饮品牌","date":"2018-10-26T13:26:15.000Z","_content":"\n2019年全球最具价值的餐饮品牌，拒绝食品垃圾。\n<!-- more -->\n  品牌名称\t国家\t\t成立日期\n1.星巴克\t\t美国\t\t1971\n2.麦当劳\t\t美国\t\t1955\n3.赛百味\t\t美国\t\t1965\n4.肯德基\t\t美国\t\t1952\n5.提姆霍顿\t加拿大\t1964\n6.达美乐披萨\t美国\t\t1960\n7.汉堡王\t\t美国\t\t1952\n\n公司能经营六七十年，背后是对品质、服务的追求，难道我们不应该支持吗？让地沟油、毒奶粉死去吧。\n\n海底捞\t\t中国\t\t1994\n真功夫\t\t中国\t\t1990\n永和大王\t中国\t\t1995\n德克士\t\t中国\t\t1994\n喜家德\t\t中国\t\t2002\n味多美\t\t中国\t\t1996\n嘉和一品\t中国\t\t2004\n渝是乎\t\t中国\t\t2015\n呷哺呷哺\t 台湾\t\t1998\n\n半个世纪后见。","source":"_posts/2019年全球最具价值的餐饮品牌.md","raw":"---\ntitle: 2019年全球最具价值的餐饮品牌\ntags: [餐饮]\ndate: 2018-10-26 21:26:15\ncategories: 世界排名\n---\n\n2019年全球最具价值的餐饮品牌，拒绝食品垃圾。\n<!-- more -->\n  品牌名称\t国家\t\t成立日期\n1.星巴克\t\t美国\t\t1971\n2.麦当劳\t\t美国\t\t1955\n3.赛百味\t\t美国\t\t1965\n4.肯德基\t\t美国\t\t1952\n5.提姆霍顿\t加拿大\t1964\n6.达美乐披萨\t美国\t\t1960\n7.汉堡王\t\t美国\t\t1952\n\n公司能经营六七十年，背后是对品质、服务的追求，难道我们不应该支持吗？让地沟油、毒奶粉死去吧。\n\n海底捞\t\t中国\t\t1994\n真功夫\t\t中国\t\t1990\n永和大王\t中国\t\t1995\n德克士\t\t中国\t\t1994\n喜家德\t\t中国\t\t2002\n味多美\t\t中国\t\t1996\n嘉和一品\t中国\t\t2004\n渝是乎\t\t中国\t\t2015\n呷哺呷哺\t 台湾\t\t1998\n\n半个世纪后见。","slug":"2019年全球最具价值的餐饮品牌","published":1,"updated":"2019-04-21T02:43:40.527Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jh0003fbs6844sy1un","content":"<p>2019年全球最具价值的餐饮品牌，拒绝食品垃圾。</p>\n<a id=\"more\"></a>\n<p>  品牌名称    国家        成立日期<br>1.星巴克        美国        1971<br>2.麦当劳        美国        1955<br>3.赛百味        美国        1965<br>4.肯德基        美国        1952<br>5.提姆霍顿    加拿大    1964<br>6.达美乐披萨    美国        1960<br>7.汉堡王        美国        1952</p>\n<p>公司能经营六七十年，背后是对品质、服务的追求，难道我们不应该支持吗？让地沟油、毒奶粉死去吧。</p>\n<p>海底捞        中国        1994<br>真功夫        中国        1990<br>永和大王    中国        1995<br>德克士        中国        1994<br>喜家德        中国        2002<br>味多美        中国        1996<br>嘉和一品    中国        2004<br>渝是乎        中国        2015<br>呷哺呷哺     台湾        1998</p>\n<p>半个世纪后见。</p>\n","site":{"data":{}},"excerpt":"<p>2019年全球最具价值的餐饮品牌，拒绝食品垃圾。</p>","more":"<p>  品牌名称    国家        成立日期<br>1.星巴克        美国        1971<br>2.麦当劳        美国        1955<br>3.赛百味        美国        1965<br>4.肯德基        美国        1952<br>5.提姆霍顿    加拿大    1964<br>6.达美乐披萨    美国        1960<br>7.汉堡王        美国        1952</p>\n<p>公司能经营六七十年，背后是对品质、服务的追求，难道我们不应该支持吗？让地沟油、毒奶粉死去吧。</p>\n<p>海底捞        中国        1994<br>真功夫        中国        1990<br>永和大王    中国        1995<br>德克士        中国        1994<br>喜家德        中国        2002<br>味多美        中国        1996<br>嘉和一品    中国        2004<br>渝是乎        中国        2015<br>呷哺呷哺     台湾        1998</p>\n<p>半个世纪后见。</p>"},{"title":"Spark累加器的使用方法","date":"2018-03-17T09:40:09.000Z","_content":"运行spark程序，使用到了累加器Accumulator，目前使用的是spark2.3.0，累加器Accumulator的定义方法变了，具体查看详细内容。\n<!-- more -->\n之前spark1.6.0时，累加器的定义及使用方式为：\n```\nAccumulator<Integer> accum = sc.accumulator(0);\nsc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -> accum.add(x));\n// ...\n// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s\naccum.value();\n// returns 10\n```\n在spark2.3.0中，累加器的定义方式应该为：\n```\nLongAccumulator accum = jsc.sc().longAccumulator();\nsc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -> accum.add(x));\n// ...\n// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s\naccum.value();\n// returns 10\n```\n之前的方式已被标记为Deprecated。\n也可以如此，先定义，在注册到SparkConf：\n```\nLongAccumulator countDftResult = new LongAccumulator();\nLongAccumulator countFailed = new LongAccumulator();\nsc.register(countDftResult); // 注册累加器\nsc.register(countFailed);\n```\n如果不注册，会出现Accumulator must be registered before send to executor异常。\n到这里就基本可以使用累加器了，谢谢大家，如果有什么问题，请留言。","source":"_posts/Accumulator must be registered before send to executor.md","raw":"---\ntitle: Spark累加器的使用方法\ndate: 2018-03-17 17:40:09\ntags: Spark\ncategories: 大数据\n---\n运行spark程序，使用到了累加器Accumulator，目前使用的是spark2.3.0，累加器Accumulator的定义方法变了，具体查看详细内容。\n<!-- more -->\n之前spark1.6.0时，累加器的定义及使用方式为：\n```\nAccumulator<Integer> accum = sc.accumulator(0);\nsc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -> accum.add(x));\n// ...\n// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s\naccum.value();\n// returns 10\n```\n在spark2.3.0中，累加器的定义方式应该为：\n```\nLongAccumulator accum = jsc.sc().longAccumulator();\nsc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -> accum.add(x));\n// ...\n// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s\naccum.value();\n// returns 10\n```\n之前的方式已被标记为Deprecated。\n也可以如此，先定义，在注册到SparkConf：\n```\nLongAccumulator countDftResult = new LongAccumulator();\nLongAccumulator countFailed = new LongAccumulator();\nsc.register(countDftResult); // 注册累加器\nsc.register(countFailed);\n```\n如果不注册，会出现Accumulator must be registered before send to executor异常。\n到这里就基本可以使用累加器了，谢谢大家，如果有什么问题，请留言。","slug":"Accumulator must be registered before send to executor","published":1,"updated":"2018-12-11T13:57:12.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jj0005fbs67fnk5zqb","content":"<p>运行spark程序，使用到了累加器Accumulator，目前使用的是spark2.3.0，累加器Accumulator的定义方法变了，具体查看详细内容。</p>\n<a id=\"more\"></a>\n<p>之前spark1.6.0时，累加器的定义及使用方式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accumulator&lt;Integer&gt; accum = sc.accumulator(0);</span><br><span class=\"line\">sc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -&gt; accum.add(x));</span><br><span class=\"line\">// ...</span><br><span class=\"line\">// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s</span><br><span class=\"line\">accum.value();</span><br><span class=\"line\">// returns 10</span><br></pre></td></tr></table></figure>\n\n<p>在spark2.3.0中，累加器的定义方式应该为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LongAccumulator accum = jsc.sc().longAccumulator();</span><br><span class=\"line\">sc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -&gt; accum.add(x));</span><br><span class=\"line\">// ...</span><br><span class=\"line\">// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s</span><br><span class=\"line\">accum.value();</span><br><span class=\"line\">// returns 10</span><br></pre></td></tr></table></figure>\n\n<p>之前的方式已被标记为Deprecated。<br>也可以如此，先定义，在注册到SparkConf：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LongAccumulator countDftResult = new LongAccumulator();</span><br><span class=\"line\">LongAccumulator countFailed = new LongAccumulator();</span><br><span class=\"line\">sc.register(countDftResult); // 注册累加器</span><br><span class=\"line\">sc.register(countFailed);</span><br></pre></td></tr></table></figure>\n\n<p>如果不注册，会出现Accumulator must be registered before send to executor异常。<br>到这里就基本可以使用累加器了，谢谢大家，如果有什么问题，请留言。</p>\n","site":{"data":{}},"excerpt":"<p>运行spark程序，使用到了累加器Accumulator，目前使用的是spark2.3.0，累加器Accumulator的定义方法变了，具体查看详细内容。</p>","more":"<p>之前spark1.6.0时，累加器的定义及使用方式为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Accumulator&lt;Integer&gt; accum = sc.accumulator(0);</span><br><span class=\"line\">sc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -&gt; accum.add(x));</span><br><span class=\"line\">// ...</span><br><span class=\"line\">// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s</span><br><span class=\"line\">accum.value();</span><br><span class=\"line\">// returns 10</span><br></pre></td></tr></table></figure>\n\n<p>在spark2.3.0中，累加器的定义方式应该为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LongAccumulator accum = jsc.sc().longAccumulator();</span><br><span class=\"line\">sc.parallelize(Arrays.asList(1, 2, 3, 4)).foreach(x -&gt; accum.add(x));</span><br><span class=\"line\">// ...</span><br><span class=\"line\">// 10/09/29 18:41:08 INFO SparkContext: Tasks finished in 0.317106 s</span><br><span class=\"line\">accum.value();</span><br><span class=\"line\">// returns 10</span><br></pre></td></tr></table></figure>\n\n<p>之前的方式已被标记为Deprecated。<br>也可以如此，先定义，在注册到SparkConf：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">LongAccumulator countDftResult = new LongAccumulator();</span><br><span class=\"line\">LongAccumulator countFailed = new LongAccumulator();</span><br><span class=\"line\">sc.register(countDftResult); // 注册累加器</span><br><span class=\"line\">sc.register(countFailed);</span><br></pre></td></tr></table></figure>\n\n<p>如果不注册，会出现Accumulator must be registered before send to executor异常。<br>到这里就基本可以使用累加器了，谢谢大家，如果有什么问题，请留言。</p>"},{"title":"2019年世界上最好的机场","date":"2017-12-26T13:26:15.000Z","_content":"机场的好坏，决定因素：\n1.要看城市的经济规模，政治、文化聚集度；\n2.有强大的基地航空公司或者合作关系；\n3.地理位置；\n4.政治环境；\n<!-- more -->\n如下是综合评价得到的世界机场排名：\n\n1.樟宜（新加坡）\n2.羽田（东京）\n3.仁川（首尔）\n4.哈马德（多哈）\n5.香港机场（中国）\n6.中部国际机场（日本）\n7.慕尼黑机场（德国）\n8.希思罗机场（伦敦）\n9.成田（东京）\n10.苏黎世机场（瑞士）\n","source":"_posts/2019年世界上最好的机场.md","raw":"---\ntitle: 2019年世界上最好的机场\ntags: 世界机场\ndate: 2017-12-26 21:26:15\ncategories: 世界排名\n---\n机场的好坏，决定因素：\n1.要看城市的经济规模，政治、文化聚集度；\n2.有强大的基地航空公司或者合作关系；\n3.地理位置；\n4.政治环境；\n<!-- more -->\n如下是综合评价得到的世界机场排名：\n\n1.樟宜（新加坡）\n2.羽田（东京）\n3.仁川（首尔）\n4.哈马德（多哈）\n5.香港机场（中国）\n6.中部国际机场（日本）\n7.慕尼黑机场（德国）\n8.希思罗机场（伦敦）\n9.成田（东京）\n10.苏黎世机场（瑞士）\n","slug":"2019年世界上最好的机场","published":1,"updated":"2019-04-21T02:53:37.793Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jm0007fbs64vay1x5b","content":"<p>机场的好坏，决定因素：<br>1.要看城市的经济规模，政治、文化聚集度；<br>2.有强大的基地航空公司或者合作关系；<br>3.地理位置；<br>4.政治环境；</p>\n<a id=\"more\"></a>\n<p>如下是综合评价得到的世界机场排名：</p>\n<p>1.樟宜（新加坡）<br>2.羽田（东京）<br>3.仁川（首尔）<br>4.哈马德（多哈）<br>5.香港机场（中国）<br>6.中部国际机场（日本）<br>7.慕尼黑机场（德国）<br>8.希思罗机场（伦敦）<br>9.成田（东京）<br>10.苏黎世机场（瑞士）</p>\n","site":{"data":{}},"excerpt":"<p>机场的好坏，决定因素：<br>1.要看城市的经济规模，政治、文化聚集度；<br>2.有强大的基地航空公司或者合作关系；<br>3.地理位置；<br>4.政治环境；</p>","more":"<p>如下是综合评价得到的世界机场排名：</p>\n<p>1.樟宜（新加坡）<br>2.羽田（东京）<br>3.仁川（首尔）<br>4.哈马德（多哈）<br>5.香港机场（中国）<br>6.中部国际机场（日本）<br>7.慕尼黑机场（德国）<br>8.希思罗机场（伦敦）<br>9.成田（东京）<br>10.苏黎世机场（瑞士）</p>"},{"title":"2019全球国家手机网络连接速度排行","date":"2018-11-26T13:26:15.000Z","_content":"\nAverage speed of mobile internet connections, 2019. (in MBPS) \n2019全球国家手机网络连接速度排行（MB/s)\n<!-- more -->\n1.ISL: 73.93 \t以色列\n2.NOR: 70.29 \t挪威\n3.CAN: 65.68 \t加拿大\n4.AUS: 56.70 \t澳大利亚\n5.SIN: 54.96 \t新加坡\n6.KOR: 52.53 \t韩国\n7.FRA: 43.34 \t法国\n8.USA: 33.19 \t美国\n9.JPN: 32.08 \t日本\n10.HK: 32.00 \t香港\n11.GER: 31.46 \t德国\n12.KSA: 30.80 \t沙特阿拉伯\n13.GBR: 30.12 \t英国\n14.CHN: 30.08 \t中国\n15.RUS: 19.16 \t俄国\n16.IND: 10.13 \t印度\n\n(Ookla)\n\n你在哪个国家呢？","source":"_posts/Average speed of mobile internet connections, 2019.md","raw":"---\ntitle: 2019全球国家手机网络连接速度排行\ntags: [移动通信]\ndate: 2018-11-26 21:26:15\ncategories: 世界排名\n---\n\nAverage speed of mobile internet connections, 2019. (in MBPS) \n2019全球国家手机网络连接速度排行（MB/s)\n<!-- more -->\n1.ISL: 73.93 \t以色列\n2.NOR: 70.29 \t挪威\n3.CAN: 65.68 \t加拿大\n4.AUS: 56.70 \t澳大利亚\n5.SIN: 54.96 \t新加坡\n6.KOR: 52.53 \t韩国\n7.FRA: 43.34 \t法国\n8.USA: 33.19 \t美国\n9.JPN: 32.08 \t日本\n10.HK: 32.00 \t香港\n11.GER: 31.46 \t德国\n12.KSA: 30.80 \t沙特阿拉伯\n13.GBR: 30.12 \t英国\n14.CHN: 30.08 \t中国\n15.RUS: 19.16 \t俄国\n16.IND: 10.13 \t印度\n\n(Ookla)\n\n你在哪个国家呢？","slug":"Average speed of mobile internet connections, 2019","published":1,"updated":"2019-04-21T02:46:56.519Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jm0008fbs6p0z01vxn","content":"<p>Average speed of mobile internet connections, 2019. (in MBPS)<br>2019全球国家手机网络连接速度排行（MB/s)</p>\n<a id=\"more\"></a>\n<p>1.ISL: 73.93     以色列<br>2.NOR: 70.29     挪威<br>3.CAN: 65.68     加拿大<br>4.AUS: 56.70     澳大利亚<br>5.SIN: 54.96     新加坡<br>6.KOR: 52.53     韩国<br>7.FRA: 43.34     法国<br>8.USA: 33.19     美国<br>9.JPN: 32.08     日本<br>10.HK: 32.00     香港<br>11.GER: 31.46     德国<br>12.KSA: 30.80     沙特阿拉伯<br>13.GBR: 30.12     英国<br>14.CHN: 30.08     中国<br>15.RUS: 19.16     俄国<br>16.IND: 10.13     印度</p>\n<p>(Ookla)</p>\n<p>你在哪个国家呢？</p>\n","site":{"data":{}},"excerpt":"<p>Average speed of mobile internet connections, 2019. (in MBPS)<br>2019全球国家手机网络连接速度排行（MB/s)</p>","more":"<p>1.ISL: 73.93     以色列<br>2.NOR: 70.29     挪威<br>3.CAN: 65.68     加拿大<br>4.AUS: 56.70     澳大利亚<br>5.SIN: 54.96     新加坡<br>6.KOR: 52.53     韩国<br>7.FRA: 43.34     法国<br>8.USA: 33.19     美国<br>9.JPN: 32.08     日本<br>10.HK: 32.00     香港<br>11.GER: 31.46     德国<br>12.KSA: 30.80     沙特阿拉伯<br>13.GBR: 30.12     英国<br>14.CHN: 30.08     中国<br>15.RUS: 19.16     俄国<br>16.IND: 10.13     印度</p>\n<p>(Ookla)</p>\n<p>你在哪个国家呢？</p>"},{"title":"DAPP到底是什么？","date":"2019-08-14T15:41:24.000Z","notebook":"Dapp&Smart Contract Develop","_content":"\n什么是Dapp，相比较于app，有什么不同？\n![dapp&blockchain](DAPP到底是什么？/blockchain.jpeg)\n<!-- more -->\n# 一、什么是Dapp？\nDAPP是Decentralized Application的缩写，即去中心化应用，也有人称为分布式应用。它被认为开启了区块链3.0时代。DAPP就是在底层区块链平台衍生的各种分布式应用，是区块链世界中的服务提供形式。DAPP之于区块链，有些类似APP之于IOS和Android。\n\n# 二、Dapp的特点\n![dapp](DAPP到底是什么？/dapp.jpg)\n> 1.Dapp通过网络节点去中心化操作\n可以运行在用户的个人设备之上，比如：手机、个人电脑。永远属于用户，也可以自由转移给任何人。\n> 2.运行在对等网络上\n不依赖中心服务器，不需要专门的通信服务器传递消息，也不需要中心数据库来记数据。数据保存在用户个人空间，可能是手机，也可能是个人云盘。\n> 3.数据加密后存储在区块链上\n可以依托于区块链进行产权交易、销售，承载没有中介的交易方式。\n> 4.参与者信息被安全存储\n可以保护数字资产，保证产权不会泄露、被破坏。\n> 5.Dapp必须开源、自治\n可以由用户自由打包生成，签名标记所属权。它的发布不受任何机构限制。 各种创意与创新可以自由表达和实现。\n\n# 三、Dapp与app的区别\n![dapp_app](DAPP到底是什么？/dapp_app.png)\n<font color=red size=4 face=“黑体”>从客户体验角度</font>\nAPP相对于DAPP有四大问题，一是截留用户数据，二是垄断生态平台，三是保留用户权利，四是限制产品标准扼杀创新。但是由于Dapp得到的是去中心化，所以响应速度固然没有中心化服务器快。\n<font color=red size=4 face=“黑体”>从技术角度</font>\nDAPP与APP区别主要有两个方面，一是APP在安卓或苹果系统上安装并运行；DAPP在区块链公链上开发并结合智能合约；二是APP信息存储在数据服务平台，可以运营方直接修改；DAPP数据加密后存储在区块链，难以篡改。\n\n# 四、Dapp的分类\n根据去中心化的对象，DAPP可以进行分类。对于一个中心化服务器而言，包括计算、存储能力，以及所产生的数据三个方面，而由数据之前的关联度又产生了某种特定的“关系”。因此一般而言，去中心化包括以下几类：\n> 1.基于计算能力的去中心化（Pow机制）\n> 2.基于存储能力的去中心化（IPFS）\n> 3.基于数据的去中心化（Steemit）\n> 4.基于关系的去中心化（去中心化ID）\n","source":"_posts/DAPP到底是什么？.md","raw":"---\ntitle: DAPP到底是什么？\ndate: 2019-08-14 23:41:24\ntags: Dapp\ncategories: [区块链,Dapp]\nnotebook: Dapp&Smart Contract Develop\n---\n\n什么是Dapp，相比较于app，有什么不同？\n![dapp&blockchain](DAPP到底是什么？/blockchain.jpeg)\n<!-- more -->\n# 一、什么是Dapp？\nDAPP是Decentralized Application的缩写，即去中心化应用，也有人称为分布式应用。它被认为开启了区块链3.0时代。DAPP就是在底层区块链平台衍生的各种分布式应用，是区块链世界中的服务提供形式。DAPP之于区块链，有些类似APP之于IOS和Android。\n\n# 二、Dapp的特点\n![dapp](DAPP到底是什么？/dapp.jpg)\n> 1.Dapp通过网络节点去中心化操作\n可以运行在用户的个人设备之上，比如：手机、个人电脑。永远属于用户，也可以自由转移给任何人。\n> 2.运行在对等网络上\n不依赖中心服务器，不需要专门的通信服务器传递消息，也不需要中心数据库来记数据。数据保存在用户个人空间，可能是手机，也可能是个人云盘。\n> 3.数据加密后存储在区块链上\n可以依托于区块链进行产权交易、销售，承载没有中介的交易方式。\n> 4.参与者信息被安全存储\n可以保护数字资产，保证产权不会泄露、被破坏。\n> 5.Dapp必须开源、自治\n可以由用户自由打包生成，签名标记所属权。它的发布不受任何机构限制。 各种创意与创新可以自由表达和实现。\n\n# 三、Dapp与app的区别\n![dapp_app](DAPP到底是什么？/dapp_app.png)\n<font color=red size=4 face=“黑体”>从客户体验角度</font>\nAPP相对于DAPP有四大问题，一是截留用户数据，二是垄断生态平台，三是保留用户权利，四是限制产品标准扼杀创新。但是由于Dapp得到的是去中心化，所以响应速度固然没有中心化服务器快。\n<font color=red size=4 face=“黑体”>从技术角度</font>\nDAPP与APP区别主要有两个方面，一是APP在安卓或苹果系统上安装并运行；DAPP在区块链公链上开发并结合智能合约；二是APP信息存储在数据服务平台，可以运营方直接修改；DAPP数据加密后存储在区块链，难以篡改。\n\n# 四、Dapp的分类\n根据去中心化的对象，DAPP可以进行分类。对于一个中心化服务器而言，包括计算、存储能力，以及所产生的数据三个方面，而由数据之前的关联度又产生了某种特定的“关系”。因此一般而言，去中心化包括以下几类：\n> 1.基于计算能力的去中心化（Pow机制）\n> 2.基于存储能力的去中心化（IPFS）\n> 3.基于数据的去中心化（Steemit）\n> 4.基于关系的去中心化（去中心化ID）\n","slug":"DAPP到底是什么？","published":1,"updated":"2019-08-14T16:10:50.088Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jq0009fbs668g0jjav","content":"<p>什么是Dapp，相比较于app，有什么不同？<br><img src=\"/2019/08/14/DAPP到底是什么？/blockchain.jpeg\" alt=\"dapp&amp;blockchain\"></p>\n<a id=\"more\"></a>\n<h1 id=\"一、什么是Dapp？\"><a href=\"#一、什么是Dapp？\" class=\"headerlink\" title=\"一、什么是Dapp？\"></a>一、什么是Dapp？</h1><p>DAPP是Decentralized Application的缩写，即去中心化应用，也有人称为分布式应用。它被认为开启了区块链3.0时代。DAPP就是在底层区块链平台衍生的各种分布式应用，是区块链世界中的服务提供形式。DAPP之于区块链，有些类似APP之于IOS和Android。</p>\n<h1 id=\"二、Dapp的特点\"><a href=\"#二、Dapp的特点\" class=\"headerlink\" title=\"二、Dapp的特点\"></a>二、Dapp的特点</h1><p><img src=\"/2019/08/14/DAPP到底是什么？/dapp.jpg\" alt=\"dapp\"></p>\n<blockquote>\n<p>1.Dapp通过网络节点去中心化操作<br>可以运行在用户的个人设备之上，比如：手机、个人电脑。永远属于用户，也可以自由转移给任何人。<br>2.运行在对等网络上<br>不依赖中心服务器，不需要专门的通信服务器传递消息，也不需要中心数据库来记数据。数据保存在用户个人空间，可能是手机，也可能是个人云盘。<br>3.数据加密后存储在区块链上<br>可以依托于区块链进行产权交易、销售，承载没有中介的交易方式。<br>4.参与者信息被安全存储<br>可以保护数字资产，保证产权不会泄露、被破坏。<br>5.Dapp必须开源、自治<br>可以由用户自由打包生成，签名标记所属权。它的发布不受任何机构限制。 各种创意与创新可以自由表达和实现。</p>\n</blockquote>\n<h1 id=\"三、Dapp与app的区别\"><a href=\"#三、Dapp与app的区别\" class=\"headerlink\" title=\"三、Dapp与app的区别\"></a>三、Dapp与app的区别</h1><p><img src=\"/2019/08/14/DAPP到底是什么？/dapp_app.png\" alt=\"dapp_app\"><br><font color=\"red\" size=\"4\" face=\"“黑体”\">从客户体验角度</font><br>APP相对于DAPP有四大问题，一是截留用户数据，二是垄断生态平台，三是保留用户权利，四是限制产品标准扼杀创新。但是由于Dapp得到的是去中心化，所以响应速度固然没有中心化服务器快。<br><font color=\"red\" size=\"4\" face=\"“黑体”\">从技术角度</font><br>DAPP与APP区别主要有两个方面，一是APP在安卓或苹果系统上安装并运行；DAPP在区块链公链上开发并结合智能合约；二是APP信息存储在数据服务平台，可以运营方直接修改；DAPP数据加密后存储在区块链，难以篡改。</p>\n<h1 id=\"四、Dapp的分类\"><a href=\"#四、Dapp的分类\" class=\"headerlink\" title=\"四、Dapp的分类\"></a>四、Dapp的分类</h1><p>根据去中心化的对象，DAPP可以进行分类。对于一个中心化服务器而言，包括计算、存储能力，以及所产生的数据三个方面，而由数据之前的关联度又产生了某种特定的“关系”。因此一般而言，去中心化包括以下几类：</p>\n<blockquote>\n<p>1.基于计算能力的去中心化（Pow机制）<br>2.基于存储能力的去中心化（IPFS）<br>3.基于数据的去中心化（Steemit）<br>4.基于关系的去中心化（去中心化ID）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<p>什么是Dapp，相比较于app，有什么不同？<br><img src=\"/2019/08/14/DAPP到底是什么？/blockchain.jpeg\" alt=\"dapp&amp;blockchain\"></p>","more":"<h1 id=\"一、什么是Dapp？\"><a href=\"#一、什么是Dapp？\" class=\"headerlink\" title=\"一、什么是Dapp？\"></a>一、什么是Dapp？</h1><p>DAPP是Decentralized Application的缩写，即去中心化应用，也有人称为分布式应用。它被认为开启了区块链3.0时代。DAPP就是在底层区块链平台衍生的各种分布式应用，是区块链世界中的服务提供形式。DAPP之于区块链，有些类似APP之于IOS和Android。</p>\n<h1 id=\"二、Dapp的特点\"><a href=\"#二、Dapp的特点\" class=\"headerlink\" title=\"二、Dapp的特点\"></a>二、Dapp的特点</h1><p><img src=\"/2019/08/14/DAPP到底是什么？/dapp.jpg\" alt=\"dapp\"></p>\n<blockquote>\n<p>1.Dapp通过网络节点去中心化操作<br>可以运行在用户的个人设备之上，比如：手机、个人电脑。永远属于用户，也可以自由转移给任何人。<br>2.运行在对等网络上<br>不依赖中心服务器，不需要专门的通信服务器传递消息，也不需要中心数据库来记数据。数据保存在用户个人空间，可能是手机，也可能是个人云盘。<br>3.数据加密后存储在区块链上<br>可以依托于区块链进行产权交易、销售，承载没有中介的交易方式。<br>4.参与者信息被安全存储<br>可以保护数字资产，保证产权不会泄露、被破坏。<br>5.Dapp必须开源、自治<br>可以由用户自由打包生成，签名标记所属权。它的发布不受任何机构限制。 各种创意与创新可以自由表达和实现。</p>\n</blockquote>\n<h1 id=\"三、Dapp与app的区别\"><a href=\"#三、Dapp与app的区别\" class=\"headerlink\" title=\"三、Dapp与app的区别\"></a>三、Dapp与app的区别</h1><p><img src=\"/2019/08/14/DAPP到底是什么？/dapp_app.png\" alt=\"dapp_app\"><br><font color=\"red\" size=\"4\" face=\"“黑体”\">从客户体验角度</font><br>APP相对于DAPP有四大问题，一是截留用户数据，二是垄断生态平台，三是保留用户权利，四是限制产品标准扼杀创新。但是由于Dapp得到的是去中心化，所以响应速度固然没有中心化服务器快。<br><font color=\"red\" size=\"4\" face=\"“黑体”\">从技术角度</font><br>DAPP与APP区别主要有两个方面，一是APP在安卓或苹果系统上安装并运行；DAPP在区块链公链上开发并结合智能合约；二是APP信息存储在数据服务平台，可以运营方直接修改；DAPP数据加密后存储在区块链，难以篡改。</p>\n<h1 id=\"四、Dapp的分类\"><a href=\"#四、Dapp的分类\" class=\"headerlink\" title=\"四、Dapp的分类\"></a>四、Dapp的分类</h1><p>根据去中心化的对象，DAPP可以进行分类。对于一个中心化服务器而言，包括计算、存储能力，以及所产生的数据三个方面，而由数据之前的关联度又产生了某种特定的“关系”。因此一般而言，去中心化包括以下几类：</p>\n<blockquote>\n<p>1.基于计算能力的去中心化（Pow机制）<br>2.基于存储能力的去中心化（IPFS）<br>3.基于数据的去中心化（Steemit）<br>4.基于关系的去中心化（去中心化ID）</p>\n</blockquote>"},{"title":"2018-06-19","date":"2018-06-19T12:05:02.000Z","_content":"大家好，好久没更新了，疲于工作和团队建设，都是一团糟，但是代码还是敲了一些，见我的github/ETL.git项目，写的是基本清洗工具类，点击查看详情。\n<!-- more -->\n<a href='https://github.com/chenzuoli/ETL.git'>https://github.com/chenzuoli/ETL.git</a>\n该项目包括如下内容：\n# ETL\n数据基本清洗包括以下分类：\n###### 1.日期时间；\n###### 2.数值；\n###### 3.字符串；\n###### 4.字符；\n###### 5.金钱；\n###### 6.数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\n###### 7.加解密（md5、sha、base64、aes、rsa）；\n###### 8.文件；\n###### 9.http服务；\n###### 10.正则表达式；\n###### 11.个人信息：身份证号、手机号、姓名清洗和扩展；\n\n后期会不断更新，望大家指正，多谢。","source":"_posts/ETL工具类.md","raw":"---\ntitle: '2018-06-19'\ndate: 2018-06-19 20:05:02\ntags: tools\ncategories: 工具类\n---\n大家好，好久没更新了，疲于工作和团队建设，都是一团糟，但是代码还是敲了一些，见我的github/ETL.git项目，写的是基本清洗工具类，点击查看详情。\n<!-- more -->\n<a href='https://github.com/chenzuoli/ETL.git'>https://github.com/chenzuoli/ETL.git</a>\n该项目包括如下内容：\n# ETL\n数据基本清洗包括以下分类：\n###### 1.日期时间；\n###### 2.数值；\n###### 3.字符串；\n###### 4.字符；\n###### 5.金钱；\n###### 6.数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\n###### 7.加解密（md5、sha、base64、aes、rsa）；\n###### 8.文件；\n###### 9.http服务；\n###### 10.正则表达式；\n###### 11.个人信息：身份证号、手机号、姓名清洗和扩展；\n\n后期会不断更新，望大家指正，多谢。","slug":"ETL工具类","published":1,"updated":"2018-12-11T13:57:12.956Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jr000afbs6jeecoqb8","content":"<p>大家好，好久没更新了，疲于工作和团队建设，都是一团糟，但是代码还是敲了一些，见我的github/ETL.git项目，写的是基本清洗工具类，点击查看详情。</p>\n<a id=\"more\"></a>\n<p><a href=\"https://github.com/chenzuoli/ETL.git\" target=\"_blank\" rel=\"noopener\">https://github.com/chenzuoli/ETL.git</a><br>该项目包括如下内容：</p>\n<h1 id=\"ETL\"><a href=\"#ETL\" class=\"headerlink\" title=\"ETL\"></a>ETL</h1><p>数据基本清洗包括以下分类：</p>\n<h6 id=\"1-日期时间；\"><a href=\"#1-日期时间；\" class=\"headerlink\" title=\"1.日期时间；\"></a>1.日期时间；</h6><h6 id=\"2-数值；\"><a href=\"#2-数值；\" class=\"headerlink\" title=\"2.数值；\"></a>2.数值；</h6><h6 id=\"3-字符串；\"><a href=\"#3-字符串；\" class=\"headerlink\" title=\"3.字符串；\"></a>3.字符串；</h6><h6 id=\"4-字符；\"><a href=\"#4-字符；\" class=\"headerlink\" title=\"4.字符；\"></a>4.字符；</h6><h6 id=\"5-金钱；\"><a href=\"#5-金钱；\" class=\"headerlink\" title=\"5.金钱；\"></a>5.金钱；</h6><h6 id=\"6-数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\"><a href=\"#6-数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\" class=\"headerlink\" title=\"6.数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\"></a>6.数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；</h6><h6 id=\"7-加解密（md5、sha、base64、aes、rsa）；\"><a href=\"#7-加解密（md5、sha、base64、aes、rsa）；\" class=\"headerlink\" title=\"7.加解密（md5、sha、base64、aes、rsa）；\"></a>7.加解密（md5、sha、base64、aes、rsa）；</h6><h6 id=\"8-文件；\"><a href=\"#8-文件；\" class=\"headerlink\" title=\"8.文件；\"></a>8.文件；</h6><h6 id=\"9-http服务；\"><a href=\"#9-http服务；\" class=\"headerlink\" title=\"9.http服务；\"></a>9.http服务；</h6><h6 id=\"10-正则表达式；\"><a href=\"#10-正则表达式；\" class=\"headerlink\" title=\"10.正则表达式；\"></a>10.正则表达式；</h6><h6 id=\"11-个人信息：身份证号、手机号、姓名清洗和扩展；\"><a href=\"#11-个人信息：身份证号、手机号、姓名清洗和扩展；\" class=\"headerlink\" title=\"11.个人信息：身份证号、手机号、姓名清洗和扩展；\"></a>11.个人信息：身份证号、手机号、姓名清洗和扩展；</h6><p>后期会不断更新，望大家指正，多谢。</p>\n","site":{"data":{}},"excerpt":"<p>大家好，好久没更新了，疲于工作和团队建设，都是一团糟，但是代码还是敲了一些，见我的github/ETL.git项目，写的是基本清洗工具类，点击查看详情。</p>","more":"<p><a href=\"https://github.com/chenzuoli/ETL.git\" target=\"_blank\" rel=\"noopener\">https://github.com/chenzuoli/ETL.git</a><br>该项目包括如下内容：</p>\n<h1 id=\"ETL\"><a href=\"#ETL\" class=\"headerlink\" title=\"ETL\"></a>ETL</h1><p>数据基本清洗包括以下分类：</p>\n<h6 id=\"1-日期时间；\"><a href=\"#1-日期时间；\" class=\"headerlink\" title=\"1.日期时间；\"></a>1.日期时间；</h6><h6 id=\"2-数值；\"><a href=\"#2-数值；\" class=\"headerlink\" title=\"2.数值；\"></a>2.数值；</h6><h6 id=\"3-字符串；\"><a href=\"#3-字符串；\" class=\"headerlink\" title=\"3.字符串；\"></a>3.字符串；</h6><h6 id=\"4-字符；\"><a href=\"#4-字符；\" class=\"headerlink\" title=\"4.字符；\"></a>4.字符；</h6><h6 id=\"5-金钱；\"><a href=\"#5-金钱；\" class=\"headerlink\" title=\"5.金钱；\"></a>5.金钱；</h6><h6 id=\"6-数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\"><a href=\"#6-数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\" class=\"headerlink\" title=\"6.数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；\"></a>6.数据库（mysql、postgresql、mongodb、hbase、hdfs、memcached）；</h6><h6 id=\"7-加解密（md5、sha、base64、aes、rsa）；\"><a href=\"#7-加解密（md5、sha、base64、aes、rsa）；\" class=\"headerlink\" title=\"7.加解密（md5、sha、base64、aes、rsa）；\"></a>7.加解密（md5、sha、base64、aes、rsa）；</h6><h6 id=\"8-文件；\"><a href=\"#8-文件；\" class=\"headerlink\" title=\"8.文件；\"></a>8.文件；</h6><h6 id=\"9-http服务；\"><a href=\"#9-http服务；\" class=\"headerlink\" title=\"9.http服务；\"></a>9.http服务；</h6><h6 id=\"10-正则表达式；\"><a href=\"#10-正则表达式；\" class=\"headerlink\" title=\"10.正则表达式；\"></a>10.正则表达式；</h6><h6 id=\"11-个人信息：身份证号、手机号、姓名清洗和扩展；\"><a href=\"#11-个人信息：身份证号、手机号、姓名清洗和扩展；\" class=\"headerlink\" title=\"11.个人信息：身份证号、手机号、姓名清洗和扩展；\"></a>11.个人信息：身份证号、手机号、姓名清洗和扩展；</h6><p>后期会不断更新，望大家指正，多谢。</p>"},{"title":"ElasticSearch集群环境搭建","date":"2019-09-06T12:23:45.000Z","_content":"\nElasticSearch作为一个基于搜索引擎lucene的文档数据库，搜索速度在目前的大数据存储系统中，算是佼佼者了。\n又有许多人把它当数据库使用，索引做库，类型做表，也是不错的选择。\n在数据仓库中，也可以做report层的存储，对接数据可视化工具，提供接口查询业务数据、结果数据。\n下面来看看集群环境怎么搭建。\n![es.logo](ElasticSearch集群环境搭建/es.jpeg)\n<!-- more -->\n\n# 1、软件需求\njdk8\nelasticsearch包\n# 2、es安装、配置\n```\ntar -zxvf elasticsearch-*.tar.gz -C /usr/local\ncd /usr/local/elasticsearch\nvim /config/elasticsearch.yml\ncluster.name: es-cluster-1             配置集群名称 三台服务器保持一致\nnode.name: node-1                      配置单一节点名称，每个节点唯一标识\nnetwork.host: 0.0.0.0                  设置绑定的ip地址\nhttp.port: 9200                        端口\ndiscovery.zen.ping.unicast.hosts: [\"192.168.21.12\", \"192.168.21.13\",\"192.168.21.14\"]   集群节点ip或者主机\ndiscovery.zen.minimum_master_nodes: 3    设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）\n```\n## 2.1新建用户（三台都需要）\n在 Linux 环境中，elasticsearch 不允许以 root 权限来运行！所以需要创建一个非root用户，以非root用户来起es\nelsearch                                             新增elsearch用户组\n```\nuseradd elsearch -g elsearch -p elasticsearch                 创建elsearch用户\nchown -R elsearch:elsearch ./elasticsearch                    用户目录权限\n```\n## 2.2运行操作三台服务\n```\nsu elsearch\n./bin/elasticsearch -d           //-d表示后台启动\n```\n# 3、问题汇总解决方案\n## 3.1问题一\n```\nERROR: bootstrap checks failed\nmax file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\n```\n原因：无法创建本地文件问题,用户最大可创建文件数太小\n解决方案：\n切换到root用户，编辑limits.conf配置文件， 添加类似如下内容：\n```\nvi /etc/security/limits.conf\n```\n添加如下内容:\n```\n* soft nofile 65536\n* hard nofile 131072\n* soft nproc 2048\n* hard nproc 4096\n```\n备注：* 代表Linux所有用户名称（比如 hadoop）\n保存、退出、重新登录才可生效\n## 3.2问题二\n```\nmax virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n```\n原因：最大虚拟内存太小\n解决方案：切换到root用户下，修改配置文件sysctl.conf\n```\nvi /etc/sysctl.conf\n```\n添加下面配置：\n```\nvm.max_map_count=655360\n```\n并执行命令：\nsysctl -p\n然后重新启动elasticsearch，即可启动成功。\n## 3.3问题三：\n```\nmax virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n```\n原因：最大虚拟内存太小\n解决方案：切换到root用户下，修改配置文件sysctl.conf\nvi /etc/sysctl.conf\n添加下面配置：\n```\nvm.max_map_count=655360\n```\n并执行命令：\nsysctl -p\n然后重新启动elasticsearch，即可启动成功。\n## 3.4问题四：\nElasticSearch启动找不到主机或路由\n原因：ElasticSearch 单播配置有问题\n解决方案：\n检查ElasticSearch中的配置文件\nvi  config/elasticsearch.yml\n找到如下配置：\ndiscovery.zen.ping.unicast.hosts: [\"192.168.21.12\", \"192.168.21.13\",\"192.168.21.14\"]  \n一般情况下，是这里配置有问题，注意书写格式\n## 3.5问题五：\norg.elasticsearch.transport.RemoteTransportException: Failed to deserialize exception response from stream\n原因:ElasticSearch节点之间的jdk版本不一致\n解决方案：ElasticSearch集群统一jdk环境\n## 3.6问题六：\nUnsupported major.minor version 52.0\n原因：jdk版本问题太低\n解决方案：更换jdk版本，ElasticSearch5.0.0支持jdk1.8.0\n\n\n","source":"_posts/ElasticSearch集群环境搭建.md","raw":"---\ntitle: ElasticSearch集群环境搭建\ndate: 2019-09-06 20:23:45\ntags: ElasticSearch\ncategories: 环境搭建\n---\n\nElasticSearch作为一个基于搜索引擎lucene的文档数据库，搜索速度在目前的大数据存储系统中，算是佼佼者了。\n又有许多人把它当数据库使用，索引做库，类型做表，也是不错的选择。\n在数据仓库中，也可以做report层的存储，对接数据可视化工具，提供接口查询业务数据、结果数据。\n下面来看看集群环境怎么搭建。\n![es.logo](ElasticSearch集群环境搭建/es.jpeg)\n<!-- more -->\n\n# 1、软件需求\njdk8\nelasticsearch包\n# 2、es安装、配置\n```\ntar -zxvf elasticsearch-*.tar.gz -C /usr/local\ncd /usr/local/elasticsearch\nvim /config/elasticsearch.yml\ncluster.name: es-cluster-1             配置集群名称 三台服务器保持一致\nnode.name: node-1                      配置单一节点名称，每个节点唯一标识\nnetwork.host: 0.0.0.0                  设置绑定的ip地址\nhttp.port: 9200                        端口\ndiscovery.zen.ping.unicast.hosts: [\"192.168.21.12\", \"192.168.21.13\",\"192.168.21.14\"]   集群节点ip或者主机\ndiscovery.zen.minimum_master_nodes: 3    设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）\n```\n## 2.1新建用户（三台都需要）\n在 Linux 环境中，elasticsearch 不允许以 root 权限来运行！所以需要创建一个非root用户，以非root用户来起es\nelsearch                                             新增elsearch用户组\n```\nuseradd elsearch -g elsearch -p elasticsearch                 创建elsearch用户\nchown -R elsearch:elsearch ./elasticsearch                    用户目录权限\n```\n## 2.2运行操作三台服务\n```\nsu elsearch\n./bin/elasticsearch -d           //-d表示后台启动\n```\n# 3、问题汇总解决方案\n## 3.1问题一\n```\nERROR: bootstrap checks failed\nmax file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]\n```\n原因：无法创建本地文件问题,用户最大可创建文件数太小\n解决方案：\n切换到root用户，编辑limits.conf配置文件， 添加类似如下内容：\n```\nvi /etc/security/limits.conf\n```\n添加如下内容:\n```\n* soft nofile 65536\n* hard nofile 131072\n* soft nproc 2048\n* hard nproc 4096\n```\n备注：* 代表Linux所有用户名称（比如 hadoop）\n保存、退出、重新登录才可生效\n## 3.2问题二\n```\nmax virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n```\n原因：最大虚拟内存太小\n解决方案：切换到root用户下，修改配置文件sysctl.conf\n```\nvi /etc/sysctl.conf\n```\n添加下面配置：\n```\nvm.max_map_count=655360\n```\n并执行命令：\nsysctl -p\n然后重新启动elasticsearch，即可启动成功。\n## 3.3问题三：\n```\nmax virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]\n```\n原因：最大虚拟内存太小\n解决方案：切换到root用户下，修改配置文件sysctl.conf\nvi /etc/sysctl.conf\n添加下面配置：\n```\nvm.max_map_count=655360\n```\n并执行命令：\nsysctl -p\n然后重新启动elasticsearch，即可启动成功。\n## 3.4问题四：\nElasticSearch启动找不到主机或路由\n原因：ElasticSearch 单播配置有问题\n解决方案：\n检查ElasticSearch中的配置文件\nvi  config/elasticsearch.yml\n找到如下配置：\ndiscovery.zen.ping.unicast.hosts: [\"192.168.21.12\", \"192.168.21.13\",\"192.168.21.14\"]  \n一般情况下，是这里配置有问题，注意书写格式\n## 3.5问题五：\norg.elasticsearch.transport.RemoteTransportException: Failed to deserialize exception response from stream\n原因:ElasticSearch节点之间的jdk版本不一致\n解决方案：ElasticSearch集群统一jdk环境\n## 3.6问题六：\nUnsupported major.minor version 52.0\n原因：jdk版本问题太低\n解决方案：更换jdk版本，ElasticSearch5.0.0支持jdk1.8.0\n\n\n","slug":"ElasticSearch集群环境搭建","published":1,"updated":"2019-09-06T15:27:12.395Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0js000bfbs6fa9yxgq4","content":"<p>ElasticSearch作为一个基于搜索引擎lucene的文档数据库，搜索速度在目前的大数据存储系统中，算是佼佼者了。<br>又有许多人把它当数据库使用，索引做库，类型做表，也是不错的选择。<br>在数据仓库中，也可以做report层的存储，对接数据可视化工具，提供接口查询业务数据、结果数据。<br>下面来看看集群环境怎么搭建。<br><img src=\"/2019/09/06/ElasticSearch集群环境搭建/es.jpeg\" alt=\"es.logo\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1、软件需求\"><a href=\"#1、软件需求\" class=\"headerlink\" title=\"1、软件需求\"></a>1、软件需求</h1><p>jdk8<br>elasticsearch包</p>\n<h1 id=\"2、es安装、配置\"><a href=\"#2、es安装、配置\" class=\"headerlink\" title=\"2、es安装、配置\"></a>2、es安装、配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-*.tar.gz -C /usr/local</span><br><span class=\"line\">cd /usr/local/elasticsearch</span><br><span class=\"line\">vim /config/elasticsearch.yml</span><br><span class=\"line\">cluster.name: es-cluster-1             配置集群名称 三台服务器保持一致</span><br><span class=\"line\">node.name: node-1                      配置单一节点名称，每个节点唯一标识</span><br><span class=\"line\">network.host: 0.0.0.0                  设置绑定的ip地址</span><br><span class=\"line\">http.port: 9200                        端口</span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;192.168.21.12&quot;, &quot;192.168.21.13&quot;,&quot;192.168.21.14&quot;]   集群节点ip或者主机</span><br><span class=\"line\">discovery.zen.minimum_master_nodes: 3    设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1新建用户（三台都需要）\"><a href=\"#2-1新建用户（三台都需要）\" class=\"headerlink\" title=\"2.1新建用户（三台都需要）\"></a>2.1新建用户（三台都需要）</h2><p>在 Linux 环境中，elasticsearch 不允许以 root 权限来运行！所以需要创建一个非root用户，以非root用户来起es<br>elsearch                                             新增elsearch用户组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elsearch -g elsearch -p elasticsearch                 创建elsearch用户</span><br><span class=\"line\">chown -R elsearch:elsearch ./elasticsearch                    用户目录权限</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2运行操作三台服务\"><a href=\"#2-2运行操作三台服务\" class=\"headerlink\" title=\"2.2运行操作三台服务\"></a>2.2运行操作三台服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elsearch</span><br><span class=\"line\">./bin/elasticsearch -d           //-d表示后台启动</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、问题汇总解决方案\"><a href=\"#3、问题汇总解决方案\" class=\"headerlink\" title=\"3、问题汇总解决方案\"></a>3、问题汇总解决方案</h1><h2 id=\"3-1问题一\"><a href=\"#3-1问题一\" class=\"headerlink\" title=\"3.1问题一\"></a>3.1问题一</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: bootstrap checks failed</span><br><span class=\"line\">max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</span><br></pre></td></tr></table></figure>\n\n<p>原因：无法创建本地文件问题,用户最大可创建文件数太小<br>解决方案：<br>切换到root用户，编辑limits.conf配置文件， 添加类似如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加如下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 131072</span><br><span class=\"line\">* soft nproc 2048</span><br><span class=\"line\">* hard nproc 4096</span><br></pre></td></tr></table></figure>\n\n<p>备注：* 代表Linux所有用户名称（比如 hadoop）<br>保存、退出、重新登录才可生效</p>\n<h2 id=\"3-2问题二\"><a href=\"#3-2问题二\" class=\"headerlink\" title=\"3.2问题二\"></a>3.2问题二</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>\n\n<p>原因：最大虚拟内存太小<br>解决方案：切换到root用户下，修改配置文件sysctl.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加下面配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>\n\n<p>并执行命令：<br>sysctl -p<br>然后重新启动elasticsearch，即可启动成功。</p>\n<h2 id=\"3-3问题三：\"><a href=\"#3-3问题三：\" class=\"headerlink\" title=\"3.3问题三：\"></a>3.3问题三：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>\n\n<p>原因：最大虚拟内存太小<br>解决方案：切换到root用户下，修改配置文件sysctl.conf<br>vi /etc/sysctl.conf<br>添加下面配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>\n\n<p>并执行命令：<br>sysctl -p<br>然后重新启动elasticsearch，即可启动成功。</p>\n<h2 id=\"3-4问题四：\"><a href=\"#3-4问题四：\" class=\"headerlink\" title=\"3.4问题四：\"></a>3.4问题四：</h2><p>ElasticSearch启动找不到主机或路由<br>原因：ElasticSearch 单播配置有问题<br>解决方案：<br>检查ElasticSearch中的配置文件<br>vi  config/elasticsearch.yml<br>找到如下配置：<br>discovery.zen.ping.unicast.hosts: [“192.168.21.12”, “192.168.21.13”,”192.168.21.14”]<br>一般情况下，是这里配置有问题，注意书写格式</p>\n<h2 id=\"3-5问题五：\"><a href=\"#3-5问题五：\" class=\"headerlink\" title=\"3.5问题五：\"></a>3.5问题五：</h2><p>org.elasticsearch.transport.RemoteTransportException: Failed to deserialize exception response from stream<br>原因:ElasticSearch节点之间的jdk版本不一致<br>解决方案：ElasticSearch集群统一jdk环境</p>\n<h2 id=\"3-6问题六：\"><a href=\"#3-6问题六：\" class=\"headerlink\" title=\"3.6问题六：\"></a>3.6问题六：</h2><p>Unsupported major.minor version 52.0<br>原因：jdk版本问题太低<br>解决方案：更换jdk版本，ElasticSearch5.0.0支持jdk1.8.0</p>\n","site":{"data":{}},"excerpt":"<p>ElasticSearch作为一个基于搜索引擎lucene的文档数据库，搜索速度在目前的大数据存储系统中，算是佼佼者了。<br>又有许多人把它当数据库使用，索引做库，类型做表，也是不错的选择。<br>在数据仓库中，也可以做report层的存储，对接数据可视化工具，提供接口查询业务数据、结果数据。<br>下面来看看集群环境怎么搭建。<br><img src=\"/2019/09/06/ElasticSearch集群环境搭建/es.jpeg\" alt=\"es.logo\"></p>","more":"<h1 id=\"1、软件需求\"><a href=\"#1、软件需求\" class=\"headerlink\" title=\"1、软件需求\"></a>1、软件需求</h1><p>jdk8<br>elasticsearch包</p>\n<h1 id=\"2、es安装、配置\"><a href=\"#2、es安装、配置\" class=\"headerlink\" title=\"2、es安装、配置\"></a>2、es安装、配置</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf elasticsearch-*.tar.gz -C /usr/local</span><br><span class=\"line\">cd /usr/local/elasticsearch</span><br><span class=\"line\">vim /config/elasticsearch.yml</span><br><span class=\"line\">cluster.name: es-cluster-1             配置集群名称 三台服务器保持一致</span><br><span class=\"line\">node.name: node-1                      配置单一节点名称，每个节点唯一标识</span><br><span class=\"line\">network.host: 0.0.0.0                  设置绑定的ip地址</span><br><span class=\"line\">http.port: 9200                        端口</span><br><span class=\"line\">discovery.zen.ping.unicast.hosts: [&quot;192.168.21.12&quot;, &quot;192.168.21.13&quot;,&quot;192.168.21.14&quot;]   集群节点ip或者主机</span><br><span class=\"line\">discovery.zen.minimum_master_nodes: 3    设置这个参数来保证集群中的节点可以知道其它N个有master资格的节点。默认为1，对于大的集群来说，可以设置大一点的值（2-4）</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1新建用户（三台都需要）\"><a href=\"#2-1新建用户（三台都需要）\" class=\"headerlink\" title=\"2.1新建用户（三台都需要）\"></a>2.1新建用户（三台都需要）</h2><p>在 Linux 环境中，elasticsearch 不允许以 root 权限来运行！所以需要创建一个非root用户，以非root用户来起es<br>elsearch                                             新增elsearch用户组</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useradd elsearch -g elsearch -p elasticsearch                 创建elsearch用户</span><br><span class=\"line\">chown -R elsearch:elsearch ./elasticsearch                    用户目录权限</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-2运行操作三台服务\"><a href=\"#2-2运行操作三台服务\" class=\"headerlink\" title=\"2.2运行操作三台服务\"></a>2.2运行操作三台服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su elsearch</span><br><span class=\"line\">./bin/elasticsearch -d           //-d表示后台启动</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、问题汇总解决方案\"><a href=\"#3、问题汇总解决方案\" class=\"headerlink\" title=\"3、问题汇总解决方案\"></a>3、问题汇总解决方案</h1><h2 id=\"3-1问题一\"><a href=\"#3-1问题一\" class=\"headerlink\" title=\"3.1问题一\"></a>3.1问题一</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ERROR: bootstrap checks failed</span><br><span class=\"line\">max file descriptors [4096] for elasticsearch process likely too low, increase to at least [65536]</span><br></pre></td></tr></table></figure>\n\n<p>原因：无法创建本地文件问题,用户最大可创建文件数太小<br>解决方案：<br>切换到root用户，编辑limits.conf配置文件， 添加类似如下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/security/limits.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加如下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* soft nofile 65536</span><br><span class=\"line\">* hard nofile 131072</span><br><span class=\"line\">* soft nproc 2048</span><br><span class=\"line\">* hard nproc 4096</span><br></pre></td></tr></table></figure>\n\n<p>备注：* 代表Linux所有用户名称（比如 hadoop）<br>保存、退出、重新登录才可生效</p>\n<h2 id=\"3-2问题二\"><a href=\"#3-2问题二\" class=\"headerlink\" title=\"3.2问题二\"></a>3.2问题二</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>\n\n<p>原因：最大虚拟内存太小<br>解决方案：切换到root用户下，修改配置文件sysctl.conf</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/sysctl.conf</span><br></pre></td></tr></table></figure>\n\n<p>添加下面配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>\n\n<p>并执行命令：<br>sysctl -p<br>然后重新启动elasticsearch，即可启动成功。</p>\n<h2 id=\"3-3问题三：\"><a href=\"#3-3问题三：\" class=\"headerlink\" title=\"3.3问题三：\"></a>3.3问题三：</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">max virtual memory areas vm.max_map_count [65530] likely too low, increase to at least [262144]</span><br></pre></td></tr></table></figure>\n\n<p>原因：最大虚拟内存太小<br>解决方案：切换到root用户下，修改配置文件sysctl.conf<br>vi /etc/sysctl.conf<br>添加下面配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vm.max_map_count=655360</span><br></pre></td></tr></table></figure>\n\n<p>并执行命令：<br>sysctl -p<br>然后重新启动elasticsearch，即可启动成功。</p>\n<h2 id=\"3-4问题四：\"><a href=\"#3-4问题四：\" class=\"headerlink\" title=\"3.4问题四：\"></a>3.4问题四：</h2><p>ElasticSearch启动找不到主机或路由<br>原因：ElasticSearch 单播配置有问题<br>解决方案：<br>检查ElasticSearch中的配置文件<br>vi  config/elasticsearch.yml<br>找到如下配置：<br>discovery.zen.ping.unicast.hosts: [“192.168.21.12”, “192.168.21.13”,”192.168.21.14”]<br>一般情况下，是这里配置有问题，注意书写格式</p>\n<h2 id=\"3-5问题五：\"><a href=\"#3-5问题五：\" class=\"headerlink\" title=\"3.5问题五：\"></a>3.5问题五：</h2><p>org.elasticsearch.transport.RemoteTransportException: Failed to deserialize exception response from stream<br>原因:ElasticSearch节点之间的jdk版本不一致<br>解决方案：ElasticSearch集群统一jdk环境</p>\n<h2 id=\"3-6问题六：\"><a href=\"#3-6问题六：\" class=\"headerlink\" title=\"3.6问题六：\"></a>3.6问题六：</h2><p>Unsupported major.minor version 52.0<br>原因：jdk版本问题太低<br>解决方案：更换jdk版本，ElasticSearch5.0.0支持jdk1.8.0</p>"},{"title":"Git服务器端配置详解","date":"2018-03-10T05:01:09.000Z","_content":"\n我们在公司中，一个项目在开发过程中必定要涉及到同事之间的协同作战，此时代码管理就必不可少了，程序员用的最多的就是git了吧，但是公司的代码是禁止上传到github上的，所以需要自己搭建一个内部的git server服务器供公司内部使用，下面来具体就介绍。\n<!-- more -->\n本安装教程适用于centos服务器，其他版本linux服务器步骤一样，运行命令会不相同，自己转换即可。\n配置git server，原理就是将客户端的公钥id_rsa.pub添加到服务端的密钥文件authorized_keys中，多个用户另起一行拼接到该文件中即可。下面介绍安装的两种方法：\n# 方法一：yum安装\n## 安装git软件\n```\nyum install git -y\ngit --version\n```\ngit --version可以查看安装的git版本\n```\n[git@hadoop3 gitrepo]$ git --version\ngit version 1.8.3.1\n```\n系统是centos7，自带git版本太低，但可以使用。\n## 添加git用户组和用户\n```\ngroupadd git\nuseradd git -g git\n```\n## 创建登录证书\n```\nsu git\ncd\nmkdir .ssh && chmod 700 .ssh\ntouch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys\n```\n这里注意，一定要设置authorized_keys文件的权限为600，权限太大或太小都会造成cannot access的问题，我就遇到过这个坑。\n## 免秘钥\n复制客户端的公钥到服务端的authorized_keys文件中\n## 初始化git仓库\n创建一个git仓库文件夹，专门存放项目的地方，并创建一个项目，初始化：\n```\nmkdir /srv/git -p\ncd /srv/git\nmkdir project.git\ncd project.git\ngit init --bare\n```\nbare的意思就是初始化一个裸仓库，并不存储用户push的数据，只存储元数据。\n## 提交项目到git server\n下面的命令是在客户端（另一台机器，可以是windows，也可以是linux）上执行的：\n```\ncd myproject\ngit init\ngit config --global user.email “chenzuoli709@163.com”\ngit config --global user.name “chenzuoli”\ngit add .\ngit commit -m “initial commit”\ngit remote add origin git@gitserver:/srv/git/project.git\ngit push origin master\n```\n注意：提交的时候需要将gitserver更换成自己的git服务器的ip或者映射域名。\n## 克隆项目\n```\ngit clone git@gitserver:/srv/git/project.git\n```\n也是要替换gitserver的。\n# 方法二：自定义安装\n## 下载最新稳定版git\n<a href=\"https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz\">git最新版下载</a>\n## 添加git用户组和用户\n```\ngroupadd git\nuseradd git -g git\n```\n## 上传解压\n```\nsu git\ncd $GIT_HOME\nxz -d git-2.9.5.tar.xz\ntar xvf git-2.9.5.tar\n```\n## 环境准备\n```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel gcc -y\n```\n## 预编译、编译、安装\n```\ncd git-2.9.5\n./configure -prefix=$GIT_HOME\nmake && make install\n```\n其中GIT_HOME是自己指定的git安装目录。\n## 配置\n配置跟方法一一样\n## 添加链接\n上述步骤配置完成后，我们在push clone时会出现如下问题：\n```\nbash: git-receive-pack: command not found\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\nbash: git-upload-pack: command not found\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n原因是自定义安装时git的执行文件不在/usr/bin下，添加链接即可：\n```\nln -s /usr/local/gitserver/install/bin/git /usr/bin/git\nln -s /usr/local/gitserver/install/bin/git-shell /usr/bin/git-shell\nln -s /usr/local/gitserver/install/bin/git-upload-archive /usr/bin/git-upload-archive\nln -s /usr/local/gitserver/install/bin/git-upload-pack /usr/bin/git-upload-pack\nln -s /usr/local/gitserver/install/bin/git-receive-pack /usr/bin/git-receive-pack\n```\n到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。","source":"_posts/Git服务器端配置详解.md","raw":"---\ntitle: Git服务器端配置详解\ndate: 2018-03-10 13:01:09\ntags: [git]\ncategories: git\n---\n\n我们在公司中，一个项目在开发过程中必定要涉及到同事之间的协同作战，此时代码管理就必不可少了，程序员用的最多的就是git了吧，但是公司的代码是禁止上传到github上的，所以需要自己搭建一个内部的git server服务器供公司内部使用，下面来具体就介绍。\n<!-- more -->\n本安装教程适用于centos服务器，其他版本linux服务器步骤一样，运行命令会不相同，自己转换即可。\n配置git server，原理就是将客户端的公钥id_rsa.pub添加到服务端的密钥文件authorized_keys中，多个用户另起一行拼接到该文件中即可。下面介绍安装的两种方法：\n# 方法一：yum安装\n## 安装git软件\n```\nyum install git -y\ngit --version\n```\ngit --version可以查看安装的git版本\n```\n[git@hadoop3 gitrepo]$ git --version\ngit version 1.8.3.1\n```\n系统是centos7，自带git版本太低，但可以使用。\n## 添加git用户组和用户\n```\ngroupadd git\nuseradd git -g git\n```\n## 创建登录证书\n```\nsu git\ncd\nmkdir .ssh && chmod 700 .ssh\ntouch .ssh/authorized_keys && chmod 600 .ssh/authorized_keys\n```\n这里注意，一定要设置authorized_keys文件的权限为600，权限太大或太小都会造成cannot access的问题，我就遇到过这个坑。\n## 免秘钥\n复制客户端的公钥到服务端的authorized_keys文件中\n## 初始化git仓库\n创建一个git仓库文件夹，专门存放项目的地方，并创建一个项目，初始化：\n```\nmkdir /srv/git -p\ncd /srv/git\nmkdir project.git\ncd project.git\ngit init --bare\n```\nbare的意思就是初始化一个裸仓库，并不存储用户push的数据，只存储元数据。\n## 提交项目到git server\n下面的命令是在客户端（另一台机器，可以是windows，也可以是linux）上执行的：\n```\ncd myproject\ngit init\ngit config --global user.email “chenzuoli709@163.com”\ngit config --global user.name “chenzuoli”\ngit add .\ngit commit -m “initial commit”\ngit remote add origin git@gitserver:/srv/git/project.git\ngit push origin master\n```\n注意：提交的时候需要将gitserver更换成自己的git服务器的ip或者映射域名。\n## 克隆项目\n```\ngit clone git@gitserver:/srv/git/project.git\n```\n也是要替换gitserver的。\n# 方法二：自定义安装\n## 下载最新稳定版git\n<a href=\"https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz\">git最新版下载</a>\n## 添加git用户组和用户\n```\ngroupadd git\nuseradd git -g git\n```\n## 上传解压\n```\nsu git\ncd $GIT_HOME\nxz -d git-2.9.5.tar.xz\ntar xvf git-2.9.5.tar\n```\n## 环境准备\n```\nyum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel gcc -y\n```\n## 预编译、编译、安装\n```\ncd git-2.9.5\n./configure -prefix=$GIT_HOME\nmake && make install\n```\n其中GIT_HOME是自己指定的git安装目录。\n## 配置\n配置跟方法一一样\n## 添加链接\n上述步骤配置完成后，我们在push clone时会出现如下问题：\n```\nbash: git-receive-pack: command not found\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\nbash: git-upload-pack: command not found\nfatal: Could not read from remote repository.\nPlease make sure you have the correct access rights\nand the repository exists.\n```\n原因是自定义安装时git的执行文件不在/usr/bin下，添加链接即可：\n```\nln -s /usr/local/gitserver/install/bin/git /usr/bin/git\nln -s /usr/local/gitserver/install/bin/git-shell /usr/bin/git-shell\nln -s /usr/local/gitserver/install/bin/git-upload-archive /usr/bin/git-upload-archive\nln -s /usr/local/gitserver/install/bin/git-upload-pack /usr/bin/git-upload-pack\nln -s /usr/local/gitserver/install/bin/git-receive-pack /usr/bin/git-receive-pack\n```\n到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。","slug":"Git服务器端配置详解","published":1,"updated":"2019-07-20T03:12:37.135Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jt000cfbs6w7i5225l","content":"<p>我们在公司中，一个项目在开发过程中必定要涉及到同事之间的协同作战，此时代码管理就必不可少了，程序员用的最多的就是git了吧，但是公司的代码是禁止上传到github上的，所以需要自己搭建一个内部的git server服务器供公司内部使用，下面来具体就介绍。</p>\n<a id=\"more\"></a>\n<p>本安装教程适用于centos服务器，其他版本linux服务器步骤一样，运行命令会不相同，自己转换即可。<br>配置git server，原理就是将客户端的公钥id_rsa.pub添加到服务端的密钥文件authorized_keys中，多个用户另起一行拼接到该文件中即可。下面介绍安装的两种方法：</p>\n<h1 id=\"方法一：yum安装\"><a href=\"#方法一：yum安装\" class=\"headerlink\" title=\"方法一：yum安装\"></a>方法一：yum安装</h1><h2 id=\"安装git软件\"><a href=\"#安装git软件\" class=\"headerlink\" title=\"安装git软件\"></a>安装git软件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>git –version可以查看安装的git版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[git@hadoop3 gitrepo]$ git --version</span><br><span class=\"line\">git version 1.8.3.1</span><br></pre></td></tr></table></figure>\n\n<p>系统是centos7，自带git版本太低，但可以使用。</p>\n<h2 id=\"添加git用户组和用户\"><a href=\"#添加git用户组和用户\" class=\"headerlink\" title=\"添加git用户组和用户\"></a>添加git用户组和用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd git</span><br><span class=\"line\">useradd git -g git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建登录证书\"><a href=\"#创建登录证书\" class=\"headerlink\" title=\"创建登录证书\"></a>创建登录证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">cd</span><br><span class=\"line\">mkdir .ssh &amp;&amp; chmod 700 .ssh</span><br><span class=\"line\">touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>这里注意，一定要设置authorized_keys文件的权限为600，权限太大或太小都会造成cannot access的问题，我就遇到过这个坑。</p>\n<h2 id=\"免秘钥\"><a href=\"#免秘钥\" class=\"headerlink\" title=\"免秘钥\"></a>免秘钥</h2><p>复制客户端的公钥到服务端的authorized_keys文件中</p>\n<h2 id=\"初始化git仓库\"><a href=\"#初始化git仓库\" class=\"headerlink\" title=\"初始化git仓库\"></a>初始化git仓库</h2><p>创建一个git仓库文件夹，专门存放项目的地方，并创建一个项目，初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /srv/git -p</span><br><span class=\"line\">cd /srv/git</span><br><span class=\"line\">mkdir project.git</span><br><span class=\"line\">cd project.git</span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure>\n\n<p>bare的意思就是初始化一个裸仓库，并不存储用户push的数据，只存储元数据。</p>\n<h2 id=\"提交项目到git-server\"><a href=\"#提交项目到git-server\" class=\"headerlink\" title=\"提交项目到git server\"></a>提交项目到git server</h2><p>下面的命令是在客户端（另一台机器，可以是windows，也可以是linux）上执行的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myproject</span><br><span class=\"line\">git init</span><br><span class=\"line\">git config --global user.email “chenzuoli709@163.com”</span><br><span class=\"line\">git config --global user.name “chenzuoli”</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m “initial commit”</span><br><span class=\"line\">git remote add origin git@gitserver:/srv/git/project.git</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>注意：提交的时候需要将gitserver更换成自己的git服务器的ip或者映射域名。</p>\n<h2 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@gitserver:/srv/git/project.git</span><br></pre></td></tr></table></figure>\n\n<p>也是要替换gitserver的。</p>\n<h1 id=\"方法二：自定义安装\"><a href=\"#方法二：自定义安装\" class=\"headerlink\" title=\"方法二：自定义安装\"></a>方法二：自定义安装</h1><h2 id=\"下载最新稳定版git\"><a href=\"#下载最新稳定版git\" class=\"headerlink\" title=\"下载最新稳定版git\"></a>下载最新稳定版git</h2><p><a href=\"https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz\" target=\"_blank\" rel=\"noopener\">git最新版下载</a></p>\n<h2 id=\"添加git用户组和用户-1\"><a href=\"#添加git用户组和用户-1\" class=\"headerlink\" title=\"添加git用户组和用户\"></a>添加git用户组和用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd git</span><br><span class=\"line\">useradd git -g git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上传解压\"><a href=\"#上传解压\" class=\"headerlink\" title=\"上传解压\"></a>上传解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">cd $GIT_HOME</span><br><span class=\"line\">xz -d git-2.9.5.tar.xz</span><br><span class=\"line\">tar xvf git-2.9.5.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel gcc -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预编译、编译、安装\"><a href=\"#预编译、编译、安装\" class=\"headerlink\" title=\"预编译、编译、安装\"></a>预编译、编译、安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd git-2.9.5</span><br><span class=\"line\">./configure -prefix=$GIT_HOME</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>其中GIT_HOME是自己指定的git安装目录。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置跟方法一一样</p>\n<h2 id=\"添加链接\"><a href=\"#添加链接\" class=\"headerlink\" title=\"添加链接\"></a>添加链接</h2><p>上述步骤配置完成后，我们在push clone时会出现如下问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash: git-receive-pack: command not found</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br><span class=\"line\">bash: git-upload-pack: command not found</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<p>原因是自定义安装时git的执行文件不在/usr/bin下，添加链接即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git /usr/bin/git</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-shell /usr/bin/git-shell</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-upload-archive /usr/bin/git-upload-archive</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-upload-pack /usr/bin/git-upload-pack</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-receive-pack /usr/bin/git-receive-pack</span><br></pre></td></tr></table></figure>\n\n<p>到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。</p>\n","site":{"data":{}},"excerpt":"<p>我们在公司中，一个项目在开发过程中必定要涉及到同事之间的协同作战，此时代码管理就必不可少了，程序员用的最多的就是git了吧，但是公司的代码是禁止上传到github上的，所以需要自己搭建一个内部的git server服务器供公司内部使用，下面来具体就介绍。</p>","more":"<p>本安装教程适用于centos服务器，其他版本linux服务器步骤一样，运行命令会不相同，自己转换即可。<br>配置git server，原理就是将客户端的公钥id_rsa.pub添加到服务端的密钥文件authorized_keys中，多个用户另起一行拼接到该文件中即可。下面介绍安装的两种方法：</p>\n<h1 id=\"方法一：yum安装\"><a href=\"#方法一：yum安装\" class=\"headerlink\" title=\"方法一：yum安装\"></a>方法一：yum安装</h1><h2 id=\"安装git软件\"><a href=\"#安装git软件\" class=\"headerlink\" title=\"安装git软件\"></a>安装git软件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install git -y</span><br><span class=\"line\">git --version</span><br></pre></td></tr></table></figure>\n\n<p>git –version可以查看安装的git版本</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[git@hadoop3 gitrepo]$ git --version</span><br><span class=\"line\">git version 1.8.3.1</span><br></pre></td></tr></table></figure>\n\n<p>系统是centos7，自带git版本太低，但可以使用。</p>\n<h2 id=\"添加git用户组和用户\"><a href=\"#添加git用户组和用户\" class=\"headerlink\" title=\"添加git用户组和用户\"></a>添加git用户组和用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd git</span><br><span class=\"line\">useradd git -g git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"创建登录证书\"><a href=\"#创建登录证书\" class=\"headerlink\" title=\"创建登录证书\"></a>创建登录证书</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">cd</span><br><span class=\"line\">mkdir .ssh &amp;&amp; chmod 700 .ssh</span><br><span class=\"line\">touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>这里注意，一定要设置authorized_keys文件的权限为600，权限太大或太小都会造成cannot access的问题，我就遇到过这个坑。</p>\n<h2 id=\"免秘钥\"><a href=\"#免秘钥\" class=\"headerlink\" title=\"免秘钥\"></a>免秘钥</h2><p>复制客户端的公钥到服务端的authorized_keys文件中</p>\n<h2 id=\"初始化git仓库\"><a href=\"#初始化git仓库\" class=\"headerlink\" title=\"初始化git仓库\"></a>初始化git仓库</h2><p>创建一个git仓库文件夹，专门存放项目的地方，并创建一个项目，初始化：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /srv/git -p</span><br><span class=\"line\">cd /srv/git</span><br><span class=\"line\">mkdir project.git</span><br><span class=\"line\">cd project.git</span><br><span class=\"line\">git init --bare</span><br></pre></td></tr></table></figure>\n\n<p>bare的意思就是初始化一个裸仓库，并不存储用户push的数据，只存储元数据。</p>\n<h2 id=\"提交项目到git-server\"><a href=\"#提交项目到git-server\" class=\"headerlink\" title=\"提交项目到git server\"></a>提交项目到git server</h2><p>下面的命令是在客户端（另一台机器，可以是windows，也可以是linux）上执行的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd myproject</span><br><span class=\"line\">git init</span><br><span class=\"line\">git config --global user.email “chenzuoli709@163.com”</span><br><span class=\"line\">git config --global user.name “chenzuoli”</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m “initial commit”</span><br><span class=\"line\">git remote add origin git@gitserver:/srv/git/project.git</span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n\n<p>注意：提交的时候需要将gitserver更换成自己的git服务器的ip或者映射域名。</p>\n<h2 id=\"克隆项目\"><a href=\"#克隆项目\" class=\"headerlink\" title=\"克隆项目\"></a>克隆项目</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone git@gitserver:/srv/git/project.git</span><br></pre></td></tr></table></figure>\n\n<p>也是要替换gitserver的。</p>\n<h1 id=\"方法二：自定义安装\"><a href=\"#方法二：自定义安装\" class=\"headerlink\" title=\"方法二：自定义安装\"></a>方法二：自定义安装</h1><h2 id=\"下载最新稳定版git\"><a href=\"#下载最新稳定版git\" class=\"headerlink\" title=\"下载最新稳定版git\"></a>下载最新稳定版git</h2><p><a href=\"https://www.kernel.org/pub/software/scm/git/git-2.9.5.tar.xz\" target=\"_blank\" rel=\"noopener\">git最新版下载</a></p>\n<h2 id=\"添加git用户组和用户-1\"><a href=\"#添加git用户组和用户-1\" class=\"headerlink\" title=\"添加git用户组和用户\"></a>添加git用户组和用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">groupadd git</span><br><span class=\"line\">useradd git -g git</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"上传解压\"><a href=\"#上传解压\" class=\"headerlink\" title=\"上传解压\"></a>上传解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">su git</span><br><span class=\"line\">cd $GIT_HOME</span><br><span class=\"line\">xz -d git-2.9.5.tar.xz</span><br><span class=\"line\">tar xvf git-2.9.5.tar</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel gcc -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"预编译、编译、安装\"><a href=\"#预编译、编译、安装\" class=\"headerlink\" title=\"预编译、编译、安装\"></a>预编译、编译、安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd git-2.9.5</span><br><span class=\"line\">./configure -prefix=$GIT_HOME</span><br><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>其中GIT_HOME是自己指定的git安装目录。</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>配置跟方法一一样</p>\n<h2 id=\"添加链接\"><a href=\"#添加链接\" class=\"headerlink\" title=\"添加链接\"></a>添加链接</h2><p>上述步骤配置完成后，我们在push clone时会出现如下问题：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bash: git-receive-pack: command not found</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br><span class=\"line\">bash: git-upload-pack: command not found</span><br><span class=\"line\">fatal: Could not read from remote repository.</span><br><span class=\"line\">Please make sure you have the correct access rights</span><br><span class=\"line\">and the repository exists.</span><br></pre></td></tr></table></figure>\n\n<p>原因是自定义安装时git的执行文件不在/usr/bin下，添加链接即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git /usr/bin/git</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-shell /usr/bin/git-shell</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-upload-archive /usr/bin/git-upload-archive</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-upload-pack /usr/bin/git-upload-pack</span><br><span class=\"line\">ln -s /usr/local/gitserver/install/bin/git-receive-pack /usr/bin/git-receive-pack</span><br></pre></td></tr></table></figure>\n\n<p>到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。</p>"},{"title":"Flink学习","date":"2019-08-26T15:27:52.000Z","notebook":"笔记","_content":"\nflink，号称第二代实时大数据计算引擎，被他的名头吸引过来，我也来学习学习，下面是我在学习过程中遇到的一些问题和解决方案。\n![Flink Logo](Flink学习/flink-header-logo.svg)\n<!-- more -->\n\n# 如何保证数据处理的有序性\n&nbsp;&nbsp;&nbsp;&nbsp;flink通过watermark来解决这个问题。当使用事件时间来进行对事件排序时，很有必要跟踪事件的处理时间，例如在一个窗口操作t到t+5中，只有当系统能够保证没有数据的事件时间小于t+5时，然后对这个窗口中的数据进行排序计算，才是保证数据处理的有序性，那么如何确定没有数据的事件时间小于t+5呢？flink是使用watermark来确定的，它会追踪穿过系统中的每一条数据，当它知道没有数据对应的时间戳小于t1后，它会将这个t1水印广播📢到下流operators，一旦watermark被提交，下流operators在获取watermark值时就会发现并作出相应的反应。\n&nbsp;&nbsp;&nbsp;&nbsp;在窗口操作中，窗口会等待t+5的watermark，然后触发计算，并向下游广播t+5的watermark。\n&nbsp;&nbsp;&nbsp;&nbsp;当所有的operater都在等待他的watermark和输入数据时，系统会被延时，从而影响时效性。\n&nbsp;&nbsp;&nbsp;&nbsp;下图是实际水印、事件时间与处理时间之间的关系：\n![water_mark-event_time-process_time](Flink学习/water_mark-event_time-process_time.png)\n\n\nyou can see the original document at this link <a>[Time and Order in Streams](https://cwiki.apache.org/confluence/display/FLINK/Time+and+Order+in+Streams)</a>\n\n学习使我快乐。","source":"_posts/Flink学习.md","raw":"---\ntitle: Flink学习\ndate: 2019-08-26 23:27:52\ntags: flink\ncategories: [大数据,实时计算]\nnotebook: 笔记\n---\n\nflink，号称第二代实时大数据计算引擎，被他的名头吸引过来，我也来学习学习，下面是我在学习过程中遇到的一些问题和解决方案。\n![Flink Logo](Flink学习/flink-header-logo.svg)\n<!-- more -->\n\n# 如何保证数据处理的有序性\n&nbsp;&nbsp;&nbsp;&nbsp;flink通过watermark来解决这个问题。当使用事件时间来进行对事件排序时，很有必要跟踪事件的处理时间，例如在一个窗口操作t到t+5中，只有当系统能够保证没有数据的事件时间小于t+5时，然后对这个窗口中的数据进行排序计算，才是保证数据处理的有序性，那么如何确定没有数据的事件时间小于t+5呢？flink是使用watermark来确定的，它会追踪穿过系统中的每一条数据，当它知道没有数据对应的时间戳小于t1后，它会将这个t1水印广播📢到下流operators，一旦watermark被提交，下流operators在获取watermark值时就会发现并作出相应的反应。\n&nbsp;&nbsp;&nbsp;&nbsp;在窗口操作中，窗口会等待t+5的watermark，然后触发计算，并向下游广播t+5的watermark。\n&nbsp;&nbsp;&nbsp;&nbsp;当所有的operater都在等待他的watermark和输入数据时，系统会被延时，从而影响时效性。\n&nbsp;&nbsp;&nbsp;&nbsp;下图是实际水印、事件时间与处理时间之间的关系：\n![water_mark-event_time-process_time](Flink学习/water_mark-event_time-process_time.png)\n\n\nyou can see the original document at this link <a>[Time and Order in Streams](https://cwiki.apache.org/confluence/display/FLINK/Time+and+Order+in+Streams)</a>\n\n学习使我快乐。","slug":"Flink学习","published":1,"updated":"2019-08-27T15:08:48.341Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jv000dfbs6fcvk41j2","content":"<p>flink，号称第二代实时大数据计算引擎，被他的名头吸引过来，我也来学习学习，下面是我在学习过程中遇到的一些问题和解决方案。<br><img src=\"/2019/08/26/Flink学习/flink-header-logo.svg\" alt=\"Flink Logo\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"如何保证数据处理的有序性\"><a href=\"#如何保证数据处理的有序性\" class=\"headerlink\" title=\"如何保证数据处理的有序性\"></a>如何保证数据处理的有序性</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;flink通过watermark来解决这个问题。当使用事件时间来进行对事件排序时，很有必要跟踪事件的处理时间，例如在一个窗口操作t到t+5中，只有当系统能够保证没有数据的事件时间小于t+5时，然后对这个窗口中的数据进行排序计算，才是保证数据处理的有序性，那么如何确定没有数据的事件时间小于t+5呢？flink是使用watermark来确定的，它会追踪穿过系统中的每一条数据，当它知道没有数据对应的时间戳小于t1后，它会将这个t1水印广播📢到下流operators，一旦watermark被提交，下流operators在获取watermark值时就会发现并作出相应的反应。<br>&nbsp;&nbsp;&nbsp;&nbsp;在窗口操作中，窗口会等待t+5的watermark，然后触发计算，并向下游广播t+5的watermark。<br>&nbsp;&nbsp;&nbsp;&nbsp;当所有的operater都在等待他的watermark和输入数据时，系统会被延时，从而影响时效性。<br>&nbsp;&nbsp;&nbsp;&nbsp;下图是实际水印、事件时间与处理时间之间的关系：<br><img src=\"/2019/08/26/Flink学习/water_mark-event_time-process_time.png\" alt=\"water_mark-event_time-process_time\"></p>\n<p>you can see the original document at this link <a><a href=\"https://cwiki.apache.org/confluence/display/FLINK/Time+and+Order+in+Streams\" target=\"_blank\" rel=\"noopener\">Time and Order in Streams</a></a></p>\n<p>学习使我快乐。</p>\n","site":{"data":{}},"excerpt":"<p>flink，号称第二代实时大数据计算引擎，被他的名头吸引过来，我也来学习学习，下面是我在学习过程中遇到的一些问题和解决方案。<br><img src=\"/2019/08/26/Flink学习/flink-header-logo.svg\" alt=\"Flink Logo\"></p>","more":"<h1 id=\"如何保证数据处理的有序性\"><a href=\"#如何保证数据处理的有序性\" class=\"headerlink\" title=\"如何保证数据处理的有序性\"></a>如何保证数据处理的有序性</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;flink通过watermark来解决这个问题。当使用事件时间来进行对事件排序时，很有必要跟踪事件的处理时间，例如在一个窗口操作t到t+5中，只有当系统能够保证没有数据的事件时间小于t+5时，然后对这个窗口中的数据进行排序计算，才是保证数据处理的有序性，那么如何确定没有数据的事件时间小于t+5呢？flink是使用watermark来确定的，它会追踪穿过系统中的每一条数据，当它知道没有数据对应的时间戳小于t1后，它会将这个t1水印广播📢到下流operators，一旦watermark被提交，下流operators在获取watermark值时就会发现并作出相应的反应。<br>&nbsp;&nbsp;&nbsp;&nbsp;在窗口操作中，窗口会等待t+5的watermark，然后触发计算，并向下游广播t+5的watermark。<br>&nbsp;&nbsp;&nbsp;&nbsp;当所有的operater都在等待他的watermark和输入数据时，系统会被延时，从而影响时效性。<br>&nbsp;&nbsp;&nbsp;&nbsp;下图是实际水印、事件时间与处理时间之间的关系：<br><img src=\"/2019/08/26/Flink学习/water_mark-event_time-process_time.png\" alt=\"water_mark-event_time-process_time\"></p>\n<p>you can see the original document at this link <a><a href=\"https://cwiki.apache.org/confluence/display/FLINK/Time+and+Order+in+Streams\" target=\"_blank\" rel=\"noopener\">Time and Order in Streams</a></a></p>\n<p>学习使我快乐。</p>"},{"title":"全球各国家离婚率排行","date":"2018-12-26T13:26:15.000Z","_content":"Highest Divorce Rate by Country\n全球各国家离婚率排行：\n<!-- more -->\n1.Luxembourg : 87%\t\t卢森堡\n2.Spain: 65%\t\t\t西班牙\n3.France: 55%\t\t\t法国\n4.Russia: 51%\t\t\t俄国\n5.United States: 46%\t美国\n6.Germany: 44%\t\t\t德国\n7.United Kingdom: 42%\t英国\n8.New Zealand: 42%\t\t新西兰\n9.Australia: 38%\t\t澳大利亚\t\n10.Canada 38%\t\t\t加拿大\n.\n.\n.\nIndia 1%\t\t\t\t印度\n\n你们国家的离婚率大概是多少呢？\nlet me know in the comments.","source":"_posts/Highest Divorce Rate by Country.md","raw":"---\ntitle: 全球各国家离婚率排行\ntags: 离婚率\ndate: 2018-12-26 21:26:15\ncategories: 世界排名\n---\nHighest Divorce Rate by Country\n全球各国家离婚率排行：\n<!-- more -->\n1.Luxembourg : 87%\t\t卢森堡\n2.Spain: 65%\t\t\t西班牙\n3.France: 55%\t\t\t法国\n4.Russia: 51%\t\t\t俄国\n5.United States: 46%\t美国\n6.Germany: 44%\t\t\t德国\n7.United Kingdom: 42%\t英国\n8.New Zealand: 42%\t\t新西兰\n9.Australia: 38%\t\t澳大利亚\t\n10.Canada 38%\t\t\t加拿大\n.\n.\n.\nIndia 1%\t\t\t\t印度\n\n你们国家的离婚率大概是多少呢？\nlet me know in the comments.","slug":"Highest Divorce Rate by Country","published":1,"updated":"2019-04-21T02:53:45.754Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jx000efbs63x4212xx","content":"<p>Highest Divorce Rate by Country<br>全球各国家离婚率排行：</p>\n<a id=\"more\"></a>\n<p>1.Luxembourg : 87%        卢森堡<br>2.Spain: 65%            西班牙<br>3.France: 55%            法国<br>4.Russia: 51%            俄国<br>5.United States: 46%    美国<br>6.Germany: 44%            德国<br>7.United Kingdom: 42%    英国<br>8.New Zealand: 42%        新西兰<br>9.Australia: 38%        澳大利亚<br>10.Canada 38%            加拿大<br>.\n.<br>.\nIndia 1%                印度</p>\n<p>你们国家的离婚率大概是多少呢？<br>let me know in the comments.</p>\n","site":{"data":{}},"excerpt":"<p>Highest Divorce Rate by Country<br>全球各国家离婚率排行：</p>","more":"<p>1.Luxembourg : 87%        卢森堡<br>2.Spain: 65%            西班牙<br>3.France: 55%            法国<br>4.Russia: 51%            俄国<br>5.United States: 46%    美国<br>6.Germany: 44%            德国<br>7.United Kingdom: 42%    英国<br>8.New Zealand: 42%        新西兰<br>9.Australia: 38%        澳大利亚<br>10.Canada 38%            加拿大<br>.\n.<br>.\nIndia 1%                印度</p>\n<p>你们国家的离婚率大概是多少呢？<br>let me know in the comments.</p>"},{"title":"Linux命令相关","date":"2019-07-27T16:13:03.000Z","_content":"\n关于linux操作系统的一些使用命令，看下面。\n\n<!-- more -->\n![linux](Linux命令相关/linux.jpeg)\n\n# 1. linux下查看某个文件或文件夹占用的磁盘空间大小\n```\ndu -ah --max-depth=1\n```\n\n# 2.sed修改文件\n在每行行首或者行尾添加相同的字符串\n```\nsed 's/^/HEAD&/g' text.file    每行行首添加HEAD\nsed 's/$/&TAIL/g' text.file    每行行尾添加TAIL\n```\n如果要修改原文件，则添加 -i参数\n```\nsed -i 's/^/HEAD&/g' text.file\nsed -i 's/$/&TAIL/g' text.file\n```\n递归替换\n```\nfind . -type f -print0 | xargs -0 sed -i 's/10.1.0.33,10.1.0.44,10.1.0.48/${es_nodes}/g'\n```\n文件第一行添加字符串\n```\nsed -i \"1i\\添加内容\" filename\n```\n\n# 3.查看centos版本\n```\ncat /etc/redhat-release\n```\n\n# 4.查看cpu\n```\ncat /proc/cpuinfo |grep \"physical id\"|sort|uniq|wc -l       查看cpu核数\ncat /proc/cpuinfo | grep \"cpu cores\" | uniq             \t物理cpu个数\n```\n\n# 5.查看内存\n```\nfree -h\n```\n\n# 6.查看磁盘容量\n```\ndf -h\n```\n\n# 7.查看端口号对应进程号\n```\nnetstat -tunlp|grep 端口号\n```\n\n# 8.查看未释放空间的进程\n```\nlsof | grep deleted     \n```\n\n# 9.杀死未释放空间的进程\n```\nlsof | grep deleted | awk '{print $2}' | sort | uniq | xargs kill -9\n```\n\n# 10.grep\n```\ngrep -o \"ods\\.[a-z|A-Z|_]*\" ods2report.py | grep \"_\" | sort | uniq -c\ngrep -o只显示匹配内容\nuniq -c计算重复行数量\ngrep \"\\\"db\\\"\" *.py | awk -F ':' '{print $1}' | sort | uniq\ngrep -o \"ods\\.[a-z|A-Z|_|0-9]*\" *.py | awk -F ':' '{print $2}' |grep \"_\" | sort | uniq -c\n```\n\n# 11.查看详细进程信息\n```\ntop -c\n```\n\n","source":"_posts/Linux命令相关.md","raw":"---\ntitle: Linux命令相关\ndate: 2019-07-28 00:13:03\ntags: linux\ncategories: 操作系统\n---\n\n关于linux操作系统的一些使用命令，看下面。\n\n<!-- more -->\n![linux](Linux命令相关/linux.jpeg)\n\n# 1. linux下查看某个文件或文件夹占用的磁盘空间大小\n```\ndu -ah --max-depth=1\n```\n\n# 2.sed修改文件\n在每行行首或者行尾添加相同的字符串\n```\nsed 's/^/HEAD&/g' text.file    每行行首添加HEAD\nsed 's/$/&TAIL/g' text.file    每行行尾添加TAIL\n```\n如果要修改原文件，则添加 -i参数\n```\nsed -i 's/^/HEAD&/g' text.file\nsed -i 's/$/&TAIL/g' text.file\n```\n递归替换\n```\nfind . -type f -print0 | xargs -0 sed -i 's/10.1.0.33,10.1.0.44,10.1.0.48/${es_nodes}/g'\n```\n文件第一行添加字符串\n```\nsed -i \"1i\\添加内容\" filename\n```\n\n# 3.查看centos版本\n```\ncat /etc/redhat-release\n```\n\n# 4.查看cpu\n```\ncat /proc/cpuinfo |grep \"physical id\"|sort|uniq|wc -l       查看cpu核数\ncat /proc/cpuinfo | grep \"cpu cores\" | uniq             \t物理cpu个数\n```\n\n# 5.查看内存\n```\nfree -h\n```\n\n# 6.查看磁盘容量\n```\ndf -h\n```\n\n# 7.查看端口号对应进程号\n```\nnetstat -tunlp|grep 端口号\n```\n\n# 8.查看未释放空间的进程\n```\nlsof | grep deleted     \n```\n\n# 9.杀死未释放空间的进程\n```\nlsof | grep deleted | awk '{print $2}' | sort | uniq | xargs kill -9\n```\n\n# 10.grep\n```\ngrep -o \"ods\\.[a-z|A-Z|_]*\" ods2report.py | grep \"_\" | sort | uniq -c\ngrep -o只显示匹配内容\nuniq -c计算重复行数量\ngrep \"\\\"db\\\"\" *.py | awk -F ':' '{print $1}' | sort | uniq\ngrep -o \"ods\\.[a-z|A-Z|_|0-9]*\" *.py | awk -F ':' '{print $2}' |grep \"_\" | sort | uniq -c\n```\n\n# 11.查看详细进程信息\n```\ntop -c\n```\n\n","slug":"Linux命令相关","published":1,"updated":"2019-07-27T16:27:02.428Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jy000ffbs6hnjwy7qk","content":"<p>关于linux操作系统的一些使用命令，看下面。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/07/28/Linux命令相关/linux.jpeg\" alt=\"linux\"></p>\n<h1 id=\"1-linux下查看某个文件或文件夹占用的磁盘空间大小\"><a href=\"#1-linux下查看某个文件或文件夹占用的磁盘空间大小\" class=\"headerlink\" title=\"1. linux下查看某个文件或文件夹占用的磁盘空间大小\"></a>1. linux下查看某个文件或文件夹占用的磁盘空间大小</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -ah --max-depth=1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-sed修改文件\"><a href=\"#2-sed修改文件\" class=\"headerlink\" title=\"2.sed修改文件\"></a>2.sed修改文件</h1><p>在每行行首或者行尾添加相同的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed &apos;s/^/HEAD&amp;/g&apos; text.file    每行行首添加HEAD</span><br><span class=\"line\">sed &apos;s/$/&amp;TAIL/g&apos; text.file    每行行尾添加TAIL</span><br></pre></td></tr></table></figure>\n\n<p>如果要修改原文件，则添加 -i参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/^/HEAD&amp;/g&apos; text.file</span><br><span class=\"line\">sed -i &apos;s/$/&amp;TAIL/g&apos; text.file</span><br></pre></td></tr></table></figure>\n\n<p>递归替换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -print0 | xargs -0 sed -i &apos;s/10.1.0.33,10.1.0.44,10.1.0.48/$&#123;es_nodes&#125;/g&apos;</span><br></pre></td></tr></table></figure>\n\n<p>文件第一行添加字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &quot;1i\\添加内容&quot; filename</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-查看centos版本\"><a href=\"#3-查看centos版本\" class=\"headerlink\" title=\"3.查看centos版本\"></a>3.查看centos版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-查看cpu\"><a href=\"#4-查看cpu\" class=\"headerlink\" title=\"4.查看cpu\"></a>4.查看cpu</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/cpuinfo |grep &quot;physical id&quot;|sort|uniq|wc -l       查看cpu核数</span><br><span class=\"line\">cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq             \t物理cpu个数</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-查看内存\"><a href=\"#5-查看内存\" class=\"headerlink\" title=\"5.查看内存\"></a>5.查看内存</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -h</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-查看磁盘容量\"><a href=\"#6-查看磁盘容量\" class=\"headerlink\" title=\"6.查看磁盘容量\"></a>6.查看磁盘容量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-查看端口号对应进程号\"><a href=\"#7-查看端口号对应进程号\" class=\"headerlink\" title=\"7.查看端口号对应进程号\"></a>7.查看端口号对应进程号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tunlp|grep 端口号</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-查看未释放空间的进程\"><a href=\"#8-查看未释放空间的进程\" class=\"headerlink\" title=\"8.查看未释放空间的进程\"></a>8.查看未释放空间的进程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof | grep deleted</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-杀死未释放空间的进程\"><a href=\"#9-杀死未释放空间的进程\" class=\"headerlink\" title=\"9.杀死未释放空间的进程\"></a>9.杀死未释放空间的进程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof | grep deleted | awk &apos;&#123;print $2&#125;&apos; | sort | uniq | xargs kill -9</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-grep\"><a href=\"#10-grep\" class=\"headerlink\" title=\"10.grep\"></a>10.grep</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -o &quot;ods\\.[a-z|A-Z|_]*&quot; ods2report.py | grep &quot;_&quot; | sort | uniq -c</span><br><span class=\"line\">grep -o只显示匹配内容</span><br><span class=\"line\">uniq -c计算重复行数量</span><br><span class=\"line\">grep &quot;\\&quot;db\\&quot;&quot; *.py | awk -F &apos;:&apos; &apos;&#123;print $1&#125;&apos; | sort | uniq</span><br><span class=\"line\">grep -o &quot;ods\\.[a-z|A-Z|_|0-9]*&quot; *.py | awk -F &apos;:&apos; &apos;&#123;print $2&#125;&apos; |grep &quot;_&quot; | sort | uniq -c</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-查看详细进程信息\"><a href=\"#11-查看详细进程信息\" class=\"headerlink\" title=\"11.查看详细进程信息\"></a>11.查看详细进程信息</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -c</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>关于linux操作系统的一些使用命令，看下面。</p>","more":"<p><img src=\"/2019/07/28/Linux命令相关/linux.jpeg\" alt=\"linux\"></p>\n<h1 id=\"1-linux下查看某个文件或文件夹占用的磁盘空间大小\"><a href=\"#1-linux下查看某个文件或文件夹占用的磁盘空间大小\" class=\"headerlink\" title=\"1. linux下查看某个文件或文件夹占用的磁盘空间大小\"></a>1. linux下查看某个文件或文件夹占用的磁盘空间大小</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du -ah --max-depth=1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-sed修改文件\"><a href=\"#2-sed修改文件\" class=\"headerlink\" title=\"2.sed修改文件\"></a>2.sed修改文件</h1><p>在每行行首或者行尾添加相同的字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed &apos;s/^/HEAD&amp;/g&apos; text.file    每行行首添加HEAD</span><br><span class=\"line\">sed &apos;s/$/&amp;TAIL/g&apos; text.file    每行行尾添加TAIL</span><br></pre></td></tr></table></figure>\n\n<p>如果要修改原文件，则添加 -i参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/^/HEAD&amp;/g&apos; text.file</span><br><span class=\"line\">sed -i &apos;s/$/&amp;TAIL/g&apos; text.file</span><br></pre></td></tr></table></figure>\n\n<p>递归替换</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find . -type f -print0 | xargs -0 sed -i &apos;s/10.1.0.33,10.1.0.44,10.1.0.48/$&#123;es_nodes&#125;/g&apos;</span><br></pre></td></tr></table></figure>\n\n<p>文件第一行添加字符串</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &quot;1i\\添加内容&quot; filename</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-查看centos版本\"><a href=\"#3-查看centos版本\" class=\"headerlink\" title=\"3.查看centos版本\"></a>3.查看centos版本</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/redhat-release</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-查看cpu\"><a href=\"#4-查看cpu\" class=\"headerlink\" title=\"4.查看cpu\"></a>4.查看cpu</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /proc/cpuinfo |grep &quot;physical id&quot;|sort|uniq|wc -l       查看cpu核数</span><br><span class=\"line\">cat /proc/cpuinfo | grep &quot;cpu cores&quot; | uniq             \t物理cpu个数</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-查看内存\"><a href=\"#5-查看内存\" class=\"headerlink\" title=\"5.查看内存\"></a>5.查看内存</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">free -h</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-查看磁盘容量\"><a href=\"#6-查看磁盘容量\" class=\"headerlink\" title=\"6.查看磁盘容量\"></a>6.查看磁盘容量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -h</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-查看端口号对应进程号\"><a href=\"#7-查看端口号对应进程号\" class=\"headerlink\" title=\"7.查看端口号对应进程号\"></a>7.查看端口号对应进程号</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">netstat -tunlp|grep 端口号</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-查看未释放空间的进程\"><a href=\"#8-查看未释放空间的进程\" class=\"headerlink\" title=\"8.查看未释放空间的进程\"></a>8.查看未释放空间的进程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof | grep deleted</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-杀死未释放空间的进程\"><a href=\"#9-杀死未释放空间的进程\" class=\"headerlink\" title=\"9.杀死未释放空间的进程\"></a>9.杀死未释放空间的进程</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lsof | grep deleted | awk &apos;&#123;print $2&#125;&apos; | sort | uniq | xargs kill -9</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-grep\"><a href=\"#10-grep\" class=\"headerlink\" title=\"10.grep\"></a>10.grep</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep -o &quot;ods\\.[a-z|A-Z|_]*&quot; ods2report.py | grep &quot;_&quot; | sort | uniq -c</span><br><span class=\"line\">grep -o只显示匹配内容</span><br><span class=\"line\">uniq -c计算重复行数量</span><br><span class=\"line\">grep &quot;\\&quot;db\\&quot;&quot; *.py | awk -F &apos;:&apos; &apos;&#123;print $1&#125;&apos; | sort | uniq</span><br><span class=\"line\">grep -o &quot;ods\\.[a-z|A-Z|_|0-9]*&quot; *.py | awk -F &apos;:&apos; &apos;&#123;print $2&#125;&apos; |grep &quot;_&quot; | sort | uniq -c</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-查看详细进程信息\"><a href=\"#11-查看详细进程信息\" class=\"headerlink\" title=\"11.查看详细进程信息\"></a>11.查看详细进程信息</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">top -c</span><br></pre></td></tr></table></figure>"},{"title":"日本近几年的经济数据","date":"2018-12-26T13:26:15.000Z","_content":"Japan Economy Data\n<!-- more -->\n![日本近几年经济数据](Japan Economy Data/japan_economy_data.jpg)\n\n你看到了什么？","source":"_posts/Japan Economy Data.md","raw":"---\ntitle: 日本近几年的经济数据\ntags: 日本\ndate: 2018-12-26 21:26:15\ncategories: 经济\n---\nJapan Economy Data\n<!-- more -->\n![日本近几年经济数据](Japan Economy Data/japan_economy_data.jpg)\n\n你看到了什么？","slug":"Japan Economy Data","published":1,"updated":"2019-04-21T04:06:12.844Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jy000gfbs6eplpop4h","content":"<p>Japan Economy Data</p>\n<a id=\"more\"></a>\n<p>![日本近几年经济数据](Japan Economy Data/japan_economy_data.jpg)</p>\n<p>你看到了什么？</p>\n","site":{"data":{}},"excerpt":"<p>Japan Economy Data</p>","more":"<p>![日本近几年经济数据](Japan Economy Data/japan_economy_data.jpg)</p>\n<p>你看到了什么？</p>"},{"title":"MVC设计模式","date":"2019-09-15T14:03:25.000Z","notebook":"笔记","_content":"\n总结一下MVC(Model, View, Controller)设计模式：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MVC (Model View Controler)本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据你可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。 \n\n![MVC](MVC设计模式/mvc.png)\n\n<!-- more -->\n\n# 1.视图 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#0099ff><b>视图是用户看到并与之交互的界面（它可以包括一些可以显示数据信息的页面，或者展示形式。例如jsp，html，asp，php）</b></font>。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。 \n\n# 2.模型 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#0099ff><b>模型表示企业数据和业务规则（可以说就是后端接口，用于业务处理）</b></font>。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 \n\n# 3.控制器 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#0099ff><b>控制器接受用户的输入并调用模型和视图去完成用户的需求（接受客户发送的请求，根据请求调用所对应的接口，然后模型业务处理后返回的数据，由控制器决定调用那个View展示）</b></font>。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们总结MVC的处理过程，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。 \n\n\n\n- - -\nMaking English as your working language.","source":"_posts/MVC设计模式.md","raw":"---\ntitle: MVC设计模式\ndate: 2019-09-15 22:03:25\ntags: [MVC,设计模式]\ncategories: 程序设计\nnotebook: 笔记\n---\n\n总结一下MVC(Model, View, Controller)设计模式：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MVC (Model View Controler)本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据你可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。 \n\n![MVC](MVC设计模式/mvc.png)\n\n<!-- more -->\n\n# 1.视图 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#0099ff><b>视图是用户看到并与之交互的界面（它可以包括一些可以显示数据信息的页面，或者展示形式。例如jsp，html，asp，php）</b></font>。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services. \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。 \n\n# 2.模型 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#0099ff><b>模型表示企业数据和业务规则（可以说就是后端接口，用于业务处理）</b></font>。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 \n\n# 3.控制器 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=#0099ff><b>控制器接受用户的输入并调用模型和视图去完成用户的需求（接受客户发送的请求，根据请求调用所对应的接口，然后模型业务处理后返回的数据，由控制器决定调用那个View展示）</b></font>。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。 \n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们总结MVC的处理过程，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。 \n\n\n\n- - -\nMaking English as your working language.","slug":"MVC设计模式","published":1,"updated":"2019-09-15T14:13:37.707Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0jz000hfbs6qtuxt39o","content":"<p>总结一下MVC(Model, View, Controller)设计模式：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MVC (Model View Controler)本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据你可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。 </p>\n<p><img src=\"/2019/09/15/MVC设计模式/mvc.png\" alt=\"MVC\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-视图\"><a href=\"#1-视图\" class=\"headerlink\" title=\"1.视图\"></a>1.视图</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#0099ff\"><b>视图是用户看到并与之交互的界面（它可以包括一些可以显示数据信息的页面，或者展示形式。例如jsp，html，asp，php）</b></font>。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services. </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。 </p>\n<h1 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2.模型\"></a>2.模型</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#0099ff\"><b>模型表示企业数据和业务规则（可以说就是后端接口，用于业务处理）</b></font>。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 </p>\n<h1 id=\"3-控制器\"><a href=\"#3-控制器\" class=\"headerlink\" title=\"3.控制器\"></a>3.控制器</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#0099ff\"><b>控制器接受用户的输入并调用模型和视图去完成用户的需求（接受客户发送的请求，根据请求调用所对应的接口，然后模型业务处理后返回的数据，由控制器决定调用那个View展示）</b></font>。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们总结MVC的处理过程，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。 </p>\n<hr>\n<p>Making English as your working language.</p>\n","site":{"data":{}},"excerpt":"<p>总结一下MVC(Model, View, Controller)设计模式：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;MVC (Model View Controler)本来是存在于Desktop程序中的，M是指数据模型，V是指用户界面，C则是控制器。使用MVC的目的是将M和V的实现代码分离，从而使同一个程序可以使用不同的表现形式。比如一批统计数据你可以分别用柱状图、饼图来表示。C存在的目的则是确保M和V的同步，一旦M改变，V应该同步更新。 </p>\n<p><img src=\"/2019/09/15/MVC设计模式/mvc.png\" alt=\"MVC\"></p>","more":"<h1 id=\"1-视图\"><a href=\"#1-视图\" class=\"headerlink\" title=\"1.视图\"></a>1.视图</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#0099ff\"><b>视图是用户看到并与之交互的界面（它可以包括一些可以显示数据信息的页面，或者展示形式。例如jsp，html，asp，php）</b></font>。对老式的Web应用程序来说，视图就是由HTML元素组成的界面，在新式的Web应用程序中，HTML依旧在视图中扮演着重要的角色，但一些新的技术已层出不穷，它们包括Macromedia Flash和象XHTML，XML/XSL，WML等一些标识语言和Web services. </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如何处理应用程序的界面变得越来越有挑战性。MVC一个大的好处是它能为你的应用程序处理很多不同的视图。在视图中其实没有真正的处理发生，不管这些数据是联机存储的还是一个雇员列表，作为视图来讲，它只是作为一种输出数据并允许用户操纵的方式。 </p>\n<h1 id=\"2-模型\"><a href=\"#2-模型\" class=\"headerlink\" title=\"2.模型\"></a>2.模型</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#0099ff\"><b>模型表示企业数据和业务规则（可以说就是后端接口，用于业务处理）</b></font>。在MVC的三个部件中，模型拥有最多的处理任务。例如它可能用象EJBs和ColdFusion Components这样的构件对象来处理数据库。被模型返回的数据是中立的，就是说模型与数据格式无关，这样一个模型能为多个视图提供数据。由于应用于模型的代码只需写一次就可以被多个视图重用，所以减少了代码的重复性。 </p>\n<h1 id=\"3-控制器\"><a href=\"#3-控制器\" class=\"headerlink\" title=\"3.控制器\"></a>3.控制器</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<font color=\"#0099ff\"><b>控制器接受用户的输入并调用模型和视图去完成用户的需求（接受客户发送的请求，根据请求调用所对应的接口，然后模型业务处理后返回的数据，由控制器决定调用那个View展示）</b></font>。所以当单击Web页面中的超链接和发送HTML表单时，控制器本身不输出任何东西和做任何处理。它只是接收请求并决定调用哪个模型构件去处理请求，然后用确定用哪个视图来显示模型处理返回的数据。 </p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;现在我们总结MVC的处理过程，首先控制器接收用户的请求，并决定应该调用哪个模型来进行处理，然后模型用业务逻辑来处理用户的请求并返回数据，最后控制器用相应的视图格式化模型返回的数据，并通过表示层呈现给用户。 </p>\n<hr>\n<p>Making English as your working language.</p>"},{"title":"P2P（PeerToPeer）网络原理","date":"2019-09-18T15:47:58.000Z","notebook":"区块链","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在研究P2P技术，奈何相关资料不多，自己琢磨了一下，分享一下学习P2P的一些原理, 以及如何打造一个P2P聊天应用。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里指的P2P是指peer to peer， 点对点的技术， 每个客户端都是服务端，没有中心服务器，不是websocket针对某个connection推送消息。\n\n![peer2peer](P2P（PeerToPeer）网络原理/peer2peer.jpeg)\n\n<!-- more -->\n\n# 一、技术要点\n- udp协议\n- 节点之间的建立，连接和广播\n- 内网穿透，如何能让两个处在内网的节点，相互发现自己的存在，并且建立通信\n\n# 二、原理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先解决的是内网穿透的问题，常见的底层协议tcp，udp，他们各自有优缺点，简单说明一下。 tcp：需要处理粘包问题，双工流通道，是可靠的链接。 udp： 每次发送的都是数据包，没有粘包问题，但是连接不可靠，只能传输少量数据。更加详细的请Google\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里选择udp协议，简单一些。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再下来是内网穿透，先说结论： 两个处于不同内部网络的节点，永远无法发现他们之间的相互存在，你就算是想顺着网线过去打他都不行。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有的内网穿透原理无外乎需要一个有公网ip的中介服务器，包括虚拟货币像比特币之类的，所以首先要有一个创世节点\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在NodeJS中，创建udp服务也很简单\n```\nconst dgram = require(\"dgram\");\nconst udp = dgram.createSocket(\"udp4\");\nudp.bind(1090, callback)\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把服务部署要公网，那么其他所有的节点都能访问，通过中转服务器，能够使得两个节点可以建立连接\n\n![node](P2P（PeerToPeer）网络原理/node.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们是要建立这样的P2P网络\n\n![p2p_network](P2P（PeerToPeer）网络原理/p2p_network.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如现在只有3个节点： <b>创世节点, B节点, C节点</b>， 创世节点有公网IP\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我用对话的形式，阐述他们建立链接的过程:\n\n>B节点: hey，创世节点，我要加入到P2P网络里面，告诉其他兄弟，我来了 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点 其他节点: 刚刚收到来自 \"创世节点\"的通知，有个fresh meet加入网络了，叫做 “B”\n\n… 至此，所有人都知道了B节点加入了网络，里面记载着B节点的相关信息，包括IP地址，包括udp端口号\n\n此时C节点也要加入网络，并且想要和B节点对话:\n\n>C节点: hey，创世节点，我要加入到P2P网络里面，并且我要和B对话 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点，顺便看看有没有B这个节点 其他节点: 刚刚收到来自 \"创世节点\"的通知，有个fresh meet加入网络了，叫做 “C”，你们也看看有没有B这个节点 其他节点2: 收到通知，听说一个叫做C的节点在找一个B节点，我这里有它的信息，ip是xxxx.xxxx.xxx.xxxx, 端口10086 B节点: 有个C的家伙(ip: xxxx.xxxx.xxxx.xxxx, 端口1000)要找我\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这里，B获取到了C的信息，包括IP和端口，C也拿到了B的信息.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是，他们两个就可以建立通信。消息流: B <----> C. 中间不经过任何服务器\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用一张图来形容:\n\n![p2p_new](P2P（PeerToPeer）网络原理/p2p_new.jpg)\n\n# 三、总结\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在设计中，每个节点的功能都是一样的。如果需要加入到网络中，不一定跟创世节点链接\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设已存在的节点: 创世节点，A、B、C节点，此时有个D节点想要加入到网络。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么D节点不一定非得链接到创世节点，可以链接到A、B、C中的任意一个节点，然后该节点再广播给其他节点说\"Hey, 有个新人叫做D的加入了网络\"。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样所有人都知道，有个叫做D的节点存在，你可以和它通信，同时D节点和会同步已存在的节点。这样D节点也知道了其他节点的存在了。\n\n\n\n- - -\n找到自己感兴趣的事情，然后100%投入。","source":"_posts/P2P（PeerToPeer）网络原理.md","raw":"---\ntitle: P2P（PeerToPeer）网络原理\ndate: 2019-09-18 23:47:58\ntags: P2P网络\ncategories: 区块链\nnotebook: 区块链\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在研究P2P技术，奈何相关资料不多，自己琢磨了一下，分享一下学习P2P的一些原理, 以及如何打造一个P2P聊天应用。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里指的P2P是指peer to peer， 点对点的技术， 每个客户端都是服务端，没有中心服务器，不是websocket针对某个connection推送消息。\n\n![peer2peer](P2P（PeerToPeer）网络原理/peer2peer.jpeg)\n\n<!-- more -->\n\n# 一、技术要点\n- udp协议\n- 节点之间的建立，连接和广播\n- 内网穿透，如何能让两个处在内网的节点，相互发现自己的存在，并且建立通信\n\n# 二、原理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先解决的是内网穿透的问题，常见的底层协议tcp，udp，他们各自有优缺点，简单说明一下。 tcp：需要处理粘包问题，双工流通道，是可靠的链接。 udp： 每次发送的都是数据包，没有粘包问题，但是连接不可靠，只能传输少量数据。更加详细的请Google\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里选择udp协议，简单一些。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再下来是内网穿透，先说结论： 两个处于不同内部网络的节点，永远无法发现他们之间的相互存在，你就算是想顺着网线过去打他都不行。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有的内网穿透原理无外乎需要一个有公网ip的中介服务器，包括虚拟货币像比特币之类的，所以首先要有一个创世节点\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在NodeJS中，创建udp服务也很简单\n```\nconst dgram = require(\"dgram\");\nconst udp = dgram.createSocket(\"udp4\");\nudp.bind(1090, callback)\n```\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把服务部署要公网，那么其他所有的节点都能访问，通过中转服务器，能够使得两个节点可以建立连接\n\n![node](P2P（PeerToPeer）网络原理/node.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们是要建立这样的P2P网络\n\n![p2p_network](P2P（PeerToPeer）网络原理/p2p_network.jpg)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如现在只有3个节点： <b>创世节点, B节点, C节点</b>， 创世节点有公网IP\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我用对话的形式，阐述他们建立链接的过程:\n\n>B节点: hey，创世节点，我要加入到P2P网络里面，告诉其他兄弟，我来了 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点 其他节点: 刚刚收到来自 \"创世节点\"的通知，有个fresh meet加入网络了，叫做 “B”\n\n… 至此，所有人都知道了B节点加入了网络，里面记载着B节点的相关信息，包括IP地址，包括udp端口号\n\n此时C节点也要加入网络，并且想要和B节点对话:\n\n>C节点: hey，创世节点，我要加入到P2P网络里面，并且我要和B对话 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点，顺便看看有没有B这个节点 其他节点: 刚刚收到来自 \"创世节点\"的通知，有个fresh meet加入网络了，叫做 “C”，你们也看看有没有B这个节点 其他节点2: 收到通知，听说一个叫做C的节点在找一个B节点，我这里有它的信息，ip是xxxx.xxxx.xxx.xxxx, 端口10086 B节点: 有个C的家伙(ip: xxxx.xxxx.xxxx.xxxx, 端口1000)要找我\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这里，B获取到了C的信息，包括IP和端口，C也拿到了B的信息.\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是，他们两个就可以建立通信。消息流: B <----> C. 中间不经过任何服务器\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用一张图来形容:\n\n![p2p_new](P2P（PeerToPeer）网络原理/p2p_new.jpg)\n\n# 三、总结\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在设计中，每个节点的功能都是一样的。如果需要加入到网络中，不一定跟创世节点链接\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设已存在的节点: 创世节点，A、B、C节点，此时有个D节点想要加入到网络。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么D节点不一定非得链接到创世节点，可以链接到A、B、C中的任意一个节点，然后该节点再广播给其他节点说\"Hey, 有个新人叫做D的加入了网络\"。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样所有人都知道，有个叫做D的节点存在，你可以和它通信，同时D节点和会同步已存在的节点。这样D节点也知道了其他节点的存在了。\n\n\n\n- - -\n找到自己感兴趣的事情，然后100%投入。","slug":"P2P（PeerToPeer）网络原理","published":1,"updated":"2019-09-19T14:33:43.505Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k0000ifbs63lcm8tfm","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在研究P2P技术，奈何相关资料不多，自己琢磨了一下，分享一下学习P2P的一些原理, 以及如何打造一个P2P聊天应用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里指的P2P是指peer to peer， 点对点的技术， 每个客户端都是服务端，没有中心服务器，不是websocket针对某个connection推送消息。</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/peer2peer.jpeg\" alt=\"peer2peer\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"一、技术要点\"><a href=\"#一、技术要点\" class=\"headerlink\" title=\"一、技术要点\"></a>一、技术要点</h1><ul>\n<li>udp协议</li>\n<li>节点之间的建立，连接和广播</li>\n<li>内网穿透，如何能让两个处在内网的节点，相互发现自己的存在，并且建立通信</li>\n</ul>\n<h1 id=\"二、原理\"><a href=\"#二、原理\" class=\"headerlink\" title=\"二、原理\"></a>二、原理</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先解决的是内网穿透的问题，常见的底层协议tcp，udp，他们各自有优缺点，简单说明一下。 tcp：需要处理粘包问题，双工流通道，是可靠的链接。 udp： 每次发送的都是数据包，没有粘包问题，但是连接不可靠，只能传输少量数据。更加详细的请Google</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里选择udp协议，简单一些。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再下来是内网穿透，先说结论： 两个处于不同内部网络的节点，永远无法发现他们之间的相互存在，你就算是想顺着网线过去打他都不行。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有的内网穿透原理无外乎需要一个有公网ip的中介服务器，包括虚拟货币像比特币之类的，所以首先要有一个创世节点</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在NodeJS中，创建udp服务也很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const dgram = require(&quot;dgram&quot;);</span><br><span class=\"line\">const udp = dgram.createSocket(&quot;udp4&quot;);</span><br><span class=\"line\">udp.bind(1090, callback)</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把服务部署要公网，那么其他所有的节点都能访问，通过中转服务器，能够使得两个节点可以建立连接</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/node.jpg\" alt=\"node\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们是要建立这样的P2P网络</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/p2p_network.jpg\" alt=\"p2p_network\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如现在只有3个节点： <b>创世节点, B节点, C节点</b>， 创世节点有公网IP</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我用对话的形式，阐述他们建立链接的过程:</p>\n<blockquote>\n<p>B节点: hey，创世节点，我要加入到P2P网络里面，告诉其他兄弟，我来了 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点 其他节点: 刚刚收到来自 “创世节点”的通知，有个fresh meet加入网络了，叫做 “B”</p>\n</blockquote>\n<p>… 至此，所有人都知道了B节点加入了网络，里面记载着B节点的相关信息，包括IP地址，包括udp端口号</p>\n<p>此时C节点也要加入网络，并且想要和B节点对话:</p>\n<blockquote>\n<p>C节点: hey，创世节点，我要加入到P2P网络里面，并且我要和B对话 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点，顺便看看有没有B这个节点 其他节点: 刚刚收到来自 “创世节点”的通知，有个fresh meet加入网络了，叫做 “C”，你们也看看有没有B这个节点 其他节点2: 收到通知，听说一个叫做C的节点在找一个B节点，我这里有它的信息，ip是xxxx.xxxx.xxx.xxxx, 端口10086 B节点: 有个C的家伙(ip: xxxx.xxxx.xxxx.xxxx, 端口1000)要找我</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这里，B获取到了C的信息，包括IP和端口，C也拿到了B的信息.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是，他们两个就可以建立通信。消息流: B &lt;—-&gt; C. 中间不经过任何服务器</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用一张图来形容:</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/p2p_new.jpg\" alt=\"p2p_new\"></p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在设计中，每个节点的功能都是一样的。如果需要加入到网络中，不一定跟创世节点链接</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设已存在的节点: 创世节点，A、B、C节点，此时有个D节点想要加入到网络。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么D节点不一定非得链接到创世节点，可以链接到A、B、C中的任意一个节点，然后该节点再广播给其他节点说”Hey, 有个新人叫做D的加入了网络”。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样所有人都知道，有个叫做D的节点存在，你可以和它通信，同时D节点和会同步已存在的节点。这样D节点也知道了其他节点的存在了。</p>\n<hr>\n<p>找到自己感兴趣的事情，然后100%投入。</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最近在研究P2P技术，奈何相关资料不多，自己琢磨了一下，分享一下学习P2P的一些原理, 以及如何打造一个P2P聊天应用。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里指的P2P是指peer to peer， 点对点的技术， 每个客户端都是服务端，没有中心服务器，不是websocket针对某个connection推送消息。</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/peer2peer.jpeg\" alt=\"peer2peer\"></p>","more":"<h1 id=\"一、技术要点\"><a href=\"#一、技术要点\" class=\"headerlink\" title=\"一、技术要点\"></a>一、技术要点</h1><ul>\n<li>udp协议</li>\n<li>节点之间的建立，连接和广播</li>\n<li>内网穿透，如何能让两个处在内网的节点，相互发现自己的存在，并且建立通信</li>\n</ul>\n<h1 id=\"二、原理\"><a href=\"#二、原理\" class=\"headerlink\" title=\"二、原理\"></a>二、原理</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先解决的是内网穿透的问题，常见的底层协议tcp，udp，他们各自有优缺点，简单说明一下。 tcp：需要处理粘包问题，双工流通道，是可靠的链接。 udp： 每次发送的都是数据包，没有粘包问题，但是连接不可靠，只能传输少量数据。更加详细的请Google</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里选择udp协议，简单一些。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再下来是内网穿透，先说结论： 两个处于不同内部网络的节点，永远无法发现他们之间的相互存在，你就算是想顺着网线过去打他都不行。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;所有的内网穿透原理无外乎需要一个有公网ip的中介服务器，包括虚拟货币像比特币之类的，所以首先要有一个创世节点</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在NodeJS中，创建udp服务也很简单</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const dgram = require(&quot;dgram&quot;);</span><br><span class=\"line\">const udp = dgram.createSocket(&quot;udp4&quot;);</span><br><span class=\"line\">udp.bind(1090, callback)</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;把服务部署要公网，那么其他所有的节点都能访问，通过中转服务器，能够使得两个节点可以建立连接</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/node.jpg\" alt=\"node\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们是要建立这样的P2P网络</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/p2p_network.jpg\" alt=\"p2p_network\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假如现在只有3个节点： <b>创世节点, B节点, C节点</b>， 创世节点有公网IP</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我用对话的形式，阐述他们建立链接的过程:</p>\n<blockquote>\n<p>B节点: hey，创世节点，我要加入到P2P网络里面，告诉其他兄弟，我来了 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点 其他节点: 刚刚收到来自 “创世节点”的通知，有个fresh meet加入网络了，叫做 “B”</p>\n</blockquote>\n<p>… 至此，所有人都知道了B节点加入了网络，里面记载着B节点的相关信息，包括IP地址，包括udp端口号</p>\n<p>此时C节点也要加入网络，并且想要和B节点对话:</p>\n<blockquote>\n<p>C节点: hey，创世节点，我要加入到P2P网络里面，并且我要和B对话 创世节点: 兄弟们，刚刚有个叫做B的节点加入网络了，你们也去告诉其他节点，顺便看看有没有B这个节点 其他节点: 刚刚收到来自 “创世节点”的通知，有个fresh meet加入网络了，叫做 “C”，你们也看看有没有B这个节点 其他节点2: 收到通知，听说一个叫做C的节点在找一个B节点，我这里有它的信息，ip是xxxx.xxxx.xxx.xxxx, 端口10086 B节点: 有个C的家伙(ip: xxxx.xxxx.xxxx.xxxx, 端口1000)要找我</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;到这里，B获取到了C的信息，包括IP和端口，C也拿到了B的信息.</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是，他们两个就可以建立通信。消息流: B &lt;—-&gt; C. 中间不经过任何服务器</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用一张图来形容:</p>\n<p><img src=\"/2019/09/18/P2P（PeerToPeer）网络原理/p2p_new.jpg\" alt=\"p2p_new\"></p>\n<h1 id=\"三、总结\"><a href=\"#三、总结\" class=\"headerlink\" title=\"三、总结\"></a>三、总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在设计中，每个节点的功能都是一样的。如果需要加入到网络中，不一定跟创世节点链接</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设已存在的节点: 创世节点，A、B、C节点，此时有个D节点想要加入到网络。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么D节点不一定非得链接到创世节点，可以链接到A、B、C中的任意一个节点，然后该节点再广播给其他节点说”Hey, 有个新人叫做D的加入了网络”。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这样所有人都知道，有个叫做D的节点存在，你可以和它通信，同时D节点和会同步已存在的节点。这样D节点也知道了其他节点的存在了。</p>\n<hr>\n<p>找到自己感兴趣的事情，然后100%投入。</p>"},{"title":"Starbucks","date":"2019-05-14T14:50:26.000Z","_content":"\nStarbucks，founded at March 31, 1971. It is an American coffee company and coffeehouse chain.\n\n<!-- more -->\n![Starbucks](Starbucks/starbucks.jpeg)\n\n2018年全球员工总数：29.1万\n\n在欧洲的门店数量：\n\n英国：1,030\n土耳其：470\n法国：175\n德国：168\n西班牙：154\n俄罗斯：135\n荷兰：106\n爱尔兰：82\n波兰：72\n瑞士：65\n罗马尼亚：46\n捷克共和国：40\n希腊：31\n匈牙利：28\n比利时：26\n挪威：23\n葡萄牙：23\n奥地利：19\n\n（星巴克）\n\n星巴克，一个卖咖啡的，不仅给了我们咖啡、空间，就业也是它对社会的价值。\n","source":"_posts/Starbucks.md","raw":"---\ntitle: Starbucks\ndate: 2019-05-14 22:50:26\ntags: Starbucks\ncategories: 世界排名\n---\n\nStarbucks，founded at March 31, 1971. It is an American coffee company and coffeehouse chain.\n\n<!-- more -->\n![Starbucks](Starbucks/starbucks.jpeg)\n\n2018年全球员工总数：29.1万\n\n在欧洲的门店数量：\n\n英国：1,030\n土耳其：470\n法国：175\n德国：168\n西班牙：154\n俄罗斯：135\n荷兰：106\n爱尔兰：82\n波兰：72\n瑞士：65\n罗马尼亚：46\n捷克共和国：40\n希腊：31\n匈牙利：28\n比利时：26\n挪威：23\n葡萄牙：23\n奥地利：19\n\n（星巴克）\n\n星巴克，一个卖咖啡的，不仅给了我们咖啡、空间，就业也是它对社会的价值。\n","slug":"Starbucks","published":1,"updated":"2019-05-14T14:58:25.060Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k1000jfbs6nkbube0o","content":"<p>Starbucks，founded at March 31, 1971. It is an American coffee company and coffeehouse chain.</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/05/14/Starbucks/starbucks.jpeg\" alt=\"Starbucks\"></p>\n<p>2018年全球员工总数：29.1万</p>\n<p>在欧洲的门店数量：</p>\n<p>英国：1,030<br>土耳其：470<br>法国：175<br>德国：168<br>西班牙：154<br>俄罗斯：135<br>荷兰：106<br>爱尔兰：82<br>波兰：72<br>瑞士：65<br>罗马尼亚：46<br>捷克共和国：40<br>希腊：31<br>匈牙利：28<br>比利时：26<br>挪威：23<br>葡萄牙：23<br>奥地利：19</p>\n<p>（星巴克）</p>\n<p>星巴克，一个卖咖啡的，不仅给了我们咖啡、空间，就业也是它对社会的价值。</p>\n","site":{"data":{}},"excerpt":"<p>Starbucks，founded at March 31, 1971. It is an American coffee company and coffeehouse chain.</p>","more":"<p><img src=\"/2019/05/14/Starbucks/starbucks.jpeg\" alt=\"Starbucks\"></p>\n<p>2018年全球员工总数：29.1万</p>\n<p>在欧洲的门店数量：</p>\n<p>英国：1,030<br>土耳其：470<br>法国：175<br>德国：168<br>西班牙：154<br>俄罗斯：135<br>荷兰：106<br>爱尔兰：82<br>波兰：72<br>瑞士：65<br>罗马尼亚：46<br>捷克共和国：40<br>希腊：31<br>匈牙利：28<br>比利时：26<br>挪威：23<br>葡萄牙：23<br>奥地利：19</p>\n<p>（星巴克）</p>\n<p>星巴克，一个卖咖啡的，不仅给了我们咖啡、空间，就业也是它对社会的价值。</p>"},{"title":"The world's Top 100 Airports for 2018","date":"2018-12-27T13:26:15.000Z","_content":"The world's Top 100 Airports for 2018, as voted for by air travellers around the world during the 2017/2018 survey period\nPlease note that over 500 airports were covered in the survey but we only feature the top 100 listing here (this listing may not be reproduced without the consent of Skytrax).\n<!-- more -->\nas blow:\n\n1 Singapore Changi 1 2017\n2 Seoul Incheon 3 2017\n3 Tokyo Haneda 2 2017\n4 Hong Kong 5 2017\n5 Doha Hamad 6 2017\n6 Munich 4 2017\n7 Centrair Nagoya 7 2017\n8 London Heathrow 9 2017\n9 Zurich 8 2017\n10 Frankfurt 10 2017\n\n15 Taiwan Taoyuan 21 2017\n\n18 Shanghai Hongqiao 18 2017\n\n28 London City 36 2017\n\n33 Beijing Capital 25 2017\n\n37 Paris CDG 32 2017\n\n51 San Francisco 39 2017","source":"_posts/The world's Top 100 Airports for 2018.md","raw":"---\ntitle: The world's Top 100 Airports for 2018\ntags: Airports\ndate: 2018-12-27 21:26:15\ncategories: 世界排名\n---\nThe world's Top 100 Airports for 2018, as voted for by air travellers around the world during the 2017/2018 survey period\nPlease note that over 500 airports were covered in the survey but we only feature the top 100 listing here (this listing may not be reproduced without the consent of Skytrax).\n<!-- more -->\nas blow:\n\n1 Singapore Changi 1 2017\n2 Seoul Incheon 3 2017\n3 Tokyo Haneda 2 2017\n4 Hong Kong 5 2017\n5 Doha Hamad 6 2017\n6 Munich 4 2017\n7 Centrair Nagoya 7 2017\n8 London Heathrow 9 2017\n9 Zurich 8 2017\n10 Frankfurt 10 2017\n\n15 Taiwan Taoyuan 21 2017\n\n18 Shanghai Hongqiao 18 2017\n\n28 London City 36 2017\n\n33 Beijing Capital 25 2017\n\n37 Paris CDG 32 2017\n\n51 San Francisco 39 2017","slug":"The world's Top 100 Airports for 2018","published":1,"updated":"2019-04-21T04:14:21.698Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k2000kfbs6wxd11uv5","content":"<p>The world’s Top 100 Airports for 2018, as voted for by air travellers around the world during the 2017/2018 survey period<br>Please note that over 500 airports were covered in the survey but we only feature the top 100 listing here (this listing may not be reproduced without the consent of Skytrax).</p>\n<a id=\"more\"></a>\n<p>as blow:</p>\n<p>1 Singapore Changi 1 2017<br>2 Seoul Incheon 3 2017<br>3 Tokyo Haneda 2 2017<br>4 Hong Kong 5 2017<br>5 Doha Hamad 6 2017<br>6 Munich 4 2017<br>7 Centrair Nagoya 7 2017<br>8 London Heathrow 9 2017<br>9 Zurich 8 2017<br>10 Frankfurt 10 2017</p>\n<p>15 Taiwan Taoyuan 21 2017</p>\n<p>18 Shanghai Hongqiao 18 2017</p>\n<p>28 London City 36 2017</p>\n<p>33 Beijing Capital 25 2017</p>\n<p>37 Paris CDG 32 2017</p>\n<p>51 San Francisco 39 2017</p>\n","site":{"data":{}},"excerpt":"<p>The world’s Top 100 Airports for 2018, as voted for by air travellers around the world during the 2017/2018 survey period<br>Please note that over 500 airports were covered in the survey but we only feature the top 100 listing here (this listing may not be reproduced without the consent of Skytrax).</p>","more":"<p>as blow:</p>\n<p>1 Singapore Changi 1 2017<br>2 Seoul Incheon 3 2017<br>3 Tokyo Haneda 2 2017<br>4 Hong Kong 5 2017<br>5 Doha Hamad 6 2017<br>6 Munich 4 2017<br>7 Centrair Nagoya 7 2017<br>8 London Heathrow 9 2017<br>9 Zurich 8 2017<br>10 Frankfurt 10 2017</p>\n<p>15 Taiwan Taoyuan 21 2017</p>\n<p>18 Shanghai Hongqiao 18 2017</p>\n<p>28 London City 36 2017</p>\n<p>33 Beijing Capital 25 2017</p>\n<p>37 Paris CDG 32 2017</p>\n<p>51 San Francisco 39 2017</p>"},{"title":"2019世界上最著名的运动员","date":"2018-12-28T13:26:15.000Z","_content":"The world’s most famous athletes, 2019.\n2019世界上最著名的运动员：\n<!-- more -->\n```\n排名    人名        中文名\t\t\t    职业\t\t\t就职国家\t\t\t国籍\t\t\n1       Ronaldo\t\t罗纳尔多\t\t\t足球\t\t\t西班牙\t\t\t葡萄牙\n2\t\tLeBron\t\t勒布朗·詹姆斯\t\t篮球\t\t\t🇺🇸美国\t\t\t美国\n3\t\tMessi\t\t里奥·梅西\t\t\t足球\t\t\t🇦🇷阿根廷\t\t\t阿根廷\n4\t\tNeymar\t\t内马尔·达席尔瓦\t    足球\t\t\t法国\t\t\t\t巴西\n5\t\tMcGregor\t康纳·麦格雷戈\t\t格斗\t\t\t🇮🇪爱尔兰\t\t\t爱尔兰\n6\t\tFederer\t\t罗杰·费德勒\t\t    网球\t\t\t🇨🇭瑞士\t\t\t瑞士\n7\t\tKohli\t\t维拉·哥利\t\t\t板球\t\t\t🇮🇳印度\t\t\t印度\n8\t\tNadal\t\t拉菲尔·纳达尔\t\t网球\t\t\t🇪🇸西班牙\t\t\t西班牙\n12\t\tPogba\t\t保罗·博格巴\t\t    足球\t\t\t🇫🇷法国\t\t\t几内亚\n14\t\tMbappe\t\t姆巴佩\t\t\t    足球\t\t\t🇫🇷法国\t\t\t法国\n17\t\tSerena\t\t塞雷娜·威廉姆斯\t    网球\t\t\t🇺🇸美国\t\t\t美国\n19\t\tÖzil\t\t梅苏特·厄齐尔\t\t足球\t\t\t🇩🇪德国\t\t\t德国\n21\t\t󠁧Hamilton\t  理查德·汉密尔顿\t    篮球\t\t\t🇺🇸美国\t\t\t美国\n30\t\tSalah\t\t穆罕默德·萨拉赫\t    足球\t\t\t🇪🇬埃及\t\t\t埃及\n33\t\tBale\t\t加雷斯·贝尔\t\t    足球\t\t\t威尓士\t\t\t威尓士\n38\t\tRamos\t\t塞尔吉奥·拉莫斯\t    足球\t\t\t🇪🇸西班牙\t\t\t西班牙\n41\t\tNinja\t\tNinja\t            电竞\t\t\t🇺🇸美国\t\t\t美国\t\t\n58\t\tBenzema\t\t卡里姆·本泽马\t\t足球\t\t\t🇫🇷法国\t\t\t法国\n73\t\tKroos\t\t托尼·克罗斯\t\t    足球\t\t\t🇩🇪德国\t\t\t德国\n```","source":"_posts/The world’s most famous athletes, 2019.md","raw":"---\ntitle: 2019世界上最著名的运动员\ntags: 运动员\ndate: 2018-12-28 21:26:15\ncategories: 世界排名\n---\nThe world’s most famous athletes, 2019.\n2019世界上最著名的运动员：\n<!-- more -->\n```\n排名    人名        中文名\t\t\t    职业\t\t\t就职国家\t\t\t国籍\t\t\n1       Ronaldo\t\t罗纳尔多\t\t\t足球\t\t\t西班牙\t\t\t葡萄牙\n2\t\tLeBron\t\t勒布朗·詹姆斯\t\t篮球\t\t\t🇺🇸美国\t\t\t美国\n3\t\tMessi\t\t里奥·梅西\t\t\t足球\t\t\t🇦🇷阿根廷\t\t\t阿根廷\n4\t\tNeymar\t\t内马尔·达席尔瓦\t    足球\t\t\t法国\t\t\t\t巴西\n5\t\tMcGregor\t康纳·麦格雷戈\t\t格斗\t\t\t🇮🇪爱尔兰\t\t\t爱尔兰\n6\t\tFederer\t\t罗杰·费德勒\t\t    网球\t\t\t🇨🇭瑞士\t\t\t瑞士\n7\t\tKohli\t\t维拉·哥利\t\t\t板球\t\t\t🇮🇳印度\t\t\t印度\n8\t\tNadal\t\t拉菲尔·纳达尔\t\t网球\t\t\t🇪🇸西班牙\t\t\t西班牙\n12\t\tPogba\t\t保罗·博格巴\t\t    足球\t\t\t🇫🇷法国\t\t\t几内亚\n14\t\tMbappe\t\t姆巴佩\t\t\t    足球\t\t\t🇫🇷法国\t\t\t法国\n17\t\tSerena\t\t塞雷娜·威廉姆斯\t    网球\t\t\t🇺🇸美国\t\t\t美国\n19\t\tÖzil\t\t梅苏特·厄齐尔\t\t足球\t\t\t🇩🇪德国\t\t\t德国\n21\t\t󠁧Hamilton\t  理查德·汉密尔顿\t    篮球\t\t\t🇺🇸美国\t\t\t美国\n30\t\tSalah\t\t穆罕默德·萨拉赫\t    足球\t\t\t🇪🇬埃及\t\t\t埃及\n33\t\tBale\t\t加雷斯·贝尔\t\t    足球\t\t\t威尓士\t\t\t威尓士\n38\t\tRamos\t\t塞尔吉奥·拉莫斯\t    足球\t\t\t🇪🇸西班牙\t\t\t西班牙\n41\t\tNinja\t\tNinja\t            电竞\t\t\t🇺🇸美国\t\t\t美国\t\t\n58\t\tBenzema\t\t卡里姆·本泽马\t\t足球\t\t\t🇫🇷法国\t\t\t法国\n73\t\tKroos\t\t托尼·克罗斯\t\t    足球\t\t\t🇩🇪德国\t\t\t德国\n```","slug":"The world’s most famous athletes, 2019","published":1,"updated":"2019-04-21T03:15:44.346Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k3000lfbs6bylq73rh","content":"<p>The world’s most famous athletes, 2019.<br>2019世界上最著名的运动员：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排名    人名        中文名\t\t\t    职业\t\t\t就职国家\t\t\t国籍\t\t</span><br><span class=\"line\">1       Ronaldo\t\t罗纳尔多\t\t\t足球\t\t\t西班牙\t\t\t葡萄牙</span><br><span class=\"line\">2\t\tLeBron\t\t勒布朗·詹姆斯\t\t篮球\t\t\t🇺🇸美国\t\t\t美国</span><br><span class=\"line\">3\t\tMessi\t\t里奥·梅西\t\t\t足球\t\t\t🇦🇷阿根廷\t\t\t阿根廷</span><br><span class=\"line\">4\t\tNeymar\t\t内马尔·达席尔瓦\t    足球\t\t\t法国\t\t\t\t巴西</span><br><span class=\"line\">5\t\tMcGregor\t康纳·麦格雷戈\t\t格斗\t\t\t🇮🇪爱尔兰\t\t\t爱尔兰</span><br><span class=\"line\">6\t\tFederer\t\t罗杰·费德勒\t\t    网球\t\t\t🇨🇭瑞士\t\t\t瑞士</span><br><span class=\"line\">7\t\tKohli\t\t维拉·哥利\t\t\t板球\t\t\t🇮🇳印度\t\t\t印度</span><br><span class=\"line\">8\t\tNadal\t\t拉菲尔·纳达尔\t\t网球\t\t\t🇪🇸西班牙\t\t\t西班牙</span><br><span class=\"line\">12\t\tPogba\t\t保罗·博格巴\t\t    足球\t\t\t🇫🇷法国\t\t\t几内亚</span><br><span class=\"line\">14\t\tMbappe\t\t姆巴佩\t\t\t    足球\t\t\t🇫🇷法国\t\t\t法国</span><br><span class=\"line\">17\t\tSerena\t\t塞雷娜·威廉姆斯\t    网球\t\t\t🇺🇸美国\t\t\t美国</span><br><span class=\"line\">19\t\tÖzil\t\t梅苏特·厄齐尔\t\t足球\t\t\t🇩🇪德国\t\t\t德国</span><br><span class=\"line\">21\t\t󠁧Hamilton\t  理查德·汉密尔顿\t    篮球\t\t\t🇺🇸美国\t\t\t美国</span><br><span class=\"line\">30\t\tSalah\t\t穆罕默德·萨拉赫\t    足球\t\t\t🇪🇬埃及\t\t\t埃及</span><br><span class=\"line\">33\t\tBale\t\t加雷斯·贝尔\t\t    足球\t\t\t威尓士\t\t\t威尓士</span><br><span class=\"line\">38\t\tRamos\t\t塞尔吉奥·拉莫斯\t    足球\t\t\t🇪🇸西班牙\t\t\t西班牙</span><br><span class=\"line\">41\t\tNinja\t\tNinja\t            电竞\t\t\t🇺🇸美国\t\t\t美国\t\t</span><br><span class=\"line\">58\t\tBenzema\t\t卡里姆·本泽马\t\t足球\t\t\t🇫🇷法国\t\t\t法国</span><br><span class=\"line\">73\t\tKroos\t\t托尼·克罗斯\t\t    足球\t\t\t🇩🇪德国\t\t\t德国</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>The world’s most famous athletes, 2019.<br>2019世界上最著名的运动员：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">排名    人名        中文名\t\t\t    职业\t\t\t就职国家\t\t\t国籍\t\t</span><br><span class=\"line\">1       Ronaldo\t\t罗纳尔多\t\t\t足球\t\t\t西班牙\t\t\t葡萄牙</span><br><span class=\"line\">2\t\tLeBron\t\t勒布朗·詹姆斯\t\t篮球\t\t\t🇺🇸美国\t\t\t美国</span><br><span class=\"line\">3\t\tMessi\t\t里奥·梅西\t\t\t足球\t\t\t🇦🇷阿根廷\t\t\t阿根廷</span><br><span class=\"line\">4\t\tNeymar\t\t内马尔·达席尔瓦\t    足球\t\t\t法国\t\t\t\t巴西</span><br><span class=\"line\">5\t\tMcGregor\t康纳·麦格雷戈\t\t格斗\t\t\t🇮🇪爱尔兰\t\t\t爱尔兰</span><br><span class=\"line\">6\t\tFederer\t\t罗杰·费德勒\t\t    网球\t\t\t🇨🇭瑞士\t\t\t瑞士</span><br><span class=\"line\">7\t\tKohli\t\t维拉·哥利\t\t\t板球\t\t\t🇮🇳印度\t\t\t印度</span><br><span class=\"line\">8\t\tNadal\t\t拉菲尔·纳达尔\t\t网球\t\t\t🇪🇸西班牙\t\t\t西班牙</span><br><span class=\"line\">12\t\tPogba\t\t保罗·博格巴\t\t    足球\t\t\t🇫🇷法国\t\t\t几内亚</span><br><span class=\"line\">14\t\tMbappe\t\t姆巴佩\t\t\t    足球\t\t\t🇫🇷法国\t\t\t法国</span><br><span class=\"line\">17\t\tSerena\t\t塞雷娜·威廉姆斯\t    网球\t\t\t🇺🇸美国\t\t\t美国</span><br><span class=\"line\">19\t\tÖzil\t\t梅苏特·厄齐尔\t\t足球\t\t\t🇩🇪德国\t\t\t德国</span><br><span class=\"line\">21\t\t󠁧Hamilton\t  理查德·汉密尔顿\t    篮球\t\t\t🇺🇸美国\t\t\t美国</span><br><span class=\"line\">30\t\tSalah\t\t穆罕默德·萨拉赫\t    足球\t\t\t🇪🇬埃及\t\t\t埃及</span><br><span class=\"line\">33\t\tBale\t\t加雷斯·贝尔\t\t    足球\t\t\t威尓士\t\t\t威尓士</span><br><span class=\"line\">38\t\tRamos\t\t塞尔吉奥·拉莫斯\t    足球\t\t\t🇪🇸西班牙\t\t\t西班牙</span><br><span class=\"line\">41\t\tNinja\t\tNinja\t            电竞\t\t\t🇺🇸美国\t\t\t美国\t\t</span><br><span class=\"line\">58\t\tBenzema\t\t卡里姆·本泽马\t\t足球\t\t\t🇫🇷法国\t\t\t法国</span><br><span class=\"line\">73\t\tKroos\t\t托尼·克罗斯\t\t    足球\t\t\t🇩🇪德国\t\t\t德国</span><br></pre></td></tr></table></figure>"},{"title":"2018世界医药顶尖大学","date":"2018-12-29T13:26:15.000Z","_content":"Top universities in medicine, 2018.\n2018世界医药顶尖大学：\n<!-- more -->\n排名如下：\n```\n1. Harvard                         \t\t哈佛大学        \t美国\n2. Oxford\t\t\t\t\t\t\t\t牛津大学\t\t\t英国\t\t\t\n3. Cambridge\t\t\t\t\t\t\t剑桥大学\t\t\t英国\n4. Stanford\t\t\t\t\t\t\t\t斯坦福大学\t\t美国\n5. John Hopkins\t\t\t\t\t\t\t约翰·霍普金斯大学\t美国\n6. Karolinska Institutet\t\t\t\t卡罗林斯卡学院\t\t瑞典\n7. Uni of California, LA\t\t\t\t加州大学洛杉矶分校\t美国\n8. Yale\t\t\t\t\t\t\t\t\t耶鲁大学\t\t\t美国\n9. MIT\t\t\t\t\t\t\t\t\t麻省理工学院\t\t美国\n10. University College London\t\t\t伦敦大学学院\t\t英国\n```","source":"_posts/Top universities in medicine, 2018.md","raw":"---\ntitle: 2018世界医药顶尖大学\ntags: 医药大学\ndate: 2018-12-29 21:26:15\ncategories: 世界排名\n---\nTop universities in medicine, 2018.\n2018世界医药顶尖大学：\n<!-- more -->\n排名如下：\n```\n1. Harvard                         \t\t哈佛大学        \t美国\n2. Oxford\t\t\t\t\t\t\t\t牛津大学\t\t\t英国\t\t\t\n3. Cambridge\t\t\t\t\t\t\t剑桥大学\t\t\t英国\n4. Stanford\t\t\t\t\t\t\t\t斯坦福大学\t\t美国\n5. John Hopkins\t\t\t\t\t\t\t约翰·霍普金斯大学\t美国\n6. Karolinska Institutet\t\t\t\t卡罗林斯卡学院\t\t瑞典\n7. Uni of California, LA\t\t\t\t加州大学洛杉矶分校\t美国\n8. Yale\t\t\t\t\t\t\t\t\t耶鲁大学\t\t\t美国\n9. MIT\t\t\t\t\t\t\t\t\t麻省理工学院\t\t美国\n10. University College London\t\t\t伦敦大学学院\t\t英国\n```","slug":"Top universities in medicine, 2018","published":1,"updated":"2019-04-21T03:17:30.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k4000mfbs6qbswg1o0","content":"<p>Top universities in medicine, 2018.<br>2018世界医药顶尖大学：</p>\n<a id=\"more\"></a>\n<p>排名如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Harvard                         \t\t哈佛大学        \t美国</span><br><span class=\"line\">2. Oxford\t\t\t\t\t\t\t\t牛津大学\t\t\t英国\t\t\t</span><br><span class=\"line\">3. Cambridge\t\t\t\t\t\t\t剑桥大学\t\t\t英国</span><br><span class=\"line\">4. Stanford\t\t\t\t\t\t\t\t斯坦福大学\t\t美国</span><br><span class=\"line\">5. John Hopkins\t\t\t\t\t\t\t约翰·霍普金斯大学\t美国</span><br><span class=\"line\">6. Karolinska Institutet\t\t\t\t卡罗林斯卡学院\t\t瑞典</span><br><span class=\"line\">7. Uni of California, LA\t\t\t\t加州大学洛杉矶分校\t美国</span><br><span class=\"line\">8. Yale\t\t\t\t\t\t\t\t\t耶鲁大学\t\t\t美国</span><br><span class=\"line\">9. MIT\t\t\t\t\t\t\t\t\t麻省理工学院\t\t美国</span><br><span class=\"line\">10. University College London\t\t\t伦敦大学学院\t\t英国</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>Top universities in medicine, 2018.<br>2018世界医药顶尖大学：</p>","more":"<p>排名如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. Harvard                         \t\t哈佛大学        \t美国</span><br><span class=\"line\">2. Oxford\t\t\t\t\t\t\t\t牛津大学\t\t\t英国\t\t\t</span><br><span class=\"line\">3. Cambridge\t\t\t\t\t\t\t剑桥大学\t\t\t英国</span><br><span class=\"line\">4. Stanford\t\t\t\t\t\t\t\t斯坦福大学\t\t美国</span><br><span class=\"line\">5. John Hopkins\t\t\t\t\t\t\t约翰·霍普金斯大学\t美国</span><br><span class=\"line\">6. Karolinska Institutet\t\t\t\t卡罗林斯卡学院\t\t瑞典</span><br><span class=\"line\">7. Uni of California, LA\t\t\t\t加州大学洛杉矶分校\t美国</span><br><span class=\"line\">8. Yale\t\t\t\t\t\t\t\t\t耶鲁大学\t\t\t美国</span><br><span class=\"line\">9. MIT\t\t\t\t\t\t\t\t\t麻省理工学院\t\t美国</span><br><span class=\"line\">10. University College London\t\t\t伦敦大学学院\t\t英国</span><br></pre></td></tr></table></figure>"},{"title":"Turkish","date":"2019-05-21T13:46:24.000Z","_content":"\n土耳其，一个横跨欧亚大陆，南临地中海，东南与叙利亚、伊拉克接壤，西临爱琴海，并与希腊以及保加利亚接壤，东部与格鲁吉亚、亚美尼亚、阿塞拜疆和伊朗接壤，有热气球的浪漫国家，这边的人民对于工作有什么想法呢？\n\n<!-- more -->\n\n![Turkish](Turkish/Turkishjpeg.jpeg)\nWhere Turkish workers would like to move for work.\n\n1. US\n2. Germany\n3. Italy\n4. Canada\n5. UK\n6. France\n7. Australia\n8. Japan\n9. Russia\n10. China\n11. South Korea\n12. Brazil\n13. India\n14. Saudi\n15. Argentina\n\n(BCG)\n\nUS.","source":"_posts/Turkish.md","raw":"---\ntitle: Turkish\ndate: 2019-05-21 21:46:24\ntags:\n---\n\n土耳其，一个横跨欧亚大陆，南临地中海，东南与叙利亚、伊拉克接壤，西临爱琴海，并与希腊以及保加利亚接壤，东部与格鲁吉亚、亚美尼亚、阿塞拜疆和伊朗接壤，有热气球的浪漫国家，这边的人民对于工作有什么想法呢？\n\n<!-- more -->\n\n![Turkish](Turkish/Turkishjpeg.jpeg)\nWhere Turkish workers would like to move for work.\n\n1. US\n2. Germany\n3. Italy\n4. Canada\n5. UK\n6. France\n7. Australia\n8. Japan\n9. Russia\n10. China\n11. South Korea\n12. Brazil\n13. India\n14. Saudi\n15. Argentina\n\n(BCG)\n\nUS.","slug":"Turkish","published":1,"updated":"2019-05-21T13:55:26.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k4000nfbs6a88801ag","content":"<p>土耳其，一个横跨欧亚大陆，南临地中海，东南与叙利亚、伊拉克接壤，西临爱琴海，并与希腊以及保加利亚接壤，东部与格鲁吉亚、亚美尼亚、阿塞拜疆和伊朗接壤，有热气球的浪漫国家，这边的人民对于工作有什么想法呢？</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2019/05/21/Turkish/Turkishjpeg.jpeg\" alt=\"Turkish\"><br>Where Turkish workers would like to move for work.</p>\n<ol>\n<li>US</li>\n<li>Germany</li>\n<li>Italy</li>\n<li>Canada</li>\n<li>UK</li>\n<li>France</li>\n<li>Australia</li>\n<li>Japan</li>\n<li>Russia</li>\n<li>China</li>\n<li>South Korea</li>\n<li>Brazil</li>\n<li>India</li>\n<li>Saudi</li>\n<li>Argentina</li>\n</ol>\n<p>(BCG)</p>\n<p>US.</p>\n","site":{"data":{}},"excerpt":"<p>土耳其，一个横跨欧亚大陆，南临地中海，东南与叙利亚、伊拉克接壤，西临爱琴海，并与希腊以及保加利亚接壤，东部与格鲁吉亚、亚美尼亚、阿塞拜疆和伊朗接壤，有热气球的浪漫国家，这边的人民对于工作有什么想法呢？</p>","more":"<p><img src=\"/2019/05/21/Turkish/Turkishjpeg.jpeg\" alt=\"Turkish\"><br>Where Turkish workers would like to move for work.</p>\n<ol>\n<li>US</li>\n<li>Germany</li>\n<li>Italy</li>\n<li>Canada</li>\n<li>UK</li>\n<li>France</li>\n<li>Australia</li>\n<li>Japan</li>\n<li>Russia</li>\n<li>China</li>\n<li>South Korea</li>\n<li>Brazil</li>\n<li>India</li>\n<li>Saudi</li>\n<li>Argentina</li>\n</ol>\n<p>(BCG)</p>\n<p>US.</p>"},{"title":"2019世界上城市生活成本排行","date":"2018-12-29T13:26:15.000Z","_content":"World's most expensive cities, 2019. (cost of living)\n2019世界上城市生活成本排行：\n<!-- more -->\n排名如下：\n```\n=1.🇸🇬Singapore\t\t\t新加坡\t\t新加坡\n=1.🇫🇷Paris\t\t\t\t巴黎\t\t法国\n=1.🇭🇰Hong Kong\t\t\t香港\t\t中国\n4.🇨🇭Zurich\t\t\t\t苏黎世\t\t瑞士\n=5.🇨🇭Geneva\t\t\t\t日内瓦\t\t瑞士\n=5.🇯🇵Osaka\t\t\t\t大阪\t\t日本\n=7.🇰🇷Seoul\t\t\t\t首尔\t\t韩国\n=7.🇩🇰Copenhagen\t\t\t哥本哈根\t丹麦\n=7.🇺🇸New York\t\t\t    纽约\t\t美国\n=10.🇮🇱Tel Aviv\t\t\t特拉维夫\t以色列\n=10.🇺🇸Los Angeles\t\t    洛杉矶\t\t美国\n```\nThe Economist Intelligence Unit, 2019","source":"_posts/World's most expensive cities, 2019. (cost of livi.md","raw":"---\ntitle: 2019世界上城市生活成本排行\ntags: 城市生活成本\ndate: 2018-12-29 21:26:15\ncategories: 世界排名\n---\nWorld's most expensive cities, 2019. (cost of living)\n2019世界上城市生活成本排行：\n<!-- more -->\n排名如下：\n```\n=1.🇸🇬Singapore\t\t\t新加坡\t\t新加坡\n=1.🇫🇷Paris\t\t\t\t巴黎\t\t法国\n=1.🇭🇰Hong Kong\t\t\t香港\t\t中国\n4.🇨🇭Zurich\t\t\t\t苏黎世\t\t瑞士\n=5.🇨🇭Geneva\t\t\t\t日内瓦\t\t瑞士\n=5.🇯🇵Osaka\t\t\t\t大阪\t\t日本\n=7.🇰🇷Seoul\t\t\t\t首尔\t\t韩国\n=7.🇩🇰Copenhagen\t\t\t哥本哈根\t丹麦\n=7.🇺🇸New York\t\t\t    纽约\t\t美国\n=10.🇮🇱Tel Aviv\t\t\t特拉维夫\t以色列\n=10.🇺🇸Los Angeles\t\t    洛杉矶\t\t美国\n```\nThe Economist Intelligence Unit, 2019","slug":"World's most expensive cities, 2019. (cost of livi","published":1,"updated":"2019-04-21T03:21:07.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k5000ofbs6uefdblmd","content":"<p>World’s most expensive cities, 2019. (cost of living)<br>2019世界上城市生活成本排行：</p>\n<a id=\"more\"></a>\n<p>排名如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=1.🇸🇬Singapore\t\t\t新加坡\t\t新加坡</span><br><span class=\"line\">=1.🇫🇷Paris\t\t\t\t巴黎\t\t法国</span><br><span class=\"line\">=1.🇭🇰Hong Kong\t\t\t香港\t\t中国</span><br><span class=\"line\">4.🇨🇭Zurich\t\t\t\t苏黎世\t\t瑞士</span><br><span class=\"line\">=5.🇨🇭Geneva\t\t\t\t日内瓦\t\t瑞士</span><br><span class=\"line\">=5.🇯🇵Osaka\t\t\t\t大阪\t\t日本</span><br><span class=\"line\">=7.🇰🇷Seoul\t\t\t\t首尔\t\t韩国</span><br><span class=\"line\">=7.🇩🇰Copenhagen\t\t\t哥本哈根\t丹麦</span><br><span class=\"line\">=7.🇺🇸New York\t\t\t    纽约\t\t美国</span><br><span class=\"line\">=10.🇮🇱Tel Aviv\t\t\t特拉维夫\t以色列</span><br><span class=\"line\">=10.🇺🇸Los Angeles\t\t    洛杉矶\t\t美国</span><br></pre></td></tr></table></figure>\n\n<p>The Economist Intelligence Unit, 2019</p>\n","site":{"data":{}},"excerpt":"<p>World’s most expensive cities, 2019. (cost of living)<br>2019世界上城市生活成本排行：</p>","more":"<p>排名如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=1.🇸🇬Singapore\t\t\t新加坡\t\t新加坡</span><br><span class=\"line\">=1.🇫🇷Paris\t\t\t\t巴黎\t\t法国</span><br><span class=\"line\">=1.🇭🇰Hong Kong\t\t\t香港\t\t中国</span><br><span class=\"line\">4.🇨🇭Zurich\t\t\t\t苏黎世\t\t瑞士</span><br><span class=\"line\">=5.🇨🇭Geneva\t\t\t\t日内瓦\t\t瑞士</span><br><span class=\"line\">=5.🇯🇵Osaka\t\t\t\t大阪\t\t日本</span><br><span class=\"line\">=7.🇰🇷Seoul\t\t\t\t首尔\t\t韩国</span><br><span class=\"line\">=7.🇩🇰Copenhagen\t\t\t哥本哈根\t丹麦</span><br><span class=\"line\">=7.🇺🇸New York\t\t\t    纽约\t\t美国</span><br><span class=\"line\">=10.🇮🇱Tel Aviv\t\t\t特拉维夫\t以色列</span><br><span class=\"line\">=10.🇺🇸Los Angeles\t\t    洛杉矶\t\t美国</span><br></pre></td></tr></table></figure>\n\n<p>The Economist Intelligence Unit, 2019</p>"},{"title":"Windows远程连接linux图形界面配置详解","date":"2017-12-28T09:30:16.000Z","_content":"Windows远程连接linux图形界面，利用VNC服务实现windows远程连接linux图形化界面，linux作为VNC Server，windows作为VNC Viewer。原理很简单，在vnc server端生成一个桌面号，在vnc client端去连接该桌面号即可。其中很神奇的地方在于，如果两个人同时连接上一个桌面号的话，一个人可以看到另一个人的操作。\n<!-- more -->\n安装步骤\n# mini版centos安装图形化界面\n如果已经安装了图形化界面，则此步骤可以省略。\n## 安装X window\n```\nyum groupinstall \"X Window System\" \n```\n## 安装GNOME Desktop\n```\nyum groupinstall \"GNOME Desktop\"\n```\n如果是centos7以前的版本，则安装命令为\n```\nyum groupinstall \"Desktop\"\n```\n如果找不到Desktop，那么试试：\n```\nyum grouplist\n```\n查看可以安装的group，可能不同的版本group组的名字不同。\n## 启动gnome\n```\nstartx\n```\n切换到图形化界面\n# linux安装VNC Server\n## 安装\n```\nyum install vnc-server –y\n```\n## 配置\n```\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\n```\n编辑vim /etc/systemd/system/vncserver@:1.service将<USER>更换为root\n## 设置开机自启动\n```\nsystemctl enable vncserver@:1.service\n```\n## 添加防火墙信任规则\n```\nfirewall-cmd --permanent --add-service vnc-server\nfirewall-cmd –reload\n```\n## 重启服务器reboot\n## 启动vnc服务\n启动方式：\n```\nvncserver :桌面号\n```\n注意：中间需留有空格，桌面号用数字表示，表示每个用户占用一个桌面连接。\n以上命令执行的过程中，因为是第一次执行，需要输入密码，密码被加密/root/.vnc/passwd中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。 \n## VNC服务使用的端口号与桌面号的关系\n![桌面号与端口号的关系](Windows远程连接linux图形界面配置详解\\deskNumMappingPort.png)\n# windows安装VNC Viewer\n## 安装\n## 测试\n![连接测试](Windows远程连接linux图形界面配置详解\\vnc_viewer_connect_test.png)\n输入ip:桌面号连接\n![连接成功界面](Windows远程连接linux图形界面配置详解\\vnc_viewer_connect_appearance.png)\n# 其他\n## 修改vnc密码\n```\nvncpasswd\n```\n## 关闭vnc服务\n```\nvncserver -kill :1\n```\n## 防火墙添加信任\n```\nfirewall-cmd --permanent --add-service vnc-server\nfirewall-cmd --reload\n```\n","source":"_posts/Windows远程连接linux图形界面配置详解.md","raw":"---\ntitle: Windows远程连接linux图形界面配置详解\ndate: 2017-12-28 17:30:16\ntags: [windows,linux,vnc]\ncategories: 操作系统\n---\nWindows远程连接linux图形界面，利用VNC服务实现windows远程连接linux图形化界面，linux作为VNC Server，windows作为VNC Viewer。原理很简单，在vnc server端生成一个桌面号，在vnc client端去连接该桌面号即可。其中很神奇的地方在于，如果两个人同时连接上一个桌面号的话，一个人可以看到另一个人的操作。\n<!-- more -->\n安装步骤\n# mini版centos安装图形化界面\n如果已经安装了图形化界面，则此步骤可以省略。\n## 安装X window\n```\nyum groupinstall \"X Window System\" \n```\n## 安装GNOME Desktop\n```\nyum groupinstall \"GNOME Desktop\"\n```\n如果是centos7以前的版本，则安装命令为\n```\nyum groupinstall \"Desktop\"\n```\n如果找不到Desktop，那么试试：\n```\nyum grouplist\n```\n查看可以安装的group，可能不同的版本group组的名字不同。\n## 启动gnome\n```\nstartx\n```\n切换到图形化界面\n# linux安装VNC Server\n## 安装\n```\nyum install vnc-server –y\n```\n## 配置\n```\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/\ncp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service\n```\n编辑vim /etc/systemd/system/vncserver@:1.service将<USER>更换为root\n## 设置开机自启动\n```\nsystemctl enable vncserver@:1.service\n```\n## 添加防火墙信任规则\n```\nfirewall-cmd --permanent --add-service vnc-server\nfirewall-cmd –reload\n```\n## 重启服务器reboot\n## 启动vnc服务\n启动方式：\n```\nvncserver :桌面号\n```\n注意：中间需留有空格，桌面号用数字表示，表示每个用户占用一个桌面连接。\n以上命令执行的过程中，因为是第一次执行，需要输入密码，密码被加密/root/.vnc/passwd中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。 \n## VNC服务使用的端口号与桌面号的关系\n![桌面号与端口号的关系](Windows远程连接linux图形界面配置详解\\deskNumMappingPort.png)\n# windows安装VNC Viewer\n## 安装\n## 测试\n![连接测试](Windows远程连接linux图形界面配置详解\\vnc_viewer_connect_test.png)\n输入ip:桌面号连接\n![连接成功界面](Windows远程连接linux图形界面配置详解\\vnc_viewer_connect_appearance.png)\n# 其他\n## 修改vnc密码\n```\nvncpasswd\n```\n## 关闭vnc服务\n```\nvncserver -kill :1\n```\n## 防火墙添加信任\n```\nfirewall-cmd --permanent --add-service vnc-server\nfirewall-cmd --reload\n```\n","slug":"Windows远程连接linux图形界面配置详解","published":1,"updated":"2018-12-11T13:57:12.957Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k6000pfbs6134rr85c","content":"<p>Windows远程连接linux图形界面，利用VNC服务实现windows远程连接linux图形化界面，linux作为VNC Server，windows作为VNC Viewer。原理很简单，在vnc server端生成一个桌面号，在vnc client端去连接该桌面号即可。其中很神奇的地方在于，如果两个人同时连接上一个桌面号的话，一个人可以看到另一个人的操作。</p>\n<a id=\"more\"></a>\n<p>安装步骤</p>\n<h1 id=\"mini版centos安装图形化界面\"><a href=\"#mini版centos安装图形化界面\" class=\"headerlink\" title=\"mini版centos安装图形化界面\"></a>mini版centos安装图形化界面</h1><p>如果已经安装了图形化界面，则此步骤可以省略。</p>\n<h2 id=\"安装X-window\"><a href=\"#安装X-window\" class=\"headerlink\" title=\"安装X window\"></a>安装X window</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;X Window System&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装GNOME-Desktop\"><a href=\"#安装GNOME-Desktop\" class=\"headerlink\" title=\"安装GNOME Desktop\"></a>安装GNOME Desktop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;GNOME Desktop&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果是centos7以前的版本，则安装命令为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;Desktop&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果找不到Desktop，那么试试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum grouplist</span><br></pre></td></tr></table></figure>\n\n<p>查看可以安装的group，可能不同的版本group组的名字不同。</p>\n<h2 id=\"启动gnome\"><a href=\"#启动gnome\" class=\"headerlink\" title=\"启动gnome\"></a>启动gnome</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startx</span><br></pre></td></tr></table></figure>\n\n<p>切换到图形化界面</p>\n<h1 id=\"linux安装VNC-Server\"><a href=\"#linux安装VNC-Server\" class=\"headerlink\" title=\"linux安装VNC Server\"></a>linux安装VNC Server</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install vnc-server –y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/</span><br><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>\n\n<p>编辑vim /etc/systemd/system/vncserver@:1.service将<user>更换为root</user></p>\n<h2 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable vncserver@:1.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加防火墙信任规则\"><a href=\"#添加防火墙信任规则\" class=\"headerlink\" title=\"添加防火墙信任规则\"></a>添加防火墙信任规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --add-service vnc-server</span><br><span class=\"line\">firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务器reboot\"><a href=\"#重启服务器reboot\" class=\"headerlink\" title=\"重启服务器reboot\"></a>重启服务器reboot</h2><h2 id=\"启动vnc服务\"><a href=\"#启动vnc服务\" class=\"headerlink\" title=\"启动vnc服务\"></a>启动vnc服务</h2><p>启动方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver :桌面号</span><br></pre></td></tr></table></figure>\n\n<p>注意：中间需留有空格，桌面号用数字表示，表示每个用户占用一个桌面连接。<br>以上命令执行的过程中，因为是第一次执行，需要输入密码，密码被加密/root/.vnc/passwd中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。 </p>\n<h2 id=\"VNC服务使用的端口号与桌面号的关系\"><a href=\"#VNC服务使用的端口号与桌面号的关系\" class=\"headerlink\" title=\"VNC服务使用的端口号与桌面号的关系\"></a>VNC服务使用的端口号与桌面号的关系</h2><p><img src=\"/2017/12/28/Windows远程连接linux图形界面配置详解/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5CdeskNumMappingPort.png\" alt=\"桌面号与端口号的关系\"></p>\n<h1 id=\"windows安装VNC-Viewer\"><a href=\"#windows安装VNC-Viewer\" class=\"headerlink\" title=\"windows安装VNC Viewer\"></a>windows安装VNC Viewer</h1><h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><img src=\"/2017/12/28/Windows远程连接linux图形界面配置详解/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5Cvnc_viewer_connect_test.png\" alt=\"连接测试\"><br>输入ip:桌面号连接<br><img src=\"/2017/12/28/Windows远程连接linux图形界面配置详解/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5Cvnc_viewer_connect_appearance.png\" alt=\"连接成功界面\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"修改vnc密码\"><a href=\"#修改vnc密码\" class=\"headerlink\" title=\"修改vnc密码\"></a>修改vnc密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncpasswd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭vnc服务\"><a href=\"#关闭vnc服务\" class=\"headerlink\" title=\"关闭vnc服务\"></a>关闭vnc服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver -kill :1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防火墙添加信任\"><a href=\"#防火墙添加信任\" class=\"headerlink\" title=\"防火墙添加信任\"></a>防火墙添加信任</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --add-service vnc-server</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>Windows远程连接linux图形界面，利用VNC服务实现windows远程连接linux图形化界面，linux作为VNC Server，windows作为VNC Viewer。原理很简单，在vnc server端生成一个桌面号，在vnc client端去连接该桌面号即可。其中很神奇的地方在于，如果两个人同时连接上一个桌面号的话，一个人可以看到另一个人的操作。</p>","more":"<p>安装步骤</p>\n<h1 id=\"mini版centos安装图形化界面\"><a href=\"#mini版centos安装图形化界面\" class=\"headerlink\" title=\"mini版centos安装图形化界面\"></a>mini版centos安装图形化界面</h1><p>如果已经安装了图形化界面，则此步骤可以省略。</p>\n<h2 id=\"安装X-window\"><a href=\"#安装X-window\" class=\"headerlink\" title=\"安装X window\"></a>安装X window</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;X Window System&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装GNOME-Desktop\"><a href=\"#安装GNOME-Desktop\" class=\"headerlink\" title=\"安装GNOME Desktop\"></a>安装GNOME Desktop</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;GNOME Desktop&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果是centos7以前的版本，则安装命令为</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum groupinstall &quot;Desktop&quot;</span><br></pre></td></tr></table></figure>\n\n<p>如果找不到Desktop，那么试试：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum grouplist</span><br></pre></td></tr></table></figure>\n\n<p>查看可以安装的group，可能不同的版本group组的名字不同。</p>\n<h2 id=\"启动gnome\"><a href=\"#启动gnome\" class=\"headerlink\" title=\"启动gnome\"></a>启动gnome</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">startx</span><br></pre></td></tr></table></figure>\n\n<p>切换到图形化界面</p>\n<h1 id=\"linux安装VNC-Server\"><a href=\"#linux安装VNC-Server\" class=\"headerlink\" title=\"linux安装VNC Server\"></a>linux安装VNC Server</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install vnc-server –y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/</span><br><span class=\"line\">cp /lib/systemd/system/vncserver@.service /etc/systemd/system/vncserver@:1.service</span><br></pre></td></tr></table></figure>\n\n<p>编辑vim /etc/systemd/system/vncserver@:1.service将<user>更换为root</user></p>\n<h2 id=\"设置开机自启动\"><a href=\"#设置开机自启动\" class=\"headerlink\" title=\"设置开机自启动\"></a>设置开机自启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable vncserver@:1.service</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"添加防火墙信任规则\"><a href=\"#添加防火墙信任规则\" class=\"headerlink\" title=\"添加防火墙信任规则\"></a>添加防火墙信任规则</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --add-service vnc-server</span><br><span class=\"line\">firewall-cmd –reload</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"重启服务器reboot\"><a href=\"#重启服务器reboot\" class=\"headerlink\" title=\"重启服务器reboot\"></a>重启服务器reboot</h2><h2 id=\"启动vnc服务\"><a href=\"#启动vnc服务\" class=\"headerlink\" title=\"启动vnc服务\"></a>启动vnc服务</h2><p>启动方式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver :桌面号</span><br></pre></td></tr></table></figure>\n\n<p>注意：中间需留有空格，桌面号用数字表示，表示每个用户占用一个桌面连接。<br>以上命令执行的过程中，因为是第一次执行，需要输入密码，密码被加密/root/.vnc/passwd中；同时在用户主目录下的.vnc子目录中为用户自动建立xstartup配置文件（/root/.vnc/xstartup），在每次启动VND服务时，都会读取该文件中的配置信息。 </p>\n<h2 id=\"VNC服务使用的端口号与桌面号的关系\"><a href=\"#VNC服务使用的端口号与桌面号的关系\" class=\"headerlink\" title=\"VNC服务使用的端口号与桌面号的关系\"></a>VNC服务使用的端口号与桌面号的关系</h2><p><img src=\"/2017/12/28/Windows远程连接linux图形界面配置详解/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5CdeskNumMappingPort.png\" alt=\"桌面号与端口号的关系\"></p>\n<h1 id=\"windows安装VNC-Viewer\"><a href=\"#windows安装VNC-Viewer\" class=\"headerlink\" title=\"windows安装VNC Viewer\"></a>windows安装VNC Viewer</h1><h2 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h2 id=\"测试\"><a href=\"#测试\" class=\"headerlink\" title=\"测试\"></a>测试</h2><p><img src=\"/2017/12/28/Windows远程连接linux图形界面配置详解/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5Cvnc_viewer_connect_test.png\" alt=\"连接测试\"><br>输入ip:桌面号连接<br><img src=\"/2017/12/28/Windows远程连接linux图形界面配置详解/Windows%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5linux%E5%9B%BE%E5%BD%A2%E7%95%8C%E9%9D%A2%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3%5Cvnc_viewer_connect_appearance.png\" alt=\"连接成功界面\"></p>\n<h1 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h1><h2 id=\"修改vnc密码\"><a href=\"#修改vnc密码\" class=\"headerlink\" title=\"修改vnc密码\"></a>修改vnc密码</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncpasswd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"关闭vnc服务\"><a href=\"#关闭vnc服务\" class=\"headerlink\" title=\"关闭vnc服务\"></a>关闭vnc服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vncserver -kill :1</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"防火墙添加信任\"><a href=\"#防火墙添加信任\" class=\"headerlink\" title=\"防火墙添加信任\"></a>防火墙添加信任</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --add-service vnc-server</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>"},{"title":"airbnb开源调度系统airflow的一些命令及使用方法","date":"2019-08-01T16:06:33.000Z","notebook":"笔记","_content":"\npython写的调度系统，用python脚本，动态生成dag，跨dag依赖，是一个不错的调度系统，下面介绍一些我使用过程中用到的命令和问题的解决方案。\n\n<!-- more -->\n\n# 1.operator\n```\n    BashOperator\n    PythonOperator\n    EmailOperator\n    HTTPOperator\n    SqlOperator\n    Sensor\n    DockerOperator\n    HiveOperator\n```\n# 2.给DAG实例传递参数\n执行命令\n```\nairflow trigger_dag example_passing_params_via_test_command -c '{\"foo\":\"bar\"}'\n```\n代码获取变量：\n```\ndef my_py_command(ds, **kwargs):\nlogging.info(kwargs)\nlogging.info(kwargs.get('dag_run').conf.get('foo'));\n```\n# 3.填补数据\n```\n#清除dag在这段时间内的状态，清除后airflow会自动启动这些任务，如果dag设置了catchup=True;dependency_on_past=True;那么dag会按照时间顺序一天一天跑任务，这对于修补数据很有用哦\nairflow clear db2src_usersdb_byshell -s 2018-12-01 -e 2018-12-04\n#回填数据，当新建一个dag，需要补跑以前的数据，回填命令是个不错的选择\nairflow backfill db2src_usersdb_byshell -s 2018-12-03 -e 2018-12-04\n```\n# 4.根据depend_on_past\nTrue or False来判断是否需要依赖start_time前段时间跑的相同的任务情况来运行现在的任务。\n# 5.airflow卡住的问题\n连接元数据mysql库：select * from task_instance where state = 'running';\n# 6.airflow自带变量：\n```\n| Variable                           | Description |\n| :------:                           | :---------: |\n|{{ ds }}                            |the execution date as YYYY-MM-DD|\n|{{ ds_nodash }}                     |the execution date as YYYYMMDD|\n|{{ yesterday_ds }}                  |yesterday’s date as YYYY-MM-DD|\n|{{ yesterday_ds_nodash }}           |yesterday’s date as YYYYMMDD|\n|{{ tomorrow_ds }}                   |tomorrow’s date as YYYY-MM-DD|\n|{{ tomorrow_ds_nodash }}            |tomorrow’s date as YYYYMMDD|\n|{{ ts }}                            |same as execution_date.isoformat()|\n|{{ ts_nodash }}                     |same as ts without - and :|\n|{{ execution_date }}                |the execution_date, (datetime.datetime)|\n|{{ prev_execution_date }}           |the previous execution date (if available) (datetime.datetime)|\n|{{ next_execution_date }}           |the next execution date (datetime.datetime)|\n|{{ dag }}                           |the DAG object|\n|{{ task }}                          |the Task object|\n|{{ macros }}                        |a reference to the macros package, described below|\n|{{ task_instance }}                 |the task_instance object|\n|{{ end_date }}                      |same as {{ ds }}|\n|{{ latest_date }}                   |same as {{ ds }}|\n|{{ ti }}                            |same as {{ task_instance }}|\n|{{ params }}                        |a reference to the user-defined params dictionary|\n|{{ var.value.my_var }}              |global defined variables represented as a dictionary|\n|{{ var.json.my_var.path }}          |global defined variables represented as a dictionary with deserialized JSON object, append the path to the key within the JSON object|\n|{{ task_instance_key_str }}         |a unique, human-readable key to the task instance formatted {dag_id}_{task_id}_{ds}              |\n|conf                                |the full configuration object located at airflow.configuration.conf which represents the content of your airflow.cfg|\n|run_id                              |the run_id of the current DAG run|\n|dag_run                             | a reference to the DagRun object|\n|test_mode                           | whether the task instance was called using the CLI’s test subcommand|\n```\n\n# 7.导入导出airflow变量\n```\n    airflow variables --import variable.json\n    airflow variables --export variable.txt\n```\n# 8.Template Not Found\nTemplateNotFound: sh /data/airflow_dag/dags_migration/sh/export-variables.sh\n这是由于airflow使用了jinja2作为模板引擎导致的一个陷阱，当使用bash命令的时候，尾部必须加一个空格\n```\nt2 = BashOperator(\ntask_id=‘sleep‘,\nbash_command=\"/home/batcher/test.sh\", // This fails with `Jinja template not found` error\n#bash_command=\"/home/batcher/test.sh \", // This works (has a space after)\ndag=dag)\n```\n# 9. 手动触发dag运行\n```\nairflow trigger_dag dag_id -r RUN_ID -e EXEC_DATE\n```\n# 10. 手动触发task运行\n```\nairflow run dag_id task_id EXEC_DATE\n```\n\n# 11. \"Failed to fetch log file from worker\"\n查看task_instance中hostname字段，存储的均为localhost；\n分析：修改/etc/hosts文件，删除127.0.0.1  hostname映射；worker log服务获取到hostname后，映射到ip后得到127.0.0.1，故无法访问到log。\n\n# 12. airflow中每个task对应的执行priority计算方式\ndummy2 = DummyOperator(\n    task_id='dummy_' + src_db,\n    pool='db',\n    priority_weight=weight,\n    dag=dag\n)\n所有后置依赖的priority_weight之和，最后一个任务的priority_weight如果没有自定义，默认为1，这样，在同一个pool中做到了任务优先运行；\n","source":"_posts/airbnb开源调度系统airflow的一些命令及使用方法.md","raw":"---\ntitle: airbnb开源调度系统airflow的一些命令及使用方法\ndate: 2019-08-02 00:06:33\ntags: airflow\ncategories: 调度系统\nnotebook: 笔记\n---\n\npython写的调度系统，用python脚本，动态生成dag，跨dag依赖，是一个不错的调度系统，下面介绍一些我使用过程中用到的命令和问题的解决方案。\n\n<!-- more -->\n\n# 1.operator\n```\n    BashOperator\n    PythonOperator\n    EmailOperator\n    HTTPOperator\n    SqlOperator\n    Sensor\n    DockerOperator\n    HiveOperator\n```\n# 2.给DAG实例传递参数\n执行命令\n```\nairflow trigger_dag example_passing_params_via_test_command -c '{\"foo\":\"bar\"}'\n```\n代码获取变量：\n```\ndef my_py_command(ds, **kwargs):\nlogging.info(kwargs)\nlogging.info(kwargs.get('dag_run').conf.get('foo'));\n```\n# 3.填补数据\n```\n#清除dag在这段时间内的状态，清除后airflow会自动启动这些任务，如果dag设置了catchup=True;dependency_on_past=True;那么dag会按照时间顺序一天一天跑任务，这对于修补数据很有用哦\nairflow clear db2src_usersdb_byshell -s 2018-12-01 -e 2018-12-04\n#回填数据，当新建一个dag，需要补跑以前的数据，回填命令是个不错的选择\nairflow backfill db2src_usersdb_byshell -s 2018-12-03 -e 2018-12-04\n```\n# 4.根据depend_on_past\nTrue or False来判断是否需要依赖start_time前段时间跑的相同的任务情况来运行现在的任务。\n# 5.airflow卡住的问题\n连接元数据mysql库：select * from task_instance where state = 'running';\n# 6.airflow自带变量：\n```\n| Variable                           | Description |\n| :------:                           | :---------: |\n|{{ ds }}                            |the execution date as YYYY-MM-DD|\n|{{ ds_nodash }}                     |the execution date as YYYYMMDD|\n|{{ yesterday_ds }}                  |yesterday’s date as YYYY-MM-DD|\n|{{ yesterday_ds_nodash }}           |yesterday’s date as YYYYMMDD|\n|{{ tomorrow_ds }}                   |tomorrow’s date as YYYY-MM-DD|\n|{{ tomorrow_ds_nodash }}            |tomorrow’s date as YYYYMMDD|\n|{{ ts }}                            |same as execution_date.isoformat()|\n|{{ ts_nodash }}                     |same as ts without - and :|\n|{{ execution_date }}                |the execution_date, (datetime.datetime)|\n|{{ prev_execution_date }}           |the previous execution date (if available) (datetime.datetime)|\n|{{ next_execution_date }}           |the next execution date (datetime.datetime)|\n|{{ dag }}                           |the DAG object|\n|{{ task }}                          |the Task object|\n|{{ macros }}                        |a reference to the macros package, described below|\n|{{ task_instance }}                 |the task_instance object|\n|{{ end_date }}                      |same as {{ ds }}|\n|{{ latest_date }}                   |same as {{ ds }}|\n|{{ ti }}                            |same as {{ task_instance }}|\n|{{ params }}                        |a reference to the user-defined params dictionary|\n|{{ var.value.my_var }}              |global defined variables represented as a dictionary|\n|{{ var.json.my_var.path }}          |global defined variables represented as a dictionary with deserialized JSON object, append the path to the key within the JSON object|\n|{{ task_instance_key_str }}         |a unique, human-readable key to the task instance formatted {dag_id}_{task_id}_{ds}              |\n|conf                                |the full configuration object located at airflow.configuration.conf which represents the content of your airflow.cfg|\n|run_id                              |the run_id of the current DAG run|\n|dag_run                             | a reference to the DagRun object|\n|test_mode                           | whether the task instance was called using the CLI’s test subcommand|\n```\n\n# 7.导入导出airflow变量\n```\n    airflow variables --import variable.json\n    airflow variables --export variable.txt\n```\n# 8.Template Not Found\nTemplateNotFound: sh /data/airflow_dag/dags_migration/sh/export-variables.sh\n这是由于airflow使用了jinja2作为模板引擎导致的一个陷阱，当使用bash命令的时候，尾部必须加一个空格\n```\nt2 = BashOperator(\ntask_id=‘sleep‘,\nbash_command=\"/home/batcher/test.sh\", // This fails with `Jinja template not found` error\n#bash_command=\"/home/batcher/test.sh \", // This works (has a space after)\ndag=dag)\n```\n# 9. 手动触发dag运行\n```\nairflow trigger_dag dag_id -r RUN_ID -e EXEC_DATE\n```\n# 10. 手动触发task运行\n```\nairflow run dag_id task_id EXEC_DATE\n```\n\n# 11. \"Failed to fetch log file from worker\"\n查看task_instance中hostname字段，存储的均为localhost；\n分析：修改/etc/hosts文件，删除127.0.0.1  hostname映射；worker log服务获取到hostname后，映射到ip后得到127.0.0.1，故无法访问到log。\n\n# 12. airflow中每个task对应的执行priority计算方式\ndummy2 = DummyOperator(\n    task_id='dummy_' + src_db,\n    pool='db',\n    priority_weight=weight,\n    dag=dag\n)\n所有后置依赖的priority_weight之和，最后一个任务的priority_weight如果没有自定义，默认为1，这样，在同一个pool中做到了任务优先运行；\n","slug":"airbnb开源调度系统airflow的一些命令及使用方法","published":1,"updated":"2019-08-08T11:29:32.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k6000qfbs65qh4tm69","content":"<p>python写的调度系统，用python脚本，动态生成dag，跨dag依赖，是一个不错的调度系统，下面介绍一些我使用过程中用到的命令和问题的解决方案。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-operator\"><a href=\"#1-operator\" class=\"headerlink\" title=\"1.operator\"></a>1.operator</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BashOperator</span><br><span class=\"line\">PythonOperator</span><br><span class=\"line\">EmailOperator</span><br><span class=\"line\">HTTPOperator</span><br><span class=\"line\">SqlOperator</span><br><span class=\"line\">Sensor</span><br><span class=\"line\">DockerOperator</span><br><span class=\"line\">HiveOperator</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-给DAG实例传递参数\"><a href=\"#2-给DAG实例传递参数\" class=\"headerlink\" title=\"2.给DAG实例传递参数\"></a>2.给DAG实例传递参数</h1><p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow trigger_dag example_passing_params_via_test_command -c &apos;&#123;&quot;foo&quot;:&quot;bar&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>代码获取变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def my_py_command(ds, **kwargs):</span><br><span class=\"line\">logging.info(kwargs)</span><br><span class=\"line\">logging.info(kwargs.get(&apos;dag_run&apos;).conf.get(&apos;foo&apos;));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-填补数据\"><a href=\"#3-填补数据\" class=\"headerlink\" title=\"3.填补数据\"></a>3.填补数据</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#清除dag在这段时间内的状态，清除后airflow会自动启动这些任务，如果dag设置了catchup=True;dependency_on_past=True;那么dag会按照时间顺序一天一天跑任务，这对于修补数据很有用哦</span><br><span class=\"line\">airflow clear db2src_usersdb_byshell -s 2018-12-01 -e 2018-12-04</span><br><span class=\"line\">#回填数据，当新建一个dag，需要补跑以前的数据，回填命令是个不错的选择</span><br><span class=\"line\">airflow backfill db2src_usersdb_byshell -s 2018-12-03 -e 2018-12-04</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-根据depend-on-past\"><a href=\"#4-根据depend-on-past\" class=\"headerlink\" title=\"4.根据depend_on_past\"></a>4.根据depend_on_past</h1><p>True or False来判断是否需要依赖start_time前段时间跑的相同的任务情况来运行现在的任务。</p>\n<h1 id=\"5-airflow卡住的问题\"><a href=\"#5-airflow卡住的问题\" class=\"headerlink\" title=\"5.airflow卡住的问题\"></a>5.airflow卡住的问题</h1><p>连接元数据mysql库：select * from task_instance where state = ‘running’;</p>\n<h1 id=\"6-airflow自带变量：\"><a href=\"#6-airflow自带变量：\" class=\"headerlink\" title=\"6.airflow自带变量：\"></a>6.airflow自带变量：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Variable                           | Description |</span><br><span class=\"line\">| :------:                           | :---------: |</span><br><span class=\"line\">|&#123;&#123; ds &#125;&#125;                            |the execution date as YYYY-MM-DD|</span><br><span class=\"line\">|&#123;&#123; ds_nodash &#125;&#125;                     |the execution date as YYYYMMDD|</span><br><span class=\"line\">|&#123;&#123; yesterday_ds &#125;&#125;                  |yesterday’s date as YYYY-MM-DD|</span><br><span class=\"line\">|&#123;&#123; yesterday_ds_nodash &#125;&#125;           |yesterday’s date as YYYYMMDD|</span><br><span class=\"line\">|&#123;&#123; tomorrow_ds &#125;&#125;                   |tomorrow’s date as YYYY-MM-DD|</span><br><span class=\"line\">|&#123;&#123; tomorrow_ds_nodash &#125;&#125;            |tomorrow’s date as YYYYMMDD|</span><br><span class=\"line\">|&#123;&#123; ts &#125;&#125;                            |same as execution_date.isoformat()|</span><br><span class=\"line\">|&#123;&#123; ts_nodash &#125;&#125;                     |same as ts without - and :|</span><br><span class=\"line\">|&#123;&#123; execution_date &#125;&#125;                |the execution_date, (datetime.datetime)|</span><br><span class=\"line\">|&#123;&#123; prev_execution_date &#125;&#125;           |the previous execution date (if available) (datetime.datetime)|</span><br><span class=\"line\">|&#123;&#123; next_execution_date &#125;&#125;           |the next execution date (datetime.datetime)|</span><br><span class=\"line\">|&#123;&#123; dag &#125;&#125;                           |the DAG object|</span><br><span class=\"line\">|&#123;&#123; task &#125;&#125;                          |the Task object|</span><br><span class=\"line\">|&#123;&#123; macros &#125;&#125;                        |a reference to the macros package, described below|</span><br><span class=\"line\">|&#123;&#123; task_instance &#125;&#125;                 |the task_instance object|</span><br><span class=\"line\">|&#123;&#123; end_date &#125;&#125;                      |same as &#123;&#123; ds &#125;&#125;|</span><br><span class=\"line\">|&#123;&#123; latest_date &#125;&#125;                   |same as &#123;&#123; ds &#125;&#125;|</span><br><span class=\"line\">|&#123;&#123; ti &#125;&#125;                            |same as &#123;&#123; task_instance &#125;&#125;|</span><br><span class=\"line\">|&#123;&#123; params &#125;&#125;                        |a reference to the user-defined params dictionary|</span><br><span class=\"line\">|&#123;&#123; var.value.my_var &#125;&#125;              |global defined variables represented as a dictionary|</span><br><span class=\"line\">|&#123;&#123; var.json.my_var.path &#125;&#125;          |global defined variables represented as a dictionary with deserialized JSON object, append the path to the key within the JSON object|</span><br><span class=\"line\">|&#123;&#123; task_instance_key_str &#125;&#125;         |a unique, human-readable key to the task instance formatted &#123;dag_id&#125;_&#123;task_id&#125;_&#123;ds&#125;              |</span><br><span class=\"line\">|conf                                |the full configuration object located at airflow.configuration.conf which represents the content of your airflow.cfg|</span><br><span class=\"line\">|run_id                              |the run_id of the current DAG run|</span><br><span class=\"line\">|dag_run                             | a reference to the DagRun object|</span><br><span class=\"line\">|test_mode                           | whether the task instance was called using the CLI’s test subcommand|</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-导入导出airflow变量\"><a href=\"#7-导入导出airflow变量\" class=\"headerlink\" title=\"7.导入导出airflow变量\"></a>7.导入导出airflow变量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow variables --import variable.json</span><br><span class=\"line\">airflow variables --export variable.txt</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-Template-Not-Found\"><a href=\"#8-Template-Not-Found\" class=\"headerlink\" title=\"8.Template Not Found\"></a>8.Template Not Found</h1><p>TemplateNotFound: sh /data/airflow_dag/dags_migration/sh/export-variables.sh<br>这是由于airflow使用了jinja2作为模板引擎导致的一个陷阱，当使用bash命令的时候，尾部必须加一个空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t2 = BashOperator(</span><br><span class=\"line\">task_id=‘sleep‘,</span><br><span class=\"line\">bash_command=&quot;/home/batcher/test.sh&quot;, // This fails with `Jinja template not found` error</span><br><span class=\"line\">#bash_command=&quot;/home/batcher/test.sh &quot;, // This works (has a space after)</span><br><span class=\"line\">dag=dag)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-手动触发dag运行\"><a href=\"#9-手动触发dag运行\" class=\"headerlink\" title=\"9. 手动触发dag运行\"></a>9. 手动触发dag运行</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow trigger_dag dag_id -r RUN_ID -e EXEC_DATE</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-手动触发task运行\"><a href=\"#10-手动触发task运行\" class=\"headerlink\" title=\"10. 手动触发task运行\"></a>10. 手动触发task运行</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow run dag_id task_id EXEC_DATE</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-“Failed-to-fetch-log-file-from-worker”\"><a href=\"#11-“Failed-to-fetch-log-file-from-worker”\" class=\"headerlink\" title=\"11. “Failed to fetch log file from worker”\"></a>11. “Failed to fetch log file from worker”</h1><p>查看task_instance中hostname字段，存储的均为localhost；<br>分析：修改/etc/hosts文件，删除127.0.0.1  hostname映射；worker log服务获取到hostname后，映射到ip后得到127.0.0.1，故无法访问到log。</p>\n<h1 id=\"12-airflow中每个task对应的执行priority计算方式\"><a href=\"#12-airflow中每个task对应的执行priority计算方式\" class=\"headerlink\" title=\"12. airflow中每个task对应的执行priority计算方式\"></a>12. airflow中每个task对应的执行priority计算方式</h1><p>dummy2 = DummyOperator(<br>    task_id=’dummy_’ + src_db,<br>    pool=’db’,<br>    priority_weight=weight,<br>    dag=dag<br>)\n所有后置依赖的priority_weight之和，最后一个任务的priority_weight如果没有自定义，默认为1，这样，在同一个pool中做到了任务优先运行；</p>\n","site":{"data":{}},"excerpt":"<p>python写的调度系统，用python脚本，动态生成dag，跨dag依赖，是一个不错的调度系统，下面介绍一些我使用过程中用到的命令和问题的解决方案。</p>","more":"<h1 id=\"1-operator\"><a href=\"#1-operator\" class=\"headerlink\" title=\"1.operator\"></a>1.operator</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">BashOperator</span><br><span class=\"line\">PythonOperator</span><br><span class=\"line\">EmailOperator</span><br><span class=\"line\">HTTPOperator</span><br><span class=\"line\">SqlOperator</span><br><span class=\"line\">Sensor</span><br><span class=\"line\">DockerOperator</span><br><span class=\"line\">HiveOperator</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-给DAG实例传递参数\"><a href=\"#2-给DAG实例传递参数\" class=\"headerlink\" title=\"2.给DAG实例传递参数\"></a>2.给DAG实例传递参数</h1><p>执行命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow trigger_dag example_passing_params_via_test_command -c &apos;&#123;&quot;foo&quot;:&quot;bar&quot;&#125;&apos;</span><br></pre></td></tr></table></figure>\n\n<p>代码获取变量：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">def my_py_command(ds, **kwargs):</span><br><span class=\"line\">logging.info(kwargs)</span><br><span class=\"line\">logging.info(kwargs.get(&apos;dag_run&apos;).conf.get(&apos;foo&apos;));</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-填补数据\"><a href=\"#3-填补数据\" class=\"headerlink\" title=\"3.填补数据\"></a>3.填补数据</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#清除dag在这段时间内的状态，清除后airflow会自动启动这些任务，如果dag设置了catchup=True;dependency_on_past=True;那么dag会按照时间顺序一天一天跑任务，这对于修补数据很有用哦</span><br><span class=\"line\">airflow clear db2src_usersdb_byshell -s 2018-12-01 -e 2018-12-04</span><br><span class=\"line\">#回填数据，当新建一个dag，需要补跑以前的数据，回填命令是个不错的选择</span><br><span class=\"line\">airflow backfill db2src_usersdb_byshell -s 2018-12-03 -e 2018-12-04</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-根据depend-on-past\"><a href=\"#4-根据depend-on-past\" class=\"headerlink\" title=\"4.根据depend_on_past\"></a>4.根据depend_on_past</h1><p>True or False来判断是否需要依赖start_time前段时间跑的相同的任务情况来运行现在的任务。</p>\n<h1 id=\"5-airflow卡住的问题\"><a href=\"#5-airflow卡住的问题\" class=\"headerlink\" title=\"5.airflow卡住的问题\"></a>5.airflow卡住的问题</h1><p>连接元数据mysql库：select * from task_instance where state = ‘running’;</p>\n<h1 id=\"6-airflow自带变量：\"><a href=\"#6-airflow自带变量：\" class=\"headerlink\" title=\"6.airflow自带变量：\"></a>6.airflow自带变量：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">| Variable                           | Description |</span><br><span class=\"line\">| :------:                           | :---------: |</span><br><span class=\"line\">|&#123;&#123; ds &#125;&#125;                            |the execution date as YYYY-MM-DD|</span><br><span class=\"line\">|&#123;&#123; ds_nodash &#125;&#125;                     |the execution date as YYYYMMDD|</span><br><span class=\"line\">|&#123;&#123; yesterday_ds &#125;&#125;                  |yesterday’s date as YYYY-MM-DD|</span><br><span class=\"line\">|&#123;&#123; yesterday_ds_nodash &#125;&#125;           |yesterday’s date as YYYYMMDD|</span><br><span class=\"line\">|&#123;&#123; tomorrow_ds &#125;&#125;                   |tomorrow’s date as YYYY-MM-DD|</span><br><span class=\"line\">|&#123;&#123; tomorrow_ds_nodash &#125;&#125;            |tomorrow’s date as YYYYMMDD|</span><br><span class=\"line\">|&#123;&#123; ts &#125;&#125;                            |same as execution_date.isoformat()|</span><br><span class=\"line\">|&#123;&#123; ts_nodash &#125;&#125;                     |same as ts without - and :|</span><br><span class=\"line\">|&#123;&#123; execution_date &#125;&#125;                |the execution_date, (datetime.datetime)|</span><br><span class=\"line\">|&#123;&#123; prev_execution_date &#125;&#125;           |the previous execution date (if available) (datetime.datetime)|</span><br><span class=\"line\">|&#123;&#123; next_execution_date &#125;&#125;           |the next execution date (datetime.datetime)|</span><br><span class=\"line\">|&#123;&#123; dag &#125;&#125;                           |the DAG object|</span><br><span class=\"line\">|&#123;&#123; task &#125;&#125;                          |the Task object|</span><br><span class=\"line\">|&#123;&#123; macros &#125;&#125;                        |a reference to the macros package, described below|</span><br><span class=\"line\">|&#123;&#123; task_instance &#125;&#125;                 |the task_instance object|</span><br><span class=\"line\">|&#123;&#123; end_date &#125;&#125;                      |same as &#123;&#123; ds &#125;&#125;|</span><br><span class=\"line\">|&#123;&#123; latest_date &#125;&#125;                   |same as &#123;&#123; ds &#125;&#125;|</span><br><span class=\"line\">|&#123;&#123; ti &#125;&#125;                            |same as &#123;&#123; task_instance &#125;&#125;|</span><br><span class=\"line\">|&#123;&#123; params &#125;&#125;                        |a reference to the user-defined params dictionary|</span><br><span class=\"line\">|&#123;&#123; var.value.my_var &#125;&#125;              |global defined variables represented as a dictionary|</span><br><span class=\"line\">|&#123;&#123; var.json.my_var.path &#125;&#125;          |global defined variables represented as a dictionary with deserialized JSON object, append the path to the key within the JSON object|</span><br><span class=\"line\">|&#123;&#123; task_instance_key_str &#125;&#125;         |a unique, human-readable key to the task instance formatted &#123;dag_id&#125;_&#123;task_id&#125;_&#123;ds&#125;              |</span><br><span class=\"line\">|conf                                |the full configuration object located at airflow.configuration.conf which represents the content of your airflow.cfg|</span><br><span class=\"line\">|run_id                              |the run_id of the current DAG run|</span><br><span class=\"line\">|dag_run                             | a reference to the DagRun object|</span><br><span class=\"line\">|test_mode                           | whether the task instance was called using the CLI’s test subcommand|</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-导入导出airflow变量\"><a href=\"#7-导入导出airflow变量\" class=\"headerlink\" title=\"7.导入导出airflow变量\"></a>7.导入导出airflow变量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow variables --import variable.json</span><br><span class=\"line\">airflow variables --export variable.txt</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-Template-Not-Found\"><a href=\"#8-Template-Not-Found\" class=\"headerlink\" title=\"8.Template Not Found\"></a>8.Template Not Found</h1><p>TemplateNotFound: sh /data/airflow_dag/dags_migration/sh/export-variables.sh<br>这是由于airflow使用了jinja2作为模板引擎导致的一个陷阱，当使用bash命令的时候，尾部必须加一个空格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">t2 = BashOperator(</span><br><span class=\"line\">task_id=‘sleep‘,</span><br><span class=\"line\">bash_command=&quot;/home/batcher/test.sh&quot;, // This fails with `Jinja template not found` error</span><br><span class=\"line\">#bash_command=&quot;/home/batcher/test.sh &quot;, // This works (has a space after)</span><br><span class=\"line\">dag=dag)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-手动触发dag运行\"><a href=\"#9-手动触发dag运行\" class=\"headerlink\" title=\"9. 手动触发dag运行\"></a>9. 手动触发dag运行</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow trigger_dag dag_id -r RUN_ID -e EXEC_DATE</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-手动触发task运行\"><a href=\"#10-手动触发task运行\" class=\"headerlink\" title=\"10. 手动触发task运行\"></a>10. 手动触发task运行</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">airflow run dag_id task_id EXEC_DATE</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-“Failed-to-fetch-log-file-from-worker”\"><a href=\"#11-“Failed-to-fetch-log-file-from-worker”\" class=\"headerlink\" title=\"11. “Failed to fetch log file from worker”\"></a>11. “Failed to fetch log file from worker”</h1><p>查看task_instance中hostname字段，存储的均为localhost；<br>分析：修改/etc/hosts文件，删除127.0.0.1  hostname映射；worker log服务获取到hostname后，映射到ip后得到127.0.0.1，故无法访问到log。</p>\n<h1 id=\"12-airflow中每个task对应的执行priority计算方式\"><a href=\"#12-airflow中每个task对应的执行priority计算方式\" class=\"headerlink\" title=\"12. airflow中每个task对应的执行priority计算方式\"></a>12. airflow中每个task对应的执行priority计算方式</h1><p>dummy2 = DummyOperator(<br>    task_id=’dummy_’ + src_db,<br>    pool=’db’,<br>    priority_weight=weight,<br>    dag=dag<br>)\n所有后置依赖的priority_weight之和，最后一个任务的priority_weight如果没有自定义，默认为1，这样，在同一个pool中做到了任务优先运行；</p>"},{"title":"ambari管理监控hadoop生态系统的环境安装及问题解答","date":"2018-03-10T03:13:39.000Z","_content":"首先来介绍下ambari，它是一个apache的一个顶级项目，hadoop生态组件的监控、管理工具，相比较于cloudera公司的CDH，它的特点是完全开源，一键部署安装、管理、监控大数据各组件，省时省力，下面就来介绍ambari环境是如何安装的。\n<!-- more -->\n本安装教程适用于操作系统centos7，在某一台服务器上安装，原理就是虚拟化该服务器成多个virtual box，然后启动ambari服务，管理这些虚拟机。\n# 安装\n安装步骤可以参考官网：\n<a href=\"https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+Guide\">ambari.apache.org</a>\n## 环境准备\n```\nyum install lrzsz openssl openssh-clients git maven -y\n```\n## 下载安装VirtualBox、Vagrant\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a>\n<a href=\"http://downloads.vagrantup.com\"></a>\n选择最新稳定版.rpm文件下载即可\n上传到服务器使用yum安装\n## 下载ambari-vagrant\n```\ngit clone https://github.com/u39kun/ambari-vagrant.git\ncat ambari-vagrant/append-to-etc-hosts.txt >> /etc/hosts --配置ip、域名映射\nvagrant --生成密钥\n```\n## 启动VMs\n```\ncd ambari-vagrant\n```\n你可以看到在该文件夹下有许多centos的版本，官方说centos6.8对ambari的兼容性最好，我们就用centos6.8吧。\n```\ncd centos6.8\ncp ~/.vagrant.d/insecure_private_key .  --将密钥复制到当前文件夹，注意不要少了组后面的一个点，代表当前文件夹\n./up.sh 3 --启动3个virtual machine\n```\n正常的话，就启动了c6801 c6802 c6803这三台虚拟机\n## 登录VMs\n```\nvagrant ssh c6801\nsu -\n```\nssh没问题的话，说明安装是没问题的，下面来安装ambari-server，以root用户完成下面的操作。\n## 安装ambari-server\n下载ambari的源，安装并启动ambari-server\n```\nwget -O /etc/yum.repos.d/ambari.repo http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.5.1.0/ambari.repo\nyum install ambari-server -y\nambari-server setup -s\nambari-server start\n```\n启动成功后，我们可以访问ambari的web界面： http://c6801.ambari.apache.org:8080，初始的登录用户名和密码均为admin，以同样的方式可以访问c6802 c6803，然后我们就可以对着三台虚拟机进行安装hadoop生态的各个组件了。\n# 问题\n安装过程中会出现各种问题，具体问题及解决方案如下：\n## 启动虚拟盒的时候报错\n运行命令：\n```\n./up.sh 3\n```\n错误日志如下：\n![VBoxMangeError](ambari管理监控hadoop生态系统的环境安装及问题解答/VBoxManageError.png)\n```\nThere was an error while excuting 'VBoxMange', a CLI used by vagrant for controlling VirtualBox, The command and stderr is shown below.\nCommand: [\"startvm\", \"afb1736b-3bab-4d1a-a968-16aba764195a\", \"--type\", \"gui\"]\nStderr: VBoxManage: error: The virtual machine \"centos68-c6801-1520048454672_80399\" has terminated upexpectedly during startup because of singal 6.\nVBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), componnent MachineWrap, interface IMachine.\n```\n错误原因：linux系统中的kernel module与ambari需要使用的kernel模块版本不匹配，导致vboxdrv服务启动异常，可以使用命令查看vboxdrv服务的启动情况：\n```\nsystemctl status vboxdrv\n```\n解决办法：\n1.安装更新kernel\n```\nyum install kernel -y\n```\n2.安装kernel-devel\n```\nyum install kernel -y\n```\n3.重启服务器\n```\nreboot\n```\n4.启动vboxdrv服务\n```\nsystemctl start vboxdrv\nsystemctl status vboxdrv --查看状态\n```\n到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。","source":"_posts/ambari管理监控hadoop生态系统的环境安装及问题解答.md","raw":"---\ntitle: ambari管理监控hadoop生态系统的环境安装及问题解答\ndate: 2018-03-10 11:13:39\ntags: [ambari,hadoop]\ncategories: 环境安装\n---\n首先来介绍下ambari，它是一个apache的一个顶级项目，hadoop生态组件的监控、管理工具，相比较于cloudera公司的CDH，它的特点是完全开源，一键部署安装、管理、监控大数据各组件，省时省力，下面就来介绍ambari环境是如何安装的。\n<!-- more -->\n本安装教程适用于操作系统centos7，在某一台服务器上安装，原理就是虚拟化该服务器成多个virtual box，然后启动ambari服务，管理这些虚拟机。\n# 安装\n安装步骤可以参考官网：\n<a href=\"https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+Guide\">ambari.apache.org</a>\n## 环境准备\n```\nyum install lrzsz openssl openssh-clients git maven -y\n```\n## 下载安装VirtualBox、Vagrant\n<a href=\"https://www.virtualbox.org/wiki/Downloads\">VirtualBox</a>\n<a href=\"http://downloads.vagrantup.com\"></a>\n选择最新稳定版.rpm文件下载即可\n上传到服务器使用yum安装\n## 下载ambari-vagrant\n```\ngit clone https://github.com/u39kun/ambari-vagrant.git\ncat ambari-vagrant/append-to-etc-hosts.txt >> /etc/hosts --配置ip、域名映射\nvagrant --生成密钥\n```\n## 启动VMs\n```\ncd ambari-vagrant\n```\n你可以看到在该文件夹下有许多centos的版本，官方说centos6.8对ambari的兼容性最好，我们就用centos6.8吧。\n```\ncd centos6.8\ncp ~/.vagrant.d/insecure_private_key .  --将密钥复制到当前文件夹，注意不要少了组后面的一个点，代表当前文件夹\n./up.sh 3 --启动3个virtual machine\n```\n正常的话，就启动了c6801 c6802 c6803这三台虚拟机\n## 登录VMs\n```\nvagrant ssh c6801\nsu -\n```\nssh没问题的话，说明安装是没问题的，下面来安装ambari-server，以root用户完成下面的操作。\n## 安装ambari-server\n下载ambari的源，安装并启动ambari-server\n```\nwget -O /etc/yum.repos.d/ambari.repo http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.5.1.0/ambari.repo\nyum install ambari-server -y\nambari-server setup -s\nambari-server start\n```\n启动成功后，我们可以访问ambari的web界面： http://c6801.ambari.apache.org:8080，初始的登录用户名和密码均为admin，以同样的方式可以访问c6802 c6803，然后我们就可以对着三台虚拟机进行安装hadoop生态的各个组件了。\n# 问题\n安装过程中会出现各种问题，具体问题及解决方案如下：\n## 启动虚拟盒的时候报错\n运行命令：\n```\n./up.sh 3\n```\n错误日志如下：\n![VBoxMangeError](ambari管理监控hadoop生态系统的环境安装及问题解答/VBoxManageError.png)\n```\nThere was an error while excuting 'VBoxMange', a CLI used by vagrant for controlling VirtualBox, The command and stderr is shown below.\nCommand: [\"startvm\", \"afb1736b-3bab-4d1a-a968-16aba764195a\", \"--type\", \"gui\"]\nStderr: VBoxManage: error: The virtual machine \"centos68-c6801-1520048454672_80399\" has terminated upexpectedly during startup because of singal 6.\nVBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), componnent MachineWrap, interface IMachine.\n```\n错误原因：linux系统中的kernel module与ambari需要使用的kernel模块版本不匹配，导致vboxdrv服务启动异常，可以使用命令查看vboxdrv服务的启动情况：\n```\nsystemctl status vboxdrv\n```\n解决办法：\n1.安装更新kernel\n```\nyum install kernel -y\n```\n2.安装kernel-devel\n```\nyum install kernel -y\n```\n3.重启服务器\n```\nreboot\n```\n4.启动vboxdrv服务\n```\nsystemctl start vboxdrv\nsystemctl status vboxdrv --查看状态\n```\n到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。","slug":"ambari管理监控hadoop生态系统的环境安装及问题解答","published":1,"updated":"2018-12-11T13:57:12.962Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k7000rfbs6mrghw2q7","content":"<p>首先来介绍下ambari，它是一个apache的一个顶级项目，hadoop生态组件的监控、管理工具，相比较于cloudera公司的CDH，它的特点是完全开源，一键部署安装、管理、监控大数据各组件，省时省力，下面就来介绍ambari环境是如何安装的。</p>\n<a id=\"more\"></a>\n<p>本安装教程适用于操作系统centos7，在某一台服务器上安装，原理就是虚拟化该服务器成多个virtual box，然后启动ambari服务，管理这些虚拟机。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装步骤可以参考官网：<br><a href=\"https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+Guide\" target=\"_blank\" rel=\"noopener\">ambari.apache.org</a></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install lrzsz openssl openssh-clients git maven -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载安装VirtualBox、Vagrant\"><a href=\"#下载安装VirtualBox、Vagrant\" class=\"headerlink\" title=\"下载安装VirtualBox、Vagrant\"></a>下载安装VirtualBox、Vagrant</h2><p><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"noopener\">VirtualBox</a><br><a href=\"http://downloads.vagrantup.com\" target=\"_blank\" rel=\"noopener\"></a><br>选择最新稳定版.rpm文件下载即可<br>上传到服务器使用yum安装</p>\n<h2 id=\"下载ambari-vagrant\"><a href=\"#下载ambari-vagrant\" class=\"headerlink\" title=\"下载ambari-vagrant\"></a>下载ambari-vagrant</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/u39kun/ambari-vagrant.git</span><br><span class=\"line\">cat ambari-vagrant/append-to-etc-hosts.txt &gt;&gt; /etc/hosts --配置ip、域名映射</span><br><span class=\"line\">vagrant --生成密钥</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动VMs\"><a href=\"#启动VMs\" class=\"headerlink\" title=\"启动VMs\"></a>启动VMs</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ambari-vagrant</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到在该文件夹下有许多centos的版本，官方说centos6.8对ambari的兼容性最好，我们就用centos6.8吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd centos6.8</span><br><span class=\"line\">cp ~/.vagrant.d/insecure_private_key .  --将密钥复制到当前文件夹，注意不要少了组后面的一个点，代表当前文件夹</span><br><span class=\"line\">./up.sh 3 --启动3个virtual machine</span><br></pre></td></tr></table></figure>\n\n<p>正常的话，就启动了c6801 c6802 c6803这三台虚拟机</p>\n<h2 id=\"登录VMs\"><a href=\"#登录VMs\" class=\"headerlink\" title=\"登录VMs\"></a>登录VMs</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant ssh c6801</span><br><span class=\"line\">su -</span><br></pre></td></tr></table></figure>\n\n<p>ssh没问题的话，说明安装是没问题的，下面来安装ambari-server，以root用户完成下面的操作。</p>\n<h2 id=\"安装ambari-server\"><a href=\"#安装ambari-server\" class=\"headerlink\" title=\"安装ambari-server\"></a>安装ambari-server</h2><p>下载ambari的源，安装并启动ambari-server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/ambari.repo http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.5.1.0/ambari.repo</span><br><span class=\"line\">yum install ambari-server -y</span><br><span class=\"line\">ambari-server setup -s</span><br><span class=\"line\">ambari-server start</span><br></pre></td></tr></table></figure>\n\n<p>启动成功后，我们可以访问ambari的web界面： <a href=\"http://c6801.ambari.apache.org:8080，初始的登录用户名和密码均为admin，以同样的方式可以访问c6802\" target=\"_blank\" rel=\"noopener\">http://c6801.ambari.apache.org:8080，初始的登录用户名和密码均为admin，以同样的方式可以访问c6802</a> c6803，然后我们就可以对着三台虚拟机进行安装hadoop生态的各个组件了。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>安装过程中会出现各种问题，具体问题及解决方案如下：</p>\n<h2 id=\"启动虚拟盒的时候报错\"><a href=\"#启动虚拟盒的时候报错\" class=\"headerlink\" title=\"启动虚拟盒的时候报错\"></a>启动虚拟盒的时候报错</h2><p>运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./up.sh 3</span><br></pre></td></tr></table></figure>\n\n<p>错误日志如下：<br><img src=\"/2018/03/10/ambari管理监控hadoop生态系统的环境安装及问题解答/VBoxManageError.png\" alt=\"VBoxMangeError\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There was an error while excuting &apos;VBoxMange&apos;, a CLI used by vagrant for controlling VirtualBox, The command and stderr is shown below.</span><br><span class=\"line\">Command: [&quot;startvm&quot;, &quot;afb1736b-3bab-4d1a-a968-16aba764195a&quot;, &quot;--type&quot;, &quot;gui&quot;]</span><br><span class=\"line\">Stderr: VBoxManage: error: The virtual machine &quot;centos68-c6801-1520048454672_80399&quot; has terminated upexpectedly during startup because of singal 6.</span><br><span class=\"line\">VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), componnent MachineWrap, interface IMachine.</span><br></pre></td></tr></table></figure>\n\n<p>错误原因：linux系统中的kernel module与ambari需要使用的kernel模块版本不匹配，导致vboxdrv服务启动异常，可以使用命令查看vboxdrv服务的启动情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status vboxdrv</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：<br>1.安装更新kernel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install kernel -y</span><br></pre></td></tr></table></figure>\n\n<p>2.安装kernel-devel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install kernel -y</span><br></pre></td></tr></table></figure>\n\n<p>3.重启服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>4.启动vboxdrv服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start vboxdrv</span><br><span class=\"line\">systemctl status vboxdrv --查看状态</span><br></pre></td></tr></table></figure>\n\n<p>到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。</p>\n","site":{"data":{}},"excerpt":"<p>首先来介绍下ambari，它是一个apache的一个顶级项目，hadoop生态组件的监控、管理工具，相比较于cloudera公司的CDH，它的特点是完全开源，一键部署安装、管理、监控大数据各组件，省时省力，下面就来介绍ambari环境是如何安装的。</p>","more":"<p>本安装教程适用于操作系统centos7，在某一台服务器上安装，原理就是虚拟化该服务器成多个virtual box，然后启动ambari服务，管理这些虚拟机。</p>\n<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装步骤可以参考官网：<br><a href=\"https://cwiki.apache.org/confluence/display/AMBARI/Quick+Start+Guide\" target=\"_blank\" rel=\"noopener\">ambari.apache.org</a></p>\n<h2 id=\"环境准备\"><a href=\"#环境准备\" class=\"headerlink\" title=\"环境准备\"></a>环境准备</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install lrzsz openssl openssh-clients git maven -y</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"下载安装VirtualBox、Vagrant\"><a href=\"#下载安装VirtualBox、Vagrant\" class=\"headerlink\" title=\"下载安装VirtualBox、Vagrant\"></a>下载安装VirtualBox、Vagrant</h2><p><a href=\"https://www.virtualbox.org/wiki/Downloads\" target=\"_blank\" rel=\"noopener\">VirtualBox</a><br><a href=\"http://downloads.vagrantup.com\" target=\"_blank\" rel=\"noopener\"></a><br>选择最新稳定版.rpm文件下载即可<br>上传到服务器使用yum安装</p>\n<h2 id=\"下载ambari-vagrant\"><a href=\"#下载ambari-vagrant\" class=\"headerlink\" title=\"下载ambari-vagrant\"></a>下载ambari-vagrant</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/u39kun/ambari-vagrant.git</span><br><span class=\"line\">cat ambari-vagrant/append-to-etc-hosts.txt &gt;&gt; /etc/hosts --配置ip、域名映射</span><br><span class=\"line\">vagrant --生成密钥</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动VMs\"><a href=\"#启动VMs\" class=\"headerlink\" title=\"启动VMs\"></a>启动VMs</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ambari-vagrant</span><br></pre></td></tr></table></figure>\n\n<p>你可以看到在该文件夹下有许多centos的版本，官方说centos6.8对ambari的兼容性最好，我们就用centos6.8吧。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd centos6.8</span><br><span class=\"line\">cp ~/.vagrant.d/insecure_private_key .  --将密钥复制到当前文件夹，注意不要少了组后面的一个点，代表当前文件夹</span><br><span class=\"line\">./up.sh 3 --启动3个virtual machine</span><br></pre></td></tr></table></figure>\n\n<p>正常的话，就启动了c6801 c6802 c6803这三台虚拟机</p>\n<h2 id=\"登录VMs\"><a href=\"#登录VMs\" class=\"headerlink\" title=\"登录VMs\"></a>登录VMs</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vagrant ssh c6801</span><br><span class=\"line\">su -</span><br></pre></td></tr></table></figure>\n\n<p>ssh没问题的话，说明安装是没问题的，下面来安装ambari-server，以root用户完成下面的操作。</p>\n<h2 id=\"安装ambari-server\"><a href=\"#安装ambari-server\" class=\"headerlink\" title=\"安装ambari-server\"></a>安装ambari-server</h2><p>下载ambari的源，安装并启动ambari-server</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -O /etc/yum.repos.d/ambari.repo http://public-repo-1.hortonworks.com/ambari/centos6/2.x/updates/2.5.1.0/ambari.repo</span><br><span class=\"line\">yum install ambari-server -y</span><br><span class=\"line\">ambari-server setup -s</span><br><span class=\"line\">ambari-server start</span><br></pre></td></tr></table></figure>\n\n<p>启动成功后，我们可以访问ambari的web界面： <a href=\"http://c6801.ambari.apache.org:8080，初始的登录用户名和密码均为admin，以同样的方式可以访问c6802\" target=\"_blank\" rel=\"noopener\">http://c6801.ambari.apache.org:8080，初始的登录用户名和密码均为admin，以同样的方式可以访问c6802</a> c6803，然后我们就可以对着三台虚拟机进行安装hadoop生态的各个组件了。</p>\n<h1 id=\"问题\"><a href=\"#问题\" class=\"headerlink\" title=\"问题\"></a>问题</h1><p>安装过程中会出现各种问题，具体问题及解决方案如下：</p>\n<h2 id=\"启动虚拟盒的时候报错\"><a href=\"#启动虚拟盒的时候报错\" class=\"headerlink\" title=\"启动虚拟盒的时候报错\"></a>启动虚拟盒的时候报错</h2><p>运行命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./up.sh 3</span><br></pre></td></tr></table></figure>\n\n<p>错误日志如下：<br><img src=\"/2018/03/10/ambari管理监控hadoop生态系统的环境安装及问题解答/VBoxManageError.png\" alt=\"VBoxMangeError\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">There was an error while excuting &apos;VBoxMange&apos;, a CLI used by vagrant for controlling VirtualBox, The command and stderr is shown below.</span><br><span class=\"line\">Command: [&quot;startvm&quot;, &quot;afb1736b-3bab-4d1a-a968-16aba764195a&quot;, &quot;--type&quot;, &quot;gui&quot;]</span><br><span class=\"line\">Stderr: VBoxManage: error: The virtual machine &quot;centos68-c6801-1520048454672_80399&quot; has terminated upexpectedly during startup because of singal 6.</span><br><span class=\"line\">VBoxManage: error: Details: code NS_ERROR_FAILURE (0x80004005), componnent MachineWrap, interface IMachine.</span><br></pre></td></tr></table></figure>\n\n<p>错误原因：linux系统中的kernel module与ambari需要使用的kernel模块版本不匹配，导致vboxdrv服务启动异常，可以使用命令查看vboxdrv服务的启动情况：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status vboxdrv</span><br></pre></td></tr></table></figure>\n\n<p>解决办法：<br>1.安装更新kernel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install kernel -y</span><br></pre></td></tr></table></figure>\n\n<p>2.安装kernel-devel</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install kernel -y</span><br></pre></td></tr></table></figure>\n\n<p>3.重启服务器</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">reboot</span><br></pre></td></tr></table></figure>\n\n<p>4.启动vboxdrv服务</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start vboxdrv</span><br><span class=\"line\">systemctl status vboxdrv --查看状态</span><br></pre></td></tr></table></figure>\n\n<p>到这里配置就基本完成了，谢谢大家，如果有什么问题，请留言。</p>"},{"title":"c3p0数据库连接池的使用方法","date":"2018-02-03T07:22:26.000Z","_content":"c3p0数据库连接池，一个jdbc连接池，封装了增删改查的各种方法，并为我们自动优化了数据库连接，提高程序的运行效率。\n<!-- more -->\n需要添加的依赖：\n```\n    <!-- https://mvnrepository.com/artifact/c3p0/c3p0 -->\n    <dependency>\n      <groupId>c3p0</groupId>\n      <artifactId>c3p0</artifactId>\n      <version>0.9.1.2</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->\n    <dependency>\n      <groupId>com.mchange</groupId>\n      <artifactId>c3p0</artifactId>\n      <version>0.9.5.2</version>\n    </dependency>\n```\n项目src/resources下需要配置文件c3p0.properties\n```\n    c3p0.JDBC.url=jdbc:mysql://localhost:3306/ms_cms?characterEncoding=utf8  --jdbc连接url\n    c3p0.DriverClass=com.mysql.jdbc.Driver  --数据库驱动\n    c3p0.user=root  --用户名\n    c3p0.pwd=xxx  --密码\n    c3p0.acquireIncrement=3  --当连接池中的连接耗尽时，一次性获取的连接数\n    c3p0.idleConnectionTestPeriod=60  --检查连接池中的空闲连接\n    c3p0.initialPoolSize=10  --初始化连接数\n    c3p0.maxIdleTime=60  --最大空闲时间\n    c3p0.maxPoolSize=20  --连接池最大连接数\n    c3p0.maxStatements=100  --最大会话数\n    c3p0.minPoolSize=5  --连接池最小连接数\n```\njava代码使用方法：\n```\npublic Connection dd() throws FileNotFoundException, IOException, PropertyVetoException, SQLException{\n  \n        Properties pr = new Properties();  \n        \n        String c3p0Properties = this.getClass().getClassLoader().getResource(\"c3p0.properties\").getPath(); //获得src下的c3p0.properties的路径    \n        \n        c3p0Properties = URLDecoder.decode(c3p0Properties, \"utf-8\"); //路径的编码是UTF-8   \n        \n        java.io.File c3p0File = new java.io.File(c3p0Properties); //得到文件c3p0.properties文件   \n        \n        pr.load(new FileInputStream(c3p0File)); //读取c3p0文件的内容  \n\t\t\n//      pr.save(new FileOutputStream(c3p0File), null);  \n        \n        ComboPooledDataSource cpds = new ComboPooledDataSource(); //使用c3p0操作数据库   \n          \n        cpds.setDriverClass(pr.getProperty(\"c3p0DriverClass\")); //加载数据驱动 \n        \n        cpds.setJdbcUrl(pr.getProperty(\"c3p0.JDBC.url\")); //连接特定的数据库   \n        \n        cpds.setUser(pr.getProperty(\"c3p0.user\")); //数据库用户名  \n        \n        cpds.setPassword(pr.getProperty(\"c3p0.pwd\")); //数据库用户密码   \n        \n        Connection conn = cpds.getConnection(); //获得连接   \n\t\t\n        return conn;  \n\t\t\n    }\n```\n","source":"_posts/c3p0数据库连接池的使用方法.md","raw":"---\ntitle: c3p0数据库连接池的使用方法\ndate: 2018-02-03 15:22:26\ntags: [数据库, c3p0]\ncategories: 数据库\n---\nc3p0数据库连接池，一个jdbc连接池，封装了增删改查的各种方法，并为我们自动优化了数据库连接，提高程序的运行效率。\n<!-- more -->\n需要添加的依赖：\n```\n    <!-- https://mvnrepository.com/artifact/c3p0/c3p0 -->\n    <dependency>\n      <groupId>c3p0</groupId>\n      <artifactId>c3p0</artifactId>\n      <version>0.9.1.2</version>\n    </dependency>\n    <!-- https://mvnrepository.com/artifact/com.mchange/c3p0 -->\n    <dependency>\n      <groupId>com.mchange</groupId>\n      <artifactId>c3p0</artifactId>\n      <version>0.9.5.2</version>\n    </dependency>\n```\n项目src/resources下需要配置文件c3p0.properties\n```\n    c3p0.JDBC.url=jdbc:mysql://localhost:3306/ms_cms?characterEncoding=utf8  --jdbc连接url\n    c3p0.DriverClass=com.mysql.jdbc.Driver  --数据库驱动\n    c3p0.user=root  --用户名\n    c3p0.pwd=xxx  --密码\n    c3p0.acquireIncrement=3  --当连接池中的连接耗尽时，一次性获取的连接数\n    c3p0.idleConnectionTestPeriod=60  --检查连接池中的空闲连接\n    c3p0.initialPoolSize=10  --初始化连接数\n    c3p0.maxIdleTime=60  --最大空闲时间\n    c3p0.maxPoolSize=20  --连接池最大连接数\n    c3p0.maxStatements=100  --最大会话数\n    c3p0.minPoolSize=5  --连接池最小连接数\n```\njava代码使用方法：\n```\npublic Connection dd() throws FileNotFoundException, IOException, PropertyVetoException, SQLException{\n  \n        Properties pr = new Properties();  \n        \n        String c3p0Properties = this.getClass().getClassLoader().getResource(\"c3p0.properties\").getPath(); //获得src下的c3p0.properties的路径    \n        \n        c3p0Properties = URLDecoder.decode(c3p0Properties, \"utf-8\"); //路径的编码是UTF-8   \n        \n        java.io.File c3p0File = new java.io.File(c3p0Properties); //得到文件c3p0.properties文件   \n        \n        pr.load(new FileInputStream(c3p0File)); //读取c3p0文件的内容  \n\t\t\n//      pr.save(new FileOutputStream(c3p0File), null);  \n        \n        ComboPooledDataSource cpds = new ComboPooledDataSource(); //使用c3p0操作数据库   \n          \n        cpds.setDriverClass(pr.getProperty(\"c3p0DriverClass\")); //加载数据驱动 \n        \n        cpds.setJdbcUrl(pr.getProperty(\"c3p0.JDBC.url\")); //连接特定的数据库   \n        \n        cpds.setUser(pr.getProperty(\"c3p0.user\")); //数据库用户名  \n        \n        cpds.setPassword(pr.getProperty(\"c3p0.pwd\")); //数据库用户密码   \n        \n        Connection conn = cpds.getConnection(); //获得连接   \n\t\t\n        return conn;  \n\t\t\n    }\n```\n","slug":"c3p0数据库连接池的使用方法","published":1,"updated":"2018-12-11T13:57:12.964Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k8000sfbs6y099y1nq","content":"<p>c3p0数据库连接池，一个jdbc连接池，封装了增删改查的各种方法，并为我们自动优化了数据库连接，提高程序的运行效率。</p>\n<a id=\"more\"></a>\n<p>需要添加的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/c3p0/c3p0 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>项目src/resources下需要配置文件c3p0.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c3p0.JDBC.url=jdbc:mysql://localhost:3306/ms_cms?characterEncoding=utf8  --jdbc连接url</span><br><span class=\"line\">c3p0.DriverClass=com.mysql.jdbc.Driver  --数据库驱动</span><br><span class=\"line\">c3p0.user=root  --用户名</span><br><span class=\"line\">c3p0.pwd=xxx  --密码</span><br><span class=\"line\">c3p0.acquireIncrement=3  --当连接池中的连接耗尽时，一次性获取的连接数</span><br><span class=\"line\">c3p0.idleConnectionTestPeriod=60  --检查连接池中的空闲连接</span><br><span class=\"line\">c3p0.initialPoolSize=10  --初始化连接数</span><br><span class=\"line\">c3p0.maxIdleTime=60  --最大空闲时间</span><br><span class=\"line\">c3p0.maxPoolSize=20  --连接池最大连接数</span><br><span class=\"line\">c3p0.maxStatements=100  --最大会话数</span><br><span class=\"line\">c3p0.minPoolSize=5  --连接池最小连接数</span><br></pre></td></tr></table></figure>\n\n<p>java代码使用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Connection dd() throws FileNotFoundException, IOException, PropertyVetoException, SQLException&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">        Properties pr = new Properties();  </span><br><span class=\"line\">        </span><br><span class=\"line\">        String c3p0Properties = this.getClass().getClassLoader().getResource(&quot;c3p0.properties&quot;).getPath(); //获得src下的c3p0.properties的路径    </span><br><span class=\"line\">        </span><br><span class=\"line\">        c3p0Properties = URLDecoder.decode(c3p0Properties, &quot;utf-8&quot;); //路径的编码是UTF-8   </span><br><span class=\"line\">        </span><br><span class=\"line\">        java.io.File c3p0File = new java.io.File(c3p0Properties); //得到文件c3p0.properties文件   </span><br><span class=\"line\">        </span><br><span class=\"line\">        pr.load(new FileInputStream(c3p0File)); //读取c3p0文件的内容  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//      pr.save(new FileOutputStream(c3p0File), null);  </span><br><span class=\"line\">        </span><br><span class=\"line\">        ComboPooledDataSource cpds = new ComboPooledDataSource(); //使用c3p0操作数据库   </span><br><span class=\"line\">          </span><br><span class=\"line\">        cpds.setDriverClass(pr.getProperty(&quot;c3p0DriverClass&quot;)); //加载数据驱动 </span><br><span class=\"line\">        </span><br><span class=\"line\">        cpds.setJdbcUrl(pr.getProperty(&quot;c3p0.JDBC.url&quot;)); //连接特定的数据库   </span><br><span class=\"line\">        </span><br><span class=\"line\">        cpds.setUser(pr.getProperty(&quot;c3p0.user&quot;)); //数据库用户名  </span><br><span class=\"line\">        </span><br><span class=\"line\">        cpds.setPassword(pr.getProperty(&quot;c3p0.pwd&quot;)); //数据库用户密码   </span><br><span class=\"line\">        </span><br><span class=\"line\">        Connection conn = cpds.getConnection(); //获得连接   </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        return conn;  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>c3p0数据库连接池，一个jdbc连接池，封装了增删改查的各种方法，并为我们自动优化了数据库连接，提高程序的运行效率。</p>","more":"<p>需要添加的依赖：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/c3p0/c3p0 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;c3p0&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.9.1.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/com.mchange/c3p0 --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">  &lt;groupId&gt;com.mchange&lt;/groupId&gt;</span><br><span class=\"line\">  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;</span><br><span class=\"line\">  &lt;version&gt;0.9.5.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<p>项目src/resources下需要配置文件c3p0.properties</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">c3p0.JDBC.url=jdbc:mysql://localhost:3306/ms_cms?characterEncoding=utf8  --jdbc连接url</span><br><span class=\"line\">c3p0.DriverClass=com.mysql.jdbc.Driver  --数据库驱动</span><br><span class=\"line\">c3p0.user=root  --用户名</span><br><span class=\"line\">c3p0.pwd=xxx  --密码</span><br><span class=\"line\">c3p0.acquireIncrement=3  --当连接池中的连接耗尽时，一次性获取的连接数</span><br><span class=\"line\">c3p0.idleConnectionTestPeriod=60  --检查连接池中的空闲连接</span><br><span class=\"line\">c3p0.initialPoolSize=10  --初始化连接数</span><br><span class=\"line\">c3p0.maxIdleTime=60  --最大空闲时间</span><br><span class=\"line\">c3p0.maxPoolSize=20  --连接池最大连接数</span><br><span class=\"line\">c3p0.maxStatements=100  --最大会话数</span><br><span class=\"line\">c3p0.minPoolSize=5  --连接池最小连接数</span><br></pre></td></tr></table></figure>\n\n<p>java代码使用方法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public Connection dd() throws FileNotFoundException, IOException, PropertyVetoException, SQLException&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">        Properties pr = new Properties();  </span><br><span class=\"line\">        </span><br><span class=\"line\">        String c3p0Properties = this.getClass().getClassLoader().getResource(&quot;c3p0.properties&quot;).getPath(); //获得src下的c3p0.properties的路径    </span><br><span class=\"line\">        </span><br><span class=\"line\">        c3p0Properties = URLDecoder.decode(c3p0Properties, &quot;utf-8&quot;); //路径的编码是UTF-8   </span><br><span class=\"line\">        </span><br><span class=\"line\">        java.io.File c3p0File = new java.io.File(c3p0Properties); //得到文件c3p0.properties文件   </span><br><span class=\"line\">        </span><br><span class=\"line\">        pr.load(new FileInputStream(c3p0File)); //读取c3p0文件的内容  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">//      pr.save(new FileOutputStream(c3p0File), null);  </span><br><span class=\"line\">        </span><br><span class=\"line\">        ComboPooledDataSource cpds = new ComboPooledDataSource(); //使用c3p0操作数据库   </span><br><span class=\"line\">          </span><br><span class=\"line\">        cpds.setDriverClass(pr.getProperty(&quot;c3p0DriverClass&quot;)); //加载数据驱动 </span><br><span class=\"line\">        </span><br><span class=\"line\">        cpds.setJdbcUrl(pr.getProperty(&quot;c3p0.JDBC.url&quot;)); //连接特定的数据库   </span><br><span class=\"line\">        </span><br><span class=\"line\">        cpds.setUser(pr.getProperty(&quot;c3p0.user&quot;)); //数据库用户名  </span><br><span class=\"line\">        </span><br><span class=\"line\">        cpds.setPassword(pr.getProperty(&quot;c3p0.pwd&quot;)); //数据库用户密码   </span><br><span class=\"line\">        </span><br><span class=\"line\">        Connection conn = cpds.getConnection(); //获得连接   </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">        return conn;  </span><br><span class=\"line\">\t\t</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"以Hexo网页制作模板构建Github Pages个人网站","date":"2017-12-19T14:52:29.000Z","_content":"个人网站制作过程，以Hexo为例，为大家讲解如何制作，如果有什么错误的地方，欢迎指正，如果有什么不懂的地方，可以email我：chenzuoli709@gmail.com。具体请看详细内容 ---><!-- more -->\n\n# 1.准备环境\n<a href=\"https://nodejs.org/en\">Node.js</a>\n<a href=\"https://git-scm.com\">Git</a>\n\n# 2.安装Hexo\n``` bash\n$ npm install -g hexo-cli\n```\n\n# 3.创建github pages\n<a href=\"https://github.com\">Github官网</a>\n项目名称为<username>.github.io\n\n# 4.配置Hexo\n``` bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n初始化完成后，该目录下的文件结构如下：\n```\n_config.yml --- 全局配置文件\npackage.json\nscaffolds --- 模板\nsource --- 文件仓库\n  _drafts --- 草稿\n  _posts --- 发布过的文件\nthemes --- 主题\n```\n编辑_config.yml：\n指定项目部署的方式为git，上传到远程仓库repo的master分支上\n```\ndeploy:\n  type: git\n  repo: https://github.com/chenzuoli/chenzuoli.github.io.git\n  branch: master\n```\n\n# 5.部署\n``` bash\nhexo generate --- 生成\nhexo deploy --- 部署到github\n```\n\n# 6.域名映射\n第一步：\n![域名映射](createWebsiteHelp/domainMapping.png)\n登录你购买域名服务商提供给你的域名管理中心，我购买的是腾讯云，域名为chenzuoli.com，首先绑定主域名映射到github.com所对应的ip地址，绑定完成后，隔几分钟测试，因为DNS解析先从你的域名提供商开始，然后到其他的域名提供商，再到国外：\n``` bash\nping chenzuoli.com\n```\n看是否能够ping通，如果ping通，说明域名映射已经ok了\n第二步：\n![自定义域名1](createWebsiteHelp/customDomain1.png)\n![自定义域名2](createWebsiteHelp/customDomain2.png)\n登录github到<username>.github.io项目，进入settings选项，设置自定义域名chenzuoli.com，save后，可以看到在该项目下会自动生成一个CNAME的文件，文件内容就是你设置的域名chenzuoli.com。\n稍等几分钟，就可以访问chenzuoli.com了。\n这里说明一下域名映射的流程：chenzuoli.com -> github.com -> chenzuoli.github.io\nchenzuoli.com映射到github.com，然后github.com会解析该请求寻找CNAME为chenzuoli.com的项目，然后就找到了chenzuoli.github.io，于是就可以访问了。\n大家赶紧试试吧。\n\n","source":"_posts/createWebsiteHelp.md","raw":"---\ntitle: 以Hexo网页制作模板构建Github Pages个人网站\ntags: [hexo,github pages,blog]\ndate: 2017-12-19 22:52:29\n---\n个人网站制作过程，以Hexo为例，为大家讲解如何制作，如果有什么错误的地方，欢迎指正，如果有什么不懂的地方，可以email我：chenzuoli709@gmail.com。具体请看详细内容 ---><!-- more -->\n\n# 1.准备环境\n<a href=\"https://nodejs.org/en\">Node.js</a>\n<a href=\"https://git-scm.com\">Git</a>\n\n# 2.安装Hexo\n``` bash\n$ npm install -g hexo-cli\n```\n\n# 3.创建github pages\n<a href=\"https://github.com\">Github官网</a>\n项目名称为<username>.github.io\n\n# 4.配置Hexo\n``` bash\n$ hexo init <folder>\n$ cd <folder>\n$ npm install\n```\n初始化完成后，该目录下的文件结构如下：\n```\n_config.yml --- 全局配置文件\npackage.json\nscaffolds --- 模板\nsource --- 文件仓库\n  _drafts --- 草稿\n  _posts --- 发布过的文件\nthemes --- 主题\n```\n编辑_config.yml：\n指定项目部署的方式为git，上传到远程仓库repo的master分支上\n```\ndeploy:\n  type: git\n  repo: https://github.com/chenzuoli/chenzuoli.github.io.git\n  branch: master\n```\n\n# 5.部署\n``` bash\nhexo generate --- 生成\nhexo deploy --- 部署到github\n```\n\n# 6.域名映射\n第一步：\n![域名映射](createWebsiteHelp/domainMapping.png)\n登录你购买域名服务商提供给你的域名管理中心，我购买的是腾讯云，域名为chenzuoli.com，首先绑定主域名映射到github.com所对应的ip地址，绑定完成后，隔几分钟测试，因为DNS解析先从你的域名提供商开始，然后到其他的域名提供商，再到国外：\n``` bash\nping chenzuoli.com\n```\n看是否能够ping通，如果ping通，说明域名映射已经ok了\n第二步：\n![自定义域名1](createWebsiteHelp/customDomain1.png)\n![自定义域名2](createWebsiteHelp/customDomain2.png)\n登录github到<username>.github.io项目，进入settings选项，设置自定义域名chenzuoli.com，save后，可以看到在该项目下会自动生成一个CNAME的文件，文件内容就是你设置的域名chenzuoli.com。\n稍等几分钟，就可以访问chenzuoli.com了。\n这里说明一下域名映射的流程：chenzuoli.com -> github.com -> chenzuoli.github.io\nchenzuoli.com映射到github.com，然后github.com会解析该请求寻找CNAME为chenzuoli.com的项目，然后就找到了chenzuoli.github.io，于是就可以访问了。\n大家赶紧试试吧。\n\n","slug":"createWebsiteHelp","published":1,"updated":"2018-12-11T13:57:12.968Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0k9000tfbs670ndb006","content":"<p>个人网站制作过程，以Hexo为例，为大家讲解如何制作，如果有什么错误的地方，欢迎指正，如果有什么不懂的地方，可以email我：<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>。具体请看详细内容 —&gt;<a id=\"more\"></a></p>\n<h1 id=\"1-准备环境\"><a href=\"#1-准备环境\" class=\"headerlink\" title=\"1.准备环境\"></a>1.准备环境</h1><p><a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"noopener\">Node.js</a><br><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<h1 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2.安装Hexo\"></a>2.安装Hexo</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-创建github-pages\"><a href=\"#3-创建github-pages\" class=\"headerlink\" title=\"3.创建github pages\"></a>3.创建github pages</h1><p><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github官网</a><br>项目名称为<username>.github.io</username></p>\n<h1 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>初始化完成后，该目录下的文件结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml --- 全局配置文件</span><br><span class=\"line\">package.json</span><br><span class=\"line\">scaffolds --- 模板</span><br><span class=\"line\">source --- 文件仓库</span><br><span class=\"line\">  _drafts --- 草稿</span><br><span class=\"line\">  _posts --- 发布过的文件</span><br><span class=\"line\">themes --- 主题</span><br></pre></td></tr></table></figure>\n\n<p>编辑_config.yml：<br>指定项目部署的方式为git，上传到远程仓库repo的master分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/chenzuoli/chenzuoli.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-部署\"><a href=\"#5-部署\" class=\"headerlink\" title=\"5.部署\"></a>5.部署</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --- 生成</span><br><span class=\"line\">hexo deploy --- 部署到github</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-域名映射\"><a href=\"#6-域名映射\" class=\"headerlink\" title=\"6.域名映射\"></a>6.域名映射</h1><p>第一步：<br><img src=\"/2017/12/19/createWebsiteHelp/domainMapping.png\" alt=\"域名映射\"><br>登录你购买域名服务商提供给你的域名管理中心，我购买的是腾讯云，域名为chenzuoli.com，首先绑定主域名映射到github.com所对应的ip地址，绑定完成后，隔几分钟测试，因为DNS解析先从你的域名提供商开始，然后到其他的域名提供商，再到国外：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping chenzuoli.com</span><br></pre></td></tr></table></figure>\n\n<p>看是否能够ping通，如果ping通，说明域名映射已经ok了<br>第二步：<br><img src=\"/2017/12/19/createWebsiteHelp/customDomain1.png\" alt=\"自定义域名1\"><br><img src=\"/2017/12/19/createWebsiteHelp/customDomain2.png\" alt=\"自定义域名2\"><br>登录github到<username>.github.io项目，进入settings选项，设置自定义域名chenzuoli.com，save后，可以看到在该项目下会自动生成一个CNAME的文件，文件内容就是你设置的域名chenzuoli.com。<br>稍等几分钟，就可以访问chenzuoli.com了。<br>这里说明一下域名映射的流程：chenzuoli.com -&gt; github.com -&gt; chenzuoli.github.io<br>chenzuoli.com映射到github.com，然后github.com会解析该请求寻找CNAME为chenzuoli.com的项目，然后就找到了chenzuoli.github.io，于是就可以访问了。<br>大家赶紧试试吧。</username></p>\n","site":{"data":{}},"excerpt":"<p>个人网站制作过程，以Hexo为例，为大家讲解如何制作，如果有什么错误的地方，欢迎指正，如果有什么不懂的地方，可以email我：<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>。具体请看详细内容 —&gt;</p>","more":"<p></p>\n<h1 id=\"1-准备环境\"><a href=\"#1-准备环境\" class=\"headerlink\" title=\"1.准备环境\"></a>1.准备环境</h1><p><a href=\"https://nodejs.org/en\" target=\"_blank\" rel=\"noopener\">Node.js</a><br><a href=\"https://git-scm.com\" target=\"_blank\" rel=\"noopener\">Git</a></p>\n<h1 id=\"2-安装Hexo\"><a href=\"#2-安装Hexo\" class=\"headerlink\" title=\"2.安装Hexo\"></a>2.安装Hexo</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-创建github-pages\"><a href=\"#3-创建github-pages\" class=\"headerlink\" title=\"3.创建github pages\"></a>3.创建github pages</h1><p><a href=\"https://github.com\" target=\"_blank\" rel=\"noopener\">Github官网</a><br>项目名称为<username>.github.io</username></p>\n<h1 id=\"4-配置Hexo\"><a href=\"#4-配置Hexo\" class=\"headerlink\" title=\"4.配置Hexo\"></a>4.配置Hexo</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">$ <span class=\"built_in\">cd</span> &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br></pre></td></tr></table></figure>\n\n<p>初始化完成后，该目录下的文件结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml --- 全局配置文件</span><br><span class=\"line\">package.json</span><br><span class=\"line\">scaffolds --- 模板</span><br><span class=\"line\">source --- 文件仓库</span><br><span class=\"line\">  _drafts --- 草稿</span><br><span class=\"line\">  _posts --- 发布过的文件</span><br><span class=\"line\">themes --- 主题</span><br></pre></td></tr></table></figure>\n\n<p>编辑_config.yml：<br>指定项目部署的方式为git，上传到远程仓库repo的master分支上</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/chenzuoli/chenzuoli.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-部署\"><a href=\"#5-部署\" class=\"headerlink\" title=\"5.部署\"></a>5.部署</h1><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate --- 生成</span><br><span class=\"line\">hexo deploy --- 部署到github</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-域名映射\"><a href=\"#6-域名映射\" class=\"headerlink\" title=\"6.域名映射\"></a>6.域名映射</h1><p>第一步：<br><img src=\"/2017/12/19/createWebsiteHelp/domainMapping.png\" alt=\"域名映射\"><br>登录你购买域名服务商提供给你的域名管理中心，我购买的是腾讯云，域名为chenzuoli.com，首先绑定主域名映射到github.com所对应的ip地址，绑定完成后，隔几分钟测试，因为DNS解析先从你的域名提供商开始，然后到其他的域名提供商，再到国外：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ping chenzuoli.com</span><br></pre></td></tr></table></figure>\n\n<p>看是否能够ping通，如果ping通，说明域名映射已经ok了<br>第二步：<br><img src=\"/2017/12/19/createWebsiteHelp/customDomain1.png\" alt=\"自定义域名1\"><br><img src=\"/2017/12/19/createWebsiteHelp/customDomain2.png\" alt=\"自定义域名2\"><br>登录github到<username>.github.io项目，进入settings选项，设置自定义域名chenzuoli.com，save后，可以看到在该项目下会自动生成一个CNAME的文件，文件内容就是你设置的域名chenzuoli.com。<br>稍等几分钟，就可以访问chenzuoli.com了。<br>这里说明一下域名映射的流程：chenzuoli.com -&gt; github.com -&gt; chenzuoli.github.io<br>chenzuoli.com映射到github.com，然后github.com会解析该请求寻找CNAME为chenzuoli.com的项目，然后就找到了chenzuoli.github.io，于是就可以访问了。<br>大家赶紧试试吧。</username></p>"},{"title":"debezium实时同步mysql、postgresql数据介绍","date":"2019-07-20T03:01:09.000Z","_content":"给大家介绍一个实时同步数据库的组件debezium，它可以同步mysql、postgresql、mongo、oracle、sql server数据库到hdfs、kafka，功能强大，具体如下。\n<!-- more -->\n\n大致安装步骤：\n\n1.插件decoderbufs或者wal2json\n2.postgresql配置logical等\n3.confluent平台搭建\n4.配置connector\n\n参考文档：<https://debezium.io/docs/connectors/>\n\n\n<h1>for postgresql to kafka</h1>\n\n<b>核心：一个active slot，多个connector</b>\n\n## 1. bin/connect-distributed etc/kafka/connect-distributed.properties\n三台服务器分别执行启动distributed服务（相同的slot.name、group.id保证复制同一个slot replication，保证在同一个组内）\n```\n bin/connect-distributed etc/kafka/connect-distributed-8084.properties\n bin/connect-distributed etc/kafka/connect-distributed-8085.properties\n bin/connect-distributed etc/kafka/connect-distributed-8086.properties\n```\n\n## 2. bin/connect-standalone etc/kafka/connect-standalone.properties etc/kafka-connect-postgres/debezium.properties\nbin/kafka-console-consumer --zookeeper localhost:2182 --topic postgres.localhost.public.test --from-beginning\n\n## 3. 安装decoderbufs、wal2json plugin\n\n<https://github.com/debezium/postgres-decoderbufs/blob/master/README.md>\n<https://github.com/eulerto/wal2json/blob/master/README.md>\n\n安装wal2json时出现的问题：Makefile:10: /usr/lib64/pgsql/pgxs/src/makefiles/pgxs.mk: No such file or directory\nyum install postgresql10-devel即可\n\n## 4. 配置\n\n参考文档：<https://zhubingxu.me/2018/06/05/debezium-postgres/>\n\nshare/java/下创建debezium文件夹，创建文件debezium.properties：\n```\nname=events-debezium\ntasks.max=1\nconnector.class=io.debezium.connector.postgresql.PostgresConnector\ndatabase.hostname=localhost\ndatabase.port=5432\ndatabase.user=postgres\ndatabase.password=postgres\ndatabase.dbname=postgres\ndatabase.history.kafka.bootstrap.servers=localhost:9092\ndatabase.server.id=1\ndatabase.server.name=postgres.localhost\nplugin.name=wal2json\ninclude.schema.changes=true\nslot.name=my\\_slot\\_name\n```\n\n## 5. 异常\n\nError while fetching metadata with correlation id 1 : {postgres.localhost.public.test=LEADER\\_NOT\\_AVAILABLE}\n\n<https://stackoverflow.com/questions/35788697/leader-not-available-kafka-in-console-producer>\n\n配置debezium中$DEBEZIUM\\_HOME/etc/kafka/server.properties\n\n指定参数advertised.host.name\n\nERROR A logical replication slot named 'debezium' for plugin 'wal2json' and database 'postgres' is already active on the server.You cannot have multiple slots with the same name active for the same database (io.debezium.connector.postgresql.connection.PostgresReplicationConnection:104)\n\n在创建connector的配置参数中添加新的slot.name，slot.name的规范必须为字母数字下划线。不指定的话默认为debezium，会产生冲突。\n\n## 6. 分布式kafka connector配置：\n\n<https://archive.cloudera.com/kafka/kafka/2/kafka-0.9.0-kafka2.0.1/connect.html>分布式connector需要通过rest api进行增删改\n\n<https://mapr.com/docs/52/Kafka/Connect-distributed-mode.html> connect-distributed.properties\n\n连接参数配置：[https://debezium.io/docs/connectors/postgresql/\\#connector-properties](https://debezium.io/docs/connectors/postgresql/#connector-properties)\n\n## 7. 注意：\n\ntable.whitelist格式：schemaName.tblname\n\n如果启动connector出现权限不足时：需要给用户赋update权限：\n\nGRANT SELECT, UPDATE ON TABLE test TO debezium;\n\n不监控无主键的表\n\n## 8. 查看postgresql slot\n\na.登陆：psql -U user -d db -h host -p port -W\nb.查看所有slot： select \\* from pg\\_replication\\_slots;\nc.添加slot：SELECT \\* FROM pg\\_create\\_physical\\_replication\\_slot('pg96\\_102');\nd.删除slot：SELECT \\* FROM pg\\_drop\\_replication\\_slot('pg96\\_102');\n\n\n\n</br>\n</br>\n\n<h1>for mysql to kafka</h1>\n\n核心：启动多个connector即可\n\n## 1. 账户及权限\n\nmysql user: debezium:\\*\\*\\*\\*\\*\\*\\*\n\nGRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON \\*.\\* TO 'debezium' IDENTIFIED BY '\\*\\*\\*\\*\\*\\*';\n\n## 2. 配置\n\n[https://debezium.io/docs/connectors/mysql/\\#setting-up-mysql](https://debezium.io/docs/connectors/mysql/#setting-up-mysql)\n\n## 3. 启动\n\nbin/connect-standalone etc/kafka/connect-standalone.properties share/java/debezium/mysql-debezium-8087.properties\n\n三台服务器分别运行：\n```\nbin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties\nbin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties\nbin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties\n```\n\n## 4. kafka connector\n\n请求添加connector-task，随便在哪一台服务器添加1个task\n\ncurl -X POST -H \"Content-Type: application/json\" --data @share/java/debezium/mysql-8134.json <http://localhost:8134/connectors>\n\ntable.whitelist格式：dbname.tblname\n\n测试环境test-hadoop：/mnt/confluent下\n生成的topic名称为：servername.dbname.tblname\n\n## 5. 异常（未解决）\n\n![1](debezium实时同步mysql、postgresql数据介绍/5DCA7786FF43D058BBB827BC521EFBDE)\n![2](debezium实时同步mysql、postgresql数据介绍/A91E335CC16D805E66B44CD76ADF4383)\n\n<b>如果有解决方案，请联系我邮箱chenzuoli709@163.com，不胜感激。</b>","source":"_posts/debezium实时同步mysql、postgresql数据介绍.md","raw":"---\ntitle: debezium实时同步mysql、postgresql数据介绍\ndate: 2019-07-20 11:01:09\ntags: [实时同步,mysql,oracle,postgresql,mongo,sql server]\ncategories: 组件\n---\n给大家介绍一个实时同步数据库的组件debezium，它可以同步mysql、postgresql、mongo、oracle、sql server数据库到hdfs、kafka，功能强大，具体如下。\n<!-- more -->\n\n大致安装步骤：\n\n1.插件decoderbufs或者wal2json\n2.postgresql配置logical等\n3.confluent平台搭建\n4.配置connector\n\n参考文档：<https://debezium.io/docs/connectors/>\n\n\n<h1>for postgresql to kafka</h1>\n\n<b>核心：一个active slot，多个connector</b>\n\n## 1. bin/connect-distributed etc/kafka/connect-distributed.properties\n三台服务器分别执行启动distributed服务（相同的slot.name、group.id保证复制同一个slot replication，保证在同一个组内）\n```\n bin/connect-distributed etc/kafka/connect-distributed-8084.properties\n bin/connect-distributed etc/kafka/connect-distributed-8085.properties\n bin/connect-distributed etc/kafka/connect-distributed-8086.properties\n```\n\n## 2. bin/connect-standalone etc/kafka/connect-standalone.properties etc/kafka-connect-postgres/debezium.properties\nbin/kafka-console-consumer --zookeeper localhost:2182 --topic postgres.localhost.public.test --from-beginning\n\n## 3. 安装decoderbufs、wal2json plugin\n\n<https://github.com/debezium/postgres-decoderbufs/blob/master/README.md>\n<https://github.com/eulerto/wal2json/blob/master/README.md>\n\n安装wal2json时出现的问题：Makefile:10: /usr/lib64/pgsql/pgxs/src/makefiles/pgxs.mk: No such file or directory\nyum install postgresql10-devel即可\n\n## 4. 配置\n\n参考文档：<https://zhubingxu.me/2018/06/05/debezium-postgres/>\n\nshare/java/下创建debezium文件夹，创建文件debezium.properties：\n```\nname=events-debezium\ntasks.max=1\nconnector.class=io.debezium.connector.postgresql.PostgresConnector\ndatabase.hostname=localhost\ndatabase.port=5432\ndatabase.user=postgres\ndatabase.password=postgres\ndatabase.dbname=postgres\ndatabase.history.kafka.bootstrap.servers=localhost:9092\ndatabase.server.id=1\ndatabase.server.name=postgres.localhost\nplugin.name=wal2json\ninclude.schema.changes=true\nslot.name=my\\_slot\\_name\n```\n\n## 5. 异常\n\nError while fetching metadata with correlation id 1 : {postgres.localhost.public.test=LEADER\\_NOT\\_AVAILABLE}\n\n<https://stackoverflow.com/questions/35788697/leader-not-available-kafka-in-console-producer>\n\n配置debezium中$DEBEZIUM\\_HOME/etc/kafka/server.properties\n\n指定参数advertised.host.name\n\nERROR A logical replication slot named 'debezium' for plugin 'wal2json' and database 'postgres' is already active on the server.You cannot have multiple slots with the same name active for the same database (io.debezium.connector.postgresql.connection.PostgresReplicationConnection:104)\n\n在创建connector的配置参数中添加新的slot.name，slot.name的规范必须为字母数字下划线。不指定的话默认为debezium，会产生冲突。\n\n## 6. 分布式kafka connector配置：\n\n<https://archive.cloudera.com/kafka/kafka/2/kafka-0.9.0-kafka2.0.1/connect.html>分布式connector需要通过rest api进行增删改\n\n<https://mapr.com/docs/52/Kafka/Connect-distributed-mode.html> connect-distributed.properties\n\n连接参数配置：[https://debezium.io/docs/connectors/postgresql/\\#connector-properties](https://debezium.io/docs/connectors/postgresql/#connector-properties)\n\n## 7. 注意：\n\ntable.whitelist格式：schemaName.tblname\n\n如果启动connector出现权限不足时：需要给用户赋update权限：\n\nGRANT SELECT, UPDATE ON TABLE test TO debezium;\n\n不监控无主键的表\n\n## 8. 查看postgresql slot\n\na.登陆：psql -U user -d db -h host -p port -W\nb.查看所有slot： select \\* from pg\\_replication\\_slots;\nc.添加slot：SELECT \\* FROM pg\\_create\\_physical\\_replication\\_slot('pg96\\_102');\nd.删除slot：SELECT \\* FROM pg\\_drop\\_replication\\_slot('pg96\\_102');\n\n\n\n</br>\n</br>\n\n<h1>for mysql to kafka</h1>\n\n核心：启动多个connector即可\n\n## 1. 账户及权限\n\nmysql user: debezium:\\*\\*\\*\\*\\*\\*\\*\n\nGRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON \\*.\\* TO 'debezium' IDENTIFIED BY '\\*\\*\\*\\*\\*\\*';\n\n## 2. 配置\n\n[https://debezium.io/docs/connectors/mysql/\\#setting-up-mysql](https://debezium.io/docs/connectors/mysql/#setting-up-mysql)\n\n## 3. 启动\n\nbin/connect-standalone etc/kafka/connect-standalone.properties share/java/debezium/mysql-debezium-8087.properties\n\n三台服务器分别运行：\n```\nbin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties\nbin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties\nbin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties\n```\n\n## 4. kafka connector\n\n请求添加connector-task，随便在哪一台服务器添加1个task\n\ncurl -X POST -H \"Content-Type: application/json\" --data @share/java/debezium/mysql-8134.json <http://localhost:8134/connectors>\n\ntable.whitelist格式：dbname.tblname\n\n测试环境test-hadoop：/mnt/confluent下\n生成的topic名称为：servername.dbname.tblname\n\n## 5. 异常（未解决）\n\n![1](debezium实时同步mysql、postgresql数据介绍/5DCA7786FF43D058BBB827BC521EFBDE)\n![2](debezium实时同步mysql、postgresql数据介绍/A91E335CC16D805E66B44CD76ADF4383)\n\n<b>如果有解决方案，请联系我邮箱chenzuoli709@163.com，不胜感激。</b>","slug":"debezium实时同步mysql、postgresql数据介绍","published":1,"updated":"2019-07-20T03:28:04.524Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ka000ufbs6dawdt9b5","content":"<p>给大家介绍一个实时同步数据库的组件debezium，它可以同步mysql、postgresql、mongo、oracle、sql server数据库到hdfs、kafka，功能强大，具体如下。</p>\n<a id=\"more\"></a>\n\n<p>大致安装步骤：</p>\n<p>1.插件decoderbufs或者wal2json<br>2.postgresql配置logical等<br>3.confluent平台搭建<br>4.配置connector</p>\n<p>参考文档：<a href=\"https://debezium.io/docs/connectors/\" target=\"_blank\" rel=\"noopener\">https://debezium.io/docs/connectors/</a></p>\n<h1>for postgresql to kafka</h1>\n\n<p><b>核心：一个active slot，多个connector</b></p>\n<h2 id=\"1-bin-connect-distributed-etc-kafka-connect-distributed-properties\"><a href=\"#1-bin-connect-distributed-etc-kafka-connect-distributed-properties\" class=\"headerlink\" title=\"1. bin/connect-distributed etc/kafka/connect-distributed.properties\"></a>1. bin/connect-distributed etc/kafka/connect-distributed.properties</h2><p>三台服务器分别执行启动distributed服务（相同的slot.name、group.id保证复制同一个slot replication，保证在同一个组内）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/connect-distributed etc/kafka/connect-distributed-8084.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/connect-distributed-8085.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/connect-distributed-8086.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-bin-connect-standalone-etc-kafka-connect-standalone-properties-etc-kafka-connect-postgres-debezium-properties\"><a href=\"#2-bin-connect-standalone-etc-kafka-connect-standalone-properties-etc-kafka-connect-postgres-debezium-properties\" class=\"headerlink\" title=\"2. bin/connect-standalone etc/kafka/connect-standalone.properties etc/kafka-connect-postgres/debezium.properties\"></a>2. bin/connect-standalone etc/kafka/connect-standalone.properties etc/kafka-connect-postgres/debezium.properties</h2><p>bin/kafka-console-consumer –zookeeper localhost:2182 –topic postgres.localhost.public.test –from-beginning</p>\n<h2 id=\"3-安装decoderbufs、wal2json-plugin\"><a href=\"#3-安装decoderbufs、wal2json-plugin\" class=\"headerlink\" title=\"3. 安装decoderbufs、wal2json plugin\"></a>3. 安装decoderbufs、wal2json plugin</h2><p><a href=\"https://github.com/debezium/postgres-decoderbufs/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/debezium/postgres-decoderbufs/blob/master/README.md</a><br><a href=\"https://github.com/eulerto/wal2json/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/eulerto/wal2json/blob/master/README.md</a></p>\n<p>安装wal2json时出现的问题：Makefile:10: /usr/lib64/pgsql/pgxs/src/makefiles/pgxs.mk: No such file or directory<br>yum install postgresql10-devel即可</p>\n<h2 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4. 配置\"></a>4. 配置</h2><p>参考文档：<a href=\"https://zhubingxu.me/2018/06/05/debezium-postgres/\" target=\"_blank\" rel=\"noopener\">https://zhubingxu.me/2018/06/05/debezium-postgres/</a></p>\n<p>share/java/下创建debezium文件夹，创建文件debezium.properties：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=events-debezium</span><br><span class=\"line\">tasks.max=1</span><br><span class=\"line\">connector.class=io.debezium.connector.postgresql.PostgresConnector</span><br><span class=\"line\">database.hostname=localhost</span><br><span class=\"line\">database.port=5432</span><br><span class=\"line\">database.user=postgres</span><br><span class=\"line\">database.password=postgres</span><br><span class=\"line\">database.dbname=postgres</span><br><span class=\"line\">database.history.kafka.bootstrap.servers=localhost:9092</span><br><span class=\"line\">database.server.id=1</span><br><span class=\"line\">database.server.name=postgres.localhost</span><br><span class=\"line\">plugin.name=wal2json</span><br><span class=\"line\">include.schema.changes=true</span><br><span class=\"line\">slot.name=my\\_slot\\_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-异常\"><a href=\"#5-异常\" class=\"headerlink\" title=\"5. 异常\"></a>5. 异常</h2><p>Error while fetching metadata with correlation id 1 : {postgres.localhost.public.test=LEADER_NOT_AVAILABLE}</p>\n<p><a href=\"https://stackoverflow.com/questions/35788697/leader-not-available-kafka-in-console-producer\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/35788697/leader-not-available-kafka-in-console-producer</a></p>\n<p>配置debezium中$DEBEZIUM_HOME/etc/kafka/server.properties</p>\n<p>指定参数advertised.host.name</p>\n<p>ERROR A logical replication slot named ‘debezium’ for plugin ‘wal2json’ and database ‘postgres’ is already active on the server.You cannot have multiple slots with the same name active for the same database (io.debezium.connector.postgresql.connection.PostgresReplicationConnection:104)</p>\n<p>在创建connector的配置参数中添加新的slot.name，slot.name的规范必须为字母数字下划线。不指定的话默认为debezium，会产生冲突。</p>\n<h2 id=\"6-分布式kafka-connector配置：\"><a href=\"#6-分布式kafka-connector配置：\" class=\"headerlink\" title=\"6. 分布式kafka connector配置：\"></a>6. 分布式kafka connector配置：</h2><p><a href=\"https://archive.cloudera.com/kafka/kafka/2/kafka-0.9.0-kafka2.0.1/connect.html\" target=\"_blank\" rel=\"noopener\">https://archive.cloudera.com/kafka/kafka/2/kafka-0.9.0-kafka2.0.1/connect.html</a>分布式connector需要通过rest api进行增删改</p>\n<p><a href=\"https://mapr.com/docs/52/Kafka/Connect-distributed-mode.html\" target=\"_blank\" rel=\"noopener\">https://mapr.com/docs/52/Kafka/Connect-distributed-mode.html</a> connect-distributed.properties</p>\n<p>连接参数配置：<a href=\"https://debezium.io/docs/connectors/postgresql/#connector-properties\" target=\"_blank\" rel=\"noopener\">https://debezium.io/docs/connectors/postgresql/#connector-properties</a></p>\n<h2 id=\"7-注意：\"><a href=\"#7-注意：\" class=\"headerlink\" title=\"7. 注意：\"></a>7. 注意：</h2><p>table.whitelist格式：schemaName.tblname</p>\n<p>如果启动connector出现权限不足时：需要给用户赋update权限：</p>\n<p>GRANT SELECT, UPDATE ON TABLE test TO debezium;</p>\n<p>不监控无主键的表</p>\n<h2 id=\"8-查看postgresql-slot\"><a href=\"#8-查看postgresql-slot\" class=\"headerlink\" title=\"8. 查看postgresql slot\"></a>8. 查看postgresql slot</h2><p>a.登陆：psql -U user -d db -h host -p port -W<br>b.查看所有slot： select * from pg_replication_slots;<br>c.添加slot：SELECT * FROM pg_create_physical_replication_slot(‘pg96_102’);<br>d.删除slot：SELECT * FROM pg_drop_replication_slot(‘pg96_102’);</p>\n<br>\n<br>\n\n<h1>for mysql to kafka</h1>\n\n<p>核心：启动多个connector即可</p>\n<h2 id=\"1-账户及权限\"><a href=\"#1-账户及权限\" class=\"headerlink\" title=\"1. 账户及权限\"></a>1. 账户及权限</h2><p>mysql user: debezium:*******</p>\n<p>GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO ‘debezium’ IDENTIFIED BY ‘******‘;</p>\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h2><p><a href=\"https://debezium.io/docs/connectors/mysql/#setting-up-mysql\" target=\"_blank\" rel=\"noopener\">https://debezium.io/docs/connectors/mysql/#setting-up-mysql</a></p>\n<h2 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h2><p>bin/connect-standalone etc/kafka/connect-standalone.properties share/java/debezium/mysql-debezium-8087.properties</p>\n<p>三台服务器分别运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-kafka-connector\"><a href=\"#4-kafka-connector\" class=\"headerlink\" title=\"4. kafka connector\"></a>4. kafka connector</h2><p>请求添加connector-task，随便在哪一台服务器添加1个task</p>\n<p>curl -X POST -H “Content-Type: application/json” –data @share/java/debezium/mysql-8134.json <a href=\"http://localhost:8134/connectors\" target=\"_blank\" rel=\"noopener\">http://localhost:8134/connectors</a></p>\n<p>table.whitelist格式：dbname.tblname</p>\n<p>测试环境test-hadoop：/mnt/confluent下<br>生成的topic名称为：servername.dbname.tblname</p>\n<h2 id=\"5-异常（未解决）\"><a href=\"#5-异常（未解决）\" class=\"headerlink\" title=\"5. 异常（未解决）\"></a>5. 异常（未解决）</h2><p><img src=\"/2019/07/20/debezium实时同步mysql、postgresql数据介绍/5DCA7786FF43D058BBB827BC521EFBDE\" alt=\"1\"><br><img src=\"/2019/07/20/debezium实时同步mysql、postgresql数据介绍/A91E335CC16D805E66B44CD76ADF4383\" alt=\"2\"></p>\n<p><b>如果有解决方案，请联系我邮箱<a href=\"mailto:chenzuoli709@163.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@163.com</a>，不胜感激。</b></p>\n","site":{"data":{}},"excerpt":"<p>给大家介绍一个实时同步数据库的组件debezium，它可以同步mysql、postgresql、mongo、oracle、sql server数据库到hdfs、kafka，功能强大，具体如下。</p>","more":"<p>大致安装步骤：</p>\n<p>1.插件decoderbufs或者wal2json<br>2.postgresql配置logical等<br>3.confluent平台搭建<br>4.配置connector</p>\n<p>参考文档：<a href=\"https://debezium.io/docs/connectors/\" target=\"_blank\" rel=\"noopener\">https://debezium.io/docs/connectors/</a></p>\n<h1>for postgresql to kafka</h1>\n\n<p><b>核心：一个active slot，多个connector</b></p>\n<h2 id=\"1-bin-connect-distributed-etc-kafka-connect-distributed-properties\"><a href=\"#1-bin-connect-distributed-etc-kafka-connect-distributed-properties\" class=\"headerlink\" title=\"1. bin/connect-distributed etc/kafka/connect-distributed.properties\"></a>1. bin/connect-distributed etc/kafka/connect-distributed.properties</h2><p>三台服务器分别执行启动distributed服务（相同的slot.name、group.id保证复制同一个slot replication，保证在同一个组内）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/connect-distributed etc/kafka/connect-distributed-8084.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/connect-distributed-8085.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/connect-distributed-8086.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-bin-connect-standalone-etc-kafka-connect-standalone-properties-etc-kafka-connect-postgres-debezium-properties\"><a href=\"#2-bin-connect-standalone-etc-kafka-connect-standalone-properties-etc-kafka-connect-postgres-debezium-properties\" class=\"headerlink\" title=\"2. bin/connect-standalone etc/kafka/connect-standalone.properties etc/kafka-connect-postgres/debezium.properties\"></a>2. bin/connect-standalone etc/kafka/connect-standalone.properties etc/kafka-connect-postgres/debezium.properties</h2><p>bin/kafka-console-consumer –zookeeper localhost:2182 –topic postgres.localhost.public.test –from-beginning</p>\n<h2 id=\"3-安装decoderbufs、wal2json-plugin\"><a href=\"#3-安装decoderbufs、wal2json-plugin\" class=\"headerlink\" title=\"3. 安装decoderbufs、wal2json plugin\"></a>3. 安装decoderbufs、wal2json plugin</h2><p><a href=\"https://github.com/debezium/postgres-decoderbufs/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/debezium/postgres-decoderbufs/blob/master/README.md</a><br><a href=\"https://github.com/eulerto/wal2json/blob/master/README.md\" target=\"_blank\" rel=\"noopener\">https://github.com/eulerto/wal2json/blob/master/README.md</a></p>\n<p>安装wal2json时出现的问题：Makefile:10: /usr/lib64/pgsql/pgxs/src/makefiles/pgxs.mk: No such file or directory<br>yum install postgresql10-devel即可</p>\n<h2 id=\"4-配置\"><a href=\"#4-配置\" class=\"headerlink\" title=\"4. 配置\"></a>4. 配置</h2><p>参考文档：<a href=\"https://zhubingxu.me/2018/06/05/debezium-postgres/\" target=\"_blank\" rel=\"noopener\">https://zhubingxu.me/2018/06/05/debezium-postgres/</a></p>\n<p>share/java/下创建debezium文件夹，创建文件debezium.properties：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name=events-debezium</span><br><span class=\"line\">tasks.max=1</span><br><span class=\"line\">connector.class=io.debezium.connector.postgresql.PostgresConnector</span><br><span class=\"line\">database.hostname=localhost</span><br><span class=\"line\">database.port=5432</span><br><span class=\"line\">database.user=postgres</span><br><span class=\"line\">database.password=postgres</span><br><span class=\"line\">database.dbname=postgres</span><br><span class=\"line\">database.history.kafka.bootstrap.servers=localhost:9092</span><br><span class=\"line\">database.server.id=1</span><br><span class=\"line\">database.server.name=postgres.localhost</span><br><span class=\"line\">plugin.name=wal2json</span><br><span class=\"line\">include.schema.changes=true</span><br><span class=\"line\">slot.name=my\\_slot\\_name</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"5-异常\"><a href=\"#5-异常\" class=\"headerlink\" title=\"5. 异常\"></a>5. 异常</h2><p>Error while fetching metadata with correlation id 1 : {postgres.localhost.public.test=LEADER_NOT_AVAILABLE}</p>\n<p><a href=\"https://stackoverflow.com/questions/35788697/leader-not-available-kafka-in-console-producer\" target=\"_blank\" rel=\"noopener\">https://stackoverflow.com/questions/35788697/leader-not-available-kafka-in-console-producer</a></p>\n<p>配置debezium中$DEBEZIUM_HOME/etc/kafka/server.properties</p>\n<p>指定参数advertised.host.name</p>\n<p>ERROR A logical replication slot named ‘debezium’ for plugin ‘wal2json’ and database ‘postgres’ is already active on the server.You cannot have multiple slots with the same name active for the same database (io.debezium.connector.postgresql.connection.PostgresReplicationConnection:104)</p>\n<p>在创建connector的配置参数中添加新的slot.name，slot.name的规范必须为字母数字下划线。不指定的话默认为debezium，会产生冲突。</p>\n<h2 id=\"6-分布式kafka-connector配置：\"><a href=\"#6-分布式kafka-connector配置：\" class=\"headerlink\" title=\"6. 分布式kafka connector配置：\"></a>6. 分布式kafka connector配置：</h2><p><a href=\"https://archive.cloudera.com/kafka/kafka/2/kafka-0.9.0-kafka2.0.1/connect.html\" target=\"_blank\" rel=\"noopener\">https://archive.cloudera.com/kafka/kafka/2/kafka-0.9.0-kafka2.0.1/connect.html</a>分布式connector需要通过rest api进行增删改</p>\n<p><a href=\"https://mapr.com/docs/52/Kafka/Connect-distributed-mode.html\" target=\"_blank\" rel=\"noopener\">https://mapr.com/docs/52/Kafka/Connect-distributed-mode.html</a> connect-distributed.properties</p>\n<p>连接参数配置：<a href=\"https://debezium.io/docs/connectors/postgresql/#connector-properties\" target=\"_blank\" rel=\"noopener\">https://debezium.io/docs/connectors/postgresql/#connector-properties</a></p>\n<h2 id=\"7-注意：\"><a href=\"#7-注意：\" class=\"headerlink\" title=\"7. 注意：\"></a>7. 注意：</h2><p>table.whitelist格式：schemaName.tblname</p>\n<p>如果启动connector出现权限不足时：需要给用户赋update权限：</p>\n<p>GRANT SELECT, UPDATE ON TABLE test TO debezium;</p>\n<p>不监控无主键的表</p>\n<h2 id=\"8-查看postgresql-slot\"><a href=\"#8-查看postgresql-slot\" class=\"headerlink\" title=\"8. 查看postgresql slot\"></a>8. 查看postgresql slot</h2><p>a.登陆：psql -U user -d db -h host -p port -W<br>b.查看所有slot： select * from pg_replication_slots;<br>c.添加slot：SELECT * FROM pg_create_physical_replication_slot(‘pg96_102’);<br>d.删除slot：SELECT * FROM pg_drop_replication_slot(‘pg96_102’);</p>\n<br>\n<br>\n\n<h1>for mysql to kafka</h1>\n\n<p>核心：启动多个connector即可</p>\n<h2 id=\"1-账户及权限\"><a href=\"#1-账户及权限\" class=\"headerlink\" title=\"1. 账户及权限\"></a>1. 账户及权限</h2><p>mysql user: debezium:*******</p>\n<p>GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO ‘debezium’ IDENTIFIED BY ‘******‘;</p>\n<h2 id=\"2-配置\"><a href=\"#2-配置\" class=\"headerlink\" title=\"2. 配置\"></a>2. 配置</h2><p><a href=\"https://debezium.io/docs/connectors/mysql/#setting-up-mysql\" target=\"_blank\" rel=\"noopener\">https://debezium.io/docs/connectors/mysql/#setting-up-mysql</a></p>\n<h2 id=\"3-启动\"><a href=\"#3-启动\" class=\"headerlink\" title=\"3. 启动\"></a>3. 启动</h2><p>bin/connect-standalone etc/kafka/connect-standalone.properties share/java/debezium/mysql-debezium-8087.properties</p>\n<p>三台服务器分别运行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties</span><br><span class=\"line\">bin/connect-distributed etc/kafka/mysql-connect-distributed-8134.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-kafka-connector\"><a href=\"#4-kafka-connector\" class=\"headerlink\" title=\"4. kafka connector\"></a>4. kafka connector</h2><p>请求添加connector-task，随便在哪一台服务器添加1个task</p>\n<p>curl -X POST -H “Content-Type: application/json” –data @share/java/debezium/mysql-8134.json <a href=\"http://localhost:8134/connectors\" target=\"_blank\" rel=\"noopener\">http://localhost:8134/connectors</a></p>\n<p>table.whitelist格式：dbname.tblname</p>\n<p>测试环境test-hadoop：/mnt/confluent下<br>生成的topic名称为：servername.dbname.tblname</p>\n<h2 id=\"5-异常（未解决）\"><a href=\"#5-异常（未解决）\" class=\"headerlink\" title=\"5. 异常（未解决）\"></a>5. 异常（未解决）</h2><p><img src=\"/2019/07/20/debezium实时同步mysql、postgresql数据介绍/5DCA7786FF43D058BBB827BC521EFBDE\" alt=\"1\"><br><img src=\"/2019/07/20/debezium实时同步mysql、postgresql数据介绍/A91E335CC16D805E66B44CD76ADF4383\" alt=\"2\"></p>\n<p><b>如果有解决方案，请联系我邮箱<a href=\"mailto:chenzuoli709@163.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@163.com</a>，不胜感激。</b></p>"},{"title":"go语言学习","date":"2019-08-10T01:06:33.000Z","notebook":"Dapp&Smart Contract Develop","_content":"\ngo语言: 面向对象、强类型、类似c的语言。\n![golang](go语言学习/golanguage.png)\n<!-- more -->\n\n> 1.同一个目录下面不能有多个package main，分到不同的文件夹中即可；\n> 2.go test\n>> 1. *_test.go是golang特有的约定，为测试文件: go run: cannot run *_test.go files;\n>> 2. go test 默认执行当前目录下以xxx_test.go的测试文件;\n>> 3. go test -v 可以看到详细的输出信息;\n>> 4. go test -v xxx_test.go 指定测试单个文件，但是该文件中如果调用了其它文件中的模块会报错;\n>> 5. go test -v -test.run Testxxx, 该测试会测试包含该函数名的所有函数.\n> 3.函数修饰符view：只能读取数据，不能更改数据；修饰符pure：不访问程序中的数据，他的返回值完全取决于传入的参数\n\n测试代码见<a>[github](https://github.com/chenzuoli/learn-go-with-tests)</a>\n\n2019-08-25更新\n————————————\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。\n\n2019-09-01\n————————————\n推荐给大家一个非常好的入门学习中文网站，里面很全，从基本数据类型、语法，到协程并发、高阶函数、类、多态等。\n<a>[go语言中文网](https://studygolang.com/subject/2)</a>\n\n# panic和recover\n参考文档：<a>[panic和recover](https://studygolang.com/articles/12785)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/panic_recover)</a></b>\n\n# 头等函数\n参考文档：<a>[头等函数](https://studygolang.com/articles/12789)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/first_class_function)</a></b>\n\n# 反射\n参考文档：<a>[反射](https://studygolang.com/articles/13178)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/reflection)</a></b>\n\n# 读取文件\n参考文档：<a>[读取文件](https://studygolang.com/articles/14669)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/read_file.go)</a></b>\n\n# 写入文件/并发写入\n参考文档：<a>[写入文件/并发写入](https://studygolang.com/articles/19475)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/current_write.go)</a></b>\n\n- - -\n2019-09-15更新\n- - -\n# 框架beego学习\n## 执行过程\n![go_execute_process](go语言学习/go_execute_process.png)\n\n- - -\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。","source":"_posts/go语言学习.md","raw":"---\ntitle: go语言学习\ndate: 2019-08-10 09:06:33\ntags: go\ncategories: 计算机语言\nnotebook: Dapp&Smart Contract Develop\n---\n\ngo语言: 面向对象、强类型、类似c的语言。\n![golang](go语言学习/golanguage.png)\n<!-- more -->\n\n> 1.同一个目录下面不能有多个package main，分到不同的文件夹中即可；\n> 2.go test\n>> 1. *_test.go是golang特有的约定，为测试文件: go run: cannot run *_test.go files;\n>> 2. go test 默认执行当前目录下以xxx_test.go的测试文件;\n>> 3. go test -v 可以看到详细的输出信息;\n>> 4. go test -v xxx_test.go 指定测试单个文件，但是该文件中如果调用了其它文件中的模块会报错;\n>> 5. go test -v -test.run Testxxx, 该测试会测试包含该函数名的所有函数.\n> 3.函数修饰符view：只能读取数据，不能更改数据；修饰符pure：不访问程序中的数据，他的返回值完全取决于传入的参数\n\n测试代码见<a>[github](https://github.com/chenzuoli/learn-go-with-tests)</a>\n\n2019-08-25更新\n————————————\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。\n\n2019-09-01\n————————————\n推荐给大家一个非常好的入门学习中文网站，里面很全，从基本数据类型、语法，到协程并发、高阶函数、类、多态等。\n<a>[go语言中文网](https://studygolang.com/subject/2)</a>\n\n# panic和recover\n参考文档：<a>[panic和recover](https://studygolang.com/articles/12785)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/panic_recover)</a></b>\n\n# 头等函数\n参考文档：<a>[头等函数](https://studygolang.com/articles/12789)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/first_class_function)</a></b>\n\n# 反射\n参考文档：<a>[反射](https://studygolang.com/articles/13178)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/reflection)</a></b>\n\n# 读取文件\n参考文档：<a>[读取文件](https://studygolang.com/articles/14669)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/read_file.go)</a></b>\n\n# 写入文件/并发写入\n参考文档：<a>[写入文件/并发写入](https://studygolang.com/articles/19475)</a>\n代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/current_write.go)</a></b>\n\n- - -\n2019-09-15更新\n- - -\n# 框架beego学习\n## 执行过程\n![go_execute_process](go语言学习/go_execute_process.png)\n\n- - -\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。","slug":"go语言学习","published":1,"updated":"2019-09-15T09:02:15.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kb000vfbs6qtebx5l0","content":"<p>go语言: 面向对象、强类型、类似c的语言。<br><img src=\"/2019/08/10/go语言学习/golanguage.png\" alt=\"golang\"></p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>1.同一个目录下面不能有多个package main，分到不同的文件夹中即可；<br>2.go test</p>\n<blockquote>\n<ol>\n<li>*_test.go是golang特有的约定，为测试文件: go run: cannot run *_test.go files;</li>\n<li>go test 默认执行当前目录下以xxx_test.go的测试文件;</li>\n<li>go test -v 可以看到详细的输出信息;</li>\n<li>go test -v xxx_test.go 指定测试单个文件，但是该文件中如果调用了其它文件中的模块会报错;</li>\n<li>go test -v -test.run Testxxx, 该测试会测试包含该函数名的所有函数.</li>\n<li>函数修饰符view：只能读取数据，不能更改数据；修饰符pure：不访问程序中的数据，他的返回值完全取决于传入的参数</li>\n</ol>\n</blockquote>\n</blockquote>\n<p>测试代码见<a><a href=\"https://github.com/chenzuoli/learn-go-with-tests\" target=\"_blank\" rel=\"noopener\">github</a></a></p>\n<p>2019-08-25更新<br>————————————<br>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>\n<p>2019-09-01<br>————————————<br>推荐给大家一个非常好的入门学习中文网站，里面很全，从基本数据类型、语法，到协程并发、高阶函数、类、多态等。<br><a><a href=\"https://studygolang.com/subject/2\" target=\"_blank\" rel=\"noopener\">go语言中文网</a></a></p>\n<h1 id=\"panic和recover\"><a href=\"#panic和recover\" class=\"headerlink\" title=\"panic和recover\"></a>panic和recover</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/12785\" target=\"_blank\" rel=\"noopener\">panic和recover</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/panic_recover\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"头等函数\"><a href=\"#头等函数\" class=\"headerlink\" title=\"头等函数\"></a>头等函数</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/12789\" target=\"_blank\" rel=\"noopener\">头等函数</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/first_class_function\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/13178\" target=\"_blank\" rel=\"noopener\">反射</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/reflection\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/14669\" target=\"_blank\" rel=\"noopener\">读取文件</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/read_file.go\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"写入文件-并发写入\"><a href=\"#写入文件-并发写入\" class=\"headerlink\" title=\"写入文件/并发写入\"></a>写入文件/并发写入</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/19475\" target=\"_blank\" rel=\"noopener\">写入文件/并发写入</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/current_write.go\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<hr>\n<p>2019-09-15更新</p>\n<hr>\n<h1 id=\"框架beego学习\"><a href=\"#框架beego学习\" class=\"headerlink\" title=\"框架beego学习\"></a>框架beego学习</h1><h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p><img src=\"/2019/08/10/go语言学习/go_execute_process.png\" alt=\"go_execute_process\"></p>\n<hr>\n<p>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>\n","site":{"data":{}},"excerpt":"<p>go语言: 面向对象、强类型、类似c的语言。<br><img src=\"/2019/08/10/go语言学习/golanguage.png\" alt=\"golang\"></p>","more":"<blockquote>\n<p>1.同一个目录下面不能有多个package main，分到不同的文件夹中即可；<br>2.go test</p>\n<blockquote>\n<ol>\n<li>*_test.go是golang特有的约定，为测试文件: go run: cannot run *_test.go files;</li>\n<li>go test 默认执行当前目录下以xxx_test.go的测试文件;</li>\n<li>go test -v 可以看到详细的输出信息;</li>\n<li>go test -v xxx_test.go 指定测试单个文件，但是该文件中如果调用了其它文件中的模块会报错;</li>\n<li>go test -v -test.run Testxxx, 该测试会测试包含该函数名的所有函数.</li>\n<li>函数修饰符view：只能读取数据，不能更改数据；修饰符pure：不访问程序中的数据，他的返回值完全取决于传入的参数</li>\n</ol>\n</blockquote>\n</blockquote>\n<p>测试代码见<a><a href=\"https://github.com/chenzuoli/learn-go-with-tests\" target=\"_blank\" rel=\"noopener\">github</a></a></p>\n<p>2019-08-25更新<br>————————————<br>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>\n<p>2019-09-01<br>————————————<br>推荐给大家一个非常好的入门学习中文网站，里面很全，从基本数据类型、语法，到协程并发、高阶函数、类、多态等。<br><a><a href=\"https://studygolang.com/subject/2\" target=\"_blank\" rel=\"noopener\">go语言中文网</a></a></p>\n<h1 id=\"panic和recover\"><a href=\"#panic和recover\" class=\"headerlink\" title=\"panic和recover\"></a>panic和recover</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/12785\" target=\"_blank\" rel=\"noopener\">panic和recover</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/panic_recover\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"头等函数\"><a href=\"#头等函数\" class=\"headerlink\" title=\"头等函数\"></a>头等函数</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/12789\" target=\"_blank\" rel=\"noopener\">头等函数</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/first_class_function\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"反射\"><a href=\"#反射\" class=\"headerlink\" title=\"反射\"></a>反射</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/13178\" target=\"_blank\" rel=\"noopener\">反射</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/tree/master/hello-world/reflection\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"读取文件\"><a href=\"#读取文件\" class=\"headerlink\" title=\"读取文件\"></a>读取文件</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/14669\" target=\"_blank\" rel=\"noopener\">读取文件</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/read_file.go\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"写入文件-并发写入\"><a href=\"#写入文件-并发写入\" class=\"headerlink\" title=\"写入文件/并发写入\"></a>写入文件/并发写入</h1><p>参考文档：<a><a href=\"https://studygolang.com/articles/19475\" target=\"_blank\" rel=\"noopener\">写入文件/并发写入</a></a><br>代码在<b><a><a href=\"https://github.com/chenzuoli/learn-go-with-tests/blob/master/hello-world/file/current_write.go\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<hr>\n<p>2019-09-15更新</p>\n<hr>\n<h1 id=\"框架beego学习\"><a href=\"#框架beego学习\" class=\"headerlink\" title=\"框架beego学习\"></a>框架beego学习</h1><h2 id=\"执行过程\"><a href=\"#执行过程\" class=\"headerlink\" title=\"执行过程\"></a>执行过程</h2><p><img src=\"/2019/08/10/go语言学习/go_execute_process.png\" alt=\"go_execute_process\"></p>\n<hr>\n<p>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>"},{"title":"hive相关","date":"2019-07-21T15:01:10.000Z","_content":"\n下面的内容包含hive的简单操作，增删改查，权限，一些异常的解决方案。\n\n<!-- more -->\n\n# 1. 在linux命令行端执行hql语句\n```\nhive -e 'show table tableName'\n```\n# 2. 在linux命令行端执行hql文件\n```\nhive -f fileName\n```\n# 3. 按照分区查看hive表中的数据量\n```\nhive -e 'select dt, count(1) from test_hive.wps_android_uuid_userid group by dt'\n```\n# 4. 添加分区\n```\nalter table test_hive.wps_android_uuid_userid  add  if not exists partition (dt='2018-08-04')\n```\n# 5. 赋表权限\n```\ngrant select on table usersdb.account_src to user w_wangzhe\n```\n# 6. 赋库权限\n```\nGRANT ALL ON DATABASE DEFAULT TO USER fatkun;\nGRANT ALL ON TABLE test TO GROUP kpi;\nREVOKE ALL ON TABLE test FROM GROUP kpi;\nGRANT ALL TO USER fatkun;\nREVOKE ALL FROM fatkun;\n```\n# 7. 重命名\n```\nalter table data_platform.td_request_log rename to data_platform.td_request_log_old\n```\n# 8. Error \nwhile processing statement: FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask\n```\nset hive.auto.convert.join = false;\n```\n        \n# 9.执行sql文件\n```\nhive -d etldate='2018-08-16' -f loan_periods.hql\n```\n# 10.add jar\n```\nadd jar /usr/hdp/current/hive-client/lib/commons-httpclient-3.0.1.jar;\n```\n# 11.add column\n```\nhive -e \"alter table report.user_detail_20180614  add columns(identifier_type string comment '注册类型',channel string comment '注册渠道')\"\n```\n# 12.load 文件到hive表\n本地文件：\n```\nhive -e \"load data local inpath '/data/code/app_list_0814.csv' into table dim.dim_app_list\"\n```\nhdfs文件：\n```\nhive -e \"load data inpath '/data/code/app_list_0814.csv' into table dim.dim_app_list\"\n```\n# 13.列\n## 13.1修改列位置\nalter table factor.mf_bus_finc_app change column submit_op_no submit_op_no string after company_id\n## 13.2增加列\nhive -e \"alter table data_platform_new.face_request_log add columns(channel string)\"\n# 14.修改权限\nhive -e \"grant select on table stg.risk_apply_users to user userName\"\n# 15.自定义函数\n```\ncreate  function dateformat as 'com.kso.dw.hive.udf.DateFormat' using jar 'hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar';\nmysql -h10.0.1.160 -uadmin -pmd854NHmv3bF0kl9 hive4fac31f3 -e 'select name from dbs' | xargs -n 1 -i echo \"create  function  {}.mymd5_kc as 'com.kso.dw.hive.udf.MyMd5_KeyCenter' using jar 'hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar';\"\n```\n# 16.全局替换\n```\nsed -i 's/CREATE TABLE/CREATE EXTERNAL TABLE/g' *.hql\n```\n# 17.not a file exception\nnot a file ks3://online-hadoop/ods/report/dt=2019-01-01/1\n```\nset mapreduce.input.fileinputformat.input.dir.recursive=true;\n```\n# 18.exception\n```\nset hive.execution.engine=mr;\n```\n\n# 19. too many counters\norg.apache.hadoop.mapreduce.counters.LimitExceededException: Too many counters: 121 max=120\nresolved:change the tez configuration\n```\ntez.counters.max= 200\n```\n\n# 20.SHOW TRANSACTIONS\n```\nABORT TRANSACTIONS 4951;\nshow locks;\nmysql:\nselect * from hive_locks;\nselect * from hive_locks where HL_TXNID > 0;\n```\n# 21.acquiring locks\nFAILED: Error in acquiring locks: Lock acquisition for LockRequest(component:[LockComponent(type:EXCLUSIVE\n关闭事务： set hive.support.concurrency=false\n# 22.事务表查询\n```\nset hive.support.concurrency=true;\nset hive.exec.dynamic.partition.mode=nonstrict;\nset hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;\nset hive.compactor.initiator.on=true;\nset hive.compactor.worker.threads=1;\n```\n# 23. 内部表转外部表\n```\nalter table default.test set TBLPROPERTIES('EXTERNAL'='true');\n```\n\n# 24. 外部表转内部表\n```\nalter table tableA set TBLPROPERTIES('EXTERNAL'='false')\n```\n\n# 25.修改元数据路径\n    元数据库：\n```\nUPDATE dbs SET DB_LOCATION_URI=REPLACE(DB_LOCATION_URI,'hdfs-ha','bjCluster');\n``` \n    元数据表：\n```\nUPDATE sds SET LOCATION=REPLACE(LOCATION,'ks-jinrong-dw','online-hadoop');\nUPDATE sds SET LOCATION=REPLACE(LOCATION,'hdfs-ha','bjCluster');\n```\n    自定义函数：\n```\nUPDATE func_ru SET RESOURCE_URI=REPLACE(RESOURCE_URI,'hdfs-ha','bjCluster');\n```\n\n# 26.set role admin\n# 27.控制map个数\n```\nset mapred.max.split.size=400000000;\nset mapred.min.split.size.per.node=400000000;\nset mapred.min.split.size.per.rack=400000000;\nset hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;\n```\n","source":"_posts/hive相关.md","raw":"---\ntitle: hive相关\ndate: 2019-07-21 23:01:10\ntags: hive\ncategories: [IT,hive]\n---\n\n下面的内容包含hive的简单操作，增删改查，权限，一些异常的解决方案。\n\n<!-- more -->\n\n# 1. 在linux命令行端执行hql语句\n```\nhive -e 'show table tableName'\n```\n# 2. 在linux命令行端执行hql文件\n```\nhive -f fileName\n```\n# 3. 按照分区查看hive表中的数据量\n```\nhive -e 'select dt, count(1) from test_hive.wps_android_uuid_userid group by dt'\n```\n# 4. 添加分区\n```\nalter table test_hive.wps_android_uuid_userid  add  if not exists partition (dt='2018-08-04')\n```\n# 5. 赋表权限\n```\ngrant select on table usersdb.account_src to user w_wangzhe\n```\n# 6. 赋库权限\n```\nGRANT ALL ON DATABASE DEFAULT TO USER fatkun;\nGRANT ALL ON TABLE test TO GROUP kpi;\nREVOKE ALL ON TABLE test FROM GROUP kpi;\nGRANT ALL TO USER fatkun;\nREVOKE ALL FROM fatkun;\n```\n# 7. 重命名\n```\nalter table data_platform.td_request_log rename to data_platform.td_request_log_old\n```\n# 8. Error \nwhile processing statement: FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask\n```\nset hive.auto.convert.join = false;\n```\n        \n# 9.执行sql文件\n```\nhive -d etldate='2018-08-16' -f loan_periods.hql\n```\n# 10.add jar\n```\nadd jar /usr/hdp/current/hive-client/lib/commons-httpclient-3.0.1.jar;\n```\n# 11.add column\n```\nhive -e \"alter table report.user_detail_20180614  add columns(identifier_type string comment '注册类型',channel string comment '注册渠道')\"\n```\n# 12.load 文件到hive表\n本地文件：\n```\nhive -e \"load data local inpath '/data/code/app_list_0814.csv' into table dim.dim_app_list\"\n```\nhdfs文件：\n```\nhive -e \"load data inpath '/data/code/app_list_0814.csv' into table dim.dim_app_list\"\n```\n# 13.列\n## 13.1修改列位置\nalter table factor.mf_bus_finc_app change column submit_op_no submit_op_no string after company_id\n## 13.2增加列\nhive -e \"alter table data_platform_new.face_request_log add columns(channel string)\"\n# 14.修改权限\nhive -e \"grant select on table stg.risk_apply_users to user userName\"\n# 15.自定义函数\n```\ncreate  function dateformat as 'com.kso.dw.hive.udf.DateFormat' using jar 'hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar';\nmysql -h10.0.1.160 -uadmin -pmd854NHmv3bF0kl9 hive4fac31f3 -e 'select name from dbs' | xargs -n 1 -i echo \"create  function  {}.mymd5_kc as 'com.kso.dw.hive.udf.MyMd5_KeyCenter' using jar 'hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar';\"\n```\n# 16.全局替换\n```\nsed -i 's/CREATE TABLE/CREATE EXTERNAL TABLE/g' *.hql\n```\n# 17.not a file exception\nnot a file ks3://online-hadoop/ods/report/dt=2019-01-01/1\n```\nset mapreduce.input.fileinputformat.input.dir.recursive=true;\n```\n# 18.exception\n```\nset hive.execution.engine=mr;\n```\n\n# 19. too many counters\norg.apache.hadoop.mapreduce.counters.LimitExceededException: Too many counters: 121 max=120\nresolved:change the tez configuration\n```\ntez.counters.max= 200\n```\n\n# 20.SHOW TRANSACTIONS\n```\nABORT TRANSACTIONS 4951;\nshow locks;\nmysql:\nselect * from hive_locks;\nselect * from hive_locks where HL_TXNID > 0;\n```\n# 21.acquiring locks\nFAILED: Error in acquiring locks: Lock acquisition for LockRequest(component:[LockComponent(type:EXCLUSIVE\n关闭事务： set hive.support.concurrency=false\n# 22.事务表查询\n```\nset hive.support.concurrency=true;\nset hive.exec.dynamic.partition.mode=nonstrict;\nset hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;\nset hive.compactor.initiator.on=true;\nset hive.compactor.worker.threads=1;\n```\n# 23. 内部表转外部表\n```\nalter table default.test set TBLPROPERTIES('EXTERNAL'='true');\n```\n\n# 24. 外部表转内部表\n```\nalter table tableA set TBLPROPERTIES('EXTERNAL'='false')\n```\n\n# 25.修改元数据路径\n    元数据库：\n```\nUPDATE dbs SET DB_LOCATION_URI=REPLACE(DB_LOCATION_URI,'hdfs-ha','bjCluster');\n``` \n    元数据表：\n```\nUPDATE sds SET LOCATION=REPLACE(LOCATION,'ks-jinrong-dw','online-hadoop');\nUPDATE sds SET LOCATION=REPLACE(LOCATION,'hdfs-ha','bjCluster');\n```\n    自定义函数：\n```\nUPDATE func_ru SET RESOURCE_URI=REPLACE(RESOURCE_URI,'hdfs-ha','bjCluster');\n```\n\n# 26.set role admin\n# 27.控制map个数\n```\nset mapred.max.split.size=400000000;\nset mapred.min.split.size.per.node=400000000;\nset mapred.min.split.size.per.rack=400000000;\nset hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;\n```\n","slug":"hive相关","published":1,"updated":"2019-07-21T15:32:29.932Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kc000wfbs6pd4ssp8l","content":"<p>下面的内容包含hive的简单操作，增删改查，权限，一些异常的解决方案。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-在linux命令行端执行hql语句\"><a href=\"#1-在linux命令行端执行hql语句\" class=\"headerlink\" title=\"1. 在linux命令行端执行hql语句\"></a>1. 在linux命令行端执行hql语句</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &apos;show table tableName&apos;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-在linux命令行端执行hql文件\"><a href=\"#2-在linux命令行端执行hql文件\" class=\"headerlink\" title=\"2. 在linux命令行端执行hql文件\"></a>2. 在linux命令行端执行hql文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -f fileName</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-按照分区查看hive表中的数据量\"><a href=\"#3-按照分区查看hive表中的数据量\" class=\"headerlink\" title=\"3. 按照分区查看hive表中的数据量\"></a>3. 按照分区查看hive表中的数据量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &apos;select dt, count(1) from test_hive.wps_android_uuid_userid group by dt&apos;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-添加分区\"><a href=\"#4-添加分区\" class=\"headerlink\" title=\"4. 添加分区\"></a>4. 添加分区</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table test_hive.wps_android_uuid_userid  add  if not exists partition (dt=&apos;2018-08-04&apos;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-赋表权限\"><a href=\"#5-赋表权限\" class=\"headerlink\" title=\"5. 赋表权限\"></a>5. 赋表权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant select on table usersdb.account_src to user w_wangzhe</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-赋库权限\"><a href=\"#6-赋库权限\" class=\"headerlink\" title=\"6. 赋库权限\"></a>6. 赋库权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL ON DATABASE DEFAULT TO USER fatkun;</span><br><span class=\"line\">GRANT ALL ON TABLE test TO GROUP kpi;</span><br><span class=\"line\">REVOKE ALL ON TABLE test FROM GROUP kpi;</span><br><span class=\"line\">GRANT ALL TO USER fatkun;</span><br><span class=\"line\">REVOKE ALL FROM fatkun;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-重命名\"><a href=\"#7-重命名\" class=\"headerlink\" title=\"7. 重命名\"></a>7. 重命名</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table data_platform.td_request_log rename to data_platform.td_request_log_old</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-Error\"><a href=\"#8-Error\" class=\"headerlink\" title=\"8. Error\"></a>8. Error</h1><p>while processing statement: FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set hive.auto.convert.join = false;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"9-执行sql文件\"><a href=\"#9-执行sql文件\" class=\"headerlink\" title=\"9.执行sql文件\"></a>9.执行sql文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -d etldate=&apos;2018-08-16&apos; -f loan_periods.hql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-add-jar\"><a href=\"#10-add-jar\" class=\"headerlink\" title=\"10.add jar\"></a>10.add jar</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add jar /usr/hdp/current/hive-client/lib/commons-httpclient-3.0.1.jar;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-add-column\"><a href=\"#11-add-column\" class=\"headerlink\" title=\"11.add column\"></a>11.add column</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &quot;alter table report.user_detail_20180614  add columns(identifier_type string comment &apos;注册类型&apos;,channel string comment &apos;注册渠道&apos;)&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-load-文件到hive表\"><a href=\"#12-load-文件到hive表\" class=\"headerlink\" title=\"12.load 文件到hive表\"></a>12.load 文件到hive表</h1><p>本地文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &quot;load data local inpath &apos;/data/code/app_list_0814.csv&apos; into table dim.dim_app_list&quot;</span><br></pre></td></tr></table></figure>\n\n<p>hdfs文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &quot;load data inpath &apos;/data/code/app_list_0814.csv&apos; into table dim.dim_app_list&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"13-列\"><a href=\"#13-列\" class=\"headerlink\" title=\"13.列\"></a>13.列</h1><h2 id=\"13-1修改列位置\"><a href=\"#13-1修改列位置\" class=\"headerlink\" title=\"13.1修改列位置\"></a>13.1修改列位置</h2><p>alter table factor.mf_bus_finc_app change column submit_op_no submit_op_no string after company_id</p>\n<h2 id=\"13-2增加列\"><a href=\"#13-2增加列\" class=\"headerlink\" title=\"13.2增加列\"></a>13.2增加列</h2><p>hive -e “alter table data_platform_new.face_request_log add columns(channel string)”</p>\n<h1 id=\"14-修改权限\"><a href=\"#14-修改权限\" class=\"headerlink\" title=\"14.修改权限\"></a>14.修改权限</h1><p>hive -e “grant select on table stg.risk_apply_users to user userName”</p>\n<h1 id=\"15-自定义函数\"><a href=\"#15-自定义函数\" class=\"headerlink\" title=\"15.自定义函数\"></a>15.自定义函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  function dateformat as &apos;com.kso.dw.hive.udf.DateFormat&apos; using jar &apos;hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar&apos;;</span><br><span class=\"line\">mysql -h10.0.1.160 -uadmin -pmd854NHmv3bF0kl9 hive4fac31f3 -e &apos;select name from dbs&apos; | xargs -n 1 -i echo &quot;create  function  &#123;&#125;.mymd5_kc as &apos;com.kso.dw.hive.udf.MyMd5_KeyCenter&apos; using jar &apos;hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar&apos;;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"16-全局替换\"><a href=\"#16-全局替换\" class=\"headerlink\" title=\"16.全局替换\"></a>16.全局替换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/CREATE TABLE/CREATE EXTERNAL TABLE/g&apos; *.hql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"17-not-a-file-exception\"><a href=\"#17-not-a-file-exception\" class=\"headerlink\" title=\"17.not a file exception\"></a>17.not a file exception</h1><p>not a file ks3://online-hadoop/ods/report/dt=2019-01-01/1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mapreduce.input.fileinputformat.input.dir.recursive=true;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"18-exception\"><a href=\"#18-exception\" class=\"headerlink\" title=\"18.exception\"></a>18.exception</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set hive.execution.engine=mr;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"19-too-many-counters\"><a href=\"#19-too-many-counters\" class=\"headerlink\" title=\"19. too many counters\"></a>19. too many counters</h1><p>org.apache.hadoop.mapreduce.counters.LimitExceededException: Too many counters: 121 max=120<br>resolved:change the tez configuration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tez.counters.max= 200</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"20-SHOW-TRANSACTIONS\"><a href=\"#20-SHOW-TRANSACTIONS\" class=\"headerlink\" title=\"20.SHOW TRANSACTIONS\"></a>20.SHOW TRANSACTIONS</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABORT TRANSACTIONS 4951;</span><br><span class=\"line\">show locks;</span><br><span class=\"line\">mysql:</span><br><span class=\"line\">select * from hive_locks;</span><br><span class=\"line\">select * from hive_locks where HL_TXNID &gt; 0;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"21-acquiring-locks\"><a href=\"#21-acquiring-locks\" class=\"headerlink\" title=\"21.acquiring locks\"></a>21.acquiring locks</h1><p>FAILED: Error in acquiring locks: Lock acquisition for LockRequest(component:[LockComponent(type:EXCLUSIVE<br>关闭事务： set hive.support.concurrency=false</p>\n<h1 id=\"22-事务表查询\"><a href=\"#22-事务表查询\" class=\"headerlink\" title=\"22.事务表查询\"></a>22.事务表查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set hive.support.concurrency=true;</span><br><span class=\"line\">set hive.exec.dynamic.partition.mode=nonstrict;</span><br><span class=\"line\">set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class=\"line\">set hive.compactor.initiator.on=true;</span><br><span class=\"line\">set hive.compactor.worker.threads=1;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"23-内部表转外部表\"><a href=\"#23-内部表转外部表\" class=\"headerlink\" title=\"23. 内部表转外部表\"></a>23. 内部表转外部表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table default.test set TBLPROPERTIES(&apos;EXTERNAL&apos;=&apos;true&apos;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"24-外部表转内部表\"><a href=\"#24-外部表转内部表\" class=\"headerlink\" title=\"24. 外部表转内部表\"></a>24. 外部表转内部表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table tableA set TBLPROPERTIES(&apos;EXTERNAL&apos;=&apos;false&apos;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"25-修改元数据路径\"><a href=\"#25-修改元数据路径\" class=\"headerlink\" title=\"25.修改元数据路径\"></a>25.修改元数据路径</h1><pre><code>元数据库：</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE dbs SET DB_LOCATION_URI=REPLACE(DB_LOCATION_URI,&apos;hdfs-ha&apos;,&apos;bjCluster&apos;);</span><br><span class=\"line\">``` </span><br><span class=\"line\">    元数据表：</span><br></pre></td></tr></table></figure>\n\n<p>UPDATE sds SET LOCATION=REPLACE(LOCATION,’ks-jinrong-dw’,’online-hadoop’);<br>UPDATE sds SET LOCATION=REPLACE(LOCATION,’hdfs-ha’,’bjCluster’);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自定义函数：</span><br></pre></td></tr></table></figure>\n\n<p>UPDATE func_ru SET RESOURCE_URI=REPLACE(RESOURCE_URI,’hdfs-ha’,’bjCluster’);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 26.set role admin</span><br><span class=\"line\"># 27.控制map个数</span><br></pre></td></tr></table></figure>\n\n<p>set mapred.max.split.size=400000000;<br>set mapred.min.split.size.per.node=400000000;<br>set mapred.min.split.size.per.rack=400000000;<br>set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</p>\n<pre><code></code></pre>","site":{"data":{}},"excerpt":"<p>下面的内容包含hive的简单操作，增删改查，权限，一些异常的解决方案。</p>","more":"<h1 id=\"1-在linux命令行端执行hql语句\"><a href=\"#1-在linux命令行端执行hql语句\" class=\"headerlink\" title=\"1. 在linux命令行端执行hql语句\"></a>1. 在linux命令行端执行hql语句</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &apos;show table tableName&apos;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-在linux命令行端执行hql文件\"><a href=\"#2-在linux命令行端执行hql文件\" class=\"headerlink\" title=\"2. 在linux命令行端执行hql文件\"></a>2. 在linux命令行端执行hql文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -f fileName</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-按照分区查看hive表中的数据量\"><a href=\"#3-按照分区查看hive表中的数据量\" class=\"headerlink\" title=\"3. 按照分区查看hive表中的数据量\"></a>3. 按照分区查看hive表中的数据量</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &apos;select dt, count(1) from test_hive.wps_android_uuid_userid group by dt&apos;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-添加分区\"><a href=\"#4-添加分区\" class=\"headerlink\" title=\"4. 添加分区\"></a>4. 添加分区</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table test_hive.wps_android_uuid_userid  add  if not exists partition (dt=&apos;2018-08-04&apos;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-赋表权限\"><a href=\"#5-赋表权限\" class=\"headerlink\" title=\"5. 赋表权限\"></a>5. 赋表权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grant select on table usersdb.account_src to user w_wangzhe</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-赋库权限\"><a href=\"#6-赋库权限\" class=\"headerlink\" title=\"6. 赋库权限\"></a>6. 赋库权限</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL ON DATABASE DEFAULT TO USER fatkun;</span><br><span class=\"line\">GRANT ALL ON TABLE test TO GROUP kpi;</span><br><span class=\"line\">REVOKE ALL ON TABLE test FROM GROUP kpi;</span><br><span class=\"line\">GRANT ALL TO USER fatkun;</span><br><span class=\"line\">REVOKE ALL FROM fatkun;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-重命名\"><a href=\"#7-重命名\" class=\"headerlink\" title=\"7. 重命名\"></a>7. 重命名</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table data_platform.td_request_log rename to data_platform.td_request_log_old</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-Error\"><a href=\"#8-Error\" class=\"headerlink\" title=\"8. Error\"></a>8. Error</h1><p>while processing statement: FAILED: Execution Error, return code 2 from org.apache.hadoop.hive.ql.exec.mr.MapredLocalTask</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set hive.auto.convert.join = false;</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"9-执行sql文件\"><a href=\"#9-执行sql文件\" class=\"headerlink\" title=\"9.执行sql文件\"></a>9.执行sql文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -d etldate=&apos;2018-08-16&apos; -f loan_periods.hql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"10-add-jar\"><a href=\"#10-add-jar\" class=\"headerlink\" title=\"10.add jar\"></a>10.add jar</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">add jar /usr/hdp/current/hive-client/lib/commons-httpclient-3.0.1.jar;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"11-add-column\"><a href=\"#11-add-column\" class=\"headerlink\" title=\"11.add column\"></a>11.add column</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &quot;alter table report.user_detail_20180614  add columns(identifier_type string comment &apos;注册类型&apos;,channel string comment &apos;注册渠道&apos;)&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"12-load-文件到hive表\"><a href=\"#12-load-文件到hive表\" class=\"headerlink\" title=\"12.load 文件到hive表\"></a>12.load 文件到hive表</h1><p>本地文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &quot;load data local inpath &apos;/data/code/app_list_0814.csv&apos; into table dim.dim_app_list&quot;</span><br></pre></td></tr></table></figure>\n\n<p>hdfs文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hive -e &quot;load data inpath &apos;/data/code/app_list_0814.csv&apos; into table dim.dim_app_list&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"13-列\"><a href=\"#13-列\" class=\"headerlink\" title=\"13.列\"></a>13.列</h1><h2 id=\"13-1修改列位置\"><a href=\"#13-1修改列位置\" class=\"headerlink\" title=\"13.1修改列位置\"></a>13.1修改列位置</h2><p>alter table factor.mf_bus_finc_app change column submit_op_no submit_op_no string after company_id</p>\n<h2 id=\"13-2增加列\"><a href=\"#13-2增加列\" class=\"headerlink\" title=\"13.2增加列\"></a>13.2增加列</h2><p>hive -e “alter table data_platform_new.face_request_log add columns(channel string)”</p>\n<h1 id=\"14-修改权限\"><a href=\"#14-修改权限\" class=\"headerlink\" title=\"14.修改权限\"></a>14.修改权限</h1><p>hive -e “grant select on table stg.risk_apply_users to user userName”</p>\n<h1 id=\"15-自定义函数\"><a href=\"#15-自定义函数\" class=\"headerlink\" title=\"15.自定义函数\"></a>15.自定义函数</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create  function dateformat as &apos;com.kso.dw.hive.udf.DateFormat&apos; using jar &apos;hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar&apos;;</span><br><span class=\"line\">mysql -h10.0.1.160 -uadmin -pmd854NHmv3bF0kl9 hive4fac31f3 -e &apos;select name from dbs&apos; | xargs -n 1 -i echo &quot;create  function  &#123;&#125;.mymd5_kc as &apos;com.kso.dw.hive.udf.MyMd5_KeyCenter&apos; using jar &apos;hdfs://hdfs-ha/hiveudf/dw_hive_udf.jar&apos;;&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"16-全局替换\"><a href=\"#16-全局替换\" class=\"headerlink\" title=\"16.全局替换\"></a>16.全局替换</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sed -i &apos;s/CREATE TABLE/CREATE EXTERNAL TABLE/g&apos; *.hql</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"17-not-a-file-exception\"><a href=\"#17-not-a-file-exception\" class=\"headerlink\" title=\"17.not a file exception\"></a>17.not a file exception</h1><p>not a file ks3://online-hadoop/ods/report/dt=2019-01-01/1</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set mapreduce.input.fileinputformat.input.dir.recursive=true;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"18-exception\"><a href=\"#18-exception\" class=\"headerlink\" title=\"18.exception\"></a>18.exception</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set hive.execution.engine=mr;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"19-too-many-counters\"><a href=\"#19-too-many-counters\" class=\"headerlink\" title=\"19. too many counters\"></a>19. too many counters</h1><p>org.apache.hadoop.mapreduce.counters.LimitExceededException: Too many counters: 121 max=120<br>resolved:change the tez configuration</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tez.counters.max= 200</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"20-SHOW-TRANSACTIONS\"><a href=\"#20-SHOW-TRANSACTIONS\" class=\"headerlink\" title=\"20.SHOW TRANSACTIONS\"></a>20.SHOW TRANSACTIONS</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ABORT TRANSACTIONS 4951;</span><br><span class=\"line\">show locks;</span><br><span class=\"line\">mysql:</span><br><span class=\"line\">select * from hive_locks;</span><br><span class=\"line\">select * from hive_locks where HL_TXNID &gt; 0;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"21-acquiring-locks\"><a href=\"#21-acquiring-locks\" class=\"headerlink\" title=\"21.acquiring locks\"></a>21.acquiring locks</h1><p>FAILED: Error in acquiring locks: Lock acquisition for LockRequest(component:[LockComponent(type:EXCLUSIVE<br>关闭事务： set hive.support.concurrency=false</p>\n<h1 id=\"22-事务表查询\"><a href=\"#22-事务表查询\" class=\"headerlink\" title=\"22.事务表查询\"></a>22.事务表查询</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set hive.support.concurrency=true;</span><br><span class=\"line\">set hive.exec.dynamic.partition.mode=nonstrict;</span><br><span class=\"line\">set hive.txn.manager=org.apache.hadoop.hive.ql.lockmgr.DbTxnManager;</span><br><span class=\"line\">set hive.compactor.initiator.on=true;</span><br><span class=\"line\">set hive.compactor.worker.threads=1;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"23-内部表转外部表\"><a href=\"#23-内部表转外部表\" class=\"headerlink\" title=\"23. 内部表转外部表\"></a>23. 内部表转外部表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table default.test set TBLPROPERTIES(&apos;EXTERNAL&apos;=&apos;true&apos;);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"24-外部表转内部表\"><a href=\"#24-外部表转内部表\" class=\"headerlink\" title=\"24. 外部表转内部表\"></a>24. 外部表转内部表</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">alter table tableA set TBLPROPERTIES(&apos;EXTERNAL&apos;=&apos;false&apos;)</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"25-修改元数据路径\"><a href=\"#25-修改元数据路径\" class=\"headerlink\" title=\"25.修改元数据路径\"></a>25.修改元数据路径</h1><pre><code>元数据库：</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UPDATE dbs SET DB_LOCATION_URI=REPLACE(DB_LOCATION_URI,&apos;hdfs-ha&apos;,&apos;bjCluster&apos;);</span><br><span class=\"line\">``` </span><br><span class=\"line\">    元数据表：</span><br></pre></td></tr></table></figure>\n\n<p>UPDATE sds SET LOCATION=REPLACE(LOCATION,’ks-jinrong-dw’,’online-hadoop’);<br>UPDATE sds SET LOCATION=REPLACE(LOCATION,’hdfs-ha’,’bjCluster’);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">自定义函数：</span><br></pre></td></tr></table></figure>\n\n<p>UPDATE func_ru SET RESOURCE_URI=REPLACE(RESOURCE_URI,’hdfs-ha’,’bjCluster’);</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 26.set role admin</span><br><span class=\"line\"># 27.控制map个数</span><br></pre></td></tr></table></figure>\n\n<p>set mapred.max.split.size=400000000;<br>set mapred.min.split.size.per.node=400000000;<br>set mapred.min.split.size.per.rack=400000000;<br>set hive.input.format=org.apache.hadoop.hive.ql.io.CombineHiveInputFormat;</p>\n<pre><code></code></pre>"},{"title":"kafka命令行基本操作","date":"2018-07-14T03:48:42.000Z","_content":"这里先介绍下kafka的基本知识及应用场景：它是一个分布式、高吞吐量、容错性好的消息队列，基于生产者、消费者模型来实现消息的生产消费，在我们的应用系统中，可以起到数据流缓存、解耦合、高效的作用。\n下面是kafka命令行的基本操作。\n<!--more -->\n对于kafka集群的安装配置，这里就不讲解了，apache官网有详细配置方案，可参考：<a href=\"http://kafka.apache.org/documentation/#configuration\">apache kafka配置详解</a>\n注：本次使用操作的基本环境为kafka 1.1.0、centos 7.4\n# 1.后台启动kafka broker\n```\n./bin/kafka-server-start.sh -daemon config/server.properties\n```\n# 2.关闭kafka broker：\n```\n./bin/kafka-server-stop.sh\n```\n# 3.创建topic：\n```\n./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 2 --topic test\n```\n# 4.创建生产者：\n```\n./bin/kafka-console-producer.sh --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic test\n```\n# 5.创建消费者：\n```\n./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n```\n# 6.查看所有topic：\n```\n./bin/kafka-topics.sh --list --zookeeper localhost:2181\n```\n# 7.查看topic状态：\n```\n./bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test\n```\n# 8.查看topic消费情况：\n```\n./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic sparktest --time -1\n```\n# 9.删除某个topic：\n```\n./bin/kafka-topics.sh --delete --zookeeper hadoop31:2181,hadoop32:2181,hadoop33:2181 --topic sparktest  注意设置配置参数delete.topic.enable=true，然后重启kafka和zookeeper才可以生效；\n```\n好了，到这里还没完，后期会持续更新，我会把我工作中使用到的经过测试没问题的kafka知识记录下来分享给大家，如果有什么问题，请大家mail我，希望大家支持。","source":"_posts/kafka命令行基本操作.md","raw":"---\ntitle: kafka命令行基本操作\ndate: 2018-07-14 11:48:42\ntags: kafka\ncategories: 消息队列\n---\n这里先介绍下kafka的基本知识及应用场景：它是一个分布式、高吞吐量、容错性好的消息队列，基于生产者、消费者模型来实现消息的生产消费，在我们的应用系统中，可以起到数据流缓存、解耦合、高效的作用。\n下面是kafka命令行的基本操作。\n<!--more -->\n对于kafka集群的安装配置，这里就不讲解了，apache官网有详细配置方案，可参考：<a href=\"http://kafka.apache.org/documentation/#configuration\">apache kafka配置详解</a>\n注：本次使用操作的基本环境为kafka 1.1.0、centos 7.4\n# 1.后台启动kafka broker\n```\n./bin/kafka-server-start.sh -daemon config/server.properties\n```\n# 2.关闭kafka broker：\n```\n./bin/kafka-server-stop.sh\n```\n# 3.创建topic：\n```\n./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 2 --topic test\n```\n# 4.创建生产者：\n```\n./bin/kafka-console-producer.sh --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic test\n```\n# 5.创建消费者：\n```\n./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n```\n# 6.查看所有topic：\n```\n./bin/kafka-topics.sh --list --zookeeper localhost:2181\n```\n# 7.查看topic状态：\n```\n./bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test\n```\n# 8.查看topic消费情况：\n```\n./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic sparktest --time -1\n```\n# 9.删除某个topic：\n```\n./bin/kafka-topics.sh --delete --zookeeper hadoop31:2181,hadoop32:2181,hadoop33:2181 --topic sparktest  注意设置配置参数delete.topic.enable=true，然后重启kafka和zookeeper才可以生效；\n```\n好了，到这里还没完，后期会持续更新，我会把我工作中使用到的经过测试没问题的kafka知识记录下来分享给大家，如果有什么问题，请大家mail我，希望大家支持。","slug":"kafka命令行基本操作","published":1,"updated":"2018-12-11T13:57:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kd000xfbs6jhgy91pq","content":"<p>这里先介绍下kafka的基本知识及应用场景：它是一个分布式、高吞吐量、容错性好的消息队列，基于生产者、消费者模型来实现消息的生产消费，在我们的应用系统中，可以起到数据流缓存、解耦合、高效的作用。<br>下面是kafka命令行的基本操作。</p>\n<a id=\"more\"></a>\n<p>对于kafka集群的安装配置，这里就不讲解了，apache官网有详细配置方案，可参考：<a href=\"http://kafka.apache.org/documentation/#configuration\" target=\"_blank\" rel=\"noopener\">apache kafka配置详解</a><br>注：本次使用操作的基本环境为kafka 1.1.0、centos 7.4</p>\n<h1 id=\"1-后台启动kafka-broker\"><a href=\"#1-后台启动kafka-broker\" class=\"headerlink\" title=\"1.后台启动kafka broker\"></a>1.后台启动kafka broker</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-关闭kafka-broker：\"><a href=\"#2-关闭kafka-broker：\" class=\"headerlink\" title=\"2.关闭kafka broker：\"></a>2.关闭kafka broker：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-创建topic：\"><a href=\"#3-创建topic：\" class=\"headerlink\" title=\"3.创建topic：\"></a>3.创建topic：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 2 --topic test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-创建生产者：\"><a href=\"#4-创建生产者：\" class=\"headerlink\" title=\"4.创建生产者：\"></a>4.创建生产者：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-console-producer.sh --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-创建消费者：\"><a href=\"#5-创建消费者：\" class=\"headerlink\" title=\"5.创建消费者：\"></a>5.创建消费者：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-查看所有topic：\"><a href=\"#6-查看所有topic：\" class=\"headerlink\" title=\"6.查看所有topic：\"></a>6.查看所有topic：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-查看topic状态：\"><a href=\"#7-查看topic状态：\" class=\"headerlink\" title=\"7.查看topic状态：\"></a>7.查看topic状态：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-查看topic消费情况：\"><a href=\"#8-查看topic消费情况：\" class=\"headerlink\" title=\"8.查看topic消费情况：\"></a>8.查看topic消费情况：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic sparktest --time -1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-删除某个topic：\"><a href=\"#9-删除某个topic：\" class=\"headerlink\" title=\"9.删除某个topic：\"></a>9.删除某个topic：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --delete --zookeeper hadoop31:2181,hadoop32:2181,hadoop33:2181 --topic sparktest  注意设置配置参数delete.topic.enable=true，然后重启kafka和zookeeper才可以生效；</span><br></pre></td></tr></table></figure>\n\n<p>好了，到这里还没完，后期会持续更新，我会把我工作中使用到的经过测试没问题的kafka知识记录下来分享给大家，如果有什么问题，请大家mail我，希望大家支持。</p>\n","site":{"data":{}},"excerpt":"<p>这里先介绍下kafka的基本知识及应用场景：它是一个分布式、高吞吐量、容错性好的消息队列，基于生产者、消费者模型来实现消息的生产消费，在我们的应用系统中，可以起到数据流缓存、解耦合、高效的作用。<br>下面是kafka命令行的基本操作。</p>","more":"<p>对于kafka集群的安装配置，这里就不讲解了，apache官网有详细配置方案，可参考：<a href=\"http://kafka.apache.org/documentation/#configuration\" target=\"_blank\" rel=\"noopener\">apache kafka配置详解</a><br>注：本次使用操作的基本环境为kafka 1.1.0、centos 7.4</p>\n<h1 id=\"1-后台启动kafka-broker\"><a href=\"#1-后台启动kafka-broker\" class=\"headerlink\" title=\"1.后台启动kafka broker\"></a>1.后台启动kafka broker</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-server-start.sh -daemon config/server.properties</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"2-关闭kafka-broker：\"><a href=\"#2-关闭kafka-broker：\" class=\"headerlink\" title=\"2.关闭kafka broker：\"></a>2.关闭kafka broker：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-server-stop.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3-创建topic：\"><a href=\"#3-创建topic：\" class=\"headerlink\" title=\"3.创建topic：\"></a>3.创建topic：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --create --zookeeper localhost:2181 --replication-factor 2 --partitions 2 --topic test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"4-创建生产者：\"><a href=\"#4-创建生产者：\" class=\"headerlink\" title=\"4.创建生产者：\"></a>4.创建生产者：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-console-producer.sh --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5-创建消费者：\"><a href=\"#5-创建消费者：\" class=\"headerlink\" title=\"5.创建消费者：\"></a>5.创建消费者：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"6-查看所有topic：\"><a href=\"#6-查看所有topic：\" class=\"headerlink\" title=\"6.查看所有topic：\"></a>6.查看所有topic：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"7-查看topic状态：\"><a href=\"#7-查看topic状态：\" class=\"headerlink\" title=\"7.查看topic状态：\"></a>7.查看topic状态：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --describe --zookeeper localhost:2181 --topic test</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"8-查看topic消费情况：\"><a href=\"#8-查看topic消费情况：\" class=\"headerlink\" title=\"8.查看topic消费情况：\"></a>8.查看topic消费情况：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-run-class.sh kafka.tools.GetOffsetShell --broker-list hadoop31:9092,hadoop32:9092,hadoop33:9092 --topic sparktest --time -1</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"9-删除某个topic：\"><a href=\"#9-删除某个topic：\" class=\"headerlink\" title=\"9.删除某个topic：\"></a>9.删除某个topic：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./bin/kafka-topics.sh --delete --zookeeper hadoop31:2181,hadoop32:2181,hadoop33:2181 --topic sparktest  注意设置配置参数delete.topic.enable=true，然后重启kafka和zookeeper才可以生效；</span><br></pre></td></tr></table></figure>\n\n<p>好了，到这里还没完，后期会持续更新，我会把我工作中使用到的经过测试没问题的kafka知识记录下来分享给大家，如果有什么问题，请大家mail我，希望大家支持。</p>"},{"title":"linux高效编程","date":"2017-12-25T14:04:43.000Z","_content":"本文将介绍linux命令行经常使用到的一些快捷键、编辑命令，还有强大的vim编辑器，能让你在linux上编程更高效。作为一个程序员，会使用各种快捷键不也是更炫酷的一件事吗？\n<!-- more -->\n## linux命令行\n### 光标移动\n```\nctrl+a --- 把光标移到行首（ahead）\nctrl+e --- 把光标移到行尾（end）\nctrl+l --- 清除终端（clear）\nctrl+u --- 删除当前字符到行首（带有剪切功能）\nctrl+k --- 删除当前字符到行尾（带有剪切功能）\nctrl+y --- 粘贴\nctrl+f --- 向前移动一个字符（forward）\nctrl+b --- 向后移动一个字符（back）\nctrl+左右箭头 --- 把光标在单词之间左右移动\nctrl+w --- 删除光标前面的单词\n\ncd ~ --- 进入home目录\ncd - --- 返回上一目录\nmkdir -p path/to/file\nalias cd3=”cd ../../../”\n\nrename ‘.java’ ‘.java.bak’ *.java --- 批量备份文件\n\nctrl+r --- 查询历史命令\nhistory --- 历史命令\n执行历史命令方法 --- \n！+ 命令序号\nctrl+p --- 上一条命令（或者上下箭头）\n```\n### 查找进程\n```\n进程\t进程号\t\t所占用端口号\nps -ef\n显示所有进程信息，包括命令行，与grep配合使用，查找特定进程\n显示环境变量\n\nps -aux\n显示所有进程信息，包括资源占用情况，与grep配合使用\n\nnetstat -anp\n显示协议、端口、进程号、进程名称等信息\n```\n\n## Vim\nvim与vi的区别：\n增加了新特性：语法高亮、可视化操作、多平台支持（windows、mac、terminal）\n\n### 正常模式：浏览和修改文本内容\n```\nR --- 替换（覆盖）当前光标位置及后面的若干文本\nJ --- 合并当前行及下一行为一行\n\nj --- 下\nk --- 上\nh --- 左\nl --- 右\n\nH --- 当前屏幕第一行\nM --- 当前屏幕中间行\nL --- 当前屏幕最后一行\n\nw --- 当前光标移至下一个单词词首\nb --- 当前光标移至上一个单词词首\ne --- 下一个单词词尾\n$ --- 当前光标移至行尾\n^ --- 当前光标移至行首\n\nu --- 撤销\nctrl+r --- 恢复上一步被撤销的动作\n```\n#### 复制\n```\nyy --- 复制当前行\n5yy --- 复制当前行和后4行\nyw --- 当前字符到下一单词的起始位置\ny$ --- 当前字符到当前行末尾\ny0/y^ --- 当前字符到当前行行首\nyngg/ynG --- 复制当前行到文件第n行\n```\n#### 粘贴\n```\np\n```\n\n#### 删除\n```\ndw --- 删除当前光标至单词末尾\nndw --- 删除当前光标后的n个字符\ndd --- 删除当前行\nd$ --- 删除光标位置至行尾\nd^ --- 删除光标位置至行首\ndgg --- 删除首行至当前行\ndG --- 删除当前行至末行\n```\n### 编辑模式 --- 编辑文本\n从正常模式进入编辑模式\n```\na --- 在当前光标位置的右边添加文本\nA --- 在当前行的末尾位置添加文本\ni --- 在当前光标位置的左边添加文本\nI --- 在当前行的开始处添加文本(非空字符的行首)\nO --- 在当前行的上面新建一行\no --- 在当前行的下面新建一行\n```\n### 可视模式：高亮选取文本后的正常模式\n```\nv+hjkl --- 选中文本后y复制d剪切，p粘贴\nctrl+v --- 以块为选取单位\nV --- 以行为选取单位\n行、块为选取单位的模式可以随意切换\n```\n### 命令行模式：操作文本文件\n```\nw --- 保存\nwq --- 保存并退出\nq --- 退出\nq! --- 不保存退出\n/ --- 查询，n下一个匹配字符串，N上一个匹配字符串\n:set number --- 设置行号\n```\n","source":"_posts/linux高效编程.md","raw":"---\ntitle: linux高效编程\ntags: [linux,programming]\ndate: 2017-12-25 22:04:43\ncategories: 操作系统\n---\n本文将介绍linux命令行经常使用到的一些快捷键、编辑命令，还有强大的vim编辑器，能让你在linux上编程更高效。作为一个程序员，会使用各种快捷键不也是更炫酷的一件事吗？\n<!-- more -->\n## linux命令行\n### 光标移动\n```\nctrl+a --- 把光标移到行首（ahead）\nctrl+e --- 把光标移到行尾（end）\nctrl+l --- 清除终端（clear）\nctrl+u --- 删除当前字符到行首（带有剪切功能）\nctrl+k --- 删除当前字符到行尾（带有剪切功能）\nctrl+y --- 粘贴\nctrl+f --- 向前移动一个字符（forward）\nctrl+b --- 向后移动一个字符（back）\nctrl+左右箭头 --- 把光标在单词之间左右移动\nctrl+w --- 删除光标前面的单词\n\ncd ~ --- 进入home目录\ncd - --- 返回上一目录\nmkdir -p path/to/file\nalias cd3=”cd ../../../”\n\nrename ‘.java’ ‘.java.bak’ *.java --- 批量备份文件\n\nctrl+r --- 查询历史命令\nhistory --- 历史命令\n执行历史命令方法 --- \n！+ 命令序号\nctrl+p --- 上一条命令（或者上下箭头）\n```\n### 查找进程\n```\n进程\t进程号\t\t所占用端口号\nps -ef\n显示所有进程信息，包括命令行，与grep配合使用，查找特定进程\n显示环境变量\n\nps -aux\n显示所有进程信息，包括资源占用情况，与grep配合使用\n\nnetstat -anp\n显示协议、端口、进程号、进程名称等信息\n```\n\n## Vim\nvim与vi的区别：\n增加了新特性：语法高亮、可视化操作、多平台支持（windows、mac、terminal）\n\n### 正常模式：浏览和修改文本内容\n```\nR --- 替换（覆盖）当前光标位置及后面的若干文本\nJ --- 合并当前行及下一行为一行\n\nj --- 下\nk --- 上\nh --- 左\nl --- 右\n\nH --- 当前屏幕第一行\nM --- 当前屏幕中间行\nL --- 当前屏幕最后一行\n\nw --- 当前光标移至下一个单词词首\nb --- 当前光标移至上一个单词词首\ne --- 下一个单词词尾\n$ --- 当前光标移至行尾\n^ --- 当前光标移至行首\n\nu --- 撤销\nctrl+r --- 恢复上一步被撤销的动作\n```\n#### 复制\n```\nyy --- 复制当前行\n5yy --- 复制当前行和后4行\nyw --- 当前字符到下一单词的起始位置\ny$ --- 当前字符到当前行末尾\ny0/y^ --- 当前字符到当前行行首\nyngg/ynG --- 复制当前行到文件第n行\n```\n#### 粘贴\n```\np\n```\n\n#### 删除\n```\ndw --- 删除当前光标至单词末尾\nndw --- 删除当前光标后的n个字符\ndd --- 删除当前行\nd$ --- 删除光标位置至行尾\nd^ --- 删除光标位置至行首\ndgg --- 删除首行至当前行\ndG --- 删除当前行至末行\n```\n### 编辑模式 --- 编辑文本\n从正常模式进入编辑模式\n```\na --- 在当前光标位置的右边添加文本\nA --- 在当前行的末尾位置添加文本\ni --- 在当前光标位置的左边添加文本\nI --- 在当前行的开始处添加文本(非空字符的行首)\nO --- 在当前行的上面新建一行\no --- 在当前行的下面新建一行\n```\n### 可视模式：高亮选取文本后的正常模式\n```\nv+hjkl --- 选中文本后y复制d剪切，p粘贴\nctrl+v --- 以块为选取单位\nV --- 以行为选取单位\n行、块为选取单位的模式可以随意切换\n```\n### 命令行模式：操作文本文件\n```\nw --- 保存\nwq --- 保存并退出\nq --- 退出\nq! --- 不保存退出\n/ --- 查询，n下一个匹配字符串，N上一个匹配字符串\n:set number --- 设置行号\n```\n","slug":"linux高效编程","published":1,"updated":"2018-12-11T13:57:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ke000yfbs6b1thl2yw","content":"<p>本文将介绍linux命令行经常使用到的一些快捷键、编辑命令，还有强大的vim编辑器，能让你在linux上编程更高效。作为一个程序员，会使用各种快捷键不也是更炫酷的一件事吗？</p>\n<a id=\"more\"></a>\n<h2 id=\"linux命令行\"><a href=\"#linux命令行\" class=\"headerlink\" title=\"linux命令行\"></a>linux命令行</h2><h3 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+a --- 把光标移到行首（ahead）</span><br><span class=\"line\">ctrl+e --- 把光标移到行尾（end）</span><br><span class=\"line\">ctrl+l --- 清除终端（clear）</span><br><span class=\"line\">ctrl+u --- 删除当前字符到行首（带有剪切功能）</span><br><span class=\"line\">ctrl+k --- 删除当前字符到行尾（带有剪切功能）</span><br><span class=\"line\">ctrl+y --- 粘贴</span><br><span class=\"line\">ctrl+f --- 向前移动一个字符（forward）</span><br><span class=\"line\">ctrl+b --- 向后移动一个字符（back）</span><br><span class=\"line\">ctrl+左右箭头 --- 把光标在单词之间左右移动</span><br><span class=\"line\">ctrl+w --- 删除光标前面的单词</span><br><span class=\"line\"></span><br><span class=\"line\">cd ~ --- 进入home目录</span><br><span class=\"line\">cd - --- 返回上一目录</span><br><span class=\"line\">mkdir -p path/to/file</span><br><span class=\"line\">alias cd3=”cd ../../../”</span><br><span class=\"line\"></span><br><span class=\"line\">rename ‘.java’ ‘.java.bak’ *.java --- 批量备份文件</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl+r --- 查询历史命令</span><br><span class=\"line\">history --- 历史命令</span><br><span class=\"line\">执行历史命令方法 --- </span><br><span class=\"line\">！+ 命令序号</span><br><span class=\"line\">ctrl+p --- 上一条命令（或者上下箭头）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找进程\"><a href=\"#查找进程\" class=\"headerlink\" title=\"查找进程\"></a>查找进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程\t进程号\t\t所占用端口号</span><br><span class=\"line\">ps -ef</span><br><span class=\"line\">显示所有进程信息，包括命令行，与grep配合使用，查找特定进程</span><br><span class=\"line\">显示环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">ps -aux</span><br><span class=\"line\">显示所有进程信息，包括资源占用情况，与grep配合使用</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -anp</span><br><span class=\"line\">显示协议、端口、进程号、进程名称等信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><p>vim与vi的区别：<br>增加了新特性：语法高亮、可视化操作、多平台支持（windows、mac、terminal）</p>\n<h3 id=\"正常模式：浏览和修改文本内容\"><a href=\"#正常模式：浏览和修改文本内容\" class=\"headerlink\" title=\"正常模式：浏览和修改文本内容\"></a>正常模式：浏览和修改文本内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R --- 替换（覆盖）当前光标位置及后面的若干文本</span><br><span class=\"line\">J --- 合并当前行及下一行为一行</span><br><span class=\"line\"></span><br><span class=\"line\">j --- 下</span><br><span class=\"line\">k --- 上</span><br><span class=\"line\">h --- 左</span><br><span class=\"line\">l --- 右</span><br><span class=\"line\"></span><br><span class=\"line\">H --- 当前屏幕第一行</span><br><span class=\"line\">M --- 当前屏幕中间行</span><br><span class=\"line\">L --- 当前屏幕最后一行</span><br><span class=\"line\"></span><br><span class=\"line\">w --- 当前光标移至下一个单词词首</span><br><span class=\"line\">b --- 当前光标移至上一个单词词首</span><br><span class=\"line\">e --- 下一个单词词尾</span><br><span class=\"line\">$ --- 当前光标移至行尾</span><br><span class=\"line\">^ --- 当前光标移至行首</span><br><span class=\"line\"></span><br><span class=\"line\">u --- 撤销</span><br><span class=\"line\">ctrl+r --- 恢复上一步被撤销的动作</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yy --- 复制当前行</span><br><span class=\"line\">5yy --- 复制当前行和后4行</span><br><span class=\"line\">yw --- 当前字符到下一单词的起始位置</span><br><span class=\"line\">y$ --- 当前字符到当前行末尾</span><br><span class=\"line\">y0/y^ --- 当前字符到当前行行首</span><br><span class=\"line\">yngg/ynG --- 复制当前行到文件第n行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"粘贴\"><a href=\"#粘贴\" class=\"headerlink\" title=\"粘贴\"></a>粘贴</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dw --- 删除当前光标至单词末尾</span><br><span class=\"line\">ndw --- 删除当前光标后的n个字符</span><br><span class=\"line\">dd --- 删除当前行</span><br><span class=\"line\">d$ --- 删除光标位置至行尾</span><br><span class=\"line\">d^ --- 删除光标位置至行首</span><br><span class=\"line\">dgg --- 删除首行至当前行</span><br><span class=\"line\">dG --- 删除当前行至末行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑模式-—-编辑文本\"><a href=\"#编辑模式-—-编辑文本\" class=\"headerlink\" title=\"编辑模式 — 编辑文本\"></a>编辑模式 — 编辑文本</h3><p>从正常模式进入编辑模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a --- 在当前光标位置的右边添加文本</span><br><span class=\"line\">A --- 在当前行的末尾位置添加文本</span><br><span class=\"line\">i --- 在当前光标位置的左边添加文本</span><br><span class=\"line\">I --- 在当前行的开始处添加文本(非空字符的行首)</span><br><span class=\"line\">O --- 在当前行的上面新建一行</span><br><span class=\"line\">o --- 在当前行的下面新建一行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视模式：高亮选取文本后的正常模式\"><a href=\"#可视模式：高亮选取文本后的正常模式\" class=\"headerlink\" title=\"可视模式：高亮选取文本后的正常模式\"></a>可视模式：高亮选取文本后的正常模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v+hjkl --- 选中文本后y复制d剪切，p粘贴</span><br><span class=\"line\">ctrl+v --- 以块为选取单位</span><br><span class=\"line\">V --- 以行为选取单位</span><br><span class=\"line\">行、块为选取单位的模式可以随意切换</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令行模式：操作文本文件\"><a href=\"#命令行模式：操作文本文件\" class=\"headerlink\" title=\"命令行模式：操作文本文件\"></a>命令行模式：操作文本文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w --- 保存</span><br><span class=\"line\">wq --- 保存并退出</span><br><span class=\"line\">q --- 退出</span><br><span class=\"line\">q! --- 不保存退出</span><br><span class=\"line\">/ --- 查询，n下一个匹配字符串，N上一个匹配字符串</span><br><span class=\"line\">:set number --- 设置行号</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>本文将介绍linux命令行经常使用到的一些快捷键、编辑命令，还有强大的vim编辑器，能让你在linux上编程更高效。作为一个程序员，会使用各种快捷键不也是更炫酷的一件事吗？</p>","more":"<h2 id=\"linux命令行\"><a href=\"#linux命令行\" class=\"headerlink\" title=\"linux命令行\"></a>linux命令行</h2><h3 id=\"光标移动\"><a href=\"#光标移动\" class=\"headerlink\" title=\"光标移动\"></a>光标移动</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ctrl+a --- 把光标移到行首（ahead）</span><br><span class=\"line\">ctrl+e --- 把光标移到行尾（end）</span><br><span class=\"line\">ctrl+l --- 清除终端（clear）</span><br><span class=\"line\">ctrl+u --- 删除当前字符到行首（带有剪切功能）</span><br><span class=\"line\">ctrl+k --- 删除当前字符到行尾（带有剪切功能）</span><br><span class=\"line\">ctrl+y --- 粘贴</span><br><span class=\"line\">ctrl+f --- 向前移动一个字符（forward）</span><br><span class=\"line\">ctrl+b --- 向后移动一个字符（back）</span><br><span class=\"line\">ctrl+左右箭头 --- 把光标在单词之间左右移动</span><br><span class=\"line\">ctrl+w --- 删除光标前面的单词</span><br><span class=\"line\"></span><br><span class=\"line\">cd ~ --- 进入home目录</span><br><span class=\"line\">cd - --- 返回上一目录</span><br><span class=\"line\">mkdir -p path/to/file</span><br><span class=\"line\">alias cd3=”cd ../../../”</span><br><span class=\"line\"></span><br><span class=\"line\">rename ‘.java’ ‘.java.bak’ *.java --- 批量备份文件</span><br><span class=\"line\"></span><br><span class=\"line\">ctrl+r --- 查询历史命令</span><br><span class=\"line\">history --- 历史命令</span><br><span class=\"line\">执行历史命令方法 --- </span><br><span class=\"line\">！+ 命令序号</span><br><span class=\"line\">ctrl+p --- 上一条命令（或者上下箭头）</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"查找进程\"><a href=\"#查找进程\" class=\"headerlink\" title=\"查找进程\"></a>查找进程</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程\t进程号\t\t所占用端口号</span><br><span class=\"line\">ps -ef</span><br><span class=\"line\">显示所有进程信息，包括命令行，与grep配合使用，查找特定进程</span><br><span class=\"line\">显示环境变量</span><br><span class=\"line\"></span><br><span class=\"line\">ps -aux</span><br><span class=\"line\">显示所有进程信息，包括资源占用情况，与grep配合使用</span><br><span class=\"line\"></span><br><span class=\"line\">netstat -anp</span><br><span class=\"line\">显示协议、端口、进程号、进程名称等信息</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Vim\"><a href=\"#Vim\" class=\"headerlink\" title=\"Vim\"></a>Vim</h2><p>vim与vi的区别：<br>增加了新特性：语法高亮、可视化操作、多平台支持（windows、mac、terminal）</p>\n<h3 id=\"正常模式：浏览和修改文本内容\"><a href=\"#正常模式：浏览和修改文本内容\" class=\"headerlink\" title=\"正常模式：浏览和修改文本内容\"></a>正常模式：浏览和修改文本内容</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">R --- 替换（覆盖）当前光标位置及后面的若干文本</span><br><span class=\"line\">J --- 合并当前行及下一行为一行</span><br><span class=\"line\"></span><br><span class=\"line\">j --- 下</span><br><span class=\"line\">k --- 上</span><br><span class=\"line\">h --- 左</span><br><span class=\"line\">l --- 右</span><br><span class=\"line\"></span><br><span class=\"line\">H --- 当前屏幕第一行</span><br><span class=\"line\">M --- 当前屏幕中间行</span><br><span class=\"line\">L --- 当前屏幕最后一行</span><br><span class=\"line\"></span><br><span class=\"line\">w --- 当前光标移至下一个单词词首</span><br><span class=\"line\">b --- 当前光标移至上一个单词词首</span><br><span class=\"line\">e --- 下一个单词词尾</span><br><span class=\"line\">$ --- 当前光标移至行尾</span><br><span class=\"line\">^ --- 当前光标移至行首</span><br><span class=\"line\"></span><br><span class=\"line\">u --- 撤销</span><br><span class=\"line\">ctrl+r --- 恢复上一步被撤销的动作</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"复制\"><a href=\"#复制\" class=\"headerlink\" title=\"复制\"></a>复制</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yy --- 复制当前行</span><br><span class=\"line\">5yy --- 复制当前行和后4行</span><br><span class=\"line\">yw --- 当前字符到下一单词的起始位置</span><br><span class=\"line\">y$ --- 当前字符到当前行末尾</span><br><span class=\"line\">y0/y^ --- 当前字符到当前行行首</span><br><span class=\"line\">yngg/ynG --- 复制当前行到文件第n行</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"粘贴\"><a href=\"#粘贴\" class=\"headerlink\" title=\"粘贴\"></a>粘贴</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dw --- 删除当前光标至单词末尾</span><br><span class=\"line\">ndw --- 删除当前光标后的n个字符</span><br><span class=\"line\">dd --- 删除当前行</span><br><span class=\"line\">d$ --- 删除光标位置至行尾</span><br><span class=\"line\">d^ --- 删除光标位置至行首</span><br><span class=\"line\">dgg --- 删除首行至当前行</span><br><span class=\"line\">dG --- 删除当前行至末行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编辑模式-—-编辑文本\"><a href=\"#编辑模式-—-编辑文本\" class=\"headerlink\" title=\"编辑模式 — 编辑文本\"></a>编辑模式 — 编辑文本</h3><p>从正常模式进入编辑模式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a --- 在当前光标位置的右边添加文本</span><br><span class=\"line\">A --- 在当前行的末尾位置添加文本</span><br><span class=\"line\">i --- 在当前光标位置的左边添加文本</span><br><span class=\"line\">I --- 在当前行的开始处添加文本(非空字符的行首)</span><br><span class=\"line\">O --- 在当前行的上面新建一行</span><br><span class=\"line\">o --- 在当前行的下面新建一行</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"可视模式：高亮选取文本后的正常模式\"><a href=\"#可视模式：高亮选取文本后的正常模式\" class=\"headerlink\" title=\"可视模式：高亮选取文本后的正常模式\"></a>可视模式：高亮选取文本后的正常模式</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">v+hjkl --- 选中文本后y复制d剪切，p粘贴</span><br><span class=\"line\">ctrl+v --- 以块为选取单位</span><br><span class=\"line\">V --- 以行为选取单位</span><br><span class=\"line\">行、块为选取单位的模式可以随意切换</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令行模式：操作文本文件\"><a href=\"#命令行模式：操作文本文件\" class=\"headerlink\" title=\"命令行模式：操作文本文件\"></a>命令行模式：操作文本文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">w --- 保存</span><br><span class=\"line\">wq --- 保存并退出</span><br><span class=\"line\">q --- 退出</span><br><span class=\"line\">q! --- 不保存退出</span><br><span class=\"line\">/ --- 查询，n下一个匹配字符串，N上一个匹配字符串</span><br><span class=\"line\">:set number --- 设置行号</span><br></pre></td></tr></table></figure>"},{"title":"spark基于zookeeper的高可用搭建","date":"2017-12-26T13:26:15.000Z","_content":"spark提供服务时，master的角色非常的重要，它负责任务分发、任务调度，可谓任重道远啊，所以我们要对master做高可用，基于zookeeper的高可用，可以自动实现master挂掉后备用的master启动，堆外提供服务。\n<!-- more -->\n# 节点分布：\nzookeeper: node1 node2 node3\nspark: node1 node2 node3 node4\n# 编辑SPARK_HOME/conf/spark-env.sh\n注释掉HADOOP_CONF_DIR，添加SPARK_DAEMON_JAVA_OPTS，其他配置不变。\n```\nexport SPARK_DAEMON_JAVA_OPTS=\"-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir=/spark20170302\"\n```\n# 同步该配置文件spark-env.sh到其他节点\nscp spark-env.sh root@node2:$SPARK_HOME/conf\nscp spark-env.sh root@node3:$SPARK_HOME/conf\nscp spark-env.sh root@node4:$SPARK_HOME/conf\n# 在node2节点上编辑spark-env.sh，将SPARK_MASTER_HOST修改为node2\n```\nSPARK_MASTER_HOST=node2\n```\n# 启动spark服务\n在node1节点上启动spark集群\n```\n$ ./sbin/start-all.sh\n```\n# 启动另一个master\n在node2节点上只启动master\n```\n$ ./sbin/start-master.sh\n```\n# 访问webUI查看启动情况\n如果配置正确，启动正常，那么master会有两个（node1， node2），一个为ACTIVE状态，一个为STANDBY状态。\n\n","source":"_posts/spark基于zookeeper的高可用搭建.md","raw":"---\ntitle: spark基于zookeeper的高可用搭建\ntags: [spark,zookeeper]\ndate: 2017-12-26 21:26:15\ncategories: 大数据\n---\nspark提供服务时，master的角色非常的重要，它负责任务分发、任务调度，可谓任重道远啊，所以我们要对master做高可用，基于zookeeper的高可用，可以自动实现master挂掉后备用的master启动，堆外提供服务。\n<!-- more -->\n# 节点分布：\nzookeeper: node1 node2 node3\nspark: node1 node2 node3 node4\n# 编辑SPARK_HOME/conf/spark-env.sh\n注释掉HADOOP_CONF_DIR，添加SPARK_DAEMON_JAVA_OPTS，其他配置不变。\n```\nexport SPARK_DAEMON_JAVA_OPTS=\"-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir=/spark20170302\"\n```\n# 同步该配置文件spark-env.sh到其他节点\nscp spark-env.sh root@node2:$SPARK_HOME/conf\nscp spark-env.sh root@node3:$SPARK_HOME/conf\nscp spark-env.sh root@node4:$SPARK_HOME/conf\n# 在node2节点上编辑spark-env.sh，将SPARK_MASTER_HOST修改为node2\n```\nSPARK_MASTER_HOST=node2\n```\n# 启动spark服务\n在node1节点上启动spark集群\n```\n$ ./sbin/start-all.sh\n```\n# 启动另一个master\n在node2节点上只启动master\n```\n$ ./sbin/start-master.sh\n```\n# 访问webUI查看启动情况\n如果配置正确，启动正常，那么master会有两个（node1， node2），一个为ACTIVE状态，一个为STANDBY状态。\n\n","slug":"spark基于zookeeper的高可用搭建","published":1,"updated":"2018-12-11T13:57:12.973Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ke000zfbs6d9wzw9j9","content":"<p>spark提供服务时，master的角色非常的重要，它负责任务分发、任务调度，可谓任重道远啊，所以我们要对master做高可用，基于zookeeper的高可用，可以自动实现master挂掉后备用的master启动，堆外提供服务。</p>\n<a id=\"more\"></a>\n<h1 id=\"节点分布：\"><a href=\"#节点分布：\" class=\"headerlink\" title=\"节点分布：\"></a>节点分布：</h1><p>zookeeper: node1 node2 node3<br>spark: node1 node2 node3 node4</p>\n<h1 id=\"编辑SPARK-HOME-conf-spark-env-sh\"><a href=\"#编辑SPARK-HOME-conf-spark-env-sh\" class=\"headerlink\" title=\"编辑SPARK_HOME/conf/spark-env.sh\"></a>编辑SPARK_HOME/conf/spark-env.sh</h1><p>注释掉HADOOP_CONF_DIR，添加SPARK_DAEMON_JAVA_OPTS，其他配置不变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export SPARK_DAEMON_JAVA_OPTS=&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir=/spark20170302&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同步该配置文件spark-env-sh到其他节点\"><a href=\"#同步该配置文件spark-env-sh到其他节点\" class=\"headerlink\" title=\"同步该配置文件spark-env.sh到其他节点\"></a>同步该配置文件spark-env.sh到其他节点</h1><p>scp spark-env.sh root@node2:$SPARK_HOME/conf<br>scp spark-env.sh root@node3:$SPARK_HOME/conf<br>scp spark-env.sh root@node4:$SPARK_HOME/conf</p>\n<h1 id=\"在node2节点上编辑spark-env-sh，将SPARK-MASTER-HOST修改为node2\"><a href=\"#在node2节点上编辑spark-env-sh，将SPARK-MASTER-HOST修改为node2\" class=\"headerlink\" title=\"在node2节点上编辑spark-env.sh，将SPARK_MASTER_HOST修改为node2\"></a>在node2节点上编辑spark-env.sh，将SPARK_MASTER_HOST修改为node2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPARK_MASTER_HOST=node2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动spark服务\"><a href=\"#启动spark服务\" class=\"headerlink\" title=\"启动spark服务\"></a>启动spark服务</h1><p>在node1节点上启动spark集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sbin/start-all.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动另一个master\"><a href=\"#启动另一个master\" class=\"headerlink\" title=\"启动另一个master\"></a>启动另一个master</h1><p>在node2节点上只启动master</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sbin/start-master.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问webUI查看启动情况\"><a href=\"#访问webUI查看启动情况\" class=\"headerlink\" title=\"访问webUI查看启动情况\"></a>访问webUI查看启动情况</h1><p>如果配置正确，启动正常，那么master会有两个（node1， node2），一个为ACTIVE状态，一个为STANDBY状态。</p>\n","site":{"data":{}},"excerpt":"<p>spark提供服务时，master的角色非常的重要，它负责任务分发、任务调度，可谓任重道远啊，所以我们要对master做高可用，基于zookeeper的高可用，可以自动实现master挂掉后备用的master启动，堆外提供服务。</p>","more":"<h1 id=\"节点分布：\"><a href=\"#节点分布：\" class=\"headerlink\" title=\"节点分布：\"></a>节点分布：</h1><p>zookeeper: node1 node2 node3<br>spark: node1 node2 node3 node4</p>\n<h1 id=\"编辑SPARK-HOME-conf-spark-env-sh\"><a href=\"#编辑SPARK-HOME-conf-spark-env-sh\" class=\"headerlink\" title=\"编辑SPARK_HOME/conf/spark-env.sh\"></a>编辑SPARK_HOME/conf/spark-env.sh</h1><p>注释掉HADOOP_CONF_DIR，添加SPARK_DAEMON_JAVA_OPTS，其他配置不变。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export SPARK_DAEMON_JAVA_OPTS=&quot;-Dspark.deploy.recoveryMode=ZOOKEEPER -Dspark.deploy.zookeeper.url=node1:2181,node2:2181,node3:2181 -Dspark.deploy.zookeeper.dir=/spark20170302&quot;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"同步该配置文件spark-env-sh到其他节点\"><a href=\"#同步该配置文件spark-env-sh到其他节点\" class=\"headerlink\" title=\"同步该配置文件spark-env.sh到其他节点\"></a>同步该配置文件spark-env.sh到其他节点</h1><p>scp spark-env.sh root@node2:$SPARK_HOME/conf<br>scp spark-env.sh root@node3:$SPARK_HOME/conf<br>scp spark-env.sh root@node4:$SPARK_HOME/conf</p>\n<h1 id=\"在node2节点上编辑spark-env-sh，将SPARK-MASTER-HOST修改为node2\"><a href=\"#在node2节点上编辑spark-env-sh，将SPARK-MASTER-HOST修改为node2\" class=\"headerlink\" title=\"在node2节点上编辑spark-env.sh，将SPARK_MASTER_HOST修改为node2\"></a>在node2节点上编辑spark-env.sh，将SPARK_MASTER_HOST修改为node2</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPARK_MASTER_HOST=node2</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动spark服务\"><a href=\"#启动spark服务\" class=\"headerlink\" title=\"启动spark服务\"></a>启动spark服务</h1><p>在node1节点上启动spark集群</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sbin/start-all.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启动另一个master\"><a href=\"#启动另一个master\" class=\"headerlink\" title=\"启动另一个master\"></a>启动另一个master</h1><p>在node2节点上只启动master</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./sbin/start-master.sh</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"访问webUI查看启动情况\"><a href=\"#访问webUI查看启动情况\" class=\"headerlink\" title=\"访问webUI查看启动情况\"></a>访问webUI查看启动情况</h1><p>如果配置正确，启动正常，那么master会有两个（node1， node2），一个为ACTIVE状态，一个为STANDBY状态。</p>"},{"title":"windows_C盘垃圾清理","date":"2018-11-03T00:46:01.000Z","_content":"windows c盘垃圾清理程序，清理各类软件的缓存文件、日志文件等，长时间未清洗，可以空出10多G的空间出来，具体程序如下，创建一个abc.bat可执行文件（名字随便取），点击运行即可：\n<!-- more -->\n```\n@echo off \necho 正在清除系统垃圾文件，请稍等...... \ndel /f /s /q %systemdrive%\\*.tmp \ndel /f /s /q %systemdrive%\\*._mp \ndel /f /s /q %systemdrive%\\*.log \ndel /f /s /q %systemdrive%\\*.gid \ndel /f /s /q %systemdrive%\\*.chk \ndel /f /s /q %systemdrive%\\*.old \ndel /f /s /q %systemdrive%\\recycled\\*.* \ndel /f /s /q %windir%\\*.bak \ndel /f /s /q %windir%\\prefetch\\*.* \nrd /s /q %windir%\\temp & md %windir%\\temp \ndel /f /q %userprofile%\\小甜饼s\\*.* \ndel /f /q %userprofile%\\recent\\*.* \ndel /f /s /q \"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\" \ndel /f /s /q \"%userprofile%\\Local Settings\\Temp\\*.*\" \ndel /f /s /q \"%userprofile%\\recent\\*.*\" \necho 清除系统LJ完成！ \necho. & pause  \n```\n随便放在电脑的一个位置，点击运行即可。","source":"_posts/windows-C盘垃圾清理.md","raw":"---\ntitle: windows_C盘垃圾清理\ndate: 2018-11-03 08:46:01\ntags: [windows,垃圾清理]\ncategories: windows\n---\nwindows c盘垃圾清理程序，清理各类软件的缓存文件、日志文件等，长时间未清洗，可以空出10多G的空间出来，具体程序如下，创建一个abc.bat可执行文件（名字随便取），点击运行即可：\n<!-- more -->\n```\n@echo off \necho 正在清除系统垃圾文件，请稍等...... \ndel /f /s /q %systemdrive%\\*.tmp \ndel /f /s /q %systemdrive%\\*._mp \ndel /f /s /q %systemdrive%\\*.log \ndel /f /s /q %systemdrive%\\*.gid \ndel /f /s /q %systemdrive%\\*.chk \ndel /f /s /q %systemdrive%\\*.old \ndel /f /s /q %systemdrive%\\recycled\\*.* \ndel /f /s /q %windir%\\*.bak \ndel /f /s /q %windir%\\prefetch\\*.* \nrd /s /q %windir%\\temp & md %windir%\\temp \ndel /f /q %userprofile%\\小甜饼s\\*.* \ndel /f /q %userprofile%\\recent\\*.* \ndel /f /s /q \"%userprofile%\\Local Settings\\Temporary Internet Files\\*.*\" \ndel /f /s /q \"%userprofile%\\Local Settings\\Temp\\*.*\" \ndel /f /s /q \"%userprofile%\\recent\\*.*\" \necho 清除系统LJ完成！ \necho. & pause  \n```\n随便放在电脑的一个位置，点击运行即可。","slug":"windows-C盘垃圾清理","published":1,"updated":"2018-12-11T13:57:12.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kg0010fbs67qbstdzy","content":"<p>windows c盘垃圾清理程序，清理各类软件的缓存文件、日志文件等，长时间未清洗，可以空出10多G的空间出来，具体程序如下，创建一个abc.bat可执行文件（名字随便取），点击运行即可：</p>\n<a id=\"more\"></a>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off </span><br><span class=\"line\">echo 正在清除系统垃圾文件，请稍等...... </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.tmp </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*._mp </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.log </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.gid </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.chk </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.old </span><br><span class=\"line\">del /f /s /q %systemdrive%\\recycled\\*.* </span><br><span class=\"line\">del /f /s /q %windir%\\*.bak </span><br><span class=\"line\">del /f /s /q %windir%\\prefetch\\*.* </span><br><span class=\"line\">rd /s /q %windir%\\temp &amp; md %windir%\\temp </span><br><span class=\"line\">del /f /q %userprofile%\\小甜饼s\\*.* </span><br><span class=\"line\">del /f /q %userprofile%\\recent\\*.* </span><br><span class=\"line\">del /f /s /q &quot;%userprofile%\\Local Settings\\Temporary Internet Files\\*.*&quot; </span><br><span class=\"line\">del /f /s /q &quot;%userprofile%\\Local Settings\\Temp\\*.*&quot; </span><br><span class=\"line\">del /f /s /q &quot;%userprofile%\\recent\\*.*&quot; </span><br><span class=\"line\">echo 清除系统LJ完成！ </span><br><span class=\"line\">echo. &amp; pause</span><br></pre></td></tr></table></figure>\n\n<p>随便放在电脑的一个位置，点击运行即可。</p>\n","site":{"data":{}},"excerpt":"<p>windows c盘垃圾清理程序，清理各类软件的缓存文件、日志文件等，长时间未清洗，可以空出10多G的空间出来，具体程序如下，创建一个abc.bat可执行文件（名字随便取），点击运行即可：</p>","more":"<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@echo off </span><br><span class=\"line\">echo 正在清除系统垃圾文件，请稍等...... </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.tmp </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*._mp </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.log </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.gid </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.chk </span><br><span class=\"line\">del /f /s /q %systemdrive%\\*.old </span><br><span class=\"line\">del /f /s /q %systemdrive%\\recycled\\*.* </span><br><span class=\"line\">del /f /s /q %windir%\\*.bak </span><br><span class=\"line\">del /f /s /q %windir%\\prefetch\\*.* </span><br><span class=\"line\">rd /s /q %windir%\\temp &amp; md %windir%\\temp </span><br><span class=\"line\">del /f /q %userprofile%\\小甜饼s\\*.* </span><br><span class=\"line\">del /f /q %userprofile%\\recent\\*.* </span><br><span class=\"line\">del /f /s /q &quot;%userprofile%\\Local Settings\\Temporary Internet Files\\*.*&quot; </span><br><span class=\"line\">del /f /s /q &quot;%userprofile%\\Local Settings\\Temp\\*.*&quot; </span><br><span class=\"line\">del /f /s /q &quot;%userprofile%\\recent\\*.*&quot; </span><br><span class=\"line\">echo 清除系统LJ完成！ </span><br><span class=\"line\">echo. &amp; pause</span><br></pre></td></tr></table></figure>\n\n<p>随便放在电脑的一个位置，点击运行即可。</p>"},{"title":"ubuntu防火墙操作","date":"2018-02-07T11:03:40.000Z","_content":"使用过了centos的同胞们，听说ubuntu的交互性很不错，可视化界面也很炫酷，果断更换ubuntu系统，但是安装完成之后，感觉都不会使用linux系统了，于是各种google查询操作方法，下面来简单介绍ubuntu防火墙的操作。\n<!-- more -->\n使用ubuntu系统，配置防火墙稍微跟centos不太一样，有一样工具，叫做ufw，即uncomplicated firewall简单防火墙，刚开始用的时候不太习惯，记住这两个单词就行。\nubuntu系统自带就有这个工具，可能版本的原因，你的ubuntu可能没有，不用担心，没有先来安装。\n# 安装ufw工具\n```\nsudo apt install ufw -y\n```\n如果报错找不到包：\n```\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package ufw\n```\n更新一下依赖库就行：\n```\nsudo apt-get update\n```\n# 然后继续安装ufw，安装完成后，我们来启动它\n```\nsudo ufw enable\n```\n# 此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\n```\nsudo ufw default deny\n```\n# 查看防火墙状态\n```\nsudo ufw status\n```\n# 启用或者禁用端口、服务\n## 允许外部访问端口\n```\nsudo ufw allow 22\nsudo ufw allow sshd\n```\n## 禁止外部访问端口\n```\nsudo ufw delete allow 80\nsudo ufw delete allow apache2\n```\n## 允许某个ip访问本机所有端口\n```\nsudo ufw allow from 192.168.1.1\n```\nOK，希望对大家有帮助，我们一起进步，有问题欢迎在下方留言，或者给我发邮件，邮件地址：chenzuoli709@gmail.com。","source":"_posts/ubuntu防火墙操作.md","raw":"---\ntitle: ubuntu防火墙操作\ndate: 2018-02-07 19:03:40\ntags: [ubuntu,防火墙]\ncategories: ubuntu\n---\n使用过了centos的同胞们，听说ubuntu的交互性很不错，可视化界面也很炫酷，果断更换ubuntu系统，但是安装完成之后，感觉都不会使用linux系统了，于是各种google查询操作方法，下面来简单介绍ubuntu防火墙的操作。\n<!-- more -->\n使用ubuntu系统，配置防火墙稍微跟centos不太一样，有一样工具，叫做ufw，即uncomplicated firewall简单防火墙，刚开始用的时候不太习惯，记住这两个单词就行。\nubuntu系统自带就有这个工具，可能版本的原因，你的ubuntu可能没有，不用担心，没有先来安装。\n# 安装ufw工具\n```\nsudo apt install ufw -y\n```\n如果报错找不到包：\n```\nReading package lists... Done\nBuilding dependency tree       \nReading state information... Done\nE: Unable to locate package ufw\n```\n更新一下依赖库就行：\n```\nsudo apt-get update\n```\n# 然后继续安装ufw，安装完成后，我们来启动它\n```\nsudo ufw enable\n```\n# 此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\n```\nsudo ufw default deny\n```\n# 查看防火墙状态\n```\nsudo ufw status\n```\n# 启用或者禁用端口、服务\n## 允许外部访问端口\n```\nsudo ufw allow 22\nsudo ufw allow sshd\n```\n## 禁止外部访问端口\n```\nsudo ufw delete allow 80\nsudo ufw delete allow apache2\n```\n## 允许某个ip访问本机所有端口\n```\nsudo ufw allow from 192.168.1.1\n```\nOK，希望对大家有帮助，我们一起进步，有问题欢迎在下方留言，或者给我发邮件，邮件地址：chenzuoli709@gmail.com。","slug":"ubuntu防火墙操作","published":1,"updated":"2018-12-11T13:57:12.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ki0011fbs6r2fzf95r","content":"<p>使用过了centos的同胞们，听说ubuntu的交互性很不错，可视化界面也很炫酷，果断更换ubuntu系统，但是安装完成之后，感觉都不会使用linux系统了，于是各种google查询操作方法，下面来简单介绍ubuntu防火墙的操作。</p>\n<a id=\"more\"></a>\n<p>使用ubuntu系统，配置防火墙稍微跟centos不太一样，有一样工具，叫做ufw，即uncomplicated firewall简单防火墙，刚开始用的时候不太习惯，记住这两个单词就行。<br>ubuntu系统自带就有这个工具，可能版本的原因，你的ubuntu可能没有，不用担心，没有先来安装。</p>\n<h1 id=\"安装ufw工具\"><a href=\"#安装ufw工具\" class=\"headerlink\" title=\"安装ufw工具\"></a>安装ufw工具</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ufw -y</span><br></pre></td></tr></table></figure>\n\n<p>如果报错找不到包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">E: Unable to locate package ufw</span><br></pre></td></tr></table></figure>\n\n<p>更新一下依赖库就行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"然后继续安装ufw，安装完成后，我们来启动它\"><a href=\"#然后继续安装ufw，安装完成后，我们来启动它\" class=\"headerlink\" title=\"然后继续安装ufw，安装完成后，我们来启动它\"></a>然后继续安装ufw，安装完成后，我们来启动它</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\"><a href=\"#此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\" class=\"headerlink\" title=\"此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\"></a>此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw default deny</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启用或者禁用端口、服务\"><a href=\"#启用或者禁用端口、服务\" class=\"headerlink\" title=\"启用或者禁用端口、服务\"></a>启用或者禁用端口、服务</h1><h2 id=\"允许外部访问端口\"><a href=\"#允许外部访问端口\" class=\"headerlink\" title=\"允许外部访问端口\"></a>允许外部访问端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 22</span><br><span class=\"line\">sudo ufw allow sshd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止外部访问端口\"><a href=\"#禁止外部访问端口\" class=\"headerlink\" title=\"禁止外部访问端口\"></a>禁止外部访问端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow 80</span><br><span class=\"line\">sudo ufw delete allow apache2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"允许某个ip访问本机所有端口\"><a href=\"#允许某个ip访问本机所有端口\" class=\"headerlink\" title=\"允许某个ip访问本机所有端口\"></a>允许某个ip访问本机所有端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow from 192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>OK，希望对大家有帮助，我们一起进步，有问题欢迎在下方留言，或者给我发邮件，邮件地址：<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>。</p>\n","site":{"data":{}},"excerpt":"<p>使用过了centos的同胞们，听说ubuntu的交互性很不错，可视化界面也很炫酷，果断更换ubuntu系统，但是安装完成之后，感觉都不会使用linux系统了，于是各种google查询操作方法，下面来简单介绍ubuntu防火墙的操作。</p>","more":"<p>使用ubuntu系统，配置防火墙稍微跟centos不太一样，有一样工具，叫做ufw，即uncomplicated firewall简单防火墙，刚开始用的时候不太习惯，记住这两个单词就行。<br>ubuntu系统自带就有这个工具，可能版本的原因，你的ubuntu可能没有，不用担心，没有先来安装。</p>\n<h1 id=\"安装ufw工具\"><a href=\"#安装ufw工具\" class=\"headerlink\" title=\"安装ufw工具\"></a>安装ufw工具</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt install ufw -y</span><br></pre></td></tr></table></figure>\n\n<p>如果报错找不到包：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Reading package lists... Done</span><br><span class=\"line\">Building dependency tree       </span><br><span class=\"line\">Reading state information... Done</span><br><span class=\"line\">E: Unable to locate package ufw</span><br></pre></td></tr></table></figure>\n\n<p>更新一下依赖库就行：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"然后继续安装ufw，安装完成后，我们来启动它\"><a href=\"#然后继续安装ufw，安装完成后，我们来启动它\" class=\"headerlink\" title=\"然后继续安装ufw，安装完成后，我们来启动它\"></a>然后继续安装ufw，安装完成后，我们来启动它</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw enable</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\"><a href=\"#此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\" class=\"headerlink\" title=\"此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：\"></a>此时防火墙就开启了，默认可以访问部分端口，不如22、443，想关闭所有外部ip对本机的端口访问的话，执行命令：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw default deny</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"查看防火墙状态\"><a href=\"#查看防火墙状态\" class=\"headerlink\" title=\"查看防火墙状态\"></a>查看防火墙状态</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"启用或者禁用端口、服务\"><a href=\"#启用或者禁用端口、服务\" class=\"headerlink\" title=\"启用或者禁用端口、服务\"></a>启用或者禁用端口、服务</h1><h2 id=\"允许外部访问端口\"><a href=\"#允许外部访问端口\" class=\"headerlink\" title=\"允许外部访问端口\"></a>允许外部访问端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 22</span><br><span class=\"line\">sudo ufw allow sshd</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"禁止外部访问端口\"><a href=\"#禁止外部访问端口\" class=\"headerlink\" title=\"禁止外部访问端口\"></a>禁止外部访问端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw delete allow 80</span><br><span class=\"line\">sudo ufw delete allow apache2</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"允许某个ip访问本机所有端口\"><a href=\"#允许某个ip访问本机所有端口\" class=\"headerlink\" title=\"允许某个ip访问本机所有端口\"></a>允许某个ip访问本机所有端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow from 192.168.1.1</span><br></pre></td></tr></table></figure>\n\n<p>OK，希望对大家有帮助，我们一起进步，有问题欢迎在下方留言，或者给我发邮件，邮件地址：<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>。</p>"},{"title":"windows下gvim打开文件中文乱码","date":"2018-02-08T06:36:41.000Z","_content":"习惯了linux操作命令，突然有需要使用到windows cmd命令，例如安装某些软件时，需要用命令方式去安装：\n```\nnpm install hexo-cli\n```\n安装完成后，需要编辑一些配置文件，这个时候，去'计算机'中重新定位到该配置文件的位置时，是很不方便的，如果有个类似vim的工具多好，windows自带的文本编辑工具notepad打开后还不能像vim一样操作，很是不适，不过总有神一般的人物开发出好用的工具。\nwindows下有类似linux下的vim工具gvim，但是gvim打开某些文件时，中文乱码，很是让人烦恼，下面就来介绍如何解决乱码的问题。\n<!-- more -->\nwindows下默认vim打开是gbk格式的，所以中文乱码，需要进行设置vim打开时加载文件时的编码，参照如下设置：\n# 打开gvim客户端\n![gvim客户端](windows下gvim打开文件中文乱码\\gvim客户端.png)\n# 编辑_vimrc配置文件\n## 方式一：\n![gvim查找](windows下gvim打开文件中文乱码\\gvim查找.png)\n![编辑_vimrc文件](windows下gvim打开文件中文乱码\\_vimrc.png)\n## 方式二：直接编辑文件%VIM_HOME%\\_vimrc\n# 添加如下配置：\n```\nset enc=utf8 设置打开文件缓冲区编码\nset fencs=utf8,gbk,gb2312,gb18030,cp936\t设置文件编码\n```\n设置后，再次打开ok。\n如果gvim菜单栏中文乱码\n编辑配置文件_vimrc，添加如下配置：\n```\nsource $VIMRUNTIME/delmenu.vim\t设置gvim菜单文件编码\nsource $VIMRUNTIME/menu.vim\t设置gvim菜单文件编码\n```","source":"_posts/windows下vim打开文件中文乱码.md","raw":"---\ntitle: windows下gvim打开文件中文乱码\ndate: 2018-02-08 14:36:41\ntags: [windows,gvim]\ncategories: 操作系统\n---\n习惯了linux操作命令，突然有需要使用到windows cmd命令，例如安装某些软件时，需要用命令方式去安装：\n```\nnpm install hexo-cli\n```\n安装完成后，需要编辑一些配置文件，这个时候，去'计算机'中重新定位到该配置文件的位置时，是很不方便的，如果有个类似vim的工具多好，windows自带的文本编辑工具notepad打开后还不能像vim一样操作，很是不适，不过总有神一般的人物开发出好用的工具。\nwindows下有类似linux下的vim工具gvim，但是gvim打开某些文件时，中文乱码，很是让人烦恼，下面就来介绍如何解决乱码的问题。\n<!-- more -->\nwindows下默认vim打开是gbk格式的，所以中文乱码，需要进行设置vim打开时加载文件时的编码，参照如下设置：\n# 打开gvim客户端\n![gvim客户端](windows下gvim打开文件中文乱码\\gvim客户端.png)\n# 编辑_vimrc配置文件\n## 方式一：\n![gvim查找](windows下gvim打开文件中文乱码\\gvim查找.png)\n![编辑_vimrc文件](windows下gvim打开文件中文乱码\\_vimrc.png)\n## 方式二：直接编辑文件%VIM_HOME%\\_vimrc\n# 添加如下配置：\n```\nset enc=utf8 设置打开文件缓冲区编码\nset fencs=utf8,gbk,gb2312,gb18030,cp936\t设置文件编码\n```\n设置后，再次打开ok。\n如果gvim菜单栏中文乱码\n编辑配置文件_vimrc，添加如下配置：\n```\nsource $VIMRUNTIME/delmenu.vim\t设置gvim菜单文件编码\nsource $VIMRUNTIME/menu.vim\t设置gvim菜单文件编码\n```","slug":"windows下vim打开文件中文乱码","published":1,"updated":"2018-12-11T13:57:12.974Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kj0012fbs6l5s1aben","content":"<p>习惯了linux操作命令，突然有需要使用到windows cmd命令，例如安装某些软件时，需要用命令方式去安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，需要编辑一些配置文件，这个时候，去’计算机’中重新定位到该配置文件的位置时，是很不方便的，如果有个类似vim的工具多好，windows自带的文本编辑工具notepad打开后还不能像vim一样操作，很是不适，不过总有神一般的人物开发出好用的工具。<br>windows下有类似linux下的vim工具gvim，但是gvim打开某些文件时，中文乱码，很是让人烦恼，下面就来介绍如何解决乱码的问题。</p>\n<a id=\"more\"></a>\n<p>windows下默认vim打开是gbk格式的，所以中文乱码，需要进行设置vim打开时加载文件时的编码，参照如下设置：</p>\n<h1 id=\"打开gvim客户端\"><a href=\"#打开gvim客户端\" class=\"headerlink\" title=\"打开gvim客户端\"></a>打开gvim客户端</h1><p><img src=\"/2018/02/08/windows下vim打开文件中文乱码/windows%E4%B8%8Bgvim%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%5Cgvim%E5%AE%A2%E6%88%B7%E7%AB%AF.png\" alt=\"gvim客户端\"></p>\n<h1 id=\"编辑-vimrc配置文件\"><a href=\"#编辑-vimrc配置文件\" class=\"headerlink\" title=\"编辑_vimrc配置文件\"></a>编辑_vimrc配置文件</h1><h2 id=\"方式一：\"><a href=\"#方式一：\" class=\"headerlink\" title=\"方式一：\"></a>方式一：</h2><p><img src=\"/2018/02/08/windows下vim打开文件中文乱码/windows%E4%B8%8Bgvim%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%5Cgvim%E6%9F%A5%E6%89%BE.png\" alt=\"gvim查找\"><br><img src=\"/2018/02/08/windows下vim打开文件中文乱码/windows%E4%B8%8Bgvim%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81_vimrc.png\" alt=\"编辑_vimrc文件\"></p>\n<h2 id=\"方式二：直接编辑文件-VIM-HOME-vimrc\"><a href=\"#方式二：直接编辑文件-VIM-HOME-vimrc\" class=\"headerlink\" title=\"方式二：直接编辑文件%VIM_HOME%_vimrc\"></a>方式二：直接编辑文件%VIM_HOME%_vimrc</h2><h1 id=\"添加如下配置：\"><a href=\"#添加如下配置：\" class=\"headerlink\" title=\"添加如下配置：\"></a>添加如下配置：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set enc=utf8 设置打开文件缓冲区编码</span><br><span class=\"line\">set fencs=utf8,gbk,gb2312,gb18030,cp936\t设置文件编码</span><br></pre></td></tr></table></figure>\n\n<p>设置后，再次打开ok。<br>如果gvim菜单栏中文乱码<br>编辑配置文件_vimrc，添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source $VIMRUNTIME/delmenu.vim\t设置gvim菜单文件编码</span><br><span class=\"line\">source $VIMRUNTIME/menu.vim\t设置gvim菜单文件编码</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>习惯了linux操作命令，突然有需要使用到windows cmd命令，例如安装某些软件时，需要用命令方式去安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，需要编辑一些配置文件，这个时候，去’计算机’中重新定位到该配置文件的位置时，是很不方便的，如果有个类似vim的工具多好，windows自带的文本编辑工具notepad打开后还不能像vim一样操作，很是不适，不过总有神一般的人物开发出好用的工具。<br>windows下有类似linux下的vim工具gvim，但是gvim打开某些文件时，中文乱码，很是让人烦恼，下面就来介绍如何解决乱码的问题。</p>","more":"<p>windows下默认vim打开是gbk格式的，所以中文乱码，需要进行设置vim打开时加载文件时的编码，参照如下设置：</p>\n<h1 id=\"打开gvim客户端\"><a href=\"#打开gvim客户端\" class=\"headerlink\" title=\"打开gvim客户端\"></a>打开gvim客户端</h1><p><img src=\"/2018/02/08/windows下vim打开文件中文乱码/windows%E4%B8%8Bgvim%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%5Cgvim%E5%AE%A2%E6%88%B7%E7%AB%AF.png\" alt=\"gvim客户端\"></p>\n<h1 id=\"编辑-vimrc配置文件\"><a href=\"#编辑-vimrc配置文件\" class=\"headerlink\" title=\"编辑_vimrc配置文件\"></a>编辑_vimrc配置文件</h1><h2 id=\"方式一：\"><a href=\"#方式一：\" class=\"headerlink\" title=\"方式一：\"></a>方式一：</h2><p><img src=\"/2018/02/08/windows下vim打开文件中文乱码/windows%E4%B8%8Bgvim%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%5Cgvim%E6%9F%A5%E6%89%BE.png\" alt=\"gvim查找\"><br><img src=\"/2018/02/08/windows下vim打开文件中文乱码/windows%E4%B8%8Bgvim%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81_vimrc.png\" alt=\"编辑_vimrc文件\"></p>\n<h2 id=\"方式二：直接编辑文件-VIM-HOME-vimrc\"><a href=\"#方式二：直接编辑文件-VIM-HOME-vimrc\" class=\"headerlink\" title=\"方式二：直接编辑文件%VIM_HOME%_vimrc\"></a>方式二：直接编辑文件%VIM_HOME%_vimrc</h2><h1 id=\"添加如下配置：\"><a href=\"#添加如下配置：\" class=\"headerlink\" title=\"添加如下配置：\"></a>添加如下配置：</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set enc=utf8 设置打开文件缓冲区编码</span><br><span class=\"line\">set fencs=utf8,gbk,gb2312,gb18030,cp936\t设置文件编码</span><br></pre></td></tr></table></figure>\n\n<p>设置后，再次打开ok。<br>如果gvim菜单栏中文乱码<br>编辑配置文件_vimrc，添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source $VIMRUNTIME/delmenu.vim\t设置gvim菜单文件编码</span><br><span class=\"line\">source $VIMRUNTIME/menu.vim\t设置gvim菜单文件编码</span><br></pre></td></tr></table></figure>"},{"title":"三星集团","date":"2018-12-30T13:26:15.000Z","_content":"下面介绍下三星集团的基本信息：\n<!-- more -->\n三星集团\n1.公司名称：三星集团\n2.成立时间：1938年\n3.创始人：李秉哲\n4.现任会长：李健熙\n5.总部位置：韩国首尔\n6.公司分类：电子、金融、机械、化学\t\n7.全球员工人数：20万\n8.年营收：2119.41亿美元（2018年），约等于14200亿人民币\n9.全球500强：第12位\n10.旗下所有业务：\n电子：\n\t三星电子：消费型电子（手机、显示器）、内存、闪存等；\n\t三星SDI：太阳能电池、燃料电池、能源储存；\n\t三星SDS：IT相璃基板、等离子过滤器、显像管和玻璃；\n\t三星航空：三星贝尔427，为贝尔、波音等公司的产品提供服务；\n\t三星半导体：主要业务为生产SD卡，世界最大的存储芯片制造商；\n机械\n\t三星重工：主要业务为造船；\n\t三星工程：主要业务为制造电子零件装备、军用飞机零组件；\n\t三星道逹尔：主要业务为制造塑料、化工产品、石油产品。；\n\t三星石油化学：主要业务为PTA；\n\t三星精密化学：主要业务为制造电子化学材料、精密化学制品；\n\t三星BP化学：主要业务为制造硝酸、H2、VAM；\n金融保险\n\t三星生命保险：主要业务为人寿保险和金融服务；\n\t三星火灾海上保险：主要业务为人寿保险和金融服务；\n\t三星信用卡 [18]  ：主要业务为信用卡业务，贷款，租赁服务；\n\t三星证券：主要业务为资产管理、中介业务；\n\t三星投资信托管理：主要业务为投资信托；\n\t三星风险投资：主要业务为风险投资业务；\n其他\n\t三星物产：主要业务有贸易部门和建设部门；\n\t三星第一毛织：主要业务为是时装、纺织、化工、电子材料相关；\n\t三星第一广告：主要业务为是广告代理业务；\n\t三星新罗酒店：主要业务为是酒店相关业务；\n\t三星爱宝乐园：位于京畿道龙仁市的游乐园，是韩国第二大游乐园，由庆典世界、加勒比海湾、爱宝乐园赛车场组成；\n\t三星首尔医院：位于韩国首尔的医院，韩国最大、最具影响力的医院，隶属于三星集团；\n\t三星狮：韩国职业棒球捧场数最多的球队；\n","source":"_posts/三星集团.md","raw":"---\ntitle: 三星集团\ntags: 三星\ndate: 2018-12-30 21:26:15\ncategories: 世界排名\n---\n下面介绍下三星集团的基本信息：\n<!-- more -->\n三星集团\n1.公司名称：三星集团\n2.成立时间：1938年\n3.创始人：李秉哲\n4.现任会长：李健熙\n5.总部位置：韩国首尔\n6.公司分类：电子、金融、机械、化学\t\n7.全球员工人数：20万\n8.年营收：2119.41亿美元（2018年），约等于14200亿人民币\n9.全球500强：第12位\n10.旗下所有业务：\n电子：\n\t三星电子：消费型电子（手机、显示器）、内存、闪存等；\n\t三星SDI：太阳能电池、燃料电池、能源储存；\n\t三星SDS：IT相璃基板、等离子过滤器、显像管和玻璃；\n\t三星航空：三星贝尔427，为贝尔、波音等公司的产品提供服务；\n\t三星半导体：主要业务为生产SD卡，世界最大的存储芯片制造商；\n机械\n\t三星重工：主要业务为造船；\n\t三星工程：主要业务为制造电子零件装备、军用飞机零组件；\n\t三星道逹尔：主要业务为制造塑料、化工产品、石油产品。；\n\t三星石油化学：主要业务为PTA；\n\t三星精密化学：主要业务为制造电子化学材料、精密化学制品；\n\t三星BP化学：主要业务为制造硝酸、H2、VAM；\n金融保险\n\t三星生命保险：主要业务为人寿保险和金融服务；\n\t三星火灾海上保险：主要业务为人寿保险和金融服务；\n\t三星信用卡 [18]  ：主要业务为信用卡业务，贷款，租赁服务；\n\t三星证券：主要业务为资产管理、中介业务；\n\t三星投资信托管理：主要业务为投资信托；\n\t三星风险投资：主要业务为风险投资业务；\n其他\n\t三星物产：主要业务有贸易部门和建设部门；\n\t三星第一毛织：主要业务为是时装、纺织、化工、电子材料相关；\n\t三星第一广告：主要业务为是广告代理业务；\n\t三星新罗酒店：主要业务为是酒店相关业务；\n\t三星爱宝乐园：位于京畿道龙仁市的游乐园，是韩国第二大游乐园，由庆典世界、加勒比海湾、爱宝乐园赛车场组成；\n\t三星首尔医院：位于韩国首尔的医院，韩国最大、最具影响力的医院，隶属于三星集团；\n\t三星狮：韩国职业棒球捧场数最多的球队；\n","slug":"三星集团","published":1,"updated":"2019-04-21T03:23:15.087Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kk0013fbs6hpk3enlq","content":"<p>下面介绍下三星集团的基本信息：</p>\n<a id=\"more\"></a>\n<p>三星集团<br>1.公司名称：三星集团<br>2.成立时间：1938年<br>3.创始人：李秉哲<br>4.现任会长：李健熙<br>5.总部位置：韩国首尔<br>6.公司分类：电子、金融、机械、化学<br>7.全球员工人数：20万<br>8.年营收：2119.41亿美元（2018年），约等于14200亿人民币<br>9.全球500强：第12位<br>10.旗下所有业务：<br>电子：<br>    三星电子：消费型电子（手机、显示器）、内存、闪存等；<br>    三星SDI：太阳能电池、燃料电池、能源储存；<br>    三星SDS：IT相璃基板、等离子过滤器、显像管和玻璃；<br>    三星航空：三星贝尔427，为贝尔、波音等公司的产品提供服务；<br>    三星半导体：主要业务为生产SD卡，世界最大的存储芯片制造商；<br>机械<br>    三星重工：主要业务为造船；<br>    三星工程：主要业务为制造电子零件装备、军用飞机零组件；<br>    三星道逹尔：主要业务为制造塑料、化工产品、石油产品。；<br>    三星石油化学：主要业务为PTA；<br>    三星精密化学：主要业务为制造电子化学材料、精密化学制品；<br>    三星BP化学：主要业务为制造硝酸、H2、VAM；<br>金融保险<br>    三星生命保险：主要业务为人寿保险和金融服务；<br>    三星火灾海上保险：主要业务为人寿保险和金融服务；<br>    三星信用卡 [18]  ：主要业务为信用卡业务，贷款，租赁服务；<br>    三星证券：主要业务为资产管理、中介业务；<br>    三星投资信托管理：主要业务为投资信托；<br>    三星风险投资：主要业务为风险投资业务；<br>其他<br>    三星物产：主要业务有贸易部门和建设部门；<br>    三星第一毛织：主要业务为是时装、纺织、化工、电子材料相关；<br>    三星第一广告：主要业务为是广告代理业务；<br>    三星新罗酒店：主要业务为是酒店相关业务；<br>    三星爱宝乐园：位于京畿道龙仁市的游乐园，是韩国第二大游乐园，由庆典世界、加勒比海湾、爱宝乐园赛车场组成；<br>    三星首尔医院：位于韩国首尔的医院，韩国最大、最具影响力的医院，隶属于三星集团；<br>    三星狮：韩国职业棒球捧场数最多的球队；</p>\n","site":{"data":{}},"excerpt":"<p>下面介绍下三星集团的基本信息：</p>","more":"<p>三星集团<br>1.公司名称：三星集团<br>2.成立时间：1938年<br>3.创始人：李秉哲<br>4.现任会长：李健熙<br>5.总部位置：韩国首尔<br>6.公司分类：电子、金融、机械、化学<br>7.全球员工人数：20万<br>8.年营收：2119.41亿美元（2018年），约等于14200亿人民币<br>9.全球500强：第12位<br>10.旗下所有业务：<br>电子：<br>    三星电子：消费型电子（手机、显示器）、内存、闪存等；<br>    三星SDI：太阳能电池、燃料电池、能源储存；<br>    三星SDS：IT相璃基板、等离子过滤器、显像管和玻璃；<br>    三星航空：三星贝尔427，为贝尔、波音等公司的产品提供服务；<br>    三星半导体：主要业务为生产SD卡，世界最大的存储芯片制造商；<br>机械<br>    三星重工：主要业务为造船；<br>    三星工程：主要业务为制造电子零件装备、军用飞机零组件；<br>    三星道逹尔：主要业务为制造塑料、化工产品、石油产品。；<br>    三星石油化学：主要业务为PTA；<br>    三星精密化学：主要业务为制造电子化学材料、精密化学制品；<br>    三星BP化学：主要业务为制造硝酸、H2、VAM；<br>金融保险<br>    三星生命保险：主要业务为人寿保险和金融服务；<br>    三星火灾海上保险：主要业务为人寿保险和金融服务；<br>    三星信用卡 [18]  ：主要业务为信用卡业务，贷款，租赁服务；<br>    三星证券：主要业务为资产管理、中介业务；<br>    三星投资信托管理：主要业务为投资信托；<br>    三星风险投资：主要业务为风险投资业务；<br>其他<br>    三星物产：主要业务有贸易部门和建设部门；<br>    三星第一毛织：主要业务为是时装、纺织、化工、电子材料相关；<br>    三星第一广告：主要业务为是广告代理业务；<br>    三星新罗酒店：主要业务为是酒店相关业务；<br>    三星爱宝乐园：位于京畿道龙仁市的游乐园，是韩国第二大游乐园，由庆典世界、加勒比海湾、爱宝乐园赛车场组成；<br>    三星首尔医院：位于韩国首尔的医院，韩国最大、最具影响力的医院，隶属于三星集团；<br>    三星狮：韩国职业棒球捧场数最多的球队；</p>"},{"title":"世界上钻石价格排行","date":"2019-04-27T03:18:00.000Z","_content":"世界上最贵的钻石，在哪里呢，来看看。\n<!-- more -->\n![Koh-i-Noor](世界上钻石价格排行/Koh-i-Noor.jpeg)\n1.Koh-i-Noor: 现在英国，产地印度，21.12 g，无价；\n2.The Sancy: 现在印度，11.046 g，无价\n3.The Cullinan: 现在英国，产地南非，1905年被发现时621.35g，后来被拆分成105颗，价值4亿美元；\n4.The Hope Diamond: 现在美国，产地印度9.11g，价值3.5亿美元；\n5.Millennium Star: 属于戴比尔斯集团，产地扎伊尔，40.6.8g，价值1.29亿美元；\n6.Centenary Diamond: 属于戴比尔斯集团，产地南非，54.77g，价值1亿美元；\n7.Pink Star: 属于戴比尔斯集团，产地南非，11.92g，价值7千万美元；\n8.The Regent Diamond: 现在法国，产地印度，28.12g，价值6200万美元；\n","source":"_posts/世界上钻石价格排行.md","raw":"---\ntitle: 世界上钻石价格排行\ndate: 2019-04-27 11:18:00\ntags: 钻石\ncategories: 世界排名\n---\n世界上最贵的钻石，在哪里呢，来看看。\n<!-- more -->\n![Koh-i-Noor](世界上钻石价格排行/Koh-i-Noor.jpeg)\n1.Koh-i-Noor: 现在英国，产地印度，21.12 g，无价；\n2.The Sancy: 现在印度，11.046 g，无价\n3.The Cullinan: 现在英国，产地南非，1905年被发现时621.35g，后来被拆分成105颗，价值4亿美元；\n4.The Hope Diamond: 现在美国，产地印度9.11g，价值3.5亿美元；\n5.Millennium Star: 属于戴比尔斯集团，产地扎伊尔，40.6.8g，价值1.29亿美元；\n6.Centenary Diamond: 属于戴比尔斯集团，产地南非，54.77g，价值1亿美元；\n7.Pink Star: 属于戴比尔斯集团，产地南非，11.92g，价值7千万美元；\n8.The Regent Diamond: 现在法国，产地印度，28.12g，价值6200万美元；\n","slug":"世界上钻石价格排行","published":1,"updated":"2019-04-27T03:56:28.032Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kk0014fbs67phsr5na","content":"<p>世界上最贵的钻石，在哪里呢，来看看。</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/04/27/世界上钻石价格排行/Koh-i-Noor.jpeg\" alt=\"Koh-i-Noor\"><br>1.Koh-i-Noor: 现在英国，产地印度，21.12 g，无价；<br>2.The Sancy: 现在印度，11.046 g，无价<br>3.The Cullinan: 现在英国，产地南非，1905年被发现时621.35g，后来被拆分成105颗，价值4亿美元；<br>4.The Hope Diamond: 现在美国，产地印度9.11g，价值3.5亿美元；<br>5.Millennium Star: 属于戴比尔斯集团，产地扎伊尔，40.6.8g，价值1.29亿美元；<br>6.Centenary Diamond: 属于戴比尔斯集团，产地南非，54.77g，价值1亿美元；<br>7.Pink Star: 属于戴比尔斯集团，产地南非，11.92g，价值7千万美元；<br>8.The Regent Diamond: 现在法国，产地印度，28.12g，价值6200万美元；</p>\n","site":{"data":{}},"excerpt":"<p>世界上最贵的钻石，在哪里呢，来看看。</p>","more":"<p><img src=\"/2019/04/27/世界上钻石价格排行/Koh-i-Noor.jpeg\" alt=\"Koh-i-Noor\"><br>1.Koh-i-Noor: 现在英国，产地印度，21.12 g，无价；<br>2.The Sancy: 现在印度，11.046 g，无价<br>3.The Cullinan: 现在英国，产地南非，1905年被发现时621.35g，后来被拆分成105颗，价值4亿美元；<br>4.The Hope Diamond: 现在美国，产地印度9.11g，价值3.5亿美元；<br>5.Millennium Star: 属于戴比尔斯集团，产地扎伊尔，40.6.8g，价值1.29亿美元；<br>6.Centenary Diamond: 属于戴比尔斯集团，产地南非，54.77g，价值1亿美元；<br>7.Pink Star: 属于戴比尔斯集团，产地南非，11.92g，价值7千万美元；<br>8.The Regent Diamond: 现在法国，产地印度，28.12g，价值6200万美元；</p>"},{"title":"世界十大语言排名","date":"2019-06-11T15:38:35.000Z","_content":"\n世界语言排名，瑞士社会学家按照母语、第二语言、国家经济实力、科学外交重要性、社会、文学地位等方面进行综合评价，得出如下排名。\n\n<!-- more -->\n\n瑞士社会家者George Weber提出了这样的语言评价体系（图）：\n![语言评价体系](世界十大语言排名/language.jpeg)\n\n具体来说，评价语言地位需要按这6条标准加权评分综合考虑： \n　　1. 以该语言为母语人数:最高得分 4 \n　　2. 以该语言为第二语言的人数: 最高得分 6 \n　　3. 使用该语言国家的经济实力: 最高得分8 \n　　4. 科学、外交中该语言的重要性:最高得分8 \n　　5. 使用该语言的国家数和人口数：最高得分7 \n　　6. 该语言的社会、文学地位：最高得分4分（如果是联合国工作语言加1分）\n\n一种语言，在当今世界上处于什么样的排名，地位如何，主要取决于6个指标。\n\n> 1 使用某种语言的母语人口数量。\n　　（Number of native speakers of the language）\n　　评分：4分\n\n> 2 使用某种语言的非母语人口数量。\n　　（Number of non-native speakers of the language）\n　　评分：6分\n\n> 3 使用这种语言的国家数量与人口。\n　　（Number and population of countries using the language）\n　　评分：7分\n\n> 4 使用这种语言的国家的经济，科技与军事实力。\n　　（Economic, scientific and military power of the countries using the language）\n　　评分：8分\n\n> 5 在外交，国际贸易，国际组织，学术交流等领域使用这种语言的频率。\n　　（Number of major fields, such as diplomacy, international trade relations, international organizations and academic community, using the language globally）\n　　评分：8分\n\n> 6 在社会人文领域的声望。（例如：某种语言获得过多少次诺贝尔文学奖，某种语言有过多少世界名著等等）\n　　（International socio-literary prestige of the language）\n　　评分：4分 （如果是联合国的官方语言，额外加3分）\n\n\n上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\n--------------------------------------------------------------------------------\n按母语人口排序的前10名是：\n```\n（1）中文（占世界总人口20.7%）\n（2）英语（6.2%）\n（3）西班牙语（5.6%）\n（4）印地、乌尔都语（4.7%）\n（5）阿拉伯语（3.8%）\n（6）孟加拉语（3.5%）\n（7）巴西葡萄牙语（3.0%）\n（8）俄语（3.0%）\n（9）日语（2.3%）\n（10）德语（1.8%）\n```\n值得注意的是法语连前10名都没有进，仅排在第13位（1.4%），险胜排在第14位的韩语。 \n\n再看第二项指标：有多少人以该语言为第二语言：\n```\n（1）法语（约1亿8千万）\n（2）英语（约1亿5千万）\n（3）俄语（约1亿2千万）\n（4）葡萄牙语（约3000万）\n（5）阿拉伯语（约2400万）\n（6）西班牙语（约2200万）\n（7）中文（约2100万）\n（8）德语（约2000万）\n（9）日语（约1000万）\n（10）印地语\n```\n当然括号中的数字只是大致的估算，不是也不可能是科学统计，但先后顺序大致是不错的。 \n\nGeorge Weber先生对其他4项指标也做了估算，限于篇幅不一一叙述，他最后排出了世界语言的前十名：\n![世界十大语言综合排名](世界十大语言排名/language_index.jpeg)\n\n根据上面那6个指标，所做出的排名\n```\n　　第一名：英语 37分\n　　第二名：法语 23分\n　　第三名：西班牙语 20分\n　　第四名：俄语 16分\n　　第五名：阿拉伯语 14分\n　　第六名：汉语 13分\n　　第七名：德语 12分\n　　第八名：日语 10分\n　　第九名：葡萄牙语 10分\n　　第十名：印地语 9分\n```\n\n综上总结：\n\t全球性交流媒介：英语 \n\t洲际交流媒介：法语、西班牙语、俄语、阿拉伯语、葡萄牙语\n","source":"_posts/世界十大语言排名.md","raw":"---\ntitle: 世界十大语言排名\ndate: 2019-06-11 23:38:35\ntags: 语言\ncategories: 世界排名\n---\n\n世界语言排名，瑞士社会学家按照母语、第二语言、国家经济实力、科学外交重要性、社会、文学地位等方面进行综合评价，得出如下排名。\n\n<!-- more -->\n\n瑞士社会家者George Weber提出了这样的语言评价体系（图）：\n![语言评价体系](世界十大语言排名/language.jpeg)\n\n具体来说，评价语言地位需要按这6条标准加权评分综合考虑： \n　　1. 以该语言为母语人数:最高得分 4 \n　　2. 以该语言为第二语言的人数: 最高得分 6 \n　　3. 使用该语言国家的经济实力: 最高得分8 \n　　4. 科学、外交中该语言的重要性:最高得分8 \n　　5. 使用该语言的国家数和人口数：最高得分7 \n　　6. 该语言的社会、文学地位：最高得分4分（如果是联合国工作语言加1分）\n\n一种语言，在当今世界上处于什么样的排名，地位如何，主要取决于6个指标。\n\n> 1 使用某种语言的母语人口数量。\n　　（Number of native speakers of the language）\n　　评分：4分\n\n> 2 使用某种语言的非母语人口数量。\n　　（Number of non-native speakers of the language）\n　　评分：6分\n\n> 3 使用这种语言的国家数量与人口。\n　　（Number and population of countries using the language）\n　　评分：7分\n\n> 4 使用这种语言的国家的经济，科技与军事实力。\n　　（Economic, scientific and military power of the countries using the language）\n　　评分：8分\n\n> 5 在外交，国际贸易，国际组织，学术交流等领域使用这种语言的频率。\n　　（Number of major fields, such as diplomacy, international trade relations, international organizations and academic community, using the language globally）\n　　评分：8分\n\n> 6 在社会人文领域的声望。（例如：某种语言获得过多少次诺贝尔文学奖，某种语言有过多少世界名著等等）\n　　（International socio-literary prestige of the language）\n　　评分：4分 （如果是联合国的官方语言，额外加3分）\n\n\n上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\n--------------------------------------------------------------------------------\n按母语人口排序的前10名是：\n```\n（1）中文（占世界总人口20.7%）\n（2）英语（6.2%）\n（3）西班牙语（5.6%）\n（4）印地、乌尔都语（4.7%）\n（5）阿拉伯语（3.8%）\n（6）孟加拉语（3.5%）\n（7）巴西葡萄牙语（3.0%）\n（8）俄语（3.0%）\n（9）日语（2.3%）\n（10）德语（1.8%）\n```\n值得注意的是法语连前10名都没有进，仅排在第13位（1.4%），险胜排在第14位的韩语。 \n\n再看第二项指标：有多少人以该语言为第二语言：\n```\n（1）法语（约1亿8千万）\n（2）英语（约1亿5千万）\n（3）俄语（约1亿2千万）\n（4）葡萄牙语（约3000万）\n（5）阿拉伯语（约2400万）\n（6）西班牙语（约2200万）\n（7）中文（约2100万）\n（8）德语（约2000万）\n（9）日语（约1000万）\n（10）印地语\n```\n当然括号中的数字只是大致的估算，不是也不可能是科学统计，但先后顺序大致是不错的。 \n\nGeorge Weber先生对其他4项指标也做了估算，限于篇幅不一一叙述，他最后排出了世界语言的前十名：\n![世界十大语言综合排名](世界十大语言排名/language_index.jpeg)\n\n根据上面那6个指标，所做出的排名\n```\n　　第一名：英语 37分\n　　第二名：法语 23分\n　　第三名：西班牙语 20分\n　　第四名：俄语 16分\n　　第五名：阿拉伯语 14分\n　　第六名：汉语 13分\n　　第七名：德语 12分\n　　第八名：日语 10分\n　　第九名：葡萄牙语 10分\n　　第十名：印地语 9分\n```\n\n综上总结：\n\t全球性交流媒介：英语 \n\t洲际交流媒介：法语、西班牙语、俄语、阿拉伯语、葡萄牙语\n","slug":"世界十大语言排名","published":1,"updated":"2019-06-11T15:56:50.072Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kl0015fbs6hp2w1dug","content":"<p>世界语言排名，瑞士社会学家按照母语、第二语言、国家经济实力、科学外交重要性、社会、文学地位等方面进行综合评价，得出如下排名。</p>\n<a id=\"more\"></a>\n\n<p>瑞士社会家者George Weber提出了这样的语言评价体系（图）：<br><img src=\"/2019/06/11/世界十大语言排名/language.jpeg\" alt=\"语言评价体系\"></p>\n<p>具体来说，评价语言地位需要按这6条标准加权评分综合考虑：<br>　　1. 以该语言为母语人数:最高得分 4<br>　　2. 以该语言为第二语言的人数: 最高得分 6<br>　　3. 使用该语言国家的经济实力: 最高得分8<br>　　4. 科学、外交中该语言的重要性:最高得分8<br>　　5. 使用该语言的国家数和人口数：最高得分7<br>　　6. 该语言的社会、文学地位：最高得分4分（如果是联合国工作语言加1分）</p>\n<p>一种语言，在当今世界上处于什么样的排名，地位如何，主要取决于6个指标。</p>\n<blockquote>\n<p>1 使用某种语言的母语人口数量。<br>　　（Number of native speakers of the language）<br>　　评分：4分</p>\n</blockquote>\n<blockquote>\n<p>2 使用某种语言的非母语人口数量。<br>　　（Number of non-native speakers of the language）<br>　　评分：6分</p>\n</blockquote>\n<blockquote>\n<p>3 使用这种语言的国家数量与人口。<br>　　（Number and population of countries using the language）<br>　　评分：7分</p>\n</blockquote>\n<blockquote>\n<p>4 使用这种语言的国家的经济，科技与军事实力。<br>　　（Economic, scientific and military power of the countries using the language）<br>　　评分：8分</p>\n</blockquote>\n<blockquote>\n<p>5 在外交，国际贸易，国际组织，学术交流等领域使用这种语言的频率。<br>　　（Number of major fields, such as diplomacy, international trade relations, international organizations and academic community, using the language globally）<br>　　评分：8分</p>\n</blockquote>\n<blockquote>\n<p>6 在社会人文领域的声望。（例如：某种语言获得过多少次诺贝尔文学奖，某种语言有过多少世界名著等等）<br>　　（International socio-literary prestige of the language）<br>　　评分：4分 （如果是联合国的官方语言，额外加3分）</p>\n</blockquote>\n<h2 id=\"上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\"><a href=\"#上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\" class=\"headerlink\" title=\"上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\"></a>上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。</h2><p>按母语人口排序的前10名是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）中文（占世界总人口20.7%）</span><br><span class=\"line\">（2）英语（6.2%）</span><br><span class=\"line\">（3）西班牙语（5.6%）</span><br><span class=\"line\">（4）印地、乌尔都语（4.7%）</span><br><span class=\"line\">（5）阿拉伯语（3.8%）</span><br><span class=\"line\">（6）孟加拉语（3.5%）</span><br><span class=\"line\">（7）巴西葡萄牙语（3.0%）</span><br><span class=\"line\">（8）俄语（3.0%）</span><br><span class=\"line\">（9）日语（2.3%）</span><br><span class=\"line\">（10）德语（1.8%）</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是法语连前10名都没有进，仅排在第13位（1.4%），险胜排在第14位的韩语。 </p>\n<p>再看第二项指标：有多少人以该语言为第二语言：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）法语（约1亿8千万）</span><br><span class=\"line\">（2）英语（约1亿5千万）</span><br><span class=\"line\">（3）俄语（约1亿2千万）</span><br><span class=\"line\">（4）葡萄牙语（约3000万）</span><br><span class=\"line\">（5）阿拉伯语（约2400万）</span><br><span class=\"line\">（6）西班牙语（约2200万）</span><br><span class=\"line\">（7）中文（约2100万）</span><br><span class=\"line\">（8）德语（约2000万）</span><br><span class=\"line\">（9）日语（约1000万）</span><br><span class=\"line\">（10）印地语</span><br></pre></td></tr></table></figure>\n\n<p>当然括号中的数字只是大致的估算，不是也不可能是科学统计，但先后顺序大致是不错的。 </p>\n<p>George Weber先生对其他4项指标也做了估算，限于篇幅不一一叙述，他最后排出了世界语言的前十名：<br><img src=\"/2019/06/11/世界十大语言排名/language_index.jpeg\" alt=\"世界十大语言综合排名\"></p>\n<p>根据上面那6个指标，所做出的排名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　第一名：英语 37分</span><br><span class=\"line\">　　第二名：法语 23分</span><br><span class=\"line\">　　第三名：西班牙语 20分</span><br><span class=\"line\">　　第四名：俄语 16分</span><br><span class=\"line\">　　第五名：阿拉伯语 14分</span><br><span class=\"line\">　　第六名：汉语 13分</span><br><span class=\"line\">　　第七名：德语 12分</span><br><span class=\"line\">　　第八名：日语 10分</span><br><span class=\"line\">　　第九名：葡萄牙语 10分</span><br><span class=\"line\">　　第十名：印地语 9分</span><br></pre></td></tr></table></figure>\n\n<p>综上总结：<br>    全球性交流媒介：英语<br>    洲际交流媒介：法语、西班牙语、俄语、阿拉伯语、葡萄牙语</p>\n","site":{"data":{}},"excerpt":"<p>世界语言排名，瑞士社会学家按照母语、第二语言、国家经济实力、科学外交重要性、社会、文学地位等方面进行综合评价，得出如下排名。</p>","more":"<p>瑞士社会家者George Weber提出了这样的语言评价体系（图）：<br><img src=\"/2019/06/11/世界十大语言排名/language.jpeg\" alt=\"语言评价体系\"></p>\n<p>具体来说，评价语言地位需要按这6条标准加权评分综合考虑：<br>　　1. 以该语言为母语人数:最高得分 4<br>　　2. 以该语言为第二语言的人数: 最高得分 6<br>　　3. 使用该语言国家的经济实力: 最高得分8<br>　　4. 科学、外交中该语言的重要性:最高得分8<br>　　5. 使用该语言的国家数和人口数：最高得分7<br>　　6. 该语言的社会、文学地位：最高得分4分（如果是联合国工作语言加1分）</p>\n<p>一种语言，在当今世界上处于什么样的排名，地位如何，主要取决于6个指标。</p>\n<blockquote>\n<p>1 使用某种语言的母语人口数量。<br>　　（Number of native speakers of the language）<br>　　评分：4分</p>\n</blockquote>\n<blockquote>\n<p>2 使用某种语言的非母语人口数量。<br>　　（Number of non-native speakers of the language）<br>　　评分：6分</p>\n</blockquote>\n<blockquote>\n<p>3 使用这种语言的国家数量与人口。<br>　　（Number and population of countries using the language）<br>　　评分：7分</p>\n</blockquote>\n<blockquote>\n<p>4 使用这种语言的国家的经济，科技与军事实力。<br>　　（Economic, scientific and military power of the countries using the language）<br>　　评分：8分</p>\n</blockquote>\n<blockquote>\n<p>5 在外交，国际贸易，国际组织，学术交流等领域使用这种语言的频率。<br>　　（Number of major fields, such as diplomacy, international trade relations, international organizations and academic community, using the language globally）<br>　　评分：8分</p>\n</blockquote>\n<blockquote>\n<p>6 在社会人文领域的声望。（例如：某种语言获得过多少次诺贝尔文学奖，某种语言有过多少世界名著等等）<br>　　（International socio-literary prestige of the language）<br>　　评分：4分 （如果是联合国的官方语言，额外加3分）</p>\n</blockquote>\n<h2 id=\"上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\"><a href=\"#上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\" class=\"headerlink\" title=\"上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。\"></a>上面6个指标，就是判断一种语言在当今世界的排名，地位的综合指标。满分是40分。</h2><p>按母语人口排序的前10名是：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）中文（占世界总人口20.7%）</span><br><span class=\"line\">（2）英语（6.2%）</span><br><span class=\"line\">（3）西班牙语（5.6%）</span><br><span class=\"line\">（4）印地、乌尔都语（4.7%）</span><br><span class=\"line\">（5）阿拉伯语（3.8%）</span><br><span class=\"line\">（6）孟加拉语（3.5%）</span><br><span class=\"line\">（7）巴西葡萄牙语（3.0%）</span><br><span class=\"line\">（8）俄语（3.0%）</span><br><span class=\"line\">（9）日语（2.3%）</span><br><span class=\"line\">（10）德语（1.8%）</span><br></pre></td></tr></table></figure>\n\n<p>值得注意的是法语连前10名都没有进，仅排在第13位（1.4%），险胜排在第14位的韩语。 </p>\n<p>再看第二项指标：有多少人以该语言为第二语言：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（1）法语（约1亿8千万）</span><br><span class=\"line\">（2）英语（约1亿5千万）</span><br><span class=\"line\">（3）俄语（约1亿2千万）</span><br><span class=\"line\">（4）葡萄牙语（约3000万）</span><br><span class=\"line\">（5）阿拉伯语（约2400万）</span><br><span class=\"line\">（6）西班牙语（约2200万）</span><br><span class=\"line\">（7）中文（约2100万）</span><br><span class=\"line\">（8）德语（约2000万）</span><br><span class=\"line\">（9）日语（约1000万）</span><br><span class=\"line\">（10）印地语</span><br></pre></td></tr></table></figure>\n\n<p>当然括号中的数字只是大致的估算，不是也不可能是科学统计，但先后顺序大致是不错的。 </p>\n<p>George Weber先生对其他4项指标也做了估算，限于篇幅不一一叙述，他最后排出了世界语言的前十名：<br><img src=\"/2019/06/11/世界十大语言排名/language_index.jpeg\" alt=\"世界十大语言综合排名\"></p>\n<p>根据上面那6个指标，所做出的排名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">　　第一名：英语 37分</span><br><span class=\"line\">　　第二名：法语 23分</span><br><span class=\"line\">　　第三名：西班牙语 20分</span><br><span class=\"line\">　　第四名：俄语 16分</span><br><span class=\"line\">　　第五名：阿拉伯语 14分</span><br><span class=\"line\">　　第六名：汉语 13分</span><br><span class=\"line\">　　第七名：德语 12分</span><br><span class=\"line\">　　第八名：日语 10分</span><br><span class=\"line\">　　第九名：葡萄牙语 10分</span><br><span class=\"line\">　　第十名：印地语 9分</span><br></pre></td></tr></table></figure>\n\n<p>综上总结：<br>    全球性交流媒介：英语<br>    洲际交流媒介：法语、西班牙语、俄语、阿拉伯语、葡萄牙语</p>"},{"title":"世界各国人民平均汽车拥有量","date":"2019-06-29T01:15:59.000Z","_content":"\n【世界银行：每1000人拥有的汽车数量，美国为837辆最高，中国为173辆】\n\n<!-- more -->\n具体排名如下：\n\n![世界各国人民平均汽车拥有量](世界各国人民平均汽车拥有量/car_model.jpeg)\n\n美国：837\n澳大利亚：747\n意大利：695\n加拿大：670\n日本：591\n德国：589\n英国：579\n法国：569\n马来西亚：433\n俄罗斯：373\n巴西：350\n墨西哥：297\n沙特：209\n土耳其：199\n伊朗：178\n南非：174\n中国：173\n印度尼西亚：87\n尼日利亚：64\n印度：22","source":"_posts/世界各国人民平均汽车拥有量.md","raw":"---\ntitle: 世界各国人民平均汽车拥有量\ndate: 2019-06-29 09:15:59\ntags: 汽车\ncategories: 世界排名\n---\n\n【世界银行：每1000人拥有的汽车数量，美国为837辆最高，中国为173辆】\n\n<!-- more -->\n具体排名如下：\n\n![世界各国人民平均汽车拥有量](世界各国人民平均汽车拥有量/car_model.jpeg)\n\n美国：837\n澳大利亚：747\n意大利：695\n加拿大：670\n日本：591\n德国：589\n英国：579\n法国：569\n马来西亚：433\n俄罗斯：373\n巴西：350\n墨西哥：297\n沙特：209\n土耳其：199\n伊朗：178\n南非：174\n中国：173\n印度尼西亚：87\n尼日利亚：64\n印度：22","slug":"世界各国人民平均汽车拥有量","published":1,"updated":"2019-06-29T01:20:05.611Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0km0016fbs6fj0my90j","content":"<p>【世界银行：每1000人拥有的汽车数量，美国为837辆最高，中国为173辆】</p>\n<a id=\"more\"></a>\n<p>具体排名如下：</p>\n<p><img src=\"/2019/06/29/世界各国人民平均汽车拥有量/car_model.jpeg\" alt=\"世界各国人民平均汽车拥有量\"></p>\n<p>美国：837<br>澳大利亚：747<br>意大利：695<br>加拿大：670<br>日本：591<br>德国：589<br>英国：579<br>法国：569<br>马来西亚：433<br>俄罗斯：373<br>巴西：350<br>墨西哥：297<br>沙特：209<br>土耳其：199<br>伊朗：178<br>南非：174<br>中国：173<br>印度尼西亚：87<br>尼日利亚：64<br>印度：22</p>\n","site":{"data":{}},"excerpt":"<p>【世界银行：每1000人拥有的汽车数量，美国为837辆最高，中国为173辆】</p>","more":"<p>具体排名如下：</p>\n<p><img src=\"/2019/06/29/世界各国人民平均汽车拥有量/car_model.jpeg\" alt=\"世界各国人民平均汽车拥有量\"></p>\n<p>美国：837<br>澳大利亚：747<br>意大利：695<br>加拿大：670<br>日本：591<br>德国：589<br>英国：579<br>法国：569<br>马来西亚：433<br>俄罗斯：373<br>巴西：350<br>墨西哥：297<br>沙特：209<br>土耳其：199<br>伊朗：178<br>南非：174<br>中国：173<br>印度尼西亚：87<br>尼日利亚：64<br>印度：22</p>"},{"title":"世界失业率排行","date":"2019-05-19T01:46:59.000Z","_content":"来看看倒数第一是谁，哈哈。\n<!-- more -->\n失业率排行：\n![世界失业率排行](世界失业率排行/unemployment.jpeg)\nSouth Africa（南非）: 27%\nNigeria（尼日利亚）: 23%\nSpain（西班牙）: 14.7%\nTurkey（土耳其）: 14.7%\nBrazil（巴西）: 12.7%\nIran（伊朗）: 12.2%\nItaly（意大利）: 10.2%\nFrance（法国）: 8.7%\nEgypt（埃及）: 8.1%\nPakistan（巴基斯坦）: 5.9%\nCanada（加拿大）: 5.7%\nAustralia（澳大利亚）: 5.2%\nIndonesia（印度尼西亚）: 5%\nRussia（俄国）: 4.7%\nUK（英国）: 3.8%\nUS（美国）: 3.6%\nIndia（印度）: 3.5%\nGermany（德国）: 3.2%\nMexico（墨西哥）: 3.2%\nJapan（日本）: 2.5%\n\n此列不包含一些发达国家和未公布失业率的国家。\n","source":"_posts/世界失业率排行.md","raw":"---\ntitle: 世界失业率排行\ndate: 2019-05-19 09:46:59\ntags: 失业率\ncategories: 世界排名\n---\n来看看倒数第一是谁，哈哈。\n<!-- more -->\n失业率排行：\n![世界失业率排行](世界失业率排行/unemployment.jpeg)\nSouth Africa（南非）: 27%\nNigeria（尼日利亚）: 23%\nSpain（西班牙）: 14.7%\nTurkey（土耳其）: 14.7%\nBrazil（巴西）: 12.7%\nIran（伊朗）: 12.2%\nItaly（意大利）: 10.2%\nFrance（法国）: 8.7%\nEgypt（埃及）: 8.1%\nPakistan（巴基斯坦）: 5.9%\nCanada（加拿大）: 5.7%\nAustralia（澳大利亚）: 5.2%\nIndonesia（印度尼西亚）: 5%\nRussia（俄国）: 4.7%\nUK（英国）: 3.8%\nUS（美国）: 3.6%\nIndia（印度）: 3.5%\nGermany（德国）: 3.2%\nMexico（墨西哥）: 3.2%\nJapan（日本）: 2.5%\n\n此列不包含一些发达国家和未公布失业率的国家。\n","slug":"世界失业率排行","published":1,"updated":"2019-05-19T02:07:52.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kn0017fbs6bail6orj","content":"<p>来看看倒数第一是谁，哈哈。</p>\n<a id=\"more\"></a>\n<p>失业率排行：<br><img src=\"/2019/05/19/世界失业率排行/unemployment.jpeg\" alt=\"世界失业率排行\"><br>South Africa（南非）: 27%<br>Nigeria（尼日利亚）: 23%<br>Spain（西班牙）: 14.7%<br>Turkey（土耳其）: 14.7%<br>Brazil（巴西）: 12.7%<br>Iran（伊朗）: 12.2%<br>Italy（意大利）: 10.2%<br>France（法国）: 8.7%<br>Egypt（埃及）: 8.1%<br>Pakistan（巴基斯坦）: 5.9%<br>Canada（加拿大）: 5.7%<br>Australia（澳大利亚）: 5.2%<br>Indonesia（印度尼西亚）: 5%<br>Russia（俄国）: 4.7%<br>UK（英国）: 3.8%<br>US（美国）: 3.6%<br>India（印度）: 3.5%<br>Germany（德国）: 3.2%<br>Mexico（墨西哥）: 3.2%<br>Japan（日本）: 2.5%</p>\n<p>此列不包含一些发达国家和未公布失业率的国家。</p>\n","site":{"data":{}},"excerpt":"<p>来看看倒数第一是谁，哈哈。</p>","more":"<p>失业率排行：<br><img src=\"/2019/05/19/世界失业率排行/unemployment.jpeg\" alt=\"世界失业率排行\"><br>South Africa（南非）: 27%<br>Nigeria（尼日利亚）: 23%<br>Spain（西班牙）: 14.7%<br>Turkey（土耳其）: 14.7%<br>Brazil（巴西）: 12.7%<br>Iran（伊朗）: 12.2%<br>Italy（意大利）: 10.2%<br>France（法国）: 8.7%<br>Egypt（埃及）: 8.1%<br>Pakistan（巴基斯坦）: 5.9%<br>Canada（加拿大）: 5.7%<br>Australia（澳大利亚）: 5.2%<br>Indonesia（印度尼西亚）: 5%<br>Russia（俄国）: 4.7%<br>UK（英国）: 3.8%<br>US（美国）: 3.6%<br>India（印度）: 3.5%<br>Germany（德国）: 3.2%<br>Mexico（墨西哥）: 3.2%<br>Japan（日本）: 2.5%</p>\n<p>此列不包含一些发达国家和未公布失业率的国家。</p>"},{"title":"中本聪与比特币","date":"2018-12-31T13:26:15.000Z","_content":"介绍下比特币与中本聪的故事，点击更多\n<!-- more -->\n中本聪(Satoshi Nakamoto)\n\n【BTC设计初衷】\n并不希望数字加密货币被某国政府或中央银行控制，而是希望其成为全球自由流动、不受政府监管和控制的货币。\n\n【BTC发展概述】\n比特币协议及其相关软件Bitcoin-Qt的创造者，但真实身份未知。\n于2008年发表了一篇名为《比特币：一种点对点式的电子现金系统》（Bitcoin: A Peer-to-Peer Electronic Cash System）的论文，描述了一种被他称为“比特币”的电子货币及其算法。\n2009年，他发布了首个比特币软件，并正式启动了比特币金融系统。2010年，他逐渐淡出并将项目移交给比特币社区的其他成员。\n2015年，加州大学洛杉矶分校金融学教授Bhagwan Chowdhry曾提名中本聪为2016年诺贝尔奖经济学奖的候选人。Bhagwan Chowdhry说：“比特币的发明简直可以说是革命性的。中本聪的贡献不仅将会彻底改变我们对金钱的思考方式，很可能会颠覆央行在货币政策方面所扮演的角色，并且将会破坏如西联这样高成本汇款的服务，彻底消除如Visa，MasterCard、PayPal他们收取2-4%的中间人交易税，消除费事且昂贵的公证和中介服务，事实上它将彻底改变法律合约的方式。” \n\n【中本聪身份猜测】\n1.中情局特勤小组\n有阴谋论者认为比特币其实是由美国金融机构与政府联手打造的一款骗局工具，目的是地巨大利差引诱投资者巨额投入，再以利差吸取这些投资以平衡美国政府财政。因此中本聪并不是一个人，而是一个小组的代号。这种说法并未得到任何机构或个人的认可，但在反比特币者当中认同度很高。随着近期比特币等加密货币价格的暴跌，这种说法开始在一些比特币持有者当中流传。\n\n2.望月新一\n2012年5月，计算机科学家泰德·尼尔森认为中本聪就是日本数学家望月新一，认为其足够聪明，研究领域包含比特币所使用的数学算法。更重要的是，望月不使用常规的学术发表机制，而是习惯是独自工作，发表论文后让其他人自己理解。然而也有人提出质疑，认为设计比特币所需的密码学并非望月的研究兴趣。望月本人亦予以否认。\n\n3.尼克·萨博\n2013年12月，博客作家Skye Grey通过对中本论文的计量文体学分析得出结论，认为其真实身份是前乔治华盛顿大学教授尼克·萨博。萨博热衷于去中心化货币，还发表过一篇关于“比特黄金”（bit gold）的论文，被认为是比特币的先驱。他也是一个著名的从90年代起就喜欢使用化名的人。\n在2011年5月的一篇文章中，萨博谈起比特币创造者时表示：“在我认识的人里面，对这个想法足够感兴趣，并且能付诸实施的，本来只有我自己、戴维（Wei Dai）、哈尔·芬尼三个人，后来中本出现了（假定中本不是芬尼也不是戴维）。”\n\n4.多利安·中本\n最为公众所熟知的猜测发生在2014年3月6日。新闻周刊记者Leah McGrath Goodman发表文章称自己已经找到真正的中本，是一个居住在加利福尼亚州的日裔美国人，名叫多利安·中本，而“哲史”是他出生时的名字。除了名字相同以外，Goodman还找到了一些佐证，其中最有力的一条是，当Goodman在当面采访并提出比特币的问题时，多利安的回答看起来确认了其比特币之父的身份：“我已经不再参与它了，不能讨论它。它已经被转交给其他人。他们现在在负责。我已经没有任何联系。”这段话的真实性亦得到了当时在场的洛杉矶郡警察的确认。\n报道被公开后受到了包括比特币社区在内舆论的质疑和批评，但同时也引起了媒体的巨大兴趣。记者们蜂拥而至多利安的住宅外蹲守，甚至追逐他的汽车。然而在后来的正式访谈中，多利安否认了自己与比特币的全部联系，称自己从未听说过，只是误解了Goodman的提问，以为她问的是自己之前从军方承接的保密性工作。\n当天晚些时候，中本聪本人也站出来否认。他在P2P基金会的账户在尘封五年之后发了第一条消息，称：“我不是多利安·中本。”\n\n5.克雷格·史蒂芬·怀特\n2015年12月，《连线杂志》报道说澳大利亚学者克雷格·史蒂芬·怀特很有可能是中本聪的本尊。同时也指出，也许只是他精心设计的一个高明的骗局想让我们相信他就是中本聪本人。直到2016年5月2日，澳大利亚企业家克雷格·史蒂芬·怀特公开承认自己就是发明比特币的中本聪，首度有人公开承认。其证据是中本聪的加密签名档，但被质疑该档只要是稍微高端一点的黑客都能在暗网中找到下载，早就在不少计算机高手圈流传，另一证据是早期第1及第9区块比特币地址的私钥，但此私钥如果是早期比特币开发人员或其亲近者都有可能拿到。\n最关键证明是导入比特币至2009年的比特币第一笔交易地址，该地址被视为是中本聪所有，并要求表演汇回，BBC记者将0.017个比特币导入，但最终没有汇回。BBC刊退出和他的访谈片段，自称他就是比特币发明者。但克雷格声明与证据的真实性受到普遍的质疑，在最后阶段要求演示关键证据时，克雷格拒绝并发布了一篇顾左右而言他的博客文章。\n\n6.Vincent van Volkmer\n自2018年以来，互联网声称美国艺术家Vincent van Volkmer是中本聪。对此同时也有一系列证据，例如：他谈到他是一名数学家和密码学家的事实，他也与拥有导致阻碍技术相关知识的专家保持着良好的联系。不过，他自己也反驳了他就是中本聪的这种说法。\n\n7.其它猜测\n还有一些其他个人或团体被认为是中本聪的真身。其中包括：\n芬兰经济社会学家Dr Vili Lehdonvirta及爱尔兰密码学研究生Michael Clear。两人分别否认。\n德国及美国研究人员Neal King、Vladimir Oksman和Charles Bry。他们曾共同申请注册一项与比特币相关的专利，而比特币项目官方网站的域名bitcoin.org恰好注册于专利申请提交之后的第三天。三人均否认此猜测。\n比特币基金会首席科学家Gavin Andresen、比特币交易平台Mt. Gox创始人Jed McCaleb，或某个政府机构。[1]\n美国企业家及安全研究员Dustin D. Trammell，但他公开否认。\n也有人认为Satoshi Nakamoto的名字实际上是四家公司名字的组合，包括三星（Samsung）、东芝（Toshiba）、中道（Nakamichi）和摩托罗拉（Motorola），暗示着比特币其实是这四家公司联手开发并以Satoshi Nakamoto，即“中本聪”的化名来发表。\n","source":"_posts/中本聪(Satoshi Nakamoto)&比特币.md","raw":"---\ntitle: 中本聪与比特币\ntags: [数字货币,中本聪,比特币]\ndate: 2018-12-31 21:26:15\ncategories: 数字货币\n---\n介绍下比特币与中本聪的故事，点击更多\n<!-- more -->\n中本聪(Satoshi Nakamoto)\n\n【BTC设计初衷】\n并不希望数字加密货币被某国政府或中央银行控制，而是希望其成为全球自由流动、不受政府监管和控制的货币。\n\n【BTC发展概述】\n比特币协议及其相关软件Bitcoin-Qt的创造者，但真实身份未知。\n于2008年发表了一篇名为《比特币：一种点对点式的电子现金系统》（Bitcoin: A Peer-to-Peer Electronic Cash System）的论文，描述了一种被他称为“比特币”的电子货币及其算法。\n2009年，他发布了首个比特币软件，并正式启动了比特币金融系统。2010年，他逐渐淡出并将项目移交给比特币社区的其他成员。\n2015年，加州大学洛杉矶分校金融学教授Bhagwan Chowdhry曾提名中本聪为2016年诺贝尔奖经济学奖的候选人。Bhagwan Chowdhry说：“比特币的发明简直可以说是革命性的。中本聪的贡献不仅将会彻底改变我们对金钱的思考方式，很可能会颠覆央行在货币政策方面所扮演的角色，并且将会破坏如西联这样高成本汇款的服务，彻底消除如Visa，MasterCard、PayPal他们收取2-4%的中间人交易税，消除费事且昂贵的公证和中介服务，事实上它将彻底改变法律合约的方式。” \n\n【中本聪身份猜测】\n1.中情局特勤小组\n有阴谋论者认为比特币其实是由美国金融机构与政府联手打造的一款骗局工具，目的是地巨大利差引诱投资者巨额投入，再以利差吸取这些投资以平衡美国政府财政。因此中本聪并不是一个人，而是一个小组的代号。这种说法并未得到任何机构或个人的认可，但在反比特币者当中认同度很高。随着近期比特币等加密货币价格的暴跌，这种说法开始在一些比特币持有者当中流传。\n\n2.望月新一\n2012年5月，计算机科学家泰德·尼尔森认为中本聪就是日本数学家望月新一，认为其足够聪明，研究领域包含比特币所使用的数学算法。更重要的是，望月不使用常规的学术发表机制，而是习惯是独自工作，发表论文后让其他人自己理解。然而也有人提出质疑，认为设计比特币所需的密码学并非望月的研究兴趣。望月本人亦予以否认。\n\n3.尼克·萨博\n2013年12月，博客作家Skye Grey通过对中本论文的计量文体学分析得出结论，认为其真实身份是前乔治华盛顿大学教授尼克·萨博。萨博热衷于去中心化货币，还发表过一篇关于“比特黄金”（bit gold）的论文，被认为是比特币的先驱。他也是一个著名的从90年代起就喜欢使用化名的人。\n在2011年5月的一篇文章中，萨博谈起比特币创造者时表示：“在我认识的人里面，对这个想法足够感兴趣，并且能付诸实施的，本来只有我自己、戴维（Wei Dai）、哈尔·芬尼三个人，后来中本出现了（假定中本不是芬尼也不是戴维）。”\n\n4.多利安·中本\n最为公众所熟知的猜测发生在2014年3月6日。新闻周刊记者Leah McGrath Goodman发表文章称自己已经找到真正的中本，是一个居住在加利福尼亚州的日裔美国人，名叫多利安·中本，而“哲史”是他出生时的名字。除了名字相同以外，Goodman还找到了一些佐证，其中最有力的一条是，当Goodman在当面采访并提出比特币的问题时，多利安的回答看起来确认了其比特币之父的身份：“我已经不再参与它了，不能讨论它。它已经被转交给其他人。他们现在在负责。我已经没有任何联系。”这段话的真实性亦得到了当时在场的洛杉矶郡警察的确认。\n报道被公开后受到了包括比特币社区在内舆论的质疑和批评，但同时也引起了媒体的巨大兴趣。记者们蜂拥而至多利安的住宅外蹲守，甚至追逐他的汽车。然而在后来的正式访谈中，多利安否认了自己与比特币的全部联系，称自己从未听说过，只是误解了Goodman的提问，以为她问的是自己之前从军方承接的保密性工作。\n当天晚些时候，中本聪本人也站出来否认。他在P2P基金会的账户在尘封五年之后发了第一条消息，称：“我不是多利安·中本。”\n\n5.克雷格·史蒂芬·怀特\n2015年12月，《连线杂志》报道说澳大利亚学者克雷格·史蒂芬·怀特很有可能是中本聪的本尊。同时也指出，也许只是他精心设计的一个高明的骗局想让我们相信他就是中本聪本人。直到2016年5月2日，澳大利亚企业家克雷格·史蒂芬·怀特公开承认自己就是发明比特币的中本聪，首度有人公开承认。其证据是中本聪的加密签名档，但被质疑该档只要是稍微高端一点的黑客都能在暗网中找到下载，早就在不少计算机高手圈流传，另一证据是早期第1及第9区块比特币地址的私钥，但此私钥如果是早期比特币开发人员或其亲近者都有可能拿到。\n最关键证明是导入比特币至2009年的比特币第一笔交易地址，该地址被视为是中本聪所有，并要求表演汇回，BBC记者将0.017个比特币导入，但最终没有汇回。BBC刊退出和他的访谈片段，自称他就是比特币发明者。但克雷格声明与证据的真实性受到普遍的质疑，在最后阶段要求演示关键证据时，克雷格拒绝并发布了一篇顾左右而言他的博客文章。\n\n6.Vincent van Volkmer\n自2018年以来，互联网声称美国艺术家Vincent van Volkmer是中本聪。对此同时也有一系列证据，例如：他谈到他是一名数学家和密码学家的事实，他也与拥有导致阻碍技术相关知识的专家保持着良好的联系。不过，他自己也反驳了他就是中本聪的这种说法。\n\n7.其它猜测\n还有一些其他个人或团体被认为是中本聪的真身。其中包括：\n芬兰经济社会学家Dr Vili Lehdonvirta及爱尔兰密码学研究生Michael Clear。两人分别否认。\n德国及美国研究人员Neal King、Vladimir Oksman和Charles Bry。他们曾共同申请注册一项与比特币相关的专利，而比特币项目官方网站的域名bitcoin.org恰好注册于专利申请提交之后的第三天。三人均否认此猜测。\n比特币基金会首席科学家Gavin Andresen、比特币交易平台Mt. Gox创始人Jed McCaleb，或某个政府机构。[1]\n美国企业家及安全研究员Dustin D. Trammell，但他公开否认。\n也有人认为Satoshi Nakamoto的名字实际上是四家公司名字的组合，包括三星（Samsung）、东芝（Toshiba）、中道（Nakamichi）和摩托罗拉（Motorola），暗示着比特币其实是这四家公司联手开发并以Satoshi Nakamoto，即“中本聪”的化名来发表。\n","slug":"中本聪(Satoshi Nakamoto)&比特币","published":1,"updated":"2019-04-21T03:26:46.502Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ko0018fbs6thw16fwz","content":"<p>介绍下比特币与中本聪的故事，点击更多</p>\n<a id=\"more\"></a>\n<p>中本聪(Satoshi Nakamoto)</p>\n<p>【BTC设计初衷】<br>并不希望数字加密货币被某国政府或中央银行控制，而是希望其成为全球自由流动、不受政府监管和控制的货币。</p>\n<p>【BTC发展概述】<br>比特币协议及其相关软件Bitcoin-Qt的创造者，但真实身份未知。<br>于2008年发表了一篇名为《比特币：一种点对点式的电子现金系统》（Bitcoin: A Peer-to-Peer Electronic Cash System）的论文，描述了一种被他称为“比特币”的电子货币及其算法。<br>2009年，他发布了首个比特币软件，并正式启动了比特币金融系统。2010年，他逐渐淡出并将项目移交给比特币社区的其他成员。<br>2015年，加州大学洛杉矶分校金融学教授Bhagwan Chowdhry曾提名中本聪为2016年诺贝尔奖经济学奖的候选人。Bhagwan Chowdhry说：“比特币的发明简直可以说是革命性的。中本聪的贡献不仅将会彻底改变我们对金钱的思考方式，很可能会颠覆央行在货币政策方面所扮演的角色，并且将会破坏如西联这样高成本汇款的服务，彻底消除如Visa，MasterCard、PayPal他们收取2-4%的中间人交易税，消除费事且昂贵的公证和中介服务，事实上它将彻底改变法律合约的方式。” </p>\n<p>【中本聪身份猜测】<br>1.中情局特勤小组<br>有阴谋论者认为比特币其实是由美国金融机构与政府联手打造的一款骗局工具，目的是地巨大利差引诱投资者巨额投入，再以利差吸取这些投资以平衡美国政府财政。因此中本聪并不是一个人，而是一个小组的代号。这种说法并未得到任何机构或个人的认可，但在反比特币者当中认同度很高。随着近期比特币等加密货币价格的暴跌，这种说法开始在一些比特币持有者当中流传。</p>\n<p>2.望月新一<br>2012年5月，计算机科学家泰德·尼尔森认为中本聪就是日本数学家望月新一，认为其足够聪明，研究领域包含比特币所使用的数学算法。更重要的是，望月不使用常规的学术发表机制，而是习惯是独自工作，发表论文后让其他人自己理解。然而也有人提出质疑，认为设计比特币所需的密码学并非望月的研究兴趣。望月本人亦予以否认。</p>\n<p>3.尼克·萨博<br>2013年12月，博客作家Skye Grey通过对中本论文的计量文体学分析得出结论，认为其真实身份是前乔治华盛顿大学教授尼克·萨博。萨博热衷于去中心化货币，还发表过一篇关于“比特黄金”（bit gold）的论文，被认为是比特币的先驱。他也是一个著名的从90年代起就喜欢使用化名的人。<br>在2011年5月的一篇文章中，萨博谈起比特币创造者时表示：“在我认识的人里面，对这个想法足够感兴趣，并且能付诸实施的，本来只有我自己、戴维（Wei Dai）、哈尔·芬尼三个人，后来中本出现了（假定中本不是芬尼也不是戴维）。”</p>\n<p>4.多利安·中本<br>最为公众所熟知的猜测发生在2014年3月6日。新闻周刊记者Leah McGrath Goodman发表文章称自己已经找到真正的中本，是一个居住在加利福尼亚州的日裔美国人，名叫多利安·中本，而“哲史”是他出生时的名字。除了名字相同以外，Goodman还找到了一些佐证，其中最有力的一条是，当Goodman在当面采访并提出比特币的问题时，多利安的回答看起来确认了其比特币之父的身份：“我已经不再参与它了，不能讨论它。它已经被转交给其他人。他们现在在负责。我已经没有任何联系。”这段话的真实性亦得到了当时在场的洛杉矶郡警察的确认。<br>报道被公开后受到了包括比特币社区在内舆论的质疑和批评，但同时也引起了媒体的巨大兴趣。记者们蜂拥而至多利安的住宅外蹲守，甚至追逐他的汽车。然而在后来的正式访谈中，多利安否认了自己与比特币的全部联系，称自己从未听说过，只是误解了Goodman的提问，以为她问的是自己之前从军方承接的保密性工作。<br>当天晚些时候，中本聪本人也站出来否认。他在P2P基金会的账户在尘封五年之后发了第一条消息，称：“我不是多利安·中本。”</p>\n<p>5.克雷格·史蒂芬·怀特<br>2015年12月，《连线杂志》报道说澳大利亚学者克雷格·史蒂芬·怀特很有可能是中本聪的本尊。同时也指出，也许只是他精心设计的一个高明的骗局想让我们相信他就是中本聪本人。直到2016年5月2日，澳大利亚企业家克雷格·史蒂芬·怀特公开承认自己就是发明比特币的中本聪，首度有人公开承认。其证据是中本聪的加密签名档，但被质疑该档只要是稍微高端一点的黑客都能在暗网中找到下载，早就在不少计算机高手圈流传，另一证据是早期第1及第9区块比特币地址的私钥，但此私钥如果是早期比特币开发人员或其亲近者都有可能拿到。<br>最关键证明是导入比特币至2009年的比特币第一笔交易地址，该地址被视为是中本聪所有，并要求表演汇回，BBC记者将0.017个比特币导入，但最终没有汇回。BBC刊退出和他的访谈片段，自称他就是比特币发明者。但克雷格声明与证据的真实性受到普遍的质疑，在最后阶段要求演示关键证据时，克雷格拒绝并发布了一篇顾左右而言他的博客文章。</p>\n<p>6.Vincent van Volkmer<br>自2018年以来，互联网声称美国艺术家Vincent van Volkmer是中本聪。对此同时也有一系列证据，例如：他谈到他是一名数学家和密码学家的事实，他也与拥有导致阻碍技术相关知识的专家保持着良好的联系。不过，他自己也反驳了他就是中本聪的这种说法。</p>\n<p>7.其它猜测<br>还有一些其他个人或团体被认为是中本聪的真身。其中包括：<br>芬兰经济社会学家Dr Vili Lehdonvirta及爱尔兰密码学研究生Michael Clear。两人分别否认。<br>德国及美国研究人员Neal King、Vladimir Oksman和Charles Bry。他们曾共同申请注册一项与比特币相关的专利，而比特币项目官方网站的域名bitcoin.org恰好注册于专利申请提交之后的第三天。三人均否认此猜测。<br>比特币基金会首席科学家Gavin Andresen、比特币交易平台Mt. Gox创始人Jed McCaleb，或某个政府机构。[1]<br>美国企业家及安全研究员Dustin D. Trammell，但他公开否认。<br>也有人认为Satoshi Nakamoto的名字实际上是四家公司名字的组合，包括三星（Samsung）、东芝（Toshiba）、中道（Nakamichi）和摩托罗拉（Motorola），暗示着比特币其实是这四家公司联手开发并以Satoshi Nakamoto，即“中本聪”的化名来发表。</p>\n","site":{"data":{}},"excerpt":"<p>介绍下比特币与中本聪的故事，点击更多</p>","more":"<p>中本聪(Satoshi Nakamoto)</p>\n<p>【BTC设计初衷】<br>并不希望数字加密货币被某国政府或中央银行控制，而是希望其成为全球自由流动、不受政府监管和控制的货币。</p>\n<p>【BTC发展概述】<br>比特币协议及其相关软件Bitcoin-Qt的创造者，但真实身份未知。<br>于2008年发表了一篇名为《比特币：一种点对点式的电子现金系统》（Bitcoin: A Peer-to-Peer Electronic Cash System）的论文，描述了一种被他称为“比特币”的电子货币及其算法。<br>2009年，他发布了首个比特币软件，并正式启动了比特币金融系统。2010年，他逐渐淡出并将项目移交给比特币社区的其他成员。<br>2015年，加州大学洛杉矶分校金融学教授Bhagwan Chowdhry曾提名中本聪为2016年诺贝尔奖经济学奖的候选人。Bhagwan Chowdhry说：“比特币的发明简直可以说是革命性的。中本聪的贡献不仅将会彻底改变我们对金钱的思考方式，很可能会颠覆央行在货币政策方面所扮演的角色，并且将会破坏如西联这样高成本汇款的服务，彻底消除如Visa，MasterCard、PayPal他们收取2-4%的中间人交易税，消除费事且昂贵的公证和中介服务，事实上它将彻底改变法律合约的方式。” </p>\n<p>【中本聪身份猜测】<br>1.中情局特勤小组<br>有阴谋论者认为比特币其实是由美国金融机构与政府联手打造的一款骗局工具，目的是地巨大利差引诱投资者巨额投入，再以利差吸取这些投资以平衡美国政府财政。因此中本聪并不是一个人，而是一个小组的代号。这种说法并未得到任何机构或个人的认可，但在反比特币者当中认同度很高。随着近期比特币等加密货币价格的暴跌，这种说法开始在一些比特币持有者当中流传。</p>\n<p>2.望月新一<br>2012年5月，计算机科学家泰德·尼尔森认为中本聪就是日本数学家望月新一，认为其足够聪明，研究领域包含比特币所使用的数学算法。更重要的是，望月不使用常规的学术发表机制，而是习惯是独自工作，发表论文后让其他人自己理解。然而也有人提出质疑，认为设计比特币所需的密码学并非望月的研究兴趣。望月本人亦予以否认。</p>\n<p>3.尼克·萨博<br>2013年12月，博客作家Skye Grey通过对中本论文的计量文体学分析得出结论，认为其真实身份是前乔治华盛顿大学教授尼克·萨博。萨博热衷于去中心化货币，还发表过一篇关于“比特黄金”（bit gold）的论文，被认为是比特币的先驱。他也是一个著名的从90年代起就喜欢使用化名的人。<br>在2011年5月的一篇文章中，萨博谈起比特币创造者时表示：“在我认识的人里面，对这个想法足够感兴趣，并且能付诸实施的，本来只有我自己、戴维（Wei Dai）、哈尔·芬尼三个人，后来中本出现了（假定中本不是芬尼也不是戴维）。”</p>\n<p>4.多利安·中本<br>最为公众所熟知的猜测发生在2014年3月6日。新闻周刊记者Leah McGrath Goodman发表文章称自己已经找到真正的中本，是一个居住在加利福尼亚州的日裔美国人，名叫多利安·中本，而“哲史”是他出生时的名字。除了名字相同以外，Goodman还找到了一些佐证，其中最有力的一条是，当Goodman在当面采访并提出比特币的问题时，多利安的回答看起来确认了其比特币之父的身份：“我已经不再参与它了，不能讨论它。它已经被转交给其他人。他们现在在负责。我已经没有任何联系。”这段话的真实性亦得到了当时在场的洛杉矶郡警察的确认。<br>报道被公开后受到了包括比特币社区在内舆论的质疑和批评，但同时也引起了媒体的巨大兴趣。记者们蜂拥而至多利安的住宅外蹲守，甚至追逐他的汽车。然而在后来的正式访谈中，多利安否认了自己与比特币的全部联系，称自己从未听说过，只是误解了Goodman的提问，以为她问的是自己之前从军方承接的保密性工作。<br>当天晚些时候，中本聪本人也站出来否认。他在P2P基金会的账户在尘封五年之后发了第一条消息，称：“我不是多利安·中本。”</p>\n<p>5.克雷格·史蒂芬·怀特<br>2015年12月，《连线杂志》报道说澳大利亚学者克雷格·史蒂芬·怀特很有可能是中本聪的本尊。同时也指出，也许只是他精心设计的一个高明的骗局想让我们相信他就是中本聪本人。直到2016年5月2日，澳大利亚企业家克雷格·史蒂芬·怀特公开承认自己就是发明比特币的中本聪，首度有人公开承认。其证据是中本聪的加密签名档，但被质疑该档只要是稍微高端一点的黑客都能在暗网中找到下载，早就在不少计算机高手圈流传，另一证据是早期第1及第9区块比特币地址的私钥，但此私钥如果是早期比特币开发人员或其亲近者都有可能拿到。<br>最关键证明是导入比特币至2009年的比特币第一笔交易地址，该地址被视为是中本聪所有，并要求表演汇回，BBC记者将0.017个比特币导入，但最终没有汇回。BBC刊退出和他的访谈片段，自称他就是比特币发明者。但克雷格声明与证据的真实性受到普遍的质疑，在最后阶段要求演示关键证据时，克雷格拒绝并发布了一篇顾左右而言他的博客文章。</p>\n<p>6.Vincent van Volkmer<br>自2018年以来，互联网声称美国艺术家Vincent van Volkmer是中本聪。对此同时也有一系列证据，例如：他谈到他是一名数学家和密码学家的事实，他也与拥有导致阻碍技术相关知识的专家保持着良好的联系。不过，他自己也反驳了他就是中本聪的这种说法。</p>\n<p>7.其它猜测<br>还有一些其他个人或团体被认为是中本聪的真身。其中包括：<br>芬兰经济社会学家Dr Vili Lehdonvirta及爱尔兰密码学研究生Michael Clear。两人分别否认。<br>德国及美国研究人员Neal King、Vladimir Oksman和Charles Bry。他们曾共同申请注册一项与比特币相关的专利，而比特币项目官方网站的域名bitcoin.org恰好注册于专利申请提交之后的第三天。三人均否认此猜测。<br>比特币基金会首席科学家Gavin Andresen、比特币交易平台Mt. Gox创始人Jed McCaleb，或某个政府机构。[1]<br>美国企业家及安全研究员Dustin D. Trammell，但他公开否认。<br>也有人认为Satoshi Nakamoto的名字实际上是四家公司名字的组合，包括三星（Samsung）、东芝（Toshiba）、中道（Nakamichi）和摩托罗拉（Motorola），暗示着比特币其实是这四家公司联手开发并以Satoshi Nakamoto，即“中本聪”的化名来发表。</p>"},{"title":"人们最有可能帮助陌生人的十大国家","date":"2019-04-22T16:05:36.000Z","_content":"\n2018年, 人们最有可能帮助陌生人的十大国家:\n<!-- more -->\n排名如下：\n![人们最有可能帮助陌生人的十大国家](人们最有可能帮助陌生人的十大国家/soldier-military-uniform-american.jpg)\n1. 利比亚: 83%\n2. 伊拉克: 81%\n3. 科威特: 80%\n4. 利比里亚: 80%\n5. 塞拉利昂: 80%\n6. 巴林: 74%\n7. 冈比亚: 74%\n8. 沙特阿拉伯: 74%\n9. 肯尼亚: 72%\n10. 美国: 72%\n\n(World Giving Index)","source":"_posts/人们最有可能帮助陌生人的十大国家.md","raw":"---\ntitle: 人们最有可能帮助陌生人的十大国家\ndate: 2019-04-23 00:05:36\ncategories: 世界排名\n---\n\n2018年, 人们最有可能帮助陌生人的十大国家:\n<!-- more -->\n排名如下：\n![人们最有可能帮助陌生人的十大国家](人们最有可能帮助陌生人的十大国家/soldier-military-uniform-american.jpg)\n1. 利比亚: 83%\n2. 伊拉克: 81%\n3. 科威特: 80%\n4. 利比里亚: 80%\n5. 塞拉利昂: 80%\n6. 巴林: 74%\n7. 冈比亚: 74%\n8. 沙特阿拉伯: 74%\n9. 肯尼亚: 72%\n10. 美国: 72%\n\n(World Giving Index)","slug":"人们最有可能帮助陌生人的十大国家","published":1,"updated":"2019-04-22T16:22:07.108Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kp0019fbs675k2xjm7","content":"<p>2018年, 人们最有可能帮助陌生人的十大国家:</p>\n<a id=\"more\"></a>\n<p>排名如下：<br><img src=\"/2019/04/23/人们最有可能帮助陌生人的十大国家/soldier-military-uniform-american.jpg\" alt=\"人们最有可能帮助陌生人的十大国家\"></p>\n<ol>\n<li>利比亚: 83%</li>\n<li>伊拉克: 81%</li>\n<li>科威特: 80%</li>\n<li>利比里亚: 80%</li>\n<li>塞拉利昂: 80%</li>\n<li>巴林: 74%</li>\n<li>冈比亚: 74%</li>\n<li>沙特阿拉伯: 74%</li>\n<li>肯尼亚: 72%</li>\n<li>美国: 72%</li>\n</ol>\n<p>(World Giving Index)</p>\n","site":{"data":{}},"excerpt":"<p>2018年, 人们最有可能帮助陌生人的十大国家:</p>","more":"<p>排名如下：<br><img src=\"/2019/04/23/人们最有可能帮助陌生人的十大国家/soldier-military-uniform-american.jpg\" alt=\"人们最有可能帮助陌生人的十大国家\"></p>\n<ol>\n<li>利比亚: 83%</li>\n<li>伊拉克: 81%</li>\n<li>科威特: 80%</li>\n<li>利比里亚: 80%</li>\n<li>塞拉利昂: 80%</li>\n<li>巴林: 74%</li>\n<li>冈比亚: 74%</li>\n<li>沙特阿拉伯: 74%</li>\n<li>肯尼亚: 72%</li>\n<li>美国: 72%</li>\n</ol>\n<p>(World Giving Index)</p>"},{"title":"以太坊（Ethereum）简介","date":"2019-04-23T15:42:17.000Z","_content":"\n以太坊是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。\n<!-- more -->\n\n# 以太坊（Ethereum）简介\n![logo](以太坊（Ethereum）简介/800px-Ethereum_logo_2014.svg.png)\n## 概念：\n\n是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。\n\n以太坊的概念首次在2013至2014年间由程序员维塔利克·布特林受比特币启发后提出，大意为“下一代加密货币与去中心化应用平台”，在2014年透过ICO众筹得以开始发展。\n\n截至2018年6月，以太币是市值第二高的加密货币，以太坊亦被称为“第二代的区块链平台”，仅次于比特币。\n\n## 创始人\nVitalik Buterin（V神）\n![v神](以太坊（Ethereum）简介/500px-VitalikButerinProfile.jpg)\n国籍：俄裔加拿大人\n出生日期：1994年1月31日\n事迹：以太坊创始人、以太坊白皮书作者\n\n## 特点\n\n### 1.智能合约（smart contract）\n存储在区块链上的程序，由各节点运行，需要运行程序的人支付手续费给节点的矿工或权益人。\n\n### 2.代币（tokens）\n智能合约可以创造代币供分布式应用程序使用。分布式应用程序的代币化让用户、投资者以及管理者的利益一致。代币也可以用来进行首次代币发行。\n\n### 3.叔块（uncle block）\n将因为速度较慢而未及时被收入母链的较短区块链并入，以提升交易量。使用的是有向无环图的相关技术。\n\n### 4.权益证明（proof-of-stake）\n相较于工作量证明更有效率，可节省大量在挖矿时浪费的计算机资源，并避免特殊应用集成电路造成网络中心化。\n\n### 5.支链（Plasma）\n用较小的分支区块链运算，只将最后结果写入主链，可提升供单位时间的工作量。\n\n### 6.状态通道（state channels）\n原理类似比特币的闪雷网络，可提升交易速度、降低区块链的负担，并提高可扩展性。尚未实现，开发团队包括雷电网络（Raiden Network）和移动性网络（Liquidity Network）。\n\n### 7.分片（sharding）\n减少每个节点所需纪录的数据量，并透过平行运算提升效率。\n\n### 8.分布式应用程序\n以太坊上的分布式应用程序不会停机，也不能被关掉。\n\n## 发展历程\n\n### 1.激活：边境\n以太坊的公共区块链在2015年7月30日引导。最初的以太坊版本称为边境（Frontier，也有“前锋”的意思），用的是[工作量证明]（proof-of-work）的算法，目前转换成[权益证明]（proof-of-stake）。\n\n### 2.硬分叉\n\n自最初版本以来，以太坊网络成功进行了数次硬分叉。第一次分叉调整了未来挖矿的难度，确保未来的用户会有转换至权益证明的动机。当前第五个分叉正在开发中。\n\n### 3.第二次分叉：家园\n2016年春季进行了第二次分叉，发布了第一个稳定版本，称作“家园”（Homestead）。\n\n### 4.第三次分叉：DAO和区块链分叉\n2016年六月，以太坊上的一个去中心化自治组织被骇，造成市值五千万美元的以太币被移动到只有该黑客可以控制的“分身DAO”。因为程序不允许黑客立即提取这些以太币，以太坊用户有时间讨论如何处理此事，考虑的方案包括取回以太币和关闭DAO，而DAO去中心化的本质也表示没有中央权力可以立即反应，而需要用户的共识。最后在2016年7月20日，以太坊进行硬分叉，作出一个向后不兼容的改变，让所有的以太币（包括被移动的）回归原处，而不接受此改变的区块链则成为古典以太坊。这是第一次有主流区块链为了补偿投资人，而透过分叉来更动交易记录。\n\n在这次分叉之后，造成了在两个区块链之间进行重放攻击的可能，加上其他网络攻击，让以太坊和古典以太坊又各自进行了数次分叉来避免攻击。\n\n### 5.第四次分叉：减重和防DDoS\n\n2016年11月底进行了第四次的分叉。这次分叉为区块链减重（de-bloat），并加入一些避免网络攻击的设计。因为沟通疏失，这次分叉短暂造成以太坊的两个主要客户端程序 Parity 和 Geth 失去共识而产生意外的分叉，但问题在数小时内即被找出并修正。\n\n## 发展与挑战\n2018年9月，比特币核心开发者Jeremy Rubin在美国科技媒体TechCrunch上发表文章《ETH的崩溃无法避免》，称就算以太坊网络继续存续，ETH的价值也会必然归零。以太坊创始人Vitalik在回应中承认了问题的存在：“如果以太坊不改变，Jeremy Rubin的言论可能是对的”。此番言论造成ETH的价钱一度下挫。同时，许多以太坊的项目开始转移到[EOS](https://eos.io/)﹑[波场](https://tron.network/)等的其他公链上，有人担心以太坊将被取代。在ETH的价格影响下，以太坊的全网算力开始收缩，按[etherscan.io](https://etherscan.io/)的算力统计显示，9月到11月以太坊全网算力下跌了20％，从近300TH/s收缩至240TH/s。\n\n2018年12月10日，Vitalik在推特上宣称，未来采用基于[权益证明 (PoS)]的分片技术的区块链“效率将提高数千倍”。\n\n2019年，以太坊项目进行君士坦丁堡硬分叉，这是一个刺激以太坊网络改变其核心[共识机制算法](https://zh.wikipedia.org/wiki/%E5%85%B1%E8%AD%98%E6%A9%9F%E5%88%B6 \"共识机制\")的代码，这一段代码引导之后以太坊便会面临所谓的“冰河时代”，在该网络上的创建新区块的难度将会不断提升，最终减慢到完全停止。在该硬分叉升级之后，以太坊[区块链](https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE \"区块链\")的状态将“永久性”的改变。","source":"_posts/以太坊（Ethereum）简介.md","raw":"---\n\ntitle: 以太坊（Ethereum）简介\n\ndate: 2019-04-23 23:42:17\n\ntags: 以太坊\n\ncategories: 数字货币\n\n---\n\n以太坊是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。\n<!-- more -->\n\n# 以太坊（Ethereum）简介\n![logo](以太坊（Ethereum）简介/800px-Ethereum_logo_2014.svg.png)\n## 概念：\n\n是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。\n\n以太坊的概念首次在2013至2014年间由程序员维塔利克·布特林受比特币启发后提出，大意为“下一代加密货币与去中心化应用平台”，在2014年透过ICO众筹得以开始发展。\n\n截至2018年6月，以太币是市值第二高的加密货币，以太坊亦被称为“第二代的区块链平台”，仅次于比特币。\n\n## 创始人\nVitalik Buterin（V神）\n![v神](以太坊（Ethereum）简介/500px-VitalikButerinProfile.jpg)\n国籍：俄裔加拿大人\n出生日期：1994年1月31日\n事迹：以太坊创始人、以太坊白皮书作者\n\n## 特点\n\n### 1.智能合约（smart contract）\n存储在区块链上的程序，由各节点运行，需要运行程序的人支付手续费给节点的矿工或权益人。\n\n### 2.代币（tokens）\n智能合约可以创造代币供分布式应用程序使用。分布式应用程序的代币化让用户、投资者以及管理者的利益一致。代币也可以用来进行首次代币发行。\n\n### 3.叔块（uncle block）\n将因为速度较慢而未及时被收入母链的较短区块链并入，以提升交易量。使用的是有向无环图的相关技术。\n\n### 4.权益证明（proof-of-stake）\n相较于工作量证明更有效率，可节省大量在挖矿时浪费的计算机资源，并避免特殊应用集成电路造成网络中心化。\n\n### 5.支链（Plasma）\n用较小的分支区块链运算，只将最后结果写入主链，可提升供单位时间的工作量。\n\n### 6.状态通道（state channels）\n原理类似比特币的闪雷网络，可提升交易速度、降低区块链的负担，并提高可扩展性。尚未实现，开发团队包括雷电网络（Raiden Network）和移动性网络（Liquidity Network）。\n\n### 7.分片（sharding）\n减少每个节点所需纪录的数据量，并透过平行运算提升效率。\n\n### 8.分布式应用程序\n以太坊上的分布式应用程序不会停机，也不能被关掉。\n\n## 发展历程\n\n### 1.激活：边境\n以太坊的公共区块链在2015年7月30日引导。最初的以太坊版本称为边境（Frontier，也有“前锋”的意思），用的是[工作量证明]（proof-of-work）的算法，目前转换成[权益证明]（proof-of-stake）。\n\n### 2.硬分叉\n\n自最初版本以来，以太坊网络成功进行了数次硬分叉。第一次分叉调整了未来挖矿的难度，确保未来的用户会有转换至权益证明的动机。当前第五个分叉正在开发中。\n\n### 3.第二次分叉：家园\n2016年春季进行了第二次分叉，发布了第一个稳定版本，称作“家园”（Homestead）。\n\n### 4.第三次分叉：DAO和区块链分叉\n2016年六月，以太坊上的一个去中心化自治组织被骇，造成市值五千万美元的以太币被移动到只有该黑客可以控制的“分身DAO”。因为程序不允许黑客立即提取这些以太币，以太坊用户有时间讨论如何处理此事，考虑的方案包括取回以太币和关闭DAO，而DAO去中心化的本质也表示没有中央权力可以立即反应，而需要用户的共识。最后在2016年7月20日，以太坊进行硬分叉，作出一个向后不兼容的改变，让所有的以太币（包括被移动的）回归原处，而不接受此改变的区块链则成为古典以太坊。这是第一次有主流区块链为了补偿投资人，而透过分叉来更动交易记录。\n\n在这次分叉之后，造成了在两个区块链之间进行重放攻击的可能，加上其他网络攻击，让以太坊和古典以太坊又各自进行了数次分叉来避免攻击。\n\n### 5.第四次分叉：减重和防DDoS\n\n2016年11月底进行了第四次的分叉。这次分叉为区块链减重（de-bloat），并加入一些避免网络攻击的设计。因为沟通疏失，这次分叉短暂造成以太坊的两个主要客户端程序 Parity 和 Geth 失去共识而产生意外的分叉，但问题在数小时内即被找出并修正。\n\n## 发展与挑战\n2018年9月，比特币核心开发者Jeremy Rubin在美国科技媒体TechCrunch上发表文章《ETH的崩溃无法避免》，称就算以太坊网络继续存续，ETH的价值也会必然归零。以太坊创始人Vitalik在回应中承认了问题的存在：“如果以太坊不改变，Jeremy Rubin的言论可能是对的”。此番言论造成ETH的价钱一度下挫。同时，许多以太坊的项目开始转移到[EOS](https://eos.io/)﹑[波场](https://tron.network/)等的其他公链上，有人担心以太坊将被取代。在ETH的价格影响下，以太坊的全网算力开始收缩，按[etherscan.io](https://etherscan.io/)的算力统计显示，9月到11月以太坊全网算力下跌了20％，从近300TH/s收缩至240TH/s。\n\n2018年12月10日，Vitalik在推特上宣称，未来采用基于[权益证明 (PoS)]的分片技术的区块链“效率将提高数千倍”。\n\n2019年，以太坊项目进行君士坦丁堡硬分叉，这是一个刺激以太坊网络改变其核心[共识机制算法](https://zh.wikipedia.org/wiki/%E5%85%B1%E8%AD%98%E6%A9%9F%E5%88%B6 \"共识机制\")的代码，这一段代码引导之后以太坊便会面临所谓的“冰河时代”，在该网络上的创建新区块的难度将会不断提升，最终减慢到完全停止。在该硬分叉升级之后，以太坊[区块链](https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE \"区块链\")的状态将“永久性”的改变。","slug":"以太坊（Ethereum）简介","published":1,"updated":"2019-04-23T16:24:16.961Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kq001afbs6xx4vcc0d","content":"<p>以太坊是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"以太坊（Ethereum）简介\"><a href=\"#以太坊（Ethereum）简介\" class=\"headerlink\" title=\"以太坊（Ethereum）简介\"></a>以太坊（Ethereum）简介</h1><p><img src=\"/2019/04/23/以太坊（Ethereum）简介/800px-Ethereum_logo_2014.svg.png\" alt=\"logo\"></p>\n<h2 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h2><p>是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。</p>\n<p>以太坊的概念首次在2013至2014年间由程序员维塔利克·布特林受比特币启发后提出，大意为“下一代加密货币与去中心化应用平台”，在2014年透过ICO众筹得以开始发展。</p>\n<p>截至2018年6月，以太币是市值第二高的加密货币，以太坊亦被称为“第二代的区块链平台”，仅次于比特币。</p>\n<h2 id=\"创始人\"><a href=\"#创始人\" class=\"headerlink\" title=\"创始人\"></a>创始人</h2><p>Vitalik Buterin（V神）<br><img src=\"/2019/04/23/以太坊（Ethereum）简介/500px-VitalikButerinProfile.jpg\" alt=\"v神\"><br>国籍：俄裔加拿大人<br>出生日期：1994年1月31日<br>事迹：以太坊创始人、以太坊白皮书作者</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><h3 id=\"1-智能合约（smart-contract）\"><a href=\"#1-智能合约（smart-contract）\" class=\"headerlink\" title=\"1.智能合约（smart contract）\"></a>1.智能合约（smart contract）</h3><p>存储在区块链上的程序，由各节点运行，需要运行程序的人支付手续费给节点的矿工或权益人。</p>\n<h3 id=\"2-代币（tokens）\"><a href=\"#2-代币（tokens）\" class=\"headerlink\" title=\"2.代币（tokens）\"></a>2.代币（tokens）</h3><p>智能合约可以创造代币供分布式应用程序使用。分布式应用程序的代币化让用户、投资者以及管理者的利益一致。代币也可以用来进行首次代币发行。</p>\n<h3 id=\"3-叔块（uncle-block）\"><a href=\"#3-叔块（uncle-block）\" class=\"headerlink\" title=\"3.叔块（uncle block）\"></a>3.叔块（uncle block）</h3><p>将因为速度较慢而未及时被收入母链的较短区块链并入，以提升交易量。使用的是有向无环图的相关技术。</p>\n<h3 id=\"4-权益证明（proof-of-stake）\"><a href=\"#4-权益证明（proof-of-stake）\" class=\"headerlink\" title=\"4.权益证明（proof-of-stake）\"></a>4.权益证明（proof-of-stake）</h3><p>相较于工作量证明更有效率，可节省大量在挖矿时浪费的计算机资源，并避免特殊应用集成电路造成网络中心化。</p>\n<h3 id=\"5-支链（Plasma）\"><a href=\"#5-支链（Plasma）\" class=\"headerlink\" title=\"5.支链（Plasma）\"></a>5.支链（Plasma）</h3><p>用较小的分支区块链运算，只将最后结果写入主链，可提升供单位时间的工作量。</p>\n<h3 id=\"6-状态通道（state-channels）\"><a href=\"#6-状态通道（state-channels）\" class=\"headerlink\" title=\"6.状态通道（state channels）\"></a>6.状态通道（state channels）</h3><p>原理类似比特币的闪雷网络，可提升交易速度、降低区块链的负担，并提高可扩展性。尚未实现，开发团队包括雷电网络（Raiden Network）和移动性网络（Liquidity Network）。</p>\n<h3 id=\"7-分片（sharding）\"><a href=\"#7-分片（sharding）\" class=\"headerlink\" title=\"7.分片（sharding）\"></a>7.分片（sharding）</h3><p>减少每个节点所需纪录的数据量，并透过平行运算提升效率。</p>\n<h3 id=\"8-分布式应用程序\"><a href=\"#8-分布式应用程序\" class=\"headerlink\" title=\"8.分布式应用程序\"></a>8.分布式应用程序</h3><p>以太坊上的分布式应用程序不会停机，也不能被关掉。</p>\n<h2 id=\"发展历程\"><a href=\"#发展历程\" class=\"headerlink\" title=\"发展历程\"></a>发展历程</h2><h3 id=\"1-激活：边境\"><a href=\"#1-激活：边境\" class=\"headerlink\" title=\"1.激活：边境\"></a>1.激活：边境</h3><p>以太坊的公共区块链在2015年7月30日引导。最初的以太坊版本称为边境（Frontier，也有“前锋”的意思），用的是[工作量证明]（proof-of-work）的算法，目前转换成[权益证明]（proof-of-stake）。</p>\n<h3 id=\"2-硬分叉\"><a href=\"#2-硬分叉\" class=\"headerlink\" title=\"2.硬分叉\"></a>2.硬分叉</h3><p>自最初版本以来，以太坊网络成功进行了数次硬分叉。第一次分叉调整了未来挖矿的难度，确保未来的用户会有转换至权益证明的动机。当前第五个分叉正在开发中。</p>\n<h3 id=\"3-第二次分叉：家园\"><a href=\"#3-第二次分叉：家园\" class=\"headerlink\" title=\"3.第二次分叉：家园\"></a>3.第二次分叉：家园</h3><p>2016年春季进行了第二次分叉，发布了第一个稳定版本，称作“家园”（Homestead）。</p>\n<h3 id=\"4-第三次分叉：DAO和区块链分叉\"><a href=\"#4-第三次分叉：DAO和区块链分叉\" class=\"headerlink\" title=\"4.第三次分叉：DAO和区块链分叉\"></a>4.第三次分叉：DAO和区块链分叉</h3><p>2016年六月，以太坊上的一个去中心化自治组织被骇，造成市值五千万美元的以太币被移动到只有该黑客可以控制的“分身DAO”。因为程序不允许黑客立即提取这些以太币，以太坊用户有时间讨论如何处理此事，考虑的方案包括取回以太币和关闭DAO，而DAO去中心化的本质也表示没有中央权力可以立即反应，而需要用户的共识。最后在2016年7月20日，以太坊进行硬分叉，作出一个向后不兼容的改变，让所有的以太币（包括被移动的）回归原处，而不接受此改变的区块链则成为古典以太坊。这是第一次有主流区块链为了补偿投资人，而透过分叉来更动交易记录。</p>\n<p>在这次分叉之后，造成了在两个区块链之间进行重放攻击的可能，加上其他网络攻击，让以太坊和古典以太坊又各自进行了数次分叉来避免攻击。</p>\n<h3 id=\"5-第四次分叉：减重和防DDoS\"><a href=\"#5-第四次分叉：减重和防DDoS\" class=\"headerlink\" title=\"5.第四次分叉：减重和防DDoS\"></a>5.第四次分叉：减重和防DDoS</h3><p>2016年11月底进行了第四次的分叉。这次分叉为区块链减重（de-bloat），并加入一些避免网络攻击的设计。因为沟通疏失，这次分叉短暂造成以太坊的两个主要客户端程序 Parity 和 Geth 失去共识而产生意外的分叉，但问题在数小时内即被找出并修正。</p>\n<h2 id=\"发展与挑战\"><a href=\"#发展与挑战\" class=\"headerlink\" title=\"发展与挑战\"></a>发展与挑战</h2><p>2018年9月，比特币核心开发者Jeremy Rubin在美国科技媒体TechCrunch上发表文章《ETH的崩溃无法避免》，称就算以太坊网络继续存续，ETH的价值也会必然归零。以太坊创始人Vitalik在回应中承认了问题的存在：“如果以太坊不改变，Jeremy Rubin的言论可能是对的”。此番言论造成ETH的价钱一度下挫。同时，许多以太坊的项目开始转移到<a href=\"https://eos.io/\" target=\"_blank\" rel=\"noopener\">EOS</a>﹑<a href=\"https://tron.network/\" target=\"_blank\" rel=\"noopener\">波场</a>等的其他公链上，有人担心以太坊将被取代。在ETH的价格影响下，以太坊的全网算力开始收缩，按<a href=\"https://etherscan.io/\" target=\"_blank\" rel=\"noopener\">etherscan.io</a>的算力统计显示，9月到11月以太坊全网算力下跌了20％，从近300TH/s收缩至240TH/s。</p>\n<p>2018年12月10日，Vitalik在推特上宣称，未来采用基于[权益证明 (PoS)]的分片技术的区块链“效率将提高数千倍”。</p>\n<p>2019年，以太坊项目进行君士坦丁堡硬分叉，这是一个刺激以太坊网络改变其核心<a href=\"https://zh.wikipedia.org/wiki/%E5%85%B1%E8%AD%98%E6%A9%9F%E5%88%B6\" title=\"共识机制\" target=\"_blank\" rel=\"noopener\">共识机制算法</a>的代码，这一段代码引导之后以太坊便会面临所谓的“冰河时代”，在该网络上的创建新区块的难度将会不断提升，最终减慢到完全停止。在该硬分叉升级之后，以太坊<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE\" title=\"区块链\" target=\"_blank\" rel=\"noopener\">区块链</a>的状态将“永久性”的改变。</p>\n","site":{"data":{}},"excerpt":"<p>以太坊是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。</p>","more":"<h1 id=\"以太坊（Ethereum）简介\"><a href=\"#以太坊（Ethereum）简介\" class=\"headerlink\" title=\"以太坊（Ethereum）简介\"></a>以太坊（Ethereum）简介</h1><p><img src=\"/2019/04/23/以太坊（Ethereum）简介/800px-Ethereum_logo_2014.svg.png\" alt=\"logo\"></p>\n<h2 id=\"概念：\"><a href=\"#概念：\" class=\"headerlink\" title=\"概念：\"></a>概念：</h2><p>是一个开源的有智能合约功能的公共区块链平台。通过其专用加密货币以太币（Ether，又称“以太币”）提供去中心化的虚拟机（称为“以太虚拟机”Ethereum Virtual Machine）来处理点对点合约。</p>\n<p>以太坊的概念首次在2013至2014年间由程序员维塔利克·布特林受比特币启发后提出，大意为“下一代加密货币与去中心化应用平台”，在2014年透过ICO众筹得以开始发展。</p>\n<p>截至2018年6月，以太币是市值第二高的加密货币，以太坊亦被称为“第二代的区块链平台”，仅次于比特币。</p>\n<h2 id=\"创始人\"><a href=\"#创始人\" class=\"headerlink\" title=\"创始人\"></a>创始人</h2><p>Vitalik Buterin（V神）<br><img src=\"/2019/04/23/以太坊（Ethereum）简介/500px-VitalikButerinProfile.jpg\" alt=\"v神\"><br>国籍：俄裔加拿大人<br>出生日期：1994年1月31日<br>事迹：以太坊创始人、以太坊白皮书作者</p>\n<h2 id=\"特点\"><a href=\"#特点\" class=\"headerlink\" title=\"特点\"></a>特点</h2><h3 id=\"1-智能合约（smart-contract）\"><a href=\"#1-智能合约（smart-contract）\" class=\"headerlink\" title=\"1.智能合约（smart contract）\"></a>1.智能合约（smart contract）</h3><p>存储在区块链上的程序，由各节点运行，需要运行程序的人支付手续费给节点的矿工或权益人。</p>\n<h3 id=\"2-代币（tokens）\"><a href=\"#2-代币（tokens）\" class=\"headerlink\" title=\"2.代币（tokens）\"></a>2.代币（tokens）</h3><p>智能合约可以创造代币供分布式应用程序使用。分布式应用程序的代币化让用户、投资者以及管理者的利益一致。代币也可以用来进行首次代币发行。</p>\n<h3 id=\"3-叔块（uncle-block）\"><a href=\"#3-叔块（uncle-block）\" class=\"headerlink\" title=\"3.叔块（uncle block）\"></a>3.叔块（uncle block）</h3><p>将因为速度较慢而未及时被收入母链的较短区块链并入，以提升交易量。使用的是有向无环图的相关技术。</p>\n<h3 id=\"4-权益证明（proof-of-stake）\"><a href=\"#4-权益证明（proof-of-stake）\" class=\"headerlink\" title=\"4.权益证明（proof-of-stake）\"></a>4.权益证明（proof-of-stake）</h3><p>相较于工作量证明更有效率，可节省大量在挖矿时浪费的计算机资源，并避免特殊应用集成电路造成网络中心化。</p>\n<h3 id=\"5-支链（Plasma）\"><a href=\"#5-支链（Plasma）\" class=\"headerlink\" title=\"5.支链（Plasma）\"></a>5.支链（Plasma）</h3><p>用较小的分支区块链运算，只将最后结果写入主链，可提升供单位时间的工作量。</p>\n<h3 id=\"6-状态通道（state-channels）\"><a href=\"#6-状态通道（state-channels）\" class=\"headerlink\" title=\"6.状态通道（state channels）\"></a>6.状态通道（state channels）</h3><p>原理类似比特币的闪雷网络，可提升交易速度、降低区块链的负担，并提高可扩展性。尚未实现，开发团队包括雷电网络（Raiden Network）和移动性网络（Liquidity Network）。</p>\n<h3 id=\"7-分片（sharding）\"><a href=\"#7-分片（sharding）\" class=\"headerlink\" title=\"7.分片（sharding）\"></a>7.分片（sharding）</h3><p>减少每个节点所需纪录的数据量，并透过平行运算提升效率。</p>\n<h3 id=\"8-分布式应用程序\"><a href=\"#8-分布式应用程序\" class=\"headerlink\" title=\"8.分布式应用程序\"></a>8.分布式应用程序</h3><p>以太坊上的分布式应用程序不会停机，也不能被关掉。</p>\n<h2 id=\"发展历程\"><a href=\"#发展历程\" class=\"headerlink\" title=\"发展历程\"></a>发展历程</h2><h3 id=\"1-激活：边境\"><a href=\"#1-激活：边境\" class=\"headerlink\" title=\"1.激活：边境\"></a>1.激活：边境</h3><p>以太坊的公共区块链在2015年7月30日引导。最初的以太坊版本称为边境（Frontier，也有“前锋”的意思），用的是[工作量证明]（proof-of-work）的算法，目前转换成[权益证明]（proof-of-stake）。</p>\n<h3 id=\"2-硬分叉\"><a href=\"#2-硬分叉\" class=\"headerlink\" title=\"2.硬分叉\"></a>2.硬分叉</h3><p>自最初版本以来，以太坊网络成功进行了数次硬分叉。第一次分叉调整了未来挖矿的难度，确保未来的用户会有转换至权益证明的动机。当前第五个分叉正在开发中。</p>\n<h3 id=\"3-第二次分叉：家园\"><a href=\"#3-第二次分叉：家园\" class=\"headerlink\" title=\"3.第二次分叉：家园\"></a>3.第二次分叉：家园</h3><p>2016年春季进行了第二次分叉，发布了第一个稳定版本，称作“家园”（Homestead）。</p>\n<h3 id=\"4-第三次分叉：DAO和区块链分叉\"><a href=\"#4-第三次分叉：DAO和区块链分叉\" class=\"headerlink\" title=\"4.第三次分叉：DAO和区块链分叉\"></a>4.第三次分叉：DAO和区块链分叉</h3><p>2016年六月，以太坊上的一个去中心化自治组织被骇，造成市值五千万美元的以太币被移动到只有该黑客可以控制的“分身DAO”。因为程序不允许黑客立即提取这些以太币，以太坊用户有时间讨论如何处理此事，考虑的方案包括取回以太币和关闭DAO，而DAO去中心化的本质也表示没有中央权力可以立即反应，而需要用户的共识。最后在2016年7月20日，以太坊进行硬分叉，作出一个向后不兼容的改变，让所有的以太币（包括被移动的）回归原处，而不接受此改变的区块链则成为古典以太坊。这是第一次有主流区块链为了补偿投资人，而透过分叉来更动交易记录。</p>\n<p>在这次分叉之后，造成了在两个区块链之间进行重放攻击的可能，加上其他网络攻击，让以太坊和古典以太坊又各自进行了数次分叉来避免攻击。</p>\n<h3 id=\"5-第四次分叉：减重和防DDoS\"><a href=\"#5-第四次分叉：减重和防DDoS\" class=\"headerlink\" title=\"5.第四次分叉：减重和防DDoS\"></a>5.第四次分叉：减重和防DDoS</h3><p>2016年11月底进行了第四次的分叉。这次分叉为区块链减重（de-bloat），并加入一些避免网络攻击的设计。因为沟通疏失，这次分叉短暂造成以太坊的两个主要客户端程序 Parity 和 Geth 失去共识而产生意外的分叉，但问题在数小时内即被找出并修正。</p>\n<h2 id=\"发展与挑战\"><a href=\"#发展与挑战\" class=\"headerlink\" title=\"发展与挑战\"></a>发展与挑战</h2><p>2018年9月，比特币核心开发者Jeremy Rubin在美国科技媒体TechCrunch上发表文章《ETH的崩溃无法避免》，称就算以太坊网络继续存续，ETH的价值也会必然归零。以太坊创始人Vitalik在回应中承认了问题的存在：“如果以太坊不改变，Jeremy Rubin的言论可能是对的”。此番言论造成ETH的价钱一度下挫。同时，许多以太坊的项目开始转移到<a href=\"https://eos.io/\" target=\"_blank\" rel=\"noopener\">EOS</a>﹑<a href=\"https://tron.network/\" target=\"_blank\" rel=\"noopener\">波场</a>等的其他公链上，有人担心以太坊将被取代。在ETH的价格影响下，以太坊的全网算力开始收缩，按<a href=\"https://etherscan.io/\" target=\"_blank\" rel=\"noopener\">etherscan.io</a>的算力统计显示，9月到11月以太坊全网算力下跌了20％，从近300TH/s收缩至240TH/s。</p>\n<p>2018年12月10日，Vitalik在推特上宣称，未来采用基于[权益证明 (PoS)]的分片技术的区块链“效率将提高数千倍”。</p>\n<p>2019年，以太坊项目进行君士坦丁堡硬分叉，这是一个刺激以太坊网络改变其核心<a href=\"https://zh.wikipedia.org/wiki/%E5%85%B1%E8%AD%98%E6%A9%9F%E5%88%B6\" title=\"共识机制\" target=\"_blank\" rel=\"noopener\">共识机制算法</a>的代码，这一段代码引导之后以太坊便会面临所谓的“冰河时代”，在该网络上的创建新区块的难度将会不断提升，最终减慢到完全停止。在该硬分叉升级之后，以太坊<a href=\"https://zh.wikipedia.org/wiki/%E5%8C%BA%E5%9D%97%E9%93%BE\" title=\"区块链\" target=\"_blank\" rel=\"noopener\">区块链</a>的状态将“永久性”的改变。</p>"},{"title":"儿童贫困率排行","date":"2019-05-19T01:58:05.000Z","_content":"世界儿童贫困率排行，来看看。\n<!-- more -->\n\nChild poverty rate, 2016. (%)\n\n🇨🇳CHN: 33.1%\n🇧🇷BRA: 30.1%\n🇹🇷TUR: 25.3%\n🇮🇳IND: 23.6%\n🇪🇸ESP: 22.1%\n🇺🇸USA: 20.9%\n🇲🇽MEX: 19.7%\n🇮🇹ITA: 18.3%\n🇨🇦CAN: 17.1%\n🇯🇵JPN: 13.9%\n🇦🇺AUS: 13.0%\n🇬🇧GBR: 11.8%\n🇫🇷FRA: 11.3%\n🇩🇪GER: 11.2%\n🇨🇭SUI: 9.5%\n🇸🇪SWE: 8.9%\n🇰🇷KOR: 7.1%\n🇫🇮FIN: 3.3%\n🇩🇰DEN: 2.9%\n\n(OECD)\n![儿童贫困率排行](儿童贫困率排行/child_poverty_rate.jpeg)","source":"_posts/儿童贫困率排行.md","raw":"---\ntitle: 儿童贫困率排行\ndate: 2019-05-19 09:58:05\ntags: [儿童,贫困率]\ncategories: 世界排名\n---\n世界儿童贫困率排行，来看看。\n<!-- more -->\n\nChild poverty rate, 2016. (%)\n\n🇨🇳CHN: 33.1%\n🇧🇷BRA: 30.1%\n🇹🇷TUR: 25.3%\n🇮🇳IND: 23.6%\n🇪🇸ESP: 22.1%\n🇺🇸USA: 20.9%\n🇲🇽MEX: 19.7%\n🇮🇹ITA: 18.3%\n🇨🇦CAN: 17.1%\n🇯🇵JPN: 13.9%\n🇦🇺AUS: 13.0%\n🇬🇧GBR: 11.8%\n🇫🇷FRA: 11.3%\n🇩🇪GER: 11.2%\n🇨🇭SUI: 9.5%\n🇸🇪SWE: 8.9%\n🇰🇷KOR: 7.1%\n🇫🇮FIN: 3.3%\n🇩🇰DEN: 2.9%\n\n(OECD)\n![儿童贫困率排行](儿童贫困率排行/child_poverty_rate.jpeg)","slug":"儿童贫困率排行","published":1,"updated":"2019-05-19T02:05:58.427Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kq001bfbs6qafv7ovb","content":"<p>世界儿童贫困率排行，来看看。</p>\n<a id=\"more\"></a>\n\n<p>Child poverty rate, 2016. (%)</p>\n<p>🇨🇳CHN: 33.1%<br>🇧🇷BRA: 30.1%<br>🇹🇷TUR: 25.3%<br>🇮🇳IND: 23.6%<br>🇪🇸ESP: 22.1%<br>🇺🇸USA: 20.9%<br>🇲🇽MEX: 19.7%<br>🇮🇹ITA: 18.3%<br>🇨🇦CAN: 17.1%<br>🇯🇵JPN: 13.9%<br>🇦🇺AUS: 13.0%<br>🇬🇧GBR: 11.8%<br>🇫🇷FRA: 11.3%<br>🇩🇪GER: 11.2%<br>🇨🇭SUI: 9.5%<br>🇸🇪SWE: 8.9%<br>🇰🇷KOR: 7.1%<br>🇫🇮FIN: 3.3%<br>🇩🇰DEN: 2.9%</p>\n<p>(OECD)<br><img src=\"/2019/05/19/儿童贫困率排行/child_poverty_rate.jpeg\" alt=\"儿童贫困率排行\"></p>\n","site":{"data":{}},"excerpt":"<p>世界儿童贫困率排行，来看看。</p>","more":"<p>Child poverty rate, 2016. (%)</p>\n<p>🇨🇳CHN: 33.1%<br>🇧🇷BRA: 30.1%<br>🇹🇷TUR: 25.3%<br>🇮🇳IND: 23.6%<br>🇪🇸ESP: 22.1%<br>🇺🇸USA: 20.9%<br>🇲🇽MEX: 19.7%<br>🇮🇹ITA: 18.3%<br>🇨🇦CAN: 17.1%<br>🇯🇵JPN: 13.9%<br>🇦🇺AUS: 13.0%<br>🇬🇧GBR: 11.8%<br>🇫🇷FRA: 11.3%<br>🇩🇪GER: 11.2%<br>🇨🇭SUI: 9.5%<br>🇸🇪SWE: 8.9%<br>🇰🇷KOR: 7.1%<br>🇫🇮FIN: 3.3%<br>🇩🇰DEN: 2.9%</p>\n<p>(OECD)<br><img src=\"/2019/05/19/儿童贫困率排行/child_poverty_rate.jpeg\" alt=\"儿童贫困率排行\"></p>"},{"title":"全球各国人均GDP排行","date":"2019-05-07T14:06:11.000Z","_content":"在这个世界上，人均GDP的提高，不仅需要天时地利，更重要的是人和。\n来看看全球各国人均GDP排行吧，并介绍下人均GDP最高的国家：卢森堡大公国。\n<!-- more -->\n2018年度全球各国人均GDP排名如下：\n![index_of_per_capita_gdp](全球各国人均GDP排行/index_of_per_capita_gdp_countries.png)\n来介绍下人均收入最高的卢森堡大公国吧：\n![lusenbao](全球各国人均GDP排行/lusenbao.png)\n# 基本信息\n* 语言：<label style=\"color:blue\">卢森堡语、德语、法语</label>\n* 首都：卢森堡市\n* 货币：欧元\n* 国土面积：0.25万平方公里\n\n# 简介\n卢森堡是欧盟成员国，因境内有欧洲法院、欧洲审计院、欧洲投资银行等多个欧盟机构被称为继布鲁塞尔和斯特拉斯堡之后的欧盟“第三首都”。\n卢森堡实行<label style=\"color:blue\">君主立宪制</label>。\n国家元首为卢森堡大公，也是目前欧洲唯一的一个大公国。而行政权则由内阁行使。国会共有60个席位，议员任期为5年。\n\n# 地理位置\n卢森堡位于西欧内陆，地势北高南低，东邻德国，南接法国，北部和西部同比利时接壤。北部为阿登高原，森林茂密，南部为丘陵。气候温和，属温带海洋性气候，风景优美。\n首都卢森堡城有“<label style=\"color:blue\">花都</label>”之称。铁矿丰富。这里也是中世纪的要塞。最高点为布尔格普拉兹峰，海拔约550米。\n\n# 经济\n自1999年以来，卢森堡一直是欧元区的一部分。卢森堡的经济过去以工业为主，现在卢森堡则是全球最大的金融中心之一。卢森堡是欧元区内最重要的<label style=\"color:blue\">私人银行中心</label>及全球第二大的<label style=\"color:blue\">投资信托中心</label>（仅次于美国）。\n* 1）银行：仅次于美国的世界第二、欧洲最大的基金管理中心；\n* 2）阿塞洛尔—米塔尔集团（Arcelor-Mittal）：卢第一大企业，世界第一大钢铁集团；\n* 3）欧洲卫星公司（SES GLOBAL）：成立于1985年，拥有卫星数量52颗，居欧洲首位、世界第二，其卫星信号全球覆盖率达99.999%。1.22亿欧洲家庭可接收该公司卫星转播的2400套电视、电台节目；\n* 4）卢森堡货运航空公司（Cargolux Airlines International）：成立于1970年，是欧洲最大全货运航空公司，拥有波音747货机26架，员工1856人，航线90多条，覆盖全球50多个国家和地区；\n* 5）卢森堡广播电视公司（RTL）：该公司系卢与德 [5]  国联合组建的欧洲最大的视听媒体集团，拥有40个电视台和33个广播电台。\n\n# 教育\n教育体制中卢、德、法三语循序渐进，并行不悖。小学低年级用卢森堡语授课，高年级开始用德语讲习，中学开始再转化成法语。熟练掌握这三门语言是当地中学毕业的必要条件。\n\n# 人种\n卢森堡的外国侨民特别多，占全国人口的三成以上，最大的移民团体是葡萄牙人和意大利人。他们也同时带来了自己的语言。不过，葡萄牙语和意大利语基本只限于移民团体内部交流，在大范围内运用并不广泛。\n\n# 宗教\n多数信奉天主教，亦有部分信奉其他宗教（包含基督新教和犹太教）。\n","source":"_posts/全球各国人均GDP排行.md","raw":"---\ntitle: 全球各国人均GDP排行\ndate: 2019-05-07 22:06:11\ntags: GDP\ncategories: 世界排名\n---\n在这个世界上，人均GDP的提高，不仅需要天时地利，更重要的是人和。\n来看看全球各国人均GDP排行吧，并介绍下人均GDP最高的国家：卢森堡大公国。\n<!-- more -->\n2018年度全球各国人均GDP排名如下：\n![index_of_per_capita_gdp](全球各国人均GDP排行/index_of_per_capita_gdp_countries.png)\n来介绍下人均收入最高的卢森堡大公国吧：\n![lusenbao](全球各国人均GDP排行/lusenbao.png)\n# 基本信息\n* 语言：<label style=\"color:blue\">卢森堡语、德语、法语</label>\n* 首都：卢森堡市\n* 货币：欧元\n* 国土面积：0.25万平方公里\n\n# 简介\n卢森堡是欧盟成员国，因境内有欧洲法院、欧洲审计院、欧洲投资银行等多个欧盟机构被称为继布鲁塞尔和斯特拉斯堡之后的欧盟“第三首都”。\n卢森堡实行<label style=\"color:blue\">君主立宪制</label>。\n国家元首为卢森堡大公，也是目前欧洲唯一的一个大公国。而行政权则由内阁行使。国会共有60个席位，议员任期为5年。\n\n# 地理位置\n卢森堡位于西欧内陆，地势北高南低，东邻德国，南接法国，北部和西部同比利时接壤。北部为阿登高原，森林茂密，南部为丘陵。气候温和，属温带海洋性气候，风景优美。\n首都卢森堡城有“<label style=\"color:blue\">花都</label>”之称。铁矿丰富。这里也是中世纪的要塞。最高点为布尔格普拉兹峰，海拔约550米。\n\n# 经济\n自1999年以来，卢森堡一直是欧元区的一部分。卢森堡的经济过去以工业为主，现在卢森堡则是全球最大的金融中心之一。卢森堡是欧元区内最重要的<label style=\"color:blue\">私人银行中心</label>及全球第二大的<label style=\"color:blue\">投资信托中心</label>（仅次于美国）。\n* 1）银行：仅次于美国的世界第二、欧洲最大的基金管理中心；\n* 2）阿塞洛尔—米塔尔集团（Arcelor-Mittal）：卢第一大企业，世界第一大钢铁集团；\n* 3）欧洲卫星公司（SES GLOBAL）：成立于1985年，拥有卫星数量52颗，居欧洲首位、世界第二，其卫星信号全球覆盖率达99.999%。1.22亿欧洲家庭可接收该公司卫星转播的2400套电视、电台节目；\n* 4）卢森堡货运航空公司（Cargolux Airlines International）：成立于1970年，是欧洲最大全货运航空公司，拥有波音747货机26架，员工1856人，航线90多条，覆盖全球50多个国家和地区；\n* 5）卢森堡广播电视公司（RTL）：该公司系卢与德 [5]  国联合组建的欧洲最大的视听媒体集团，拥有40个电视台和33个广播电台。\n\n# 教育\n教育体制中卢、德、法三语循序渐进，并行不悖。小学低年级用卢森堡语授课，高年级开始用德语讲习，中学开始再转化成法语。熟练掌握这三门语言是当地中学毕业的必要条件。\n\n# 人种\n卢森堡的外国侨民特别多，占全国人口的三成以上，最大的移民团体是葡萄牙人和意大利人。他们也同时带来了自己的语言。不过，葡萄牙语和意大利语基本只限于移民团体内部交流，在大范围内运用并不广泛。\n\n# 宗教\n多数信奉天主教，亦有部分信奉其他宗教（包含基督新教和犹太教）。\n","slug":"全球各国人均GDP排行","published":1,"updated":"2019-05-07T14:54:41.643Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kr001cfbs6wmvp9kht","content":"<p>在这个世界上，人均GDP的提高，不仅需要天时地利，更重要的是人和。<br>来看看全球各国人均GDP排行吧，并介绍下人均GDP最高的国家：卢森堡大公国。</p>\n<a id=\"more\"></a>\n<p>2018年度全球各国人均GDP排名如下：<br><img src=\"/2019/05/07/全球各国人均GDP排行/index_of_per_capita_gdp_countries.png\" alt=\"index_of_per_capita_gdp\"><br>来介绍下人均收入最高的卢森堡大公国吧：<br><img src=\"/2019/05/07/全球各国人均GDP排行/lusenbao.png\" alt=\"lusenbao\"></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><ul>\n<li>语言：<label style=\"color:blue\">卢森堡语、德语、法语</label></li>\n<li>首都：卢森堡市</li>\n<li>货币：欧元</li>\n<li>国土面积：0.25万平方公里</li>\n</ul>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>卢森堡是欧盟成员国，因境内有欧洲法院、欧洲审计院、欧洲投资银行等多个欧盟机构被称为继布鲁塞尔和斯特拉斯堡之后的欧盟“第三首都”。<br>卢森堡实行<label style=\"color:blue\">君主立宪制</label>。\n国家元首为卢森堡大公，也是目前欧洲唯一的一个大公国。而行政权则由内阁行使。国会共有60个席位，议员任期为5年。</p>\n<h1 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h1><p>卢森堡位于西欧内陆，地势北高南低，东邻德国，南接法国，北部和西部同比利时接壤。北部为阿登高原，森林茂密，南部为丘陵。气候温和，属温带海洋性气候，风景优美。<br>首都卢森堡城有“<label style=\"color:blue\">花都</label>”之称。铁矿丰富。这里也是中世纪的要塞。最高点为布尔格普拉兹峰，海拔约550米。</p>\n<h1 id=\"经济\"><a href=\"#经济\" class=\"headerlink\" title=\"经济\"></a>经济</h1><p>自1999年以来，卢森堡一直是欧元区的一部分。卢森堡的经济过去以工业为主，现在卢森堡则是全球最大的金融中心之一。卢森堡是欧元区内最重要的<label style=\"color:blue\">私人银行中心</label>及全球第二大的<label style=\"color:blue\">投资信托中心</label>（仅次于美国）。</p>\n<ul>\n<li>1）银行：仅次于美国的世界第二、欧洲最大的基金管理中心；</li>\n<li>2）阿塞洛尔—米塔尔集团（Arcelor-Mittal）：卢第一大企业，世界第一大钢铁集团；</li>\n<li>3）欧洲卫星公司（SES GLOBAL）：成立于1985年，拥有卫星数量52颗，居欧洲首位、世界第二，其卫星信号全球覆盖率达99.999%。1.22亿欧洲家庭可接收该公司卫星转播的2400套电视、电台节目；</li>\n<li>4）卢森堡货运航空公司（Cargolux Airlines International）：成立于1970年，是欧洲最大全货运航空公司，拥有波音747货机26架，员工1856人，航线90多条，覆盖全球50多个国家和地区；</li>\n<li>5）卢森堡广播电视公司（RTL）：该公司系卢与德 [5]  国联合组建的欧洲最大的视听媒体集团，拥有40个电视台和33个广播电台。</li>\n</ul>\n<h1 id=\"教育\"><a href=\"#教育\" class=\"headerlink\" title=\"教育\"></a>教育</h1><p>教育体制中卢、德、法三语循序渐进，并行不悖。小学低年级用卢森堡语授课，高年级开始用德语讲习，中学开始再转化成法语。熟练掌握这三门语言是当地中学毕业的必要条件。</p>\n<h1 id=\"人种\"><a href=\"#人种\" class=\"headerlink\" title=\"人种\"></a>人种</h1><p>卢森堡的外国侨民特别多，占全国人口的三成以上，最大的移民团体是葡萄牙人和意大利人。他们也同时带来了自己的语言。不过，葡萄牙语和意大利语基本只限于移民团体内部交流，在大范围内运用并不广泛。</p>\n<h1 id=\"宗教\"><a href=\"#宗教\" class=\"headerlink\" title=\"宗教\"></a>宗教</h1><p>多数信奉天主教，亦有部分信奉其他宗教（包含基督新教和犹太教）。</p>\n","site":{"data":{}},"excerpt":"<p>在这个世界上，人均GDP的提高，不仅需要天时地利，更重要的是人和。<br>来看看全球各国人均GDP排行吧，并介绍下人均GDP最高的国家：卢森堡大公国。</p>","more":"<p>2018年度全球各国人均GDP排名如下：<br><img src=\"/2019/05/07/全球各国人均GDP排行/index_of_per_capita_gdp_countries.png\" alt=\"index_of_per_capita_gdp\"><br>来介绍下人均收入最高的卢森堡大公国吧：<br><img src=\"/2019/05/07/全球各国人均GDP排行/lusenbao.png\" alt=\"lusenbao\"></p>\n<h1 id=\"基本信息\"><a href=\"#基本信息\" class=\"headerlink\" title=\"基本信息\"></a>基本信息</h1><ul>\n<li>语言：<label style=\"color:blue\">卢森堡语、德语、法语</label></li>\n<li>首都：卢森堡市</li>\n<li>货币：欧元</li>\n<li>国土面积：0.25万平方公里</li>\n</ul>\n<h1 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h1><p>卢森堡是欧盟成员国，因境内有欧洲法院、欧洲审计院、欧洲投资银行等多个欧盟机构被称为继布鲁塞尔和斯特拉斯堡之后的欧盟“第三首都”。<br>卢森堡实行<label style=\"color:blue\">君主立宪制</label>。\n国家元首为卢森堡大公，也是目前欧洲唯一的一个大公国。而行政权则由内阁行使。国会共有60个席位，议员任期为5年。</p>\n<h1 id=\"地理位置\"><a href=\"#地理位置\" class=\"headerlink\" title=\"地理位置\"></a>地理位置</h1><p>卢森堡位于西欧内陆，地势北高南低，东邻德国，南接法国，北部和西部同比利时接壤。北部为阿登高原，森林茂密，南部为丘陵。气候温和，属温带海洋性气候，风景优美。<br>首都卢森堡城有“<label style=\"color:blue\">花都</label>”之称。铁矿丰富。这里也是中世纪的要塞。最高点为布尔格普拉兹峰，海拔约550米。</p>\n<h1 id=\"经济\"><a href=\"#经济\" class=\"headerlink\" title=\"经济\"></a>经济</h1><p>自1999年以来，卢森堡一直是欧元区的一部分。卢森堡的经济过去以工业为主，现在卢森堡则是全球最大的金融中心之一。卢森堡是欧元区内最重要的<label style=\"color:blue\">私人银行中心</label>及全球第二大的<label style=\"color:blue\">投资信托中心</label>（仅次于美国）。</p>\n<ul>\n<li>1）银行：仅次于美国的世界第二、欧洲最大的基金管理中心；</li>\n<li>2）阿塞洛尔—米塔尔集团（Arcelor-Mittal）：卢第一大企业，世界第一大钢铁集团；</li>\n<li>3）欧洲卫星公司（SES GLOBAL）：成立于1985年，拥有卫星数量52颗，居欧洲首位、世界第二，其卫星信号全球覆盖率达99.999%。1.22亿欧洲家庭可接收该公司卫星转播的2400套电视、电台节目；</li>\n<li>4）卢森堡货运航空公司（Cargolux Airlines International）：成立于1970年，是欧洲最大全货运航空公司，拥有波音747货机26架，员工1856人，航线90多条，覆盖全球50多个国家和地区；</li>\n<li>5）卢森堡广播电视公司（RTL）：该公司系卢与德 [5]  国联合组建的欧洲最大的视听媒体集团，拥有40个电视台和33个广播电台。</li>\n</ul>\n<h1 id=\"教育\"><a href=\"#教育\" class=\"headerlink\" title=\"教育\"></a>教育</h1><p>教育体制中卢、德、法三语循序渐进，并行不悖。小学低年级用卢森堡语授课，高年级开始用德语讲习，中学开始再转化成法语。熟练掌握这三门语言是当地中学毕业的必要条件。</p>\n<h1 id=\"人种\"><a href=\"#人种\" class=\"headerlink\" title=\"人种\"></a>人种</h1><p>卢森堡的外国侨民特别多，占全国人口的三成以上，最大的移民团体是葡萄牙人和意大利人。他们也同时带来了自己的语言。不过，葡萄牙语和意大利语基本只限于移民团体内部交流，在大范围内运用并不广泛。</p>\n<h1 id=\"宗教\"><a href=\"#宗教\" class=\"headerlink\" title=\"宗教\"></a>宗教</h1><p>多数信奉天主教，亦有部分信奉其他宗教（包含基督新教和犹太教）。</p>"},{"title":"全球奢侈珠宝品牌排名","date":"2019-04-24T15:19:16.000Z","_content":"珠宝首饰一直是人们爱美时的装饰品，一直都是如此，下面来看下全球珠宝首饰排名，了解世界品牌。\n<!-- more -->\n# 10 萧邦\nchoppard\n![choppard](https://s.financesonline.com/uploads/choppard-1024x494.jpg)\n国家：瑞士\n创建日期：1860年\n创始人：路易•尤利斯•萧邦\n简介：除了制作奢华的瑞士手表外，萧邦的房子也以其奢华的珠宝系列而闻名。 Chopard的日常珠宝系列仅采用最优质的材料制成，采用厚度为18K的黄金和最高等级的宝石制成。不仅如此，萧邦还非常注重细节和精确度，为其已经很昂贵的产品线增加了更多价值。\n\n# 9 Mikimoto\n御木本\n![mikimoto](https://financesonline.com/uploads/mikimoto.jpg)\n国家：日本\n创建日期：1893年\n创始人：御木本幸吉\n简介：Mikimoto的创始人Kokichi Mikimoto不仅因其收藏而闻名，而且因为他发明并传播了使用养殖珍珠制作珠宝首饰的事实。 Mikimoto的系列仅选用最好的珍珠，包括南海珍珠，粉红海螺珍珠，大溪地珍珠，白珍珠和其他稀有标本。最重要的是，Mikimoto的珠宝系列仅使用18k金和铂金作为金属部件和顶级钻石。只有最好的丝线用于有珍珠串的首饰。\n\n# 8 Bvlgari\n宝格丽\n![bvlgari](https://financesonline.com/uploads/bvlgari1-1024x512.jpg)\n国家：意大利\n创建日期：1884年\n创始人：索帝里欧·宝格丽\n简介：宝格丽毫无疑问是一个着名的奢侈品牌，从时装到手表再到珠宝。而对于后者而言，这个以罗马为基础的品牌将优雅和奢侈品完美结合，并且不失其对传统的偏好。即使在今天，Bvlagri的系列仍然标榜着该房子的标志性特征，包括用于中心件的大型宝石，大胆的形状以及凸圆形宝石的使用（这一传统可追溯到1960年代的意大利魅力）。除了最好的宝石外，宝格丽仅使用18K黄金作为其收藏品。\n\n# 7 伯爵\n伯爵\n![piaget](https://financesonline.com/uploads/piaget2.jpg)\n国家：瑞士\n创建日期：1874\n创始人：乔治．伯爵\n简介：Piaget是普通人的另一个熟悉的名字，最初是作为汝拉瑞士部分的制表公司开始的。随着业务的增长，该公司很快就进入了珠宝行业，并在其中脱颖而出，为那些能够负担公司要求的价格的人们制作奢侈品。今天，Piaget以旧世界概念和现代设计相结合为荣，现在设计时尚线条和大胆的角度。但其最着名的外观是玫瑰，它已成为伯爵的标志性设计。\n\n# 6 Graff\n格拉夫\n![graff](https://financesonline.com/uploads/graff1.jpg)\n国家：英国\n创建日期：1960年\n创始人：劳伦斯·格拉夫\n简介：格拉夫是顶级品牌，在富人和精英中非常受欢迎。使Graff的系列与众不同的不仅仅是用于制作昂贵单品的宝石和金属的工艺或质量。相反，它是Graff在其珠宝系列中使用的宝石的大小。他们是巨大的，格拉夫的创始人劳伦斯格拉夫喜欢这样。\n\n# 5 Tiffany＆Co。\n蒂芙尼\n![tiffany](https://financesonline.com/uploads/tiffany.jpg)\n国家：美国\n创建日期：1837年\n创始人：查理斯·路易斯·蒂芙尼和泰迪·杨\n简介：甚至大众都知道蒂芙尼在珠宝方面是一个巨大的奢侈名称，主要是因为他们的产品线包括日常穿着的件，无论什么场合。他们广泛的收藏不仅限于女性，蒂芙尼也适合男性和儿童。自1837年开始运营以来，Tiffany的创作产生了经典设计，由专业工匠制作。那些被归类为超豪华的人往往需要数年才能完成。\n\n# 4 Buccellati\nbucellati\n![bucellati](https://financesonline.com/uploads/bucellati-1024x641.jpg)\n国家：意大利\n创建日期：1919年\n创始人：Mario Buccellati\n简介：Buccellati用最好的意大利金制作优雅的珠宝，彰显罗马的传统。这家总部位于罗马的珠宝公司制作了罗马风格的设计，并将其融入其收藏中。罗马风格的项链和手镯袖口只是他们最畅销的一些。 Buccellati也为能够提供某些设计而感到自豪，这些设计使其珠宝具有非常吸引人的外观，如使用高品质的宝石和钻石刷金属和哑光，以及厚重的结壳。\n\n# 3 Van Cleef＆Arpels\n梵克雅宝\n![cleef](https://financesonline.com/uploads/cleef.jpg)\n国家：法国\n创建日期：1896年\n创始人：Alfred Van Cleef和Salomon Arpels\n简介：当Estelle Arpels和Alfred Van Cleef决定将他们的合作作为永久性安排时，Van Cleef＆Arpels成立。虽然它的大部分系列都展现了旧世界物品中的优雅风格，但它还有其他系列产品，散发着自己的风格和阶级。这座房子展示了一个庞大的系列，融合了传统和叙事风格以及技术专长。\n\n# 2卡地亚\n卡地亚\n![cartier](https://financesonline.com/uploads/cartier5.jpg)\n国家：法国\n创建日期：1847年\n创始人：路易-弗朗索瓦·卡地亚\n简介：列表中的另一个家喻户晓的名字，卡地亚是一个已存在多年的名字。 卡地亚成立于1860年，一直是皇室成员的珠宝商，他们希望拥有个性化的系列。 黑豹是卡地亚最知名的设计，经过不断的修改和重新概念化，以吸引客户不断变化的品味。 卡地亚以其装饰艺术历史而闻名，但也创造了几条线条来庆祝旧世界的优雅。\n\n# 1 Harry Winston\n温斯顿\n![winston](https://financesonline.com/uploads/winston.jpg)\n国家：美国\n创建日期：1932\n创始人：哈里温斯顿\n简介：一个在珠宝行业引起共鸣的名字，Harry Winston于1932年开始创业，并一直处于领先地位。 Harry Winston的系列仅使用最好的宝石和最好的金属，仅由珠宝工艺大师设计。 Harry Winston家居的产品不仅优雅而奢华，而且耐用，并且很容易通过时间的考验。\n","source":"_posts/全球奢侈珠宝品牌排名.md","raw":"---\ntitle: 全球奢侈珠宝品牌排名\ndate: 2019-04-24 23:19:16\ntags: 珠宝\ncategories: 世界排名\n---\n珠宝首饰一直是人们爱美时的装饰品，一直都是如此，下面来看下全球珠宝首饰排名，了解世界品牌。\n<!-- more -->\n# 10 萧邦\nchoppard\n![choppard](https://s.financesonline.com/uploads/choppard-1024x494.jpg)\n国家：瑞士\n创建日期：1860年\n创始人：路易•尤利斯•萧邦\n简介：除了制作奢华的瑞士手表外，萧邦的房子也以其奢华的珠宝系列而闻名。 Chopard的日常珠宝系列仅采用最优质的材料制成，采用厚度为18K的黄金和最高等级的宝石制成。不仅如此，萧邦还非常注重细节和精确度，为其已经很昂贵的产品线增加了更多价值。\n\n# 9 Mikimoto\n御木本\n![mikimoto](https://financesonline.com/uploads/mikimoto.jpg)\n国家：日本\n创建日期：1893年\n创始人：御木本幸吉\n简介：Mikimoto的创始人Kokichi Mikimoto不仅因其收藏而闻名，而且因为他发明并传播了使用养殖珍珠制作珠宝首饰的事实。 Mikimoto的系列仅选用最好的珍珠，包括南海珍珠，粉红海螺珍珠，大溪地珍珠，白珍珠和其他稀有标本。最重要的是，Mikimoto的珠宝系列仅使用18k金和铂金作为金属部件和顶级钻石。只有最好的丝线用于有珍珠串的首饰。\n\n# 8 Bvlgari\n宝格丽\n![bvlgari](https://financesonline.com/uploads/bvlgari1-1024x512.jpg)\n国家：意大利\n创建日期：1884年\n创始人：索帝里欧·宝格丽\n简介：宝格丽毫无疑问是一个着名的奢侈品牌，从时装到手表再到珠宝。而对于后者而言，这个以罗马为基础的品牌将优雅和奢侈品完美结合，并且不失其对传统的偏好。即使在今天，Bvlagri的系列仍然标榜着该房子的标志性特征，包括用于中心件的大型宝石，大胆的形状以及凸圆形宝石的使用（这一传统可追溯到1960年代的意大利魅力）。除了最好的宝石外，宝格丽仅使用18K黄金作为其收藏品。\n\n# 7 伯爵\n伯爵\n![piaget](https://financesonline.com/uploads/piaget2.jpg)\n国家：瑞士\n创建日期：1874\n创始人：乔治．伯爵\n简介：Piaget是普通人的另一个熟悉的名字，最初是作为汝拉瑞士部分的制表公司开始的。随着业务的增长，该公司很快就进入了珠宝行业，并在其中脱颖而出，为那些能够负担公司要求的价格的人们制作奢侈品。今天，Piaget以旧世界概念和现代设计相结合为荣，现在设计时尚线条和大胆的角度。但其最着名的外观是玫瑰，它已成为伯爵的标志性设计。\n\n# 6 Graff\n格拉夫\n![graff](https://financesonline.com/uploads/graff1.jpg)\n国家：英国\n创建日期：1960年\n创始人：劳伦斯·格拉夫\n简介：格拉夫是顶级品牌，在富人和精英中非常受欢迎。使Graff的系列与众不同的不仅仅是用于制作昂贵单品的宝石和金属的工艺或质量。相反，它是Graff在其珠宝系列中使用的宝石的大小。他们是巨大的，格拉夫的创始人劳伦斯格拉夫喜欢这样。\n\n# 5 Tiffany＆Co。\n蒂芙尼\n![tiffany](https://financesonline.com/uploads/tiffany.jpg)\n国家：美国\n创建日期：1837年\n创始人：查理斯·路易斯·蒂芙尼和泰迪·杨\n简介：甚至大众都知道蒂芙尼在珠宝方面是一个巨大的奢侈名称，主要是因为他们的产品线包括日常穿着的件，无论什么场合。他们广泛的收藏不仅限于女性，蒂芙尼也适合男性和儿童。自1837年开始运营以来，Tiffany的创作产生了经典设计，由专业工匠制作。那些被归类为超豪华的人往往需要数年才能完成。\n\n# 4 Buccellati\nbucellati\n![bucellati](https://financesonline.com/uploads/bucellati-1024x641.jpg)\n国家：意大利\n创建日期：1919年\n创始人：Mario Buccellati\n简介：Buccellati用最好的意大利金制作优雅的珠宝，彰显罗马的传统。这家总部位于罗马的珠宝公司制作了罗马风格的设计，并将其融入其收藏中。罗马风格的项链和手镯袖口只是他们最畅销的一些。 Buccellati也为能够提供某些设计而感到自豪，这些设计使其珠宝具有非常吸引人的外观，如使用高品质的宝石和钻石刷金属和哑光，以及厚重的结壳。\n\n# 3 Van Cleef＆Arpels\n梵克雅宝\n![cleef](https://financesonline.com/uploads/cleef.jpg)\n国家：法国\n创建日期：1896年\n创始人：Alfred Van Cleef和Salomon Arpels\n简介：当Estelle Arpels和Alfred Van Cleef决定将他们的合作作为永久性安排时，Van Cleef＆Arpels成立。虽然它的大部分系列都展现了旧世界物品中的优雅风格，但它还有其他系列产品，散发着自己的风格和阶级。这座房子展示了一个庞大的系列，融合了传统和叙事风格以及技术专长。\n\n# 2卡地亚\n卡地亚\n![cartier](https://financesonline.com/uploads/cartier5.jpg)\n国家：法国\n创建日期：1847年\n创始人：路易-弗朗索瓦·卡地亚\n简介：列表中的另一个家喻户晓的名字，卡地亚是一个已存在多年的名字。 卡地亚成立于1860年，一直是皇室成员的珠宝商，他们希望拥有个性化的系列。 黑豹是卡地亚最知名的设计，经过不断的修改和重新概念化，以吸引客户不断变化的品味。 卡地亚以其装饰艺术历史而闻名，但也创造了几条线条来庆祝旧世界的优雅。\n\n# 1 Harry Winston\n温斯顿\n![winston](https://financesonline.com/uploads/winston.jpg)\n国家：美国\n创建日期：1932\n创始人：哈里温斯顿\n简介：一个在珠宝行业引起共鸣的名字，Harry Winston于1932年开始创业，并一直处于领先地位。 Harry Winston的系列仅使用最好的宝石和最好的金属，仅由珠宝工艺大师设计。 Harry Winston家居的产品不仅优雅而奢华，而且耐用，并且很容易通过时间的考验。\n","slug":"全球奢侈珠宝品牌排名","published":1,"updated":"2019-04-24T15:26:47.530Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ks001dfbs64r8r2p5v","content":"<p>珠宝首饰一直是人们爱美时的装饰品，一直都是如此，下面来看下全球珠宝首饰排名，了解世界品牌。</p>\n<a id=\"more\"></a>\n<h1 id=\"10-萧邦\"><a href=\"#10-萧邦\" class=\"headerlink\" title=\"10 萧邦\"></a>10 萧邦</h1><p>choppard<br><img src=\"https://s.financesonline.com/uploads/choppard-1024x494.jpg\" alt=\"choppard\"><br>国家：瑞士<br>创建日期：1860年<br>创始人：路易•尤利斯•萧邦<br>简介：除了制作奢华的瑞士手表外，萧邦的房子也以其奢华的珠宝系列而闻名。 Chopard的日常珠宝系列仅采用最优质的材料制成，采用厚度为18K的黄金和最高等级的宝石制成。不仅如此，萧邦还非常注重细节和精确度，为其已经很昂贵的产品线增加了更多价值。</p>\n<h1 id=\"9-Mikimoto\"><a href=\"#9-Mikimoto\" class=\"headerlink\" title=\"9 Mikimoto\"></a>9 Mikimoto</h1><p>御木本<br><img src=\"https://financesonline.com/uploads/mikimoto.jpg\" alt=\"mikimoto\"><br>国家：日本<br>创建日期：1893年<br>创始人：御木本幸吉<br>简介：Mikimoto的创始人Kokichi Mikimoto不仅因其收藏而闻名，而且因为他发明并传播了使用养殖珍珠制作珠宝首饰的事实。 Mikimoto的系列仅选用最好的珍珠，包括南海珍珠，粉红海螺珍珠，大溪地珍珠，白珍珠和其他稀有标本。最重要的是，Mikimoto的珠宝系列仅使用18k金和铂金作为金属部件和顶级钻石。只有最好的丝线用于有珍珠串的首饰。</p>\n<h1 id=\"8-Bvlgari\"><a href=\"#8-Bvlgari\" class=\"headerlink\" title=\"8 Bvlgari\"></a>8 Bvlgari</h1><p>宝格丽<br><img src=\"https://financesonline.com/uploads/bvlgari1-1024x512.jpg\" alt=\"bvlgari\"><br>国家：意大利<br>创建日期：1884年<br>创始人：索帝里欧·宝格丽<br>简介：宝格丽毫无疑问是一个着名的奢侈品牌，从时装到手表再到珠宝。而对于后者而言，这个以罗马为基础的品牌将优雅和奢侈品完美结合，并且不失其对传统的偏好。即使在今天，Bvlagri的系列仍然标榜着该房子的标志性特征，包括用于中心件的大型宝石，大胆的形状以及凸圆形宝石的使用（这一传统可追溯到1960年代的意大利魅力）。除了最好的宝石外，宝格丽仅使用18K黄金作为其收藏品。</p>\n<h1 id=\"7-伯爵\"><a href=\"#7-伯爵\" class=\"headerlink\" title=\"7 伯爵\"></a>7 伯爵</h1><p>伯爵<br><img src=\"https://financesonline.com/uploads/piaget2.jpg\" alt=\"piaget\"><br>国家：瑞士<br>创建日期：1874<br>创始人：乔治．伯爵<br>简介：Piaget是普通人的另一个熟悉的名字，最初是作为汝拉瑞士部分的制表公司开始的。随着业务的增长，该公司很快就进入了珠宝行业，并在其中脱颖而出，为那些能够负担公司要求的价格的人们制作奢侈品。今天，Piaget以旧世界概念和现代设计相结合为荣，现在设计时尚线条和大胆的角度。但其最着名的外观是玫瑰，它已成为伯爵的标志性设计。</p>\n<h1 id=\"6-Graff\"><a href=\"#6-Graff\" class=\"headerlink\" title=\"6 Graff\"></a>6 Graff</h1><p>格拉夫<br><img src=\"https://financesonline.com/uploads/graff1.jpg\" alt=\"graff\"><br>国家：英国<br>创建日期：1960年<br>创始人：劳伦斯·格拉夫<br>简介：格拉夫是顶级品牌，在富人和精英中非常受欢迎。使Graff的系列与众不同的不仅仅是用于制作昂贵单品的宝石和金属的工艺或质量。相反，它是Graff在其珠宝系列中使用的宝石的大小。他们是巨大的，格拉夫的创始人劳伦斯格拉夫喜欢这样。</p>\n<h1 id=\"5-Tiffany＆Co。\"><a href=\"#5-Tiffany＆Co。\" class=\"headerlink\" title=\"5 Tiffany＆Co。\"></a>5 Tiffany＆Co。</h1><p>蒂芙尼<br><img src=\"https://financesonline.com/uploads/tiffany.jpg\" alt=\"tiffany\"><br>国家：美国<br>创建日期：1837年<br>创始人：查理斯·路易斯·蒂芙尼和泰迪·杨<br>简介：甚至大众都知道蒂芙尼在珠宝方面是一个巨大的奢侈名称，主要是因为他们的产品线包括日常穿着的件，无论什么场合。他们广泛的收藏不仅限于女性，蒂芙尼也适合男性和儿童。自1837年开始运营以来，Tiffany的创作产生了经典设计，由专业工匠制作。那些被归类为超豪华的人往往需要数年才能完成。</p>\n<h1 id=\"4-Buccellati\"><a href=\"#4-Buccellati\" class=\"headerlink\" title=\"4 Buccellati\"></a>4 Buccellati</h1><p>bucellati<br><img src=\"https://financesonline.com/uploads/bucellati-1024x641.jpg\" alt=\"bucellati\"><br>国家：意大利<br>创建日期：1919年<br>创始人：Mario Buccellati<br>简介：Buccellati用最好的意大利金制作优雅的珠宝，彰显罗马的传统。这家总部位于罗马的珠宝公司制作了罗马风格的设计，并将其融入其收藏中。罗马风格的项链和手镯袖口只是他们最畅销的一些。 Buccellati也为能够提供某些设计而感到自豪，这些设计使其珠宝具有非常吸引人的外观，如使用高品质的宝石和钻石刷金属和哑光，以及厚重的结壳。</p>\n<h1 id=\"3-Van-Cleef＆Arpels\"><a href=\"#3-Van-Cleef＆Arpels\" class=\"headerlink\" title=\"3 Van Cleef＆Arpels\"></a>3 Van Cleef＆Arpels</h1><p>梵克雅宝<br><img src=\"https://financesonline.com/uploads/cleef.jpg\" alt=\"cleef\"><br>国家：法国<br>创建日期：1896年<br>创始人：Alfred Van Cleef和Salomon Arpels<br>简介：当Estelle Arpels和Alfred Van Cleef决定将他们的合作作为永久性安排时，Van Cleef＆Arpels成立。虽然它的大部分系列都展现了旧世界物品中的优雅风格，但它还有其他系列产品，散发着自己的风格和阶级。这座房子展示了一个庞大的系列，融合了传统和叙事风格以及技术专长。</p>\n<h1 id=\"2卡地亚\"><a href=\"#2卡地亚\" class=\"headerlink\" title=\"2卡地亚\"></a>2卡地亚</h1><p>卡地亚<br><img src=\"https://financesonline.com/uploads/cartier5.jpg\" alt=\"cartier\"><br>国家：法国<br>创建日期：1847年<br>创始人：路易-弗朗索瓦·卡地亚<br>简介：列表中的另一个家喻户晓的名字，卡地亚是一个已存在多年的名字。 卡地亚成立于1860年，一直是皇室成员的珠宝商，他们希望拥有个性化的系列。 黑豹是卡地亚最知名的设计，经过不断的修改和重新概念化，以吸引客户不断变化的品味。 卡地亚以其装饰艺术历史而闻名，但也创造了几条线条来庆祝旧世界的优雅。</p>\n<h1 id=\"1-Harry-Winston\"><a href=\"#1-Harry-Winston\" class=\"headerlink\" title=\"1 Harry Winston\"></a>1 Harry Winston</h1><p>温斯顿<br><img src=\"https://financesonline.com/uploads/winston.jpg\" alt=\"winston\"><br>国家：美国<br>创建日期：1932<br>创始人：哈里温斯顿<br>简介：一个在珠宝行业引起共鸣的名字，Harry Winston于1932年开始创业，并一直处于领先地位。 Harry Winston的系列仅使用最好的宝石和最好的金属，仅由珠宝工艺大师设计。 Harry Winston家居的产品不仅优雅而奢华，而且耐用，并且很容易通过时间的考验。</p>\n","site":{"data":{}},"excerpt":"<p>珠宝首饰一直是人们爱美时的装饰品，一直都是如此，下面来看下全球珠宝首饰排名，了解世界品牌。</p>","more":"<h1 id=\"10-萧邦\"><a href=\"#10-萧邦\" class=\"headerlink\" title=\"10 萧邦\"></a>10 萧邦</h1><p>choppard<br><img src=\"https://s.financesonline.com/uploads/choppard-1024x494.jpg\" alt=\"choppard\"><br>国家：瑞士<br>创建日期：1860年<br>创始人：路易•尤利斯•萧邦<br>简介：除了制作奢华的瑞士手表外，萧邦的房子也以其奢华的珠宝系列而闻名。 Chopard的日常珠宝系列仅采用最优质的材料制成，采用厚度为18K的黄金和最高等级的宝石制成。不仅如此，萧邦还非常注重细节和精确度，为其已经很昂贵的产品线增加了更多价值。</p>\n<h1 id=\"9-Mikimoto\"><a href=\"#9-Mikimoto\" class=\"headerlink\" title=\"9 Mikimoto\"></a>9 Mikimoto</h1><p>御木本<br><img src=\"https://financesonline.com/uploads/mikimoto.jpg\" alt=\"mikimoto\"><br>国家：日本<br>创建日期：1893年<br>创始人：御木本幸吉<br>简介：Mikimoto的创始人Kokichi Mikimoto不仅因其收藏而闻名，而且因为他发明并传播了使用养殖珍珠制作珠宝首饰的事实。 Mikimoto的系列仅选用最好的珍珠，包括南海珍珠，粉红海螺珍珠，大溪地珍珠，白珍珠和其他稀有标本。最重要的是，Mikimoto的珠宝系列仅使用18k金和铂金作为金属部件和顶级钻石。只有最好的丝线用于有珍珠串的首饰。</p>\n<h1 id=\"8-Bvlgari\"><a href=\"#8-Bvlgari\" class=\"headerlink\" title=\"8 Bvlgari\"></a>8 Bvlgari</h1><p>宝格丽<br><img src=\"https://financesonline.com/uploads/bvlgari1-1024x512.jpg\" alt=\"bvlgari\"><br>国家：意大利<br>创建日期：1884年<br>创始人：索帝里欧·宝格丽<br>简介：宝格丽毫无疑问是一个着名的奢侈品牌，从时装到手表再到珠宝。而对于后者而言，这个以罗马为基础的品牌将优雅和奢侈品完美结合，并且不失其对传统的偏好。即使在今天，Bvlagri的系列仍然标榜着该房子的标志性特征，包括用于中心件的大型宝石，大胆的形状以及凸圆形宝石的使用（这一传统可追溯到1960年代的意大利魅力）。除了最好的宝石外，宝格丽仅使用18K黄金作为其收藏品。</p>\n<h1 id=\"7-伯爵\"><a href=\"#7-伯爵\" class=\"headerlink\" title=\"7 伯爵\"></a>7 伯爵</h1><p>伯爵<br><img src=\"https://financesonline.com/uploads/piaget2.jpg\" alt=\"piaget\"><br>国家：瑞士<br>创建日期：1874<br>创始人：乔治．伯爵<br>简介：Piaget是普通人的另一个熟悉的名字，最初是作为汝拉瑞士部分的制表公司开始的。随着业务的增长，该公司很快就进入了珠宝行业，并在其中脱颖而出，为那些能够负担公司要求的价格的人们制作奢侈品。今天，Piaget以旧世界概念和现代设计相结合为荣，现在设计时尚线条和大胆的角度。但其最着名的外观是玫瑰，它已成为伯爵的标志性设计。</p>\n<h1 id=\"6-Graff\"><a href=\"#6-Graff\" class=\"headerlink\" title=\"6 Graff\"></a>6 Graff</h1><p>格拉夫<br><img src=\"https://financesonline.com/uploads/graff1.jpg\" alt=\"graff\"><br>国家：英国<br>创建日期：1960年<br>创始人：劳伦斯·格拉夫<br>简介：格拉夫是顶级品牌，在富人和精英中非常受欢迎。使Graff的系列与众不同的不仅仅是用于制作昂贵单品的宝石和金属的工艺或质量。相反，它是Graff在其珠宝系列中使用的宝石的大小。他们是巨大的，格拉夫的创始人劳伦斯格拉夫喜欢这样。</p>\n<h1 id=\"5-Tiffany＆Co。\"><a href=\"#5-Tiffany＆Co。\" class=\"headerlink\" title=\"5 Tiffany＆Co。\"></a>5 Tiffany＆Co。</h1><p>蒂芙尼<br><img src=\"https://financesonline.com/uploads/tiffany.jpg\" alt=\"tiffany\"><br>国家：美国<br>创建日期：1837年<br>创始人：查理斯·路易斯·蒂芙尼和泰迪·杨<br>简介：甚至大众都知道蒂芙尼在珠宝方面是一个巨大的奢侈名称，主要是因为他们的产品线包括日常穿着的件，无论什么场合。他们广泛的收藏不仅限于女性，蒂芙尼也适合男性和儿童。自1837年开始运营以来，Tiffany的创作产生了经典设计，由专业工匠制作。那些被归类为超豪华的人往往需要数年才能完成。</p>\n<h1 id=\"4-Buccellati\"><a href=\"#4-Buccellati\" class=\"headerlink\" title=\"4 Buccellati\"></a>4 Buccellati</h1><p>bucellati<br><img src=\"https://financesonline.com/uploads/bucellati-1024x641.jpg\" alt=\"bucellati\"><br>国家：意大利<br>创建日期：1919年<br>创始人：Mario Buccellati<br>简介：Buccellati用最好的意大利金制作优雅的珠宝，彰显罗马的传统。这家总部位于罗马的珠宝公司制作了罗马风格的设计，并将其融入其收藏中。罗马风格的项链和手镯袖口只是他们最畅销的一些。 Buccellati也为能够提供某些设计而感到自豪，这些设计使其珠宝具有非常吸引人的外观，如使用高品质的宝石和钻石刷金属和哑光，以及厚重的结壳。</p>\n<h1 id=\"3-Van-Cleef＆Arpels\"><a href=\"#3-Van-Cleef＆Arpels\" class=\"headerlink\" title=\"3 Van Cleef＆Arpels\"></a>3 Van Cleef＆Arpels</h1><p>梵克雅宝<br><img src=\"https://financesonline.com/uploads/cleef.jpg\" alt=\"cleef\"><br>国家：法国<br>创建日期：1896年<br>创始人：Alfred Van Cleef和Salomon Arpels<br>简介：当Estelle Arpels和Alfred Van Cleef决定将他们的合作作为永久性安排时，Van Cleef＆Arpels成立。虽然它的大部分系列都展现了旧世界物品中的优雅风格，但它还有其他系列产品，散发着自己的风格和阶级。这座房子展示了一个庞大的系列，融合了传统和叙事风格以及技术专长。</p>\n<h1 id=\"2卡地亚\"><a href=\"#2卡地亚\" class=\"headerlink\" title=\"2卡地亚\"></a>2卡地亚</h1><p>卡地亚<br><img src=\"https://financesonline.com/uploads/cartier5.jpg\" alt=\"cartier\"><br>国家：法国<br>创建日期：1847年<br>创始人：路易-弗朗索瓦·卡地亚<br>简介：列表中的另一个家喻户晓的名字，卡地亚是一个已存在多年的名字。 卡地亚成立于1860年，一直是皇室成员的珠宝商，他们希望拥有个性化的系列。 黑豹是卡地亚最知名的设计，经过不断的修改和重新概念化，以吸引客户不断变化的品味。 卡地亚以其装饰艺术历史而闻名，但也创造了几条线条来庆祝旧世界的优雅。</p>\n<h1 id=\"1-Harry-Winston\"><a href=\"#1-Harry-Winston\" class=\"headerlink\" title=\"1 Harry Winston\"></a>1 Harry Winston</h1><p>温斯顿<br><img src=\"https://financesonline.com/uploads/winston.jpg\" alt=\"winston\"><br>国家：美国<br>创建日期：1932<br>创始人：哈里温斯顿<br>简介：一个在珠宝行业引起共鸣的名字，Harry Winston于1932年开始创业，并一直处于领先地位。 Harry Winston的系列仅使用最好的宝石和最好的金属，仅由珠宝工艺大师设计。 Harry Winston家居的产品不仅优雅而奢华，而且耐用，并且很容易通过时间的考验。</p>"},{"title":"全球最受欢迎的无广告网站-维基百科","date":"2019-05-04T08:48:49.000Z","_content":"\n全球最受欢迎的网站排行，前三当属Google、YouTube、Facebook，没有广告、最受欢迎的网站呢，当属wikipedia莫属。没有广告的维基百科，收入从哪里来呢，谁在运营？\n<!-- more -->\n\n下面来看看该网站的基本信息：\n![维基百科-logo](全球最受欢迎的无广告网站-维基百科/Www.wikipedia.org_screenshot_2018.png)\n\n**创建日期**：2001-01-15\n**创始人**：吉米·威尔士与拉里·桑格\n**持有者**：维基媒体基金会（非营利组织）\n**总部**：美国\n**网站类型**：自由内容、自由编辑的网络百科全书\n**名称来源**：Wikipedia是混成词，分别取自于网站核心技术“Wiki”以及英文中百科全书之意的“encyclopedia”\n**语言**：301种\n**官方网站**：[维基百科](https://zh.wikipedia.org)\n\n哈哈，你能访问吗？\n\n根据知名的Alexa Internet其网络流量统计数字指出全世界总共有近3.65亿名民众使用维基百科，且维基百科也是全球浏览人数排名第五高的网站，同时也是全世界最大的无商业广告的网站。\n\n目前网站运营资金来源于捐款，在wikipedia18岁生日的时候，Google捐款310万美元，10年接收捐款总额超过7500万美元。\n![维基百科捐款](全球最受欢迎的无广告网站-维基百科/Wiki-donate.jpg)","source":"_posts/全球最受欢迎的无广告网站-维基百科.md","raw":"---\ntitle: 全球最受欢迎的无广告网站-维基百科\ndate: 2019-05-04 16:48:49\ntags: 维基百科\ncategories: 世界排名\n---\n\n全球最受欢迎的网站排行，前三当属Google、YouTube、Facebook，没有广告、最受欢迎的网站呢，当属wikipedia莫属。没有广告的维基百科，收入从哪里来呢，谁在运营？\n<!-- more -->\n\n下面来看看该网站的基本信息：\n![维基百科-logo](全球最受欢迎的无广告网站-维基百科/Www.wikipedia.org_screenshot_2018.png)\n\n**创建日期**：2001-01-15\n**创始人**：吉米·威尔士与拉里·桑格\n**持有者**：维基媒体基金会（非营利组织）\n**总部**：美国\n**网站类型**：自由内容、自由编辑的网络百科全书\n**名称来源**：Wikipedia是混成词，分别取自于网站核心技术“Wiki”以及英文中百科全书之意的“encyclopedia”\n**语言**：301种\n**官方网站**：[维基百科](https://zh.wikipedia.org)\n\n哈哈，你能访问吗？\n\n根据知名的Alexa Internet其网络流量统计数字指出全世界总共有近3.65亿名民众使用维基百科，且维基百科也是全球浏览人数排名第五高的网站，同时也是全世界最大的无商业广告的网站。\n\n目前网站运营资金来源于捐款，在wikipedia18岁生日的时候，Google捐款310万美元，10年接收捐款总额超过7500万美元。\n![维基百科捐款](全球最受欢迎的无广告网站-维基百科/Wiki-donate.jpg)","slug":"全球最受欢迎的无广告网站-维基百科","published":1,"updated":"2019-05-04T09:58:41.038Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kt001efbs6wd6y4wap","content":"<p>全球最受欢迎的网站排行，前三当属Google、YouTube、Facebook，没有广告、最受欢迎的网站呢，当属wikipedia莫属。没有广告的维基百科，收入从哪里来呢，谁在运营？</p>\n<a id=\"more\"></a>\n\n<p>下面来看看该网站的基本信息：<br><img src=\"/2019/05/04/全球最受欢迎的无广告网站-维基百科/Www.wikipedia.org_screenshot_2018.png\" alt=\"维基百科-logo\"></p>\n<p><strong>创建日期</strong>：2001-01-15<br><strong>创始人</strong>：吉米·威尔士与拉里·桑格<br><strong>持有者</strong>：维基媒体基金会（非营利组织）<br><strong>总部</strong>：美国<br><strong>网站类型</strong>：自由内容、自由编辑的网络百科全书<br><strong>名称来源</strong>：Wikipedia是混成词，分别取自于网站核心技术“Wiki”以及英文中百科全书之意的“encyclopedia”<br><strong>语言</strong>：301种<br><strong>官方网站</strong>：<a href=\"https://zh.wikipedia.org\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p>哈哈，你能访问吗？</p>\n<p>根据知名的Alexa Internet其网络流量统计数字指出全世界总共有近3.65亿名民众使用维基百科，且维基百科也是全球浏览人数排名第五高的网站，同时也是全世界最大的无商业广告的网站。</p>\n<p>目前网站运营资金来源于捐款，在wikipedia18岁生日的时候，Google捐款310万美元，10年接收捐款总额超过7500万美元。<br><img src=\"/2019/05/04/全球最受欢迎的无广告网站-维基百科/Wiki-donate.jpg\" alt=\"维基百科捐款\"></p>\n","site":{"data":{}},"excerpt":"<p>全球最受欢迎的网站排行，前三当属Google、YouTube、Facebook，没有广告、最受欢迎的网站呢，当属wikipedia莫属。没有广告的维基百科，收入从哪里来呢，谁在运营？</p>","more":"<p>下面来看看该网站的基本信息：<br><img src=\"/2019/05/04/全球最受欢迎的无广告网站-维基百科/Www.wikipedia.org_screenshot_2018.png\" alt=\"维基百科-logo\"></p>\n<p><strong>创建日期</strong>：2001-01-15<br><strong>创始人</strong>：吉米·威尔士与拉里·桑格<br><strong>持有者</strong>：维基媒体基金会（非营利组织）<br><strong>总部</strong>：美国<br><strong>网站类型</strong>：自由内容、自由编辑的网络百科全书<br><strong>名称来源</strong>：Wikipedia是混成词，分别取自于网站核心技术“Wiki”以及英文中百科全书之意的“encyclopedia”<br><strong>语言</strong>：301种<br><strong>官方网站</strong>：<a href=\"https://zh.wikipedia.org\" target=\"_blank\" rel=\"noopener\">维基百科</a></p>\n<p>哈哈，你能访问吗？</p>\n<p>根据知名的Alexa Internet其网络流量统计数字指出全世界总共有近3.65亿名民众使用维基百科，且维基百科也是全球浏览人数排名第五高的网站，同时也是全世界最大的无商业广告的网站。</p>\n<p>目前网站运营资金来源于捐款，在wikipedia18岁生日的时候，Google捐款310万美元，10年接收捐款总额超过7500万美元。<br><img src=\"/2019/05/04/全球最受欢迎的无广告网站-维基百科/Wiki-donate.jpg\" alt=\"维基百科捐款\"></p>"},{"title":"北京租房小中介骗局","date":"2018-07-29T01:44:01.000Z","_content":"给大家说说我亲身经历的租房骗局，小中介如何骗你的钱。\n我会不定期在网站发布个人生活中遇到的各种骗局，发布到【个人黑名单】分类中，请大家持续关注，避免遇到同样的坑，打击坑蒙拐骗，让那些只顾赚钱，不顾服务的商家，淘汰掉。\n<!-- more -->\n# 中介公司\n美丽家园房地产有限公司、昊园恒业房地产有限公司\n# 产品\n大熊公寓\n# 总部地址\n北京市朝阳区财满街8号楼2单元703室\n# 个人情况\n首先说说我的情况，码农一枚跟朋友一起租房，3个人，租2间房，一间2人，一间1人，无奈北京房租太贵，链家、我爱我家中介费太高，只好找小中介，不受中介费。\n# 租房\n## 第一个坑：预付款时，一定看好是“订金”还是“定金”\n找到一个小中介公司，在一个小区里面租下15平米左右的主卧2000元，收了一个月押金。当时保证押金可以退回，家具家电均可以上门维修。于是就签合同，另一个朋友，在签合同的时候，了解到，如果中途退租的话，需要找到接盘侠，才能退租，把押金退给你，他不干，于是签了一半的合同终止了，但是中介不干啊，他说合同是要收钱的，200块，你说气不气人，还有，跟他们争论的时候，还问他们索要订金200块，但是那个条子上写的是“定金”，意思就是你已经预付款一些金钱把这个房子定下来了，于是发现情况不对，就对他们客气地说话，说我们之前没弄清楚情况，麻烦谅解一下，最后扣了100块，定金退了。所以大家以后预付款的时候，一定看好是“订金”还是“定金”。\n## 第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\n租金结算方式为58月付，58月付是一个借贷平台，通过借贷的方式，一次性借贷1年的房租也就是20000元，58月付一下子就把钱打给了中介公司，然后58每个月从你的银行卡中扣除2000元，这样中介公司实际就获得了20000元的借款，可以拿去投资或者业务扩张了，而实际是你借的钱。\n这种借贷是上了征信的，如果你有违约，征信就会出现问题，所以我没一次敢怠慢。\n## 第三个坑：房屋中的家电不能用\n租下房子之前看过了房子，家电、桌椅、床等设施都齐全，灯、空调、冰箱都使用过了，确实是好的，于是签了合同，住进来才发现洗衣机没法用，缺少一根水管，于是联系他们，配一根洗衣机水管，于是他就叫我们自己弄，公司没有这项规定，也没有相应的业务人员做这个事情，于是只能自己网上买水管了啊，合同都签了。\n还有一次，灯不亮了，也叫他们过来维修，同样的理由，叫我们自己网上买个灯管，我们真是服了，对于服务这么差的中介，绝对不会合作第二次。\n## 第三个坑：重新签合同，导致交租金提前\n美丽家园被收购，母公司重新过来签合同，之前是每月16日交租，现在12日交租，房租提前4天交，他们的业务员说会把这4天的钱退给我们，但是一直没退。\n## 第四个坑：退租，乱扣租金\n退租的时候，房管一副高高在上的样子，好像谁欠他钱似的，查看了房间，检查了家电，押金中扣了我们300元，我去你大爷，住了10个月，给你换了灯管、镇流器、洗衣机水管，还给我们说损坏费用。\n这300块，100块写在单子上付给公司，另外200块说私下给他转过去，这是拿回扣啊，好好好给你这个死胖子。\n好了，这押金搞定了，还有房租的事情，因为每次交房租都是交的下个月的，于是我们最后一个月交的是下个月的，应该退我们1个月的房租，但是~一脸横肉的房管，硬生生给我们算成了26天，我跟他算数，他不跟我算数，一直按照他的那套算法来，他妹的，你们还差我4天前没退呢，最后也懒得跟这种人打交道了，就26天了，拿了单子走人了。\n最后说是押金和租金会在1-2个月内退回，你妹的，你们工作效率这么低吗，要这么长时间。我拿了押金条，快速离开了这个人。这里附上退租押金条：\n![退租交接表](北京租房小中介骗局/leavehouse.jpg)\n## 第五个坑：不退押金，原因是财务正在处理\n一个月到了确实退了我们租金，但是押金没有退给我们，于是找他们要，第一次，他说提交给财务，第二次去催催财务，第三次去催催财务，这几次，态度极其恶劣，如果不是钱在他手里，我就骂死他，于是又忍气吞声1个月半月过去了，承诺给我们的1-2个月已经超过了半个月，继续联系，我们同一个套间里面的其他朋友也都在催，于是叫我们联系客服，客服电话一直打不通，一次没打通过，于是跟他理论，自己去总部要钱，他说不知道总部位置，我晕死，你一个业务人员不知道总部的位置，还干啥啊，回家种田吧，又联系一次，说是找找总部位置，给我发了一个地址：朝阳区牌坊街8号楼2单元703，好了，我带着沉重的心情去总部要钱，没把握要到钱啊，位置离我2个小时车程。\n到了，没有公司牌子，很像一个租户的屋，于是敲门，问问，果然是的。于是恼火了，我2个小时到这里，你给我一个错误的地址？打电话过去骂他，我们互相对骂，这几年没骂人了，骂的痛快，你不让我好过，我也不让你好过。无奈啊，找物业问了，也是说没有这个房地产公司。\n于是找当初带我们看房子的业务员，问他总部位置，说是：朝阳区财满街8号楼2单元703，于是有话2小时去这个地方，这个地方是对的，找到他们领导，说明了情况，登记了紧急退租表，给我们说是8月10号退租。\n其实这时候心还是有点怀疑他们说的话，但是不信也没什么办法啊，于是回家了，今天一天都在处理这个事情了，上午9点出发，下午4点才到家，等吧。\n这里附上总部图片：\n![大熊公寓](北京租房小中介骗局/daxionghouse.jpg)\n还有房管的电话：15510302000，欢迎去骚扰他，骂他更好。\n\n好了，希望大家记住这几点，并告诉身边的朋友们，多谢了。","source":"_posts/北京租房小中介骗局.md","raw":"---\ntitle: 北京租房小中介骗局\ndate: 2018-07-29 09:44:01\ntags: [租房,骗局]\ncategories: 个人黑名单\n---\n给大家说说我亲身经历的租房骗局，小中介如何骗你的钱。\n我会不定期在网站发布个人生活中遇到的各种骗局，发布到【个人黑名单】分类中，请大家持续关注，避免遇到同样的坑，打击坑蒙拐骗，让那些只顾赚钱，不顾服务的商家，淘汰掉。\n<!-- more -->\n# 中介公司\n美丽家园房地产有限公司、昊园恒业房地产有限公司\n# 产品\n大熊公寓\n# 总部地址\n北京市朝阳区财满街8号楼2单元703室\n# 个人情况\n首先说说我的情况，码农一枚跟朋友一起租房，3个人，租2间房，一间2人，一间1人，无奈北京房租太贵，链家、我爱我家中介费太高，只好找小中介，不受中介费。\n# 租房\n## 第一个坑：预付款时，一定看好是“订金”还是“定金”\n找到一个小中介公司，在一个小区里面租下15平米左右的主卧2000元，收了一个月押金。当时保证押金可以退回，家具家电均可以上门维修。于是就签合同，另一个朋友，在签合同的时候，了解到，如果中途退租的话，需要找到接盘侠，才能退租，把押金退给你，他不干，于是签了一半的合同终止了，但是中介不干啊，他说合同是要收钱的，200块，你说气不气人，还有，跟他们争论的时候，还问他们索要订金200块，但是那个条子上写的是“定金”，意思就是你已经预付款一些金钱把这个房子定下来了，于是发现情况不对，就对他们客气地说话，说我们之前没弄清楚情况，麻烦谅解一下，最后扣了100块，定金退了。所以大家以后预付款的时候，一定看好是“订金”还是“定金”。\n## 第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\n租金结算方式为58月付，58月付是一个借贷平台，通过借贷的方式，一次性借贷1年的房租也就是20000元，58月付一下子就把钱打给了中介公司，然后58每个月从你的银行卡中扣除2000元，这样中介公司实际就获得了20000元的借款，可以拿去投资或者业务扩张了，而实际是你借的钱。\n这种借贷是上了征信的，如果你有违约，征信就会出现问题，所以我没一次敢怠慢。\n## 第三个坑：房屋中的家电不能用\n租下房子之前看过了房子，家电、桌椅、床等设施都齐全，灯、空调、冰箱都使用过了，确实是好的，于是签了合同，住进来才发现洗衣机没法用，缺少一根水管，于是联系他们，配一根洗衣机水管，于是他就叫我们自己弄，公司没有这项规定，也没有相应的业务人员做这个事情，于是只能自己网上买水管了啊，合同都签了。\n还有一次，灯不亮了，也叫他们过来维修，同样的理由，叫我们自己网上买个灯管，我们真是服了，对于服务这么差的中介，绝对不会合作第二次。\n## 第三个坑：重新签合同，导致交租金提前\n美丽家园被收购，母公司重新过来签合同，之前是每月16日交租，现在12日交租，房租提前4天交，他们的业务员说会把这4天的钱退给我们，但是一直没退。\n## 第四个坑：退租，乱扣租金\n退租的时候，房管一副高高在上的样子，好像谁欠他钱似的，查看了房间，检查了家电，押金中扣了我们300元，我去你大爷，住了10个月，给你换了灯管、镇流器、洗衣机水管，还给我们说损坏费用。\n这300块，100块写在单子上付给公司，另外200块说私下给他转过去，这是拿回扣啊，好好好给你这个死胖子。\n好了，这押金搞定了，还有房租的事情，因为每次交房租都是交的下个月的，于是我们最后一个月交的是下个月的，应该退我们1个月的房租，但是~一脸横肉的房管，硬生生给我们算成了26天，我跟他算数，他不跟我算数，一直按照他的那套算法来，他妹的，你们还差我4天前没退呢，最后也懒得跟这种人打交道了，就26天了，拿了单子走人了。\n最后说是押金和租金会在1-2个月内退回，你妹的，你们工作效率这么低吗，要这么长时间。我拿了押金条，快速离开了这个人。这里附上退租押金条：\n![退租交接表](北京租房小中介骗局/leavehouse.jpg)\n## 第五个坑：不退押金，原因是财务正在处理\n一个月到了确实退了我们租金，但是押金没有退给我们，于是找他们要，第一次，他说提交给财务，第二次去催催财务，第三次去催催财务，这几次，态度极其恶劣，如果不是钱在他手里，我就骂死他，于是又忍气吞声1个月半月过去了，承诺给我们的1-2个月已经超过了半个月，继续联系，我们同一个套间里面的其他朋友也都在催，于是叫我们联系客服，客服电话一直打不通，一次没打通过，于是跟他理论，自己去总部要钱，他说不知道总部位置，我晕死，你一个业务人员不知道总部的位置，还干啥啊，回家种田吧，又联系一次，说是找找总部位置，给我发了一个地址：朝阳区牌坊街8号楼2单元703，好了，我带着沉重的心情去总部要钱，没把握要到钱啊，位置离我2个小时车程。\n到了，没有公司牌子，很像一个租户的屋，于是敲门，问问，果然是的。于是恼火了，我2个小时到这里，你给我一个错误的地址？打电话过去骂他，我们互相对骂，这几年没骂人了，骂的痛快，你不让我好过，我也不让你好过。无奈啊，找物业问了，也是说没有这个房地产公司。\n于是找当初带我们看房子的业务员，问他总部位置，说是：朝阳区财满街8号楼2单元703，于是有话2小时去这个地方，这个地方是对的，找到他们领导，说明了情况，登记了紧急退租表，给我们说是8月10号退租。\n其实这时候心还是有点怀疑他们说的话，但是不信也没什么办法啊，于是回家了，今天一天都在处理这个事情了，上午9点出发，下午4点才到家，等吧。\n这里附上总部图片：\n![大熊公寓](北京租房小中介骗局/daxionghouse.jpg)\n还有房管的电话：15510302000，欢迎去骚扰他，骂他更好。\n\n好了，希望大家记住这几点，并告诉身边的朋友们，多谢了。","slug":"北京租房小中介骗局","published":1,"updated":"2018-12-11T13:57:12.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ku001ffbs6207t2nbp","content":"<p>给大家说说我亲身经历的租房骗局，小中介如何骗你的钱。<br>我会不定期在网站发布个人生活中遇到的各种骗局，发布到【个人黑名单】分类中，请大家持续关注，避免遇到同样的坑，打击坑蒙拐骗，让那些只顾赚钱，不顾服务的商家，淘汰掉。</p>\n<a id=\"more\"></a>\n<h1 id=\"中介公司\"><a href=\"#中介公司\" class=\"headerlink\" title=\"中介公司\"></a>中介公司</h1><p>美丽家园房地产有限公司、昊园恒业房地产有限公司</p>\n<h1 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h1><p>大熊公寓</p>\n<h1 id=\"总部地址\"><a href=\"#总部地址\" class=\"headerlink\" title=\"总部地址\"></a>总部地址</h1><p>北京市朝阳区财满街8号楼2单元703室</p>\n<h1 id=\"个人情况\"><a href=\"#个人情况\" class=\"headerlink\" title=\"个人情况\"></a>个人情况</h1><p>首先说说我的情况，码农一枚跟朋友一起租房，3个人，租2间房，一间2人，一间1人，无奈北京房租太贵，链家、我爱我家中介费太高，只好找小中介，不受中介费。</p>\n<h1 id=\"租房\"><a href=\"#租房\" class=\"headerlink\" title=\"租房\"></a>租房</h1><h2 id=\"第一个坑：预付款时，一定看好是“订金”还是“定金”\"><a href=\"#第一个坑：预付款时，一定看好是“订金”还是“定金”\" class=\"headerlink\" title=\"第一个坑：预付款时，一定看好是“订金”还是“定金”\"></a>第一个坑：预付款时，一定看好是“订金”还是“定金”</h2><p>找到一个小中介公司，在一个小区里面租下15平米左右的主卧2000元，收了一个月押金。当时保证押金可以退回，家具家电均可以上门维修。于是就签合同，另一个朋友，在签合同的时候，了解到，如果中途退租的话，需要找到接盘侠，才能退租，把押金退给你，他不干，于是签了一半的合同终止了，但是中介不干啊，他说合同是要收钱的，200块，你说气不气人，还有，跟他们争论的时候，还问他们索要订金200块，但是那个条子上写的是“定金”，意思就是你已经预付款一些金钱把这个房子定下来了，于是发现情况不对，就对他们客气地说话，说我们之前没弄清楚情况，麻烦谅解一下，最后扣了100块，定金退了。所以大家以后预付款的时候，一定看好是“订金”还是“定金”。</p>\n<h2 id=\"第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\"><a href=\"#第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\" class=\"headerlink\" title=\"第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\"></a>第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约</h2><p>租金结算方式为58月付，58月付是一个借贷平台，通过借贷的方式，一次性借贷1年的房租也就是20000元，58月付一下子就把钱打给了中介公司，然后58每个月从你的银行卡中扣除2000元，这样中介公司实际就获得了20000元的借款，可以拿去投资或者业务扩张了，而实际是你借的钱。<br>这种借贷是上了征信的，如果你有违约，征信就会出现问题，所以我没一次敢怠慢。</p>\n<h2 id=\"第三个坑：房屋中的家电不能用\"><a href=\"#第三个坑：房屋中的家电不能用\" class=\"headerlink\" title=\"第三个坑：房屋中的家电不能用\"></a>第三个坑：房屋中的家电不能用</h2><p>租下房子之前看过了房子，家电、桌椅、床等设施都齐全，灯、空调、冰箱都使用过了，确实是好的，于是签了合同，住进来才发现洗衣机没法用，缺少一根水管，于是联系他们，配一根洗衣机水管，于是他就叫我们自己弄，公司没有这项规定，也没有相应的业务人员做这个事情，于是只能自己网上买水管了啊，合同都签了。<br>还有一次，灯不亮了，也叫他们过来维修，同样的理由，叫我们自己网上买个灯管，我们真是服了，对于服务这么差的中介，绝对不会合作第二次。</p>\n<h2 id=\"第三个坑：重新签合同，导致交租金提前\"><a href=\"#第三个坑：重新签合同，导致交租金提前\" class=\"headerlink\" title=\"第三个坑：重新签合同，导致交租金提前\"></a>第三个坑：重新签合同，导致交租金提前</h2><p>美丽家园被收购，母公司重新过来签合同，之前是每月16日交租，现在12日交租，房租提前4天交，他们的业务员说会把这4天的钱退给我们，但是一直没退。</p>\n<h2 id=\"第四个坑：退租，乱扣租金\"><a href=\"#第四个坑：退租，乱扣租金\" class=\"headerlink\" title=\"第四个坑：退租，乱扣租金\"></a>第四个坑：退租，乱扣租金</h2><p>退租的时候，房管一副高高在上的样子，好像谁欠他钱似的，查看了房间，检查了家电，押金中扣了我们300元，我去你大爷，住了10个月，给你换了灯管、镇流器、洗衣机水管，还给我们说损坏费用。<br>这300块，100块写在单子上付给公司，另外200块说私下给他转过去，这是拿回扣啊，好好好给你这个死胖子。<br>好了，这押金搞定了，还有房租的事情，因为每次交房租都是交的下个月的，于是我们最后一个月交的是下个月的，应该退我们1个月的房租，但是~一脸横肉的房管，硬生生给我们算成了26天，我跟他算数，他不跟我算数，一直按照他的那套算法来，他妹的，你们还差我4天前没退呢，最后也懒得跟这种人打交道了，就26天了，拿了单子走人了。<br>最后说是押金和租金会在1-2个月内退回，你妹的，你们工作效率这么低吗，要这么长时间。我拿了押金条，快速离开了这个人。这里附上退租押金条：<br><img src=\"/2018/07/29/北京租房小中介骗局/leavehouse.jpg\" alt=\"退租交接表\"></p>\n<h2 id=\"第五个坑：不退押金，原因是财务正在处理\"><a href=\"#第五个坑：不退押金，原因是财务正在处理\" class=\"headerlink\" title=\"第五个坑：不退押金，原因是财务正在处理\"></a>第五个坑：不退押金，原因是财务正在处理</h2><p>一个月到了确实退了我们租金，但是押金没有退给我们，于是找他们要，第一次，他说提交给财务，第二次去催催财务，第三次去催催财务，这几次，态度极其恶劣，如果不是钱在他手里，我就骂死他，于是又忍气吞声1个月半月过去了，承诺给我们的1-2个月已经超过了半个月，继续联系，我们同一个套间里面的其他朋友也都在催，于是叫我们联系客服，客服电话一直打不通，一次没打通过，于是跟他理论，自己去总部要钱，他说不知道总部位置，我晕死，你一个业务人员不知道总部的位置，还干啥啊，回家种田吧，又联系一次，说是找找总部位置，给我发了一个地址：朝阳区牌坊街8号楼2单元703，好了，我带着沉重的心情去总部要钱，没把握要到钱啊，位置离我2个小时车程。<br>到了，没有公司牌子，很像一个租户的屋，于是敲门，问问，果然是的。于是恼火了，我2个小时到这里，你给我一个错误的地址？打电话过去骂他，我们互相对骂，这几年没骂人了，骂的痛快，你不让我好过，我也不让你好过。无奈啊，找物业问了，也是说没有这个房地产公司。<br>于是找当初带我们看房子的业务员，问他总部位置，说是：朝阳区财满街8号楼2单元703，于是有话2小时去这个地方，这个地方是对的，找到他们领导，说明了情况，登记了紧急退租表，给我们说是8月10号退租。<br>其实这时候心还是有点怀疑他们说的话，但是不信也没什么办法啊，于是回家了，今天一天都在处理这个事情了，上午9点出发，下午4点才到家，等吧。<br>这里附上总部图片：<br><img src=\"/2018/07/29/北京租房小中介骗局/daxionghouse.jpg\" alt=\"大熊公寓\"><br>还有房管的电话：15510302000，欢迎去骚扰他，骂他更好。</p>\n<p>好了，希望大家记住这几点，并告诉身边的朋友们，多谢了。</p>\n","site":{"data":{}},"excerpt":"<p>给大家说说我亲身经历的租房骗局，小中介如何骗你的钱。<br>我会不定期在网站发布个人生活中遇到的各种骗局，发布到【个人黑名单】分类中，请大家持续关注，避免遇到同样的坑，打击坑蒙拐骗，让那些只顾赚钱，不顾服务的商家，淘汰掉。</p>","more":"<h1 id=\"中介公司\"><a href=\"#中介公司\" class=\"headerlink\" title=\"中介公司\"></a>中介公司</h1><p>美丽家园房地产有限公司、昊园恒业房地产有限公司</p>\n<h1 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h1><p>大熊公寓</p>\n<h1 id=\"总部地址\"><a href=\"#总部地址\" class=\"headerlink\" title=\"总部地址\"></a>总部地址</h1><p>北京市朝阳区财满街8号楼2单元703室</p>\n<h1 id=\"个人情况\"><a href=\"#个人情况\" class=\"headerlink\" title=\"个人情况\"></a>个人情况</h1><p>首先说说我的情况，码农一枚跟朋友一起租房，3个人，租2间房，一间2人，一间1人，无奈北京房租太贵，链家、我爱我家中介费太高，只好找小中介，不受中介费。</p>\n<h1 id=\"租房\"><a href=\"#租房\" class=\"headerlink\" title=\"租房\"></a>租房</h1><h2 id=\"第一个坑：预付款时，一定看好是“订金”还是“定金”\"><a href=\"#第一个坑：预付款时，一定看好是“订金”还是“定金”\" class=\"headerlink\" title=\"第一个坑：预付款时，一定看好是“订金”还是“定金”\"></a>第一个坑：预付款时，一定看好是“订金”还是“定金”</h2><p>找到一个小中介公司，在一个小区里面租下15平米左右的主卧2000元，收了一个月押金。当时保证押金可以退回，家具家电均可以上门维修。于是就签合同，另一个朋友，在签合同的时候，了解到，如果中途退租的话，需要找到接盘侠，才能退租，把押金退给你，他不干，于是签了一半的合同终止了，但是中介不干啊，他说合同是要收钱的，200块，你说气不气人，还有，跟他们争论的时候，还问他们索要订金200块，但是那个条子上写的是“定金”，意思就是你已经预付款一些金钱把这个房子定下来了，于是发现情况不对，就对他们客气地说话，说我们之前没弄清楚情况，麻烦谅解一下，最后扣了100块，定金退了。所以大家以后预付款的时候，一定看好是“订金”还是“定金”。</p>\n<h2 id=\"第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\"><a href=\"#第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\" class=\"headerlink\" title=\"第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约\"></a>第二个坑：房租付款方式，自付最好，不要和第三方借贷平台签约</h2><p>租金结算方式为58月付，58月付是一个借贷平台，通过借贷的方式，一次性借贷1年的房租也就是20000元，58月付一下子就把钱打给了中介公司，然后58每个月从你的银行卡中扣除2000元，这样中介公司实际就获得了20000元的借款，可以拿去投资或者业务扩张了，而实际是你借的钱。<br>这种借贷是上了征信的，如果你有违约，征信就会出现问题，所以我没一次敢怠慢。</p>\n<h2 id=\"第三个坑：房屋中的家电不能用\"><a href=\"#第三个坑：房屋中的家电不能用\" class=\"headerlink\" title=\"第三个坑：房屋中的家电不能用\"></a>第三个坑：房屋中的家电不能用</h2><p>租下房子之前看过了房子，家电、桌椅、床等设施都齐全，灯、空调、冰箱都使用过了，确实是好的，于是签了合同，住进来才发现洗衣机没法用，缺少一根水管，于是联系他们，配一根洗衣机水管，于是他就叫我们自己弄，公司没有这项规定，也没有相应的业务人员做这个事情，于是只能自己网上买水管了啊，合同都签了。<br>还有一次，灯不亮了，也叫他们过来维修，同样的理由，叫我们自己网上买个灯管，我们真是服了，对于服务这么差的中介，绝对不会合作第二次。</p>\n<h2 id=\"第三个坑：重新签合同，导致交租金提前\"><a href=\"#第三个坑：重新签合同，导致交租金提前\" class=\"headerlink\" title=\"第三个坑：重新签合同，导致交租金提前\"></a>第三个坑：重新签合同，导致交租金提前</h2><p>美丽家园被收购，母公司重新过来签合同，之前是每月16日交租，现在12日交租，房租提前4天交，他们的业务员说会把这4天的钱退给我们，但是一直没退。</p>\n<h2 id=\"第四个坑：退租，乱扣租金\"><a href=\"#第四个坑：退租，乱扣租金\" class=\"headerlink\" title=\"第四个坑：退租，乱扣租金\"></a>第四个坑：退租，乱扣租金</h2><p>退租的时候，房管一副高高在上的样子，好像谁欠他钱似的，查看了房间，检查了家电，押金中扣了我们300元，我去你大爷，住了10个月，给你换了灯管、镇流器、洗衣机水管，还给我们说损坏费用。<br>这300块，100块写在单子上付给公司，另外200块说私下给他转过去，这是拿回扣啊，好好好给你这个死胖子。<br>好了，这押金搞定了，还有房租的事情，因为每次交房租都是交的下个月的，于是我们最后一个月交的是下个月的，应该退我们1个月的房租，但是~一脸横肉的房管，硬生生给我们算成了26天，我跟他算数，他不跟我算数，一直按照他的那套算法来，他妹的，你们还差我4天前没退呢，最后也懒得跟这种人打交道了，就26天了，拿了单子走人了。<br>最后说是押金和租金会在1-2个月内退回，你妹的，你们工作效率这么低吗，要这么长时间。我拿了押金条，快速离开了这个人。这里附上退租押金条：<br><img src=\"/2018/07/29/北京租房小中介骗局/leavehouse.jpg\" alt=\"退租交接表\"></p>\n<h2 id=\"第五个坑：不退押金，原因是财务正在处理\"><a href=\"#第五个坑：不退押金，原因是财务正在处理\" class=\"headerlink\" title=\"第五个坑：不退押金，原因是财务正在处理\"></a>第五个坑：不退押金，原因是财务正在处理</h2><p>一个月到了确实退了我们租金，但是押金没有退给我们，于是找他们要，第一次，他说提交给财务，第二次去催催财务，第三次去催催财务，这几次，态度极其恶劣，如果不是钱在他手里，我就骂死他，于是又忍气吞声1个月半月过去了，承诺给我们的1-2个月已经超过了半个月，继续联系，我们同一个套间里面的其他朋友也都在催，于是叫我们联系客服，客服电话一直打不通，一次没打通过，于是跟他理论，自己去总部要钱，他说不知道总部位置，我晕死，你一个业务人员不知道总部的位置，还干啥啊，回家种田吧，又联系一次，说是找找总部位置，给我发了一个地址：朝阳区牌坊街8号楼2单元703，好了，我带着沉重的心情去总部要钱，没把握要到钱啊，位置离我2个小时车程。<br>到了，没有公司牌子，很像一个租户的屋，于是敲门，问问，果然是的。于是恼火了，我2个小时到这里，你给我一个错误的地址？打电话过去骂他，我们互相对骂，这几年没骂人了，骂的痛快，你不让我好过，我也不让你好过。无奈啊，找物业问了，也是说没有这个房地产公司。<br>于是找当初带我们看房子的业务员，问他总部位置，说是：朝阳区财满街8号楼2单元703，于是有话2小时去这个地方，这个地方是对的，找到他们领导，说明了情况，登记了紧急退租表，给我们说是8月10号退租。<br>其实这时候心还是有点怀疑他们说的话，但是不信也没什么办法啊，于是回家了，今天一天都在处理这个事情了，上午9点出发，下午4点才到家，等吧。<br>这里附上总部图片：<br><img src=\"/2018/07/29/北京租房小中介骗局/daxionghouse.jpg\" alt=\"大熊公寓\"><br>还有房管的电话：15510302000，欢迎去骚扰他，骂他更好。</p>\n<p>好了，希望大家记住这几点，并告诉身边的朋友们，多谢了。</p>"},{"title":"区块链应用","date":"2018-07-25T03:35:34.000Z","_content":"区块链技术，会颠覆传统互联网信息技术行业，成为下一个风口，你要把握住吗？下面来聊聊区块链在目前各大行业中的一些应用，和目前开发区块链应用用到了平台和技术。\n<!-- more -->\n# 一、分类\n## 1.公有链\n任何人均可参加和退出\n## 联盟链\n加入和退出需要经过联盟授权\n## 3.私有链\n权利完全控制在一个组织中\n\n# 二、开发平台\n## 1.以太坊\n## 2.Hyperledger：IBM开源\n## 3.商用区块链组件：\n    共识层（可插拔）\n    智能合约层\n    通讯层\n    数据抽象层\n    加密抽象层\n    身份服务\n    策略服务\n    API\n    互操作、模块化\n\n# 三、Hyperledger应用\n## 1.金融服务\n提升透明度，减少交易时间、降低风险\n数字贸易链：银行间交易\n跨境支付：swift组织\n绿色资产管理平台：IBM与中国合作\n数字身份：菲律宾银行账户的问题\n房地产交易：房产属主，解决房产产权鉴定的问题\n## 2.供应链\n环节真实性，透明度更高，效率更高\n海鲜供应链追踪：偷猎，食品供应链\n钻石供应链：防止钻石引起的武装冲突\n食品安全：每个环节的食品安全\n## 3.医疗\n患者不同医疗组织、机构之间的病例共享\n医疗记录：病例共享\n州际医疗许可：美国各州之间的医疗共享\n\n# 四、开发语言\n以太坊：c++、java、python、go、solidity\nHyperledger：js","source":"_posts/区块链应用.md","raw":"---\ntitle: 区块链应用\ndate: 2018-07-25 11:35:34\ntags: blockchain\ncategories: 区块链\n---\n区块链技术，会颠覆传统互联网信息技术行业，成为下一个风口，你要把握住吗？下面来聊聊区块链在目前各大行业中的一些应用，和目前开发区块链应用用到了平台和技术。\n<!-- more -->\n# 一、分类\n## 1.公有链\n任何人均可参加和退出\n## 联盟链\n加入和退出需要经过联盟授权\n## 3.私有链\n权利完全控制在一个组织中\n\n# 二、开发平台\n## 1.以太坊\n## 2.Hyperledger：IBM开源\n## 3.商用区块链组件：\n    共识层（可插拔）\n    智能合约层\n    通讯层\n    数据抽象层\n    加密抽象层\n    身份服务\n    策略服务\n    API\n    互操作、模块化\n\n# 三、Hyperledger应用\n## 1.金融服务\n提升透明度，减少交易时间、降低风险\n数字贸易链：银行间交易\n跨境支付：swift组织\n绿色资产管理平台：IBM与中国合作\n数字身份：菲律宾银行账户的问题\n房地产交易：房产属主，解决房产产权鉴定的问题\n## 2.供应链\n环节真实性，透明度更高，效率更高\n海鲜供应链追踪：偷猎，食品供应链\n钻石供应链：防止钻石引起的武装冲突\n食品安全：每个环节的食品安全\n## 3.医疗\n患者不同医疗组织、机构之间的病例共享\n医疗记录：病例共享\n州际医疗许可：美国各州之间的医疗共享\n\n# 四、开发语言\n以太坊：c++、java、python、go、solidity\nHyperledger：js","slug":"区块链应用","published":1,"updated":"2018-12-11T13:57:13.074Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kv001gfbs67e3whdpp","content":"<p>区块链技术，会颠覆传统互联网信息技术行业，成为下一个风口，你要把握住吗？下面来聊聊区块链在目前各大行业中的一些应用，和目前开发区块链应用用到了平台和技术。</p>\n<a id=\"more\"></a>\n<h1 id=\"一、分类\"><a href=\"#一、分类\" class=\"headerlink\" title=\"一、分类\"></a>一、分类</h1><h2 id=\"1-公有链\"><a href=\"#1-公有链\" class=\"headerlink\" title=\"1.公有链\"></a>1.公有链</h2><p>任何人均可参加和退出</p>\n<h2 id=\"联盟链\"><a href=\"#联盟链\" class=\"headerlink\" title=\"联盟链\"></a>联盟链</h2><p>加入和退出需要经过联盟授权</p>\n<h2 id=\"3-私有链\"><a href=\"#3-私有链\" class=\"headerlink\" title=\"3.私有链\"></a>3.私有链</h2><p>权利完全控制在一个组织中</p>\n<h1 id=\"二、开发平台\"><a href=\"#二、开发平台\" class=\"headerlink\" title=\"二、开发平台\"></a>二、开发平台</h1><h2 id=\"1-以太坊\"><a href=\"#1-以太坊\" class=\"headerlink\" title=\"1.以太坊\"></a>1.以太坊</h2><h2 id=\"2-Hyperledger：IBM开源\"><a href=\"#2-Hyperledger：IBM开源\" class=\"headerlink\" title=\"2.Hyperledger：IBM开源\"></a>2.Hyperledger：IBM开源</h2><h2 id=\"3-商用区块链组件：\"><a href=\"#3-商用区块链组件：\" class=\"headerlink\" title=\"3.商用区块链组件：\"></a>3.商用区块链组件：</h2><pre><code>共识层（可插拔）\n智能合约层\n通讯层\n数据抽象层\n加密抽象层\n身份服务\n策略服务\nAPI\n互操作、模块化</code></pre><h1 id=\"三、Hyperledger应用\"><a href=\"#三、Hyperledger应用\" class=\"headerlink\" title=\"三、Hyperledger应用\"></a>三、Hyperledger应用</h1><h2 id=\"1-金融服务\"><a href=\"#1-金融服务\" class=\"headerlink\" title=\"1.金融服务\"></a>1.金融服务</h2><p>提升透明度，减少交易时间、降低风险<br>数字贸易链：银行间交易<br>跨境支付：swift组织<br>绿色资产管理平台：IBM与中国合作<br>数字身份：菲律宾银行账户的问题<br>房地产交易：房产属主，解决房产产权鉴定的问题</p>\n<h2 id=\"2-供应链\"><a href=\"#2-供应链\" class=\"headerlink\" title=\"2.供应链\"></a>2.供应链</h2><p>环节真实性，透明度更高，效率更高<br>海鲜供应链追踪：偷猎，食品供应链<br>钻石供应链：防止钻石引起的武装冲突<br>食品安全：每个环节的食品安全</p>\n<h2 id=\"3-医疗\"><a href=\"#3-医疗\" class=\"headerlink\" title=\"3.医疗\"></a>3.医疗</h2><p>患者不同医疗组织、机构之间的病例共享<br>医疗记录：病例共享<br>州际医疗许可：美国各州之间的医疗共享</p>\n<h1 id=\"四、开发语言\"><a href=\"#四、开发语言\" class=\"headerlink\" title=\"四、开发语言\"></a>四、开发语言</h1><p>以太坊：c++、java、python、go、solidity<br>Hyperledger：js</p>\n","site":{"data":{}},"excerpt":"<p>区块链技术，会颠覆传统互联网信息技术行业，成为下一个风口，你要把握住吗？下面来聊聊区块链在目前各大行业中的一些应用，和目前开发区块链应用用到了平台和技术。</p>","more":"<h1 id=\"一、分类\"><a href=\"#一、分类\" class=\"headerlink\" title=\"一、分类\"></a>一、分类</h1><h2 id=\"1-公有链\"><a href=\"#1-公有链\" class=\"headerlink\" title=\"1.公有链\"></a>1.公有链</h2><p>任何人均可参加和退出</p>\n<h2 id=\"联盟链\"><a href=\"#联盟链\" class=\"headerlink\" title=\"联盟链\"></a>联盟链</h2><p>加入和退出需要经过联盟授权</p>\n<h2 id=\"3-私有链\"><a href=\"#3-私有链\" class=\"headerlink\" title=\"3.私有链\"></a>3.私有链</h2><p>权利完全控制在一个组织中</p>\n<h1 id=\"二、开发平台\"><a href=\"#二、开发平台\" class=\"headerlink\" title=\"二、开发平台\"></a>二、开发平台</h1><h2 id=\"1-以太坊\"><a href=\"#1-以太坊\" class=\"headerlink\" title=\"1.以太坊\"></a>1.以太坊</h2><h2 id=\"2-Hyperledger：IBM开源\"><a href=\"#2-Hyperledger：IBM开源\" class=\"headerlink\" title=\"2.Hyperledger：IBM开源\"></a>2.Hyperledger：IBM开源</h2><h2 id=\"3-商用区块链组件：\"><a href=\"#3-商用区块链组件：\" class=\"headerlink\" title=\"3.商用区块链组件：\"></a>3.商用区块链组件：</h2><pre><code>共识层（可插拔）\n智能合约层\n通讯层\n数据抽象层\n加密抽象层\n身份服务\n策略服务\nAPI\n互操作、模块化</code></pre><h1 id=\"三、Hyperledger应用\"><a href=\"#三、Hyperledger应用\" class=\"headerlink\" title=\"三、Hyperledger应用\"></a>三、Hyperledger应用</h1><h2 id=\"1-金融服务\"><a href=\"#1-金融服务\" class=\"headerlink\" title=\"1.金融服务\"></a>1.金融服务</h2><p>提升透明度，减少交易时间、降低风险<br>数字贸易链：银行间交易<br>跨境支付：swift组织<br>绿色资产管理平台：IBM与中国合作<br>数字身份：菲律宾银行账户的问题<br>房地产交易：房产属主，解决房产产权鉴定的问题</p>\n<h2 id=\"2-供应链\"><a href=\"#2-供应链\" class=\"headerlink\" title=\"2.供应链\"></a>2.供应链</h2><p>环节真实性，透明度更高，效率更高<br>海鲜供应链追踪：偷猎，食品供应链<br>钻石供应链：防止钻石引起的武装冲突<br>食品安全：每个环节的食品安全</p>\n<h2 id=\"3-医疗\"><a href=\"#3-医疗\" class=\"headerlink\" title=\"3.医疗\"></a>3.医疗</h2><p>患者不同医疗组织、机构之间的病例共享<br>医疗记录：病例共享<br>州际医疗许可：美国各州之间的医疗共享</p>\n<h1 id=\"四、开发语言\"><a href=\"#四、开发语言\" class=\"headerlink\" title=\"四、开发语言\"></a>四、开发语言</h1><p>以太坊：c++、java、python、go、solidity<br>Hyperledger：js</p>"},{"title":"区块链技术存在的问题","date":"2018-07-14T04:51:22.000Z","_content":"区块链技术，可以说是可以颠覆传统行业规则的一个革命性技术，去中性化、不可篡改、可回溯等特点，让全球化加速，让世界变得可以信赖，这不就是我们想要的世界吗，但是目前区块链经过了几年的发展，各种乱象横生，需要我们清晰地认识，别走弯路，下面介绍下区块链技术目前所存在的问题，开发者们或者区块链创业者们需要了解的。\n<!-- more -->\n# 1.标准不统一\n区块链是什么，目前业界还没有一个统一的清晰明确的概念。没有清晰统一的概念界定，又缺少权威的机构对区块链产品进行评定，这极易造成在涉及区块链的项目谈判、实施过程中出现问题，更谈不上区块链的大规模推广和应用。市场上已有的区块链应用也是“鱼龙混杂”，无法有效评价产品质量。\n区块链亟需建立一套统一的标准规范来界定其内涵和外延，并说明评判的方法，从而引导市场健康发展。然而区块链技术仍在不断创新变化，应用场景也在不断地探索中，过早的标准化会限制区块链技术的创新和行业的发展。因此，为适应目前区块链行业的发展阶段，区块链的标准化工作应从满足用户的角度出发，以测试某个区块链系统对用户需求的匹配度为原则，开展功能和性能测试的“黑盒”标准化，而不是过早地对区块链技术进行规范。\n# 2.衍生市场混乱\n处于炒作高峰期的区块链技术，不仅受到社会大众的广泛关注，而且存在着被不法分子所利用进行欺诈的情况。目前市场上存在着大量的打着数字货币的旗号，进行传销、诈骗、非法融资，这些数字货币利用门户网站、微博、微信公众号、贴吧等渠道进行宣传和招商活动，进行炒作，而不真正地拿着投资者的钱去研究、开发区块链引用上。\n# 3.安全威胁\n在大量资本融入到区块链行业中时，区块链技术得到了飞速的发展，同时，安全问题也得到了广泛的关注，近期许多数字货币交易平台出现黑客攻击，盗取用户的数字货币达到百亿元级别，这是交易平台技术上未达到安全的要求。而在区块链财务类系统中，私钥是用户身份的唯一凭证，在有些应用中，需要将用户的私钥跟用户身份进行绑定，这样就需要通过平台来对用户的私钥进行管理，这种情况下，秘钥的管理会存在安全问题，而这个问题，并不能通过区块链系统自身来解决，而是需要区块链系统外部来解决。\n# 4.难以监管\n区块链技术采用去中心化的理念，摆脱了传统中心化的管理机制所带来的诸多问题，但去中心化也意味着，主体不明确，监管困难，缺少对主体的有效控制，比如在上次的黑客勒索时间，犯罪分子以比特币作为交易赎金，导致其身份极其难以追查。\n\n大概介绍到这里，未完待续，我们一起来见证区块链的崛起，有意见，欢迎mail我，邮箱chenzuoli709@gmail.com.","source":"_posts/区块链技术存在的问题.md","raw":"---\ntitle: 区块链技术存在的问题\ndate: 2018-07-14 12:51:22\ntags: blockchain\ncategories: 区块链\n---\n区块链技术，可以说是可以颠覆传统行业规则的一个革命性技术，去中性化、不可篡改、可回溯等特点，让全球化加速，让世界变得可以信赖，这不就是我们想要的世界吗，但是目前区块链经过了几年的发展，各种乱象横生，需要我们清晰地认识，别走弯路，下面介绍下区块链技术目前所存在的问题，开发者们或者区块链创业者们需要了解的。\n<!-- more -->\n# 1.标准不统一\n区块链是什么，目前业界还没有一个统一的清晰明确的概念。没有清晰统一的概念界定，又缺少权威的机构对区块链产品进行评定，这极易造成在涉及区块链的项目谈判、实施过程中出现问题，更谈不上区块链的大规模推广和应用。市场上已有的区块链应用也是“鱼龙混杂”，无法有效评价产品质量。\n区块链亟需建立一套统一的标准规范来界定其内涵和外延，并说明评判的方法，从而引导市场健康发展。然而区块链技术仍在不断创新变化，应用场景也在不断地探索中，过早的标准化会限制区块链技术的创新和行业的发展。因此，为适应目前区块链行业的发展阶段，区块链的标准化工作应从满足用户的角度出发，以测试某个区块链系统对用户需求的匹配度为原则，开展功能和性能测试的“黑盒”标准化，而不是过早地对区块链技术进行规范。\n# 2.衍生市场混乱\n处于炒作高峰期的区块链技术，不仅受到社会大众的广泛关注，而且存在着被不法分子所利用进行欺诈的情况。目前市场上存在着大量的打着数字货币的旗号，进行传销、诈骗、非法融资，这些数字货币利用门户网站、微博、微信公众号、贴吧等渠道进行宣传和招商活动，进行炒作，而不真正地拿着投资者的钱去研究、开发区块链引用上。\n# 3.安全威胁\n在大量资本融入到区块链行业中时，区块链技术得到了飞速的发展，同时，安全问题也得到了广泛的关注，近期许多数字货币交易平台出现黑客攻击，盗取用户的数字货币达到百亿元级别，这是交易平台技术上未达到安全的要求。而在区块链财务类系统中，私钥是用户身份的唯一凭证，在有些应用中，需要将用户的私钥跟用户身份进行绑定，这样就需要通过平台来对用户的私钥进行管理，这种情况下，秘钥的管理会存在安全问题，而这个问题，并不能通过区块链系统自身来解决，而是需要区块链系统外部来解决。\n# 4.难以监管\n区块链技术采用去中心化的理念，摆脱了传统中心化的管理机制所带来的诸多问题，但去中心化也意味着，主体不明确，监管困难，缺少对主体的有效控制，比如在上次的黑客勒索时间，犯罪分子以比特币作为交易赎金，导致其身份极其难以追查。\n\n大概介绍到这里，未完待续，我们一起来见证区块链的崛起，有意见，欢迎mail我，邮箱chenzuoli709@gmail.com.","slug":"区块链技术存在的问题","published":1,"updated":"2018-12-11T13:57:13.075Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kw001hfbs6mhics6zb","content":"<p>区块链技术，可以说是可以颠覆传统行业规则的一个革命性技术，去中性化、不可篡改、可回溯等特点，让全球化加速，让世界变得可以信赖，这不就是我们想要的世界吗，但是目前区块链经过了几年的发展，各种乱象横生，需要我们清晰地认识，别走弯路，下面介绍下区块链技术目前所存在的问题，开发者们或者区块链创业者们需要了解的。</p>\n<a id=\"more\"></a>\n<h1 id=\"1-标准不统一\"><a href=\"#1-标准不统一\" class=\"headerlink\" title=\"1.标准不统一\"></a>1.标准不统一</h1><p>区块链是什么，目前业界还没有一个统一的清晰明确的概念。没有清晰统一的概念界定，又缺少权威的机构对区块链产品进行评定，这极易造成在涉及区块链的项目谈判、实施过程中出现问题，更谈不上区块链的大规模推广和应用。市场上已有的区块链应用也是“鱼龙混杂”，无法有效评价产品质量。<br>区块链亟需建立一套统一的标准规范来界定其内涵和外延，并说明评判的方法，从而引导市场健康发展。然而区块链技术仍在不断创新变化，应用场景也在不断地探索中，过早的标准化会限制区块链技术的创新和行业的发展。因此，为适应目前区块链行业的发展阶段，区块链的标准化工作应从满足用户的角度出发，以测试某个区块链系统对用户需求的匹配度为原则，开展功能和性能测试的“黑盒”标准化，而不是过早地对区块链技术进行规范。</p>\n<h1 id=\"2-衍生市场混乱\"><a href=\"#2-衍生市场混乱\" class=\"headerlink\" title=\"2.衍生市场混乱\"></a>2.衍生市场混乱</h1><p>处于炒作高峰期的区块链技术，不仅受到社会大众的广泛关注，而且存在着被不法分子所利用进行欺诈的情况。目前市场上存在着大量的打着数字货币的旗号，进行传销、诈骗、非法融资，这些数字货币利用门户网站、微博、微信公众号、贴吧等渠道进行宣传和招商活动，进行炒作，而不真正地拿着投资者的钱去研究、开发区块链引用上。</p>\n<h1 id=\"3-安全威胁\"><a href=\"#3-安全威胁\" class=\"headerlink\" title=\"3.安全威胁\"></a>3.安全威胁</h1><p>在大量资本融入到区块链行业中时，区块链技术得到了飞速的发展，同时，安全问题也得到了广泛的关注，近期许多数字货币交易平台出现黑客攻击，盗取用户的数字货币达到百亿元级别，这是交易平台技术上未达到安全的要求。而在区块链财务类系统中，私钥是用户身份的唯一凭证，在有些应用中，需要将用户的私钥跟用户身份进行绑定，这样就需要通过平台来对用户的私钥进行管理，这种情况下，秘钥的管理会存在安全问题，而这个问题，并不能通过区块链系统自身来解决，而是需要区块链系统外部来解决。</p>\n<h1 id=\"4-难以监管\"><a href=\"#4-难以监管\" class=\"headerlink\" title=\"4.难以监管\"></a>4.难以监管</h1><p>区块链技术采用去中心化的理念，摆脱了传统中心化的管理机制所带来的诸多问题，但去中心化也意味着，主体不明确，监管困难，缺少对主体的有效控制，比如在上次的黑客勒索时间，犯罪分子以比特币作为交易赎金，导致其身份极其难以追查。</p>\n<p>大概介绍到这里，未完待续，我们一起来见证区块链的崛起，有意见，欢迎mail我，邮箱<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>.</p>\n","site":{"data":{}},"excerpt":"<p>区块链技术，可以说是可以颠覆传统行业规则的一个革命性技术，去中性化、不可篡改、可回溯等特点，让全球化加速，让世界变得可以信赖，这不就是我们想要的世界吗，但是目前区块链经过了几年的发展，各种乱象横生，需要我们清晰地认识，别走弯路，下面介绍下区块链技术目前所存在的问题，开发者们或者区块链创业者们需要了解的。</p>","more":"<h1 id=\"1-标准不统一\"><a href=\"#1-标准不统一\" class=\"headerlink\" title=\"1.标准不统一\"></a>1.标准不统一</h1><p>区块链是什么，目前业界还没有一个统一的清晰明确的概念。没有清晰统一的概念界定，又缺少权威的机构对区块链产品进行评定，这极易造成在涉及区块链的项目谈判、实施过程中出现问题，更谈不上区块链的大规模推广和应用。市场上已有的区块链应用也是“鱼龙混杂”，无法有效评价产品质量。<br>区块链亟需建立一套统一的标准规范来界定其内涵和外延，并说明评判的方法，从而引导市场健康发展。然而区块链技术仍在不断创新变化，应用场景也在不断地探索中，过早的标准化会限制区块链技术的创新和行业的发展。因此，为适应目前区块链行业的发展阶段，区块链的标准化工作应从满足用户的角度出发，以测试某个区块链系统对用户需求的匹配度为原则，开展功能和性能测试的“黑盒”标准化，而不是过早地对区块链技术进行规范。</p>\n<h1 id=\"2-衍生市场混乱\"><a href=\"#2-衍生市场混乱\" class=\"headerlink\" title=\"2.衍生市场混乱\"></a>2.衍生市场混乱</h1><p>处于炒作高峰期的区块链技术，不仅受到社会大众的广泛关注，而且存在着被不法分子所利用进行欺诈的情况。目前市场上存在着大量的打着数字货币的旗号，进行传销、诈骗、非法融资，这些数字货币利用门户网站、微博、微信公众号、贴吧等渠道进行宣传和招商活动，进行炒作，而不真正地拿着投资者的钱去研究、开发区块链引用上。</p>\n<h1 id=\"3-安全威胁\"><a href=\"#3-安全威胁\" class=\"headerlink\" title=\"3.安全威胁\"></a>3.安全威胁</h1><p>在大量资本融入到区块链行业中时，区块链技术得到了飞速的发展，同时，安全问题也得到了广泛的关注，近期许多数字货币交易平台出现黑客攻击，盗取用户的数字货币达到百亿元级别，这是交易平台技术上未达到安全的要求。而在区块链财务类系统中，私钥是用户身份的唯一凭证，在有些应用中，需要将用户的私钥跟用户身份进行绑定，这样就需要通过平台来对用户的私钥进行管理，这种情况下，秘钥的管理会存在安全问题，而这个问题，并不能通过区块链系统自身来解决，而是需要区块链系统外部来解决。</p>\n<h1 id=\"4-难以监管\"><a href=\"#4-难以监管\" class=\"headerlink\" title=\"4.难以监管\"></a>4.难以监管</h1><p>区块链技术采用去中心化的理念，摆脱了传统中心化的管理机制所带来的诸多问题，但去中心化也意味着，主体不明确，监管困难，缺少对主体的有效控制，比如在上次的黑客勒索时间，犯罪分子以比特币作为交易赎金，导致其身份极其难以追查。</p>\n<p>大概介绍到这里，未完待续，我们一起来见证区块链的崛起，有意见，欢迎mail我，邮箱<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>.</p>"},{"title":"单台服务器安装spark、hadoop服务文档","date":"2017-12-26T10:16:51.000Z","_content":"spark作为分布式计算引擎，如果内存足够，是需要很少的磁盘空间的，在shuffle可能用到，在reduce阶段一定会用到，它是基于hdfs作为存储介质的，所以在使用spark时，应该搭建一个hdfs。\n<!-- more -->\n# 安装JDK1.8\n安装并配置环境变量，步骤略。\n# 安装scala2.11.8\n安装并配置环境变量，步骤略。\n# hadoop伪分布式搭建\n## 关闭防火墙\n## 配置本机对本机免秘钥登录\nssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\nssh-copy-id ip\n其中ip为本机ip\nSsh ip\n首次本机ssh本机需要输入密码或者yes，输入即可，第二次或者以后就不需要输入参数了。\n## 下载hadoop-2.7.4.tar.gz包\n## 解压\n## 修改配置文件HADOOP_HOME/etc/hadoop下\n### Hadoop.env.sh\n修改JAVA_HOME为jdk路径；\n\n### Core-site.xml\nFs.defaltFS属性修改为namenode的ip\nHadoop.tmp.dir修改为自定义目录，并创建好该目录\n```\n<property>\n  \t<name>fs.defaultFS</name>\n  \t<value>hdfs://192.168.109.235:9000</value>\n</property>\n<property>\n  \t<name>hadoop.tmp.dir</name>\n  \t<value>/root/chen/hadoop/data/temp</value>\n</property>\n<property>\n  \t<name>fs.trash.interval</name>\n  \t<value>1440</value>\n</property>\n```\n### Hdfs-site.xml\n使用默认值即可\n```\n<property>\n    <name>dfs.replication</name>\n    <value>2</value>\n</property>\n<property>\n    <name>dfs.permissions</name>\n    <value>false</value>\n</property>\n```\n### Mapred-env.sh\n修改JAVA_HOME为jdk路径，其他默认。\n\n### Mapred-site.xml\n```\n<property>\n   \t<name>mapreduce.framework.name</name>\n   \t<value>yarn</value>\n</property>\n```\n### yarn-env.sh\n修改JAVA_HOME为java安装路径\n\n### yarn-site.xml\n```\nyarn.resourcemanager.hostname属性指定为namenode的ip地址。\n<property>\n    <name>yarn.nodemanager.aux-services</name>\n    <value>mapreduce_shuffle</value>\n</property>\n<property>\n    <name>yarn.log-aggregation-enable</name>\n    <value>true</value>\n</property>\n<property>\n   \t<description>The hostname of the RM.</description>\n   \t<name>yarn.resourcemanager.hostname</name>\n   \t<value>192.168.109.235</value>\n</property>\n<property>\n\t<name>yarn.nodemanager.resource.memory-mb</name>\n\t<value>2048</value>\n</property>\n```\n### 添加slaves文件\n在HADOOP_HOME/etc/hadoop文件夹下添加slaves文件，指定datanode节点\n添加localhost即可。\n\t\n## 格式化namenode\n./bin/hdfs namenode –format\n\n## 启动hdfs\n./sbin/start-all.sh\n\n## jps查看节点服务的启动情况\n如果启动正常，那么应该有\nNamenode\nSecondaryNamenode\nResourcemanager\nNodemanager\nDataNode\n这5个角色\nWeb Ui访问：http://ip:50070\n---\n# Spark搭建\n## 下载并解压spark-2.1.0-bin-hadoop2.7.tgz\n## 修改配置文件\n### cp slaves.template slaves\n### cp spark-env.sh.template spark-env.sh\n### cp spark-defaults.conf.template spark-defaults.conf\n### vi spark-env.sh\n增加参数\n```\nSPARK_MASTER_HOST=修改为ip\nSPARK_MASTER_PORT=7077\nSPARK_WORKER_CORES=2\nSPARK_WORKER_MEMORY=4g\nSPARK_WORKER_INSTANCES=3\nHADOOP_CONF_DIR=/chen/hadoop2.7/hadoop-2.7.4/etc/hadoop修改为hadoop配置文件的位置\nSPARK_DRIVER_MEMORY=1024M\nJAVA_HOME=/chen/jdk8/jdk1.8.0_144修改为jdk的路径\nMAVEN_OPTS=\"-Xms1024m -Xmx4096m -XX:PermSize=1024m\"\n```\n### vi spark-deafults.conf\n![spark-default.conf](单台服务器安装spark、hadoop服务文档\\spark-default.conf.png)\n其中需要修改hdfs的ip地址，并创建路径/user/spark/logs\n## 启动spark\n./sbin/start-all.sh\n正常启动的话应该有：\n1个Master\n3个Worker\n两个角色\nWeb Ui访问http://ip:8080\n\n","source":"_posts/单台服务器安装spark、hadoop服务文档.md","raw":"---\ntitle: 单台服务器安装spark、hadoop服务文档\ntags: [spark,hadoop]\ncategories: 大数据\ndate: 2017-12-26 18:16:51\n---\nspark作为分布式计算引擎，如果内存足够，是需要很少的磁盘空间的，在shuffle可能用到，在reduce阶段一定会用到，它是基于hdfs作为存储介质的，所以在使用spark时，应该搭建一个hdfs。\n<!-- more -->\n# 安装JDK1.8\n安装并配置环境变量，步骤略。\n# 安装scala2.11.8\n安装并配置环境变量，步骤略。\n# hadoop伪分布式搭建\n## 关闭防火墙\n## 配置本机对本机免秘钥登录\nssh-keygen -t rsa -P '' -f ~/.ssh/id_rsa\nssh-copy-id ip\n其中ip为本机ip\nSsh ip\n首次本机ssh本机需要输入密码或者yes，输入即可，第二次或者以后就不需要输入参数了。\n## 下载hadoop-2.7.4.tar.gz包\n## 解压\n## 修改配置文件HADOOP_HOME/etc/hadoop下\n### Hadoop.env.sh\n修改JAVA_HOME为jdk路径；\n\n### Core-site.xml\nFs.defaltFS属性修改为namenode的ip\nHadoop.tmp.dir修改为自定义目录，并创建好该目录\n```\n<property>\n  \t<name>fs.defaultFS</name>\n  \t<value>hdfs://192.168.109.235:9000</value>\n</property>\n<property>\n  \t<name>hadoop.tmp.dir</name>\n  \t<value>/root/chen/hadoop/data/temp</value>\n</property>\n<property>\n  \t<name>fs.trash.interval</name>\n  \t<value>1440</value>\n</property>\n```\n### Hdfs-site.xml\n使用默认值即可\n```\n<property>\n    <name>dfs.replication</name>\n    <value>2</value>\n</property>\n<property>\n    <name>dfs.permissions</name>\n    <value>false</value>\n</property>\n```\n### Mapred-env.sh\n修改JAVA_HOME为jdk路径，其他默认。\n\n### Mapred-site.xml\n```\n<property>\n   \t<name>mapreduce.framework.name</name>\n   \t<value>yarn</value>\n</property>\n```\n### yarn-env.sh\n修改JAVA_HOME为java安装路径\n\n### yarn-site.xml\n```\nyarn.resourcemanager.hostname属性指定为namenode的ip地址。\n<property>\n    <name>yarn.nodemanager.aux-services</name>\n    <value>mapreduce_shuffle</value>\n</property>\n<property>\n    <name>yarn.log-aggregation-enable</name>\n    <value>true</value>\n</property>\n<property>\n   \t<description>The hostname of the RM.</description>\n   \t<name>yarn.resourcemanager.hostname</name>\n   \t<value>192.168.109.235</value>\n</property>\n<property>\n\t<name>yarn.nodemanager.resource.memory-mb</name>\n\t<value>2048</value>\n</property>\n```\n### 添加slaves文件\n在HADOOP_HOME/etc/hadoop文件夹下添加slaves文件，指定datanode节点\n添加localhost即可。\n\t\n## 格式化namenode\n./bin/hdfs namenode –format\n\n## 启动hdfs\n./sbin/start-all.sh\n\n## jps查看节点服务的启动情况\n如果启动正常，那么应该有\nNamenode\nSecondaryNamenode\nResourcemanager\nNodemanager\nDataNode\n这5个角色\nWeb Ui访问：http://ip:50070\n---\n# Spark搭建\n## 下载并解压spark-2.1.0-bin-hadoop2.7.tgz\n## 修改配置文件\n### cp slaves.template slaves\n### cp spark-env.sh.template spark-env.sh\n### cp spark-defaults.conf.template spark-defaults.conf\n### vi spark-env.sh\n增加参数\n```\nSPARK_MASTER_HOST=修改为ip\nSPARK_MASTER_PORT=7077\nSPARK_WORKER_CORES=2\nSPARK_WORKER_MEMORY=4g\nSPARK_WORKER_INSTANCES=3\nHADOOP_CONF_DIR=/chen/hadoop2.7/hadoop-2.7.4/etc/hadoop修改为hadoop配置文件的位置\nSPARK_DRIVER_MEMORY=1024M\nJAVA_HOME=/chen/jdk8/jdk1.8.0_144修改为jdk的路径\nMAVEN_OPTS=\"-Xms1024m -Xmx4096m -XX:PermSize=1024m\"\n```\n### vi spark-deafults.conf\n![spark-default.conf](单台服务器安装spark、hadoop服务文档\\spark-default.conf.png)\n其中需要修改hdfs的ip地址，并创建路径/user/spark/logs\n## 启动spark\n./sbin/start-all.sh\n正常启动的话应该有：\n1个Master\n3个Worker\n两个角色\nWeb Ui访问http://ip:8080\n\n","slug":"单台服务器安装spark、hadoop服务文档","published":1,"updated":"2018-12-11T13:57:13.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0kw001ifbs6uoq1fgdo","content":"<p>spark作为分布式计算引擎，如果内存足够，是需要很少的磁盘空间的，在shuffle可能用到，在reduce阶段一定会用到，它是基于hdfs作为存储介质的，所以在使用spark时，应该搭建一个hdfs。</p>\n<a id=\"more\"></a>\n<h1 id=\"安装JDK1-8\"><a href=\"#安装JDK1-8\" class=\"headerlink\" title=\"安装JDK1.8\"></a>安装JDK1.8</h1><p>安装并配置环境变量，步骤略。</p>\n<h1 id=\"安装scala2-11-8\"><a href=\"#安装scala2-11-8\" class=\"headerlink\" title=\"安装scala2.11.8\"></a>安装scala2.11.8</h1><p>安装并配置环境变量，步骤略。</p>\n<h1 id=\"hadoop伪分布式搭建\"><a href=\"#hadoop伪分布式搭建\" class=\"headerlink\" title=\"hadoop伪分布式搭建\"></a>hadoop伪分布式搭建</h1><h2 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h2><h2 id=\"配置本机对本机免秘钥登录\"><a href=\"#配置本机对本机免秘钥登录\" class=\"headerlink\" title=\"配置本机对本机免秘钥登录\"></a>配置本机对本机免秘钥登录</h2><p>ssh-keygen -t rsa -P ‘’ -f ~/.ssh/id_rsa<br>ssh-copy-id ip<br>其中ip为本机ip<br>Ssh ip<br>首次本机ssh本机需要输入密码或者yes，输入即可，第二次或者以后就不需要输入参数了。</p>\n<h2 id=\"下载hadoop-2-7-4-tar-gz包\"><a href=\"#下载hadoop-2-7-4-tar-gz包\" class=\"headerlink\" title=\"下载hadoop-2.7.4.tar.gz包\"></a>下载hadoop-2.7.4.tar.gz包</h2><h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><h2 id=\"修改配置文件HADOOP-HOME-etc-hadoop下\"><a href=\"#修改配置文件HADOOP-HOME-etc-hadoop下\" class=\"headerlink\" title=\"修改配置文件HADOOP_HOME/etc/hadoop下\"></a>修改配置文件HADOOP_HOME/etc/hadoop下</h2><h3 id=\"Hadoop-env-sh\"><a href=\"#Hadoop-env-sh\" class=\"headerlink\" title=\"Hadoop.env.sh\"></a>Hadoop.env.sh</h3><p>修改JAVA_HOME为jdk路径；</p>\n<h3 id=\"Core-site-xml\"><a href=\"#Core-site-xml\" class=\"headerlink\" title=\"Core-site.xml\"></a>Core-site.xml</h3><p>Fs.defaltFS属性修改为namenode的ip<br>Hadoop.tmp.dir修改为自定义目录，并创建好该目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  \t&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class=\"line\">  \t&lt;value&gt;hdfs://192.168.109.235:9000&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  \t&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class=\"line\">  \t&lt;value&gt;/root/chen/hadoop/data/temp&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  \t&lt;name&gt;fs.trash.interval&lt;/name&gt;</span><br><span class=\"line\">  \t&lt;value&gt;1440&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hdfs-site-xml\"><a href=\"#Hdfs-site-xml\" class=\"headerlink\" title=\"Hdfs-site.xml\"></a>Hdfs-site.xml</h3><p>使用默认值即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;2&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;false&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mapred-env-sh\"><a href=\"#Mapred-env-sh\" class=\"headerlink\" title=\"Mapred-env.sh\"></a>Mapred-env.sh</h3><p>修改JAVA_HOME为jdk路径，其他默认。</p>\n<h3 id=\"Mapred-site-xml\"><a href=\"#Mapred-site-xml\" class=\"headerlink\" title=\"Mapred-site.xml\"></a>Mapred-site.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   \t&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">   \t&lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"yarn-env-sh\"><a href=\"#yarn-env-sh\" class=\"headerlink\" title=\"yarn-env.sh\"></a>yarn-env.sh</h3><p>修改JAVA_HOME为java安装路径</p>\n<h3 id=\"yarn-site-xml\"><a href=\"#yarn-site-xml\" class=\"headerlink\" title=\"yarn-site.xml\"></a>yarn-site.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn.resourcemanager.hostname属性指定为namenode的ip地址。</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;true&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   \t&lt;description&gt;The hostname of the RM.&lt;/description&gt;</span><br><span class=\"line\">   \t&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class=\"line\">   \t&lt;value&gt;192.168.109.235&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">\t&lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class=\"line\">\t&lt;value&gt;2048&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加slaves文件\"><a href=\"#添加slaves文件\" class=\"headerlink\" title=\"添加slaves文件\"></a>添加slaves文件</h3><p>在HADOOP_HOME/etc/hadoop文件夹下添加slaves文件，指定datanode节点<br>添加localhost即可。</p>\n<h2 id=\"格式化namenode\"><a href=\"#格式化namenode\" class=\"headerlink\" title=\"格式化namenode\"></a>格式化namenode</h2><p>./bin/hdfs namenode –format</p>\n<h2 id=\"启动hdfs\"><a href=\"#启动hdfs\" class=\"headerlink\" title=\"启动hdfs\"></a>启动hdfs</h2><p>./sbin/start-all.sh</p>\n<h2 id=\"jps查看节点服务的启动情况\"><a href=\"#jps查看节点服务的启动情况\" class=\"headerlink\" title=\"jps查看节点服务的启动情况\"></a>jps查看节点服务的启动情况</h2><p>如果启动正常，那么应该有<br>Namenode<br>SecondaryNamenode<br>Resourcemanager<br>Nodemanager<br>DataNode<br>这5个角色</p>\n<h2 id=\"Web-Ui访问：http-ip-50070\"><a href=\"#Web-Ui访问：http-ip-50070\" class=\"headerlink\" title=\"Web Ui访问：http://ip:50070\"></a>Web Ui访问：<a href=\"http://ip:50070\" target=\"_blank\" rel=\"noopener\">http://ip:50070</a></h2><h1 id=\"Spark搭建\"><a href=\"#Spark搭建\" class=\"headerlink\" title=\"Spark搭建\"></a>Spark搭建</h1><h2 id=\"下载并解压spark-2-1-0-bin-hadoop2-7-tgz\"><a href=\"#下载并解压spark-2-1-0-bin-hadoop2-7-tgz\" class=\"headerlink\" title=\"下载并解压spark-2.1.0-bin-hadoop2.7.tgz\"></a>下载并解压spark-2.1.0-bin-hadoop2.7.tgz</h2><h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><h3 id=\"cp-slaves-template-slaves\"><a href=\"#cp-slaves-template-slaves\" class=\"headerlink\" title=\"cp slaves.template slaves\"></a>cp slaves.template slaves</h3><h3 id=\"cp-spark-env-sh-template-spark-env-sh\"><a href=\"#cp-spark-env-sh-template-spark-env-sh\" class=\"headerlink\" title=\"cp spark-env.sh.template spark-env.sh\"></a>cp spark-env.sh.template spark-env.sh</h3><h3 id=\"cp-spark-defaults-conf-template-spark-defaults-conf\"><a href=\"#cp-spark-defaults-conf-template-spark-defaults-conf\" class=\"headerlink\" title=\"cp spark-defaults.conf.template spark-defaults.conf\"></a>cp spark-defaults.conf.template spark-defaults.conf</h3><h3 id=\"vi-spark-env-sh\"><a href=\"#vi-spark-env-sh\" class=\"headerlink\" title=\"vi spark-env.sh\"></a>vi spark-env.sh</h3><p>增加参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPARK_MASTER_HOST=修改为ip</span><br><span class=\"line\">SPARK_MASTER_PORT=7077</span><br><span class=\"line\">SPARK_WORKER_CORES=2</span><br><span class=\"line\">SPARK_WORKER_MEMORY=4g</span><br><span class=\"line\">SPARK_WORKER_INSTANCES=3</span><br><span class=\"line\">HADOOP_CONF_DIR=/chen/hadoop2.7/hadoop-2.7.4/etc/hadoop修改为hadoop配置文件的位置</span><br><span class=\"line\">SPARK_DRIVER_MEMORY=1024M</span><br><span class=\"line\">JAVA_HOME=/chen/jdk8/jdk1.8.0_144修改为jdk的路径</span><br><span class=\"line\">MAVEN_OPTS=&quot;-Xms1024m -Xmx4096m -XX:PermSize=1024m&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vi-spark-deafults-conf\"><a href=\"#vi-spark-deafults-conf\" class=\"headerlink\" title=\"vi spark-deafults.conf\"></a>vi spark-deafults.conf</h3><p><img src=\"/2017/12/26/单台服务器安装spark、hadoop服务文档/%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85spark%E3%80%81hadoop%E6%9C%8D%E5%8A%A1%E6%96%87%E6%A1%A3%5Cspark-default.conf.png\" alt=\"spark-default.conf\"><br>其中需要修改hdfs的ip地址，并创建路径/user/spark/logs</p>\n<h2 id=\"启动spark\"><a href=\"#启动spark\" class=\"headerlink\" title=\"启动spark\"></a>启动spark</h2><p>./sbin/start-all.sh<br>正常启动的话应该有：<br>1个Master<br>3个Worker<br>两个角色<br>Web Ui访问<a href=\"http://ip:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>\n","site":{"data":{}},"excerpt":"<p>spark作为分布式计算引擎，如果内存足够，是需要很少的磁盘空间的，在shuffle可能用到，在reduce阶段一定会用到，它是基于hdfs作为存储介质的，所以在使用spark时，应该搭建一个hdfs。</p>","more":"<h1 id=\"安装JDK1-8\"><a href=\"#安装JDK1-8\" class=\"headerlink\" title=\"安装JDK1.8\"></a>安装JDK1.8</h1><p>安装并配置环境变量，步骤略。</p>\n<h1 id=\"安装scala2-11-8\"><a href=\"#安装scala2-11-8\" class=\"headerlink\" title=\"安装scala2.11.8\"></a>安装scala2.11.8</h1><p>安装并配置环境变量，步骤略。</p>\n<h1 id=\"hadoop伪分布式搭建\"><a href=\"#hadoop伪分布式搭建\" class=\"headerlink\" title=\"hadoop伪分布式搭建\"></a>hadoop伪分布式搭建</h1><h2 id=\"关闭防火墙\"><a href=\"#关闭防火墙\" class=\"headerlink\" title=\"关闭防火墙\"></a>关闭防火墙</h2><h2 id=\"配置本机对本机免秘钥登录\"><a href=\"#配置本机对本机免秘钥登录\" class=\"headerlink\" title=\"配置本机对本机免秘钥登录\"></a>配置本机对本机免秘钥登录</h2><p>ssh-keygen -t rsa -P ‘’ -f ~/.ssh/id_rsa<br>ssh-copy-id ip<br>其中ip为本机ip<br>Ssh ip<br>首次本机ssh本机需要输入密码或者yes，输入即可，第二次或者以后就不需要输入参数了。</p>\n<h2 id=\"下载hadoop-2-7-4-tar-gz包\"><a href=\"#下载hadoop-2-7-4-tar-gz包\" class=\"headerlink\" title=\"下载hadoop-2.7.4.tar.gz包\"></a>下载hadoop-2.7.4.tar.gz包</h2><h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><h2 id=\"修改配置文件HADOOP-HOME-etc-hadoop下\"><a href=\"#修改配置文件HADOOP-HOME-etc-hadoop下\" class=\"headerlink\" title=\"修改配置文件HADOOP_HOME/etc/hadoop下\"></a>修改配置文件HADOOP_HOME/etc/hadoop下</h2><h3 id=\"Hadoop-env-sh\"><a href=\"#Hadoop-env-sh\" class=\"headerlink\" title=\"Hadoop.env.sh\"></a>Hadoop.env.sh</h3><p>修改JAVA_HOME为jdk路径；</p>\n<h3 id=\"Core-site-xml\"><a href=\"#Core-site-xml\" class=\"headerlink\" title=\"Core-site.xml\"></a>Core-site.xml</h3><p>Fs.defaltFS属性修改为namenode的ip<br>Hadoop.tmp.dir修改为自定义目录，并创建好该目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  \t&lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class=\"line\">  \t&lt;value&gt;hdfs://192.168.109.235:9000&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  \t&lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class=\"line\">  \t&lt;value&gt;/root/chen/hadoop/data/temp&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">  \t&lt;name&gt;fs.trash.interval&lt;/name&gt;</span><br><span class=\"line\">  \t&lt;value&gt;1440&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Hdfs-site-xml\"><a href=\"#Hdfs-site-xml\" class=\"headerlink\" title=\"Hdfs-site.xml\"></a>Hdfs-site.xml</h3><p>使用默认值即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;2&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;dfs.permissions&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;false&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Mapred-env-sh\"><a href=\"#Mapred-env-sh\" class=\"headerlink\" title=\"Mapred-env.sh\"></a>Mapred-env.sh</h3><p>修改JAVA_HOME为jdk路径，其他默认。</p>\n<h3 id=\"Mapred-site-xml\"><a href=\"#Mapred-site-xml\" class=\"headerlink\" title=\"Mapred-site.xml\"></a>Mapred-site.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   \t&lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class=\"line\">   \t&lt;value&gt;yarn&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"yarn-env-sh\"><a href=\"#yarn-env-sh\" class=\"headerlink\" title=\"yarn-env.sh\"></a>yarn-env.sh</h3><p>修改JAVA_HOME为java安装路径</p>\n<h3 id=\"yarn-site-xml\"><a href=\"#yarn-site-xml\" class=\"headerlink\" title=\"yarn-site.xml\"></a>yarn-site.xml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn.resourcemanager.hostname属性指定为namenode的ip地址。</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">    &lt;name&gt;yarn.log-aggregation-enable&lt;/name&gt;</span><br><span class=\"line\">    &lt;value&gt;true&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">   \t&lt;description&gt;The hostname of the RM.&lt;/description&gt;</span><br><span class=\"line\">   \t&lt;name&gt;yarn.resourcemanager.hostname&lt;/name&gt;</span><br><span class=\"line\">   \t&lt;value&gt;192.168.109.235&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br><span class=\"line\">&lt;property&gt;</span><br><span class=\"line\">\t&lt;name&gt;yarn.nodemanager.resource.memory-mb&lt;/name&gt;</span><br><span class=\"line\">\t&lt;value&gt;2048&lt;/value&gt;</span><br><span class=\"line\">&lt;/property&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加slaves文件\"><a href=\"#添加slaves文件\" class=\"headerlink\" title=\"添加slaves文件\"></a>添加slaves文件</h3><p>在HADOOP_HOME/etc/hadoop文件夹下添加slaves文件，指定datanode节点<br>添加localhost即可。</p>\n<h2 id=\"格式化namenode\"><a href=\"#格式化namenode\" class=\"headerlink\" title=\"格式化namenode\"></a>格式化namenode</h2><p>./bin/hdfs namenode –format</p>\n<h2 id=\"启动hdfs\"><a href=\"#启动hdfs\" class=\"headerlink\" title=\"启动hdfs\"></a>启动hdfs</h2><p>./sbin/start-all.sh</p>\n<h2 id=\"jps查看节点服务的启动情况\"><a href=\"#jps查看节点服务的启动情况\" class=\"headerlink\" title=\"jps查看节点服务的启动情况\"></a>jps查看节点服务的启动情况</h2><p>如果启动正常，那么应该有<br>Namenode<br>SecondaryNamenode<br>Resourcemanager<br>Nodemanager<br>DataNode<br>这5个角色</p>\n<h2 id=\"Web-Ui访问：http-ip-50070\"><a href=\"#Web-Ui访问：http-ip-50070\" class=\"headerlink\" title=\"Web Ui访问：http://ip:50070\"></a>Web Ui访问：<a href=\"http://ip:50070\" target=\"_blank\" rel=\"noopener\">http://ip:50070</a></h2><h1 id=\"Spark搭建\"><a href=\"#Spark搭建\" class=\"headerlink\" title=\"Spark搭建\"></a>Spark搭建</h1><h2 id=\"下载并解压spark-2-1-0-bin-hadoop2-7-tgz\"><a href=\"#下载并解压spark-2-1-0-bin-hadoop2-7-tgz\" class=\"headerlink\" title=\"下载并解压spark-2.1.0-bin-hadoop2.7.tgz\"></a>下载并解压spark-2.1.0-bin-hadoop2.7.tgz</h2><h2 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h2><h3 id=\"cp-slaves-template-slaves\"><a href=\"#cp-slaves-template-slaves\" class=\"headerlink\" title=\"cp slaves.template slaves\"></a>cp slaves.template slaves</h3><h3 id=\"cp-spark-env-sh-template-spark-env-sh\"><a href=\"#cp-spark-env-sh-template-spark-env-sh\" class=\"headerlink\" title=\"cp spark-env.sh.template spark-env.sh\"></a>cp spark-env.sh.template spark-env.sh</h3><h3 id=\"cp-spark-defaults-conf-template-spark-defaults-conf\"><a href=\"#cp-spark-defaults-conf-template-spark-defaults-conf\" class=\"headerlink\" title=\"cp spark-defaults.conf.template spark-defaults.conf\"></a>cp spark-defaults.conf.template spark-defaults.conf</h3><h3 id=\"vi-spark-env-sh\"><a href=\"#vi-spark-env-sh\" class=\"headerlink\" title=\"vi spark-env.sh\"></a>vi spark-env.sh</h3><p>增加参数</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SPARK_MASTER_HOST=修改为ip</span><br><span class=\"line\">SPARK_MASTER_PORT=7077</span><br><span class=\"line\">SPARK_WORKER_CORES=2</span><br><span class=\"line\">SPARK_WORKER_MEMORY=4g</span><br><span class=\"line\">SPARK_WORKER_INSTANCES=3</span><br><span class=\"line\">HADOOP_CONF_DIR=/chen/hadoop2.7/hadoop-2.7.4/etc/hadoop修改为hadoop配置文件的位置</span><br><span class=\"line\">SPARK_DRIVER_MEMORY=1024M</span><br><span class=\"line\">JAVA_HOME=/chen/jdk8/jdk1.8.0_144修改为jdk的路径</span><br><span class=\"line\">MAVEN_OPTS=&quot;-Xms1024m -Xmx4096m -XX:PermSize=1024m&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"vi-spark-deafults-conf\"><a href=\"#vi-spark-deafults-conf\" class=\"headerlink\" title=\"vi spark-deafults.conf\"></a>vi spark-deafults.conf</h3><p><img src=\"/2017/12/26/单台服务器安装spark、hadoop服务文档/%E5%8D%95%E5%8F%B0%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85spark%E3%80%81hadoop%E6%9C%8D%E5%8A%A1%E6%96%87%E6%A1%A3%5Cspark-default.conf.png\" alt=\"spark-default.conf\"><br>其中需要修改hdfs的ip地址，并创建路径/user/spark/logs</p>\n<h2 id=\"启动spark\"><a href=\"#启动spark\" class=\"headerlink\" title=\"启动spark\"></a>启动spark</h2><p>./sbin/start-all.sh<br>正常启动的话应该有：<br>1个Master<br>3个Worker<br>两个角色<br>Web Ui访问<a href=\"http://ip:8080\" target=\"_blank\" rel=\"noopener\">http://ip:8080</a></p>"},{"title":"各国诺贝尔奖数","date":"2019-01-02T13:26:15.000Z","_content":"Nobel prizes.\n诺贝尔奖数：\n<!-- more -->\n排名如下：\nUS: 377\t\t\t\t美国\nUK: 130\t\t\t\t英国\nGermany: 108\t\t德国\nFrance: 70\t\t\t法国\nSweden: 32\t\t\t瑞典\nJapan: 27\t\t\t日本\nCanada: 26\t\t\t加拿大\nSwitzerland: 26\t\t瑞士\nRussia 25\t\t\t俄国\nAustria: 21\t\t\t奥地利\nNetherlands: 21\t\t荷兰\t\t\nItaly: 20\t\t\t意大利\nPoland: 14\t\t\t波兰\nDenmark: 13\t\t\t丹麦\nNorway: 13\t\t\t挪威\nHungary: 13\t\t\t匈牙利\t\nAustralia: 12\t\t澳大利亚\nIsrael: 12\t\t\t以色列\nBelgium: 11\t\t\t比利时\nIndia: 10\t\t\t印度\nSouth Africa: 10\t南非\nChina: 8\t\t\t中国\nSpain: 8\t\t\t西班牙\n\n\n中国：\n\t大陆：第十四世达赖喇嘛  刘晓波  莫言  屠呦呦\n\t台湾：丁肇中  李遠哲  李政道  杨振宁","source":"_posts/各国得诺奖数.md","raw":"---\ntitle: 各国诺贝尔奖数\ntags: 诺贝尔奖\ndate: 2019-01-02 21:26:15\ncategories: 世界排名\n---\nNobel prizes.\n诺贝尔奖数：\n<!-- more -->\n排名如下：\nUS: 377\t\t\t\t美国\nUK: 130\t\t\t\t英国\nGermany: 108\t\t德国\nFrance: 70\t\t\t法国\nSweden: 32\t\t\t瑞典\nJapan: 27\t\t\t日本\nCanada: 26\t\t\t加拿大\nSwitzerland: 26\t\t瑞士\nRussia 25\t\t\t俄国\nAustria: 21\t\t\t奥地利\nNetherlands: 21\t\t荷兰\t\t\nItaly: 20\t\t\t意大利\nPoland: 14\t\t\t波兰\nDenmark: 13\t\t\t丹麦\nNorway: 13\t\t\t挪威\nHungary: 13\t\t\t匈牙利\t\nAustralia: 12\t\t澳大利亚\nIsrael: 12\t\t\t以色列\nBelgium: 11\t\t\t比利时\nIndia: 10\t\t\t印度\nSouth Africa: 10\t南非\nChina: 8\t\t\t中国\nSpain: 8\t\t\t西班牙\n\n\n中国：\n\t大陆：第十四世达赖喇嘛  刘晓波  莫言  屠呦呦\n\t台湾：丁肇中  李遠哲  李政道  杨振宁","slug":"各国得诺奖数","published":1,"updated":"2019-04-21T03:47:37.734Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l0001jfbs68dlql9o4","content":"<p>Nobel prizes.<br>诺贝尔奖数：</p>\n<a id=\"more\"></a>\n<p>排名如下：<br>US: 377                美国<br>UK: 130                英国<br>Germany: 108        德国<br>France: 70            法国<br>Sweden: 32            瑞典<br>Japan: 27            日本<br>Canada: 26            加拿大<br>Switzerland: 26        瑞士<br>Russia 25            俄国<br>Austria: 21            奥地利<br>Netherlands: 21        荷兰<br>Italy: 20            意大利<br>Poland: 14            波兰<br>Denmark: 13            丹麦<br>Norway: 13            挪威<br>Hungary: 13            匈牙利<br>Australia: 12        澳大利亚<br>Israel: 12            以色列<br>Belgium: 11            比利时<br>India: 10            印度<br>South Africa: 10    南非<br>China: 8            中国<br>Spain: 8            西班牙</p>\n<p>中国：<br>    大陆：第十四世达赖喇嘛  刘晓波  莫言  屠呦呦<br>    台湾：丁肇中  李遠哲  李政道  杨振宁</p>\n","site":{"data":{}},"excerpt":"<p>Nobel prizes.<br>诺贝尔奖数：</p>","more":"<p>排名如下：<br>US: 377                美国<br>UK: 130                英国<br>Germany: 108        德国<br>France: 70            法国<br>Sweden: 32            瑞典<br>Japan: 27            日本<br>Canada: 26            加拿大<br>Switzerland: 26        瑞士<br>Russia 25            俄国<br>Austria: 21            奥地利<br>Netherlands: 21        荷兰<br>Italy: 20            意大利<br>Poland: 14            波兰<br>Denmark: 13            丹麦<br>Norway: 13            挪威<br>Hungary: 13            匈牙利<br>Australia: 12        澳大利亚<br>Israel: 12            以色列<br>Belgium: 11            比利时<br>India: 10            印度<br>South Africa: 10    南非<br>China: 8            中国<br>Spain: 8            西班牙</p>\n<p>中国：<br>    大陆：第十四世达赖喇嘛  刘晓波  莫言  屠呦呦<br>    台湾：丁肇中  李遠哲  李政道  杨振宁</p>"},{"title":"印度处于领先地位的产品","date":"2019-01-02T13:26:15.000Z","_content":"印度处于领先地位的产品：\n<!-- more -->\n- 香蕉\n- 芒果\n- 番木瓜\n- 柠檬\n- 水牛奶\n- 山羊奶\n- 辣椒\n- 生姜\n- 鹰嘴豆\n- 小米\n- 黄麻\n- 木材燃料\n\n你用过或者吃过吗？","source":"_posts/印度处于领先地位的产品.md","raw":"---\ntitle: 印度处于领先地位的产品\ntags: 印度\ndate: 2019-01-02 21:26:15\ncategories: 世界排名\n---\n印度处于领先地位的产品：\n<!-- more -->\n- 香蕉\n- 芒果\n- 番木瓜\n- 柠檬\n- 水牛奶\n- 山羊奶\n- 辣椒\n- 生姜\n- 鹰嘴豆\n- 小米\n- 黄麻\n- 木材燃料\n\n你用过或者吃过吗？","slug":"印度处于领先地位的产品","published":1,"updated":"2019-04-21T03:38:30.296Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l1001kfbs6h0ujawgs","content":"<p>印度处于领先地位的产品：</p>\n<a id=\"more\"></a>\n<ul>\n<li>香蕉</li>\n<li>芒果</li>\n<li>番木瓜</li>\n<li>柠檬</li>\n<li>水牛奶</li>\n<li>山羊奶</li>\n<li>辣椒</li>\n<li>生姜</li>\n<li>鹰嘴豆</li>\n<li>小米</li>\n<li>黄麻</li>\n<li>木材燃料</li>\n</ul>\n<p>你用过或者吃过吗？</p>\n","site":{"data":{}},"excerpt":"<p>印度处于领先地位的产品：</p>","more":"<ul>\n<li>香蕉</li>\n<li>芒果</li>\n<li>番木瓜</li>\n<li>柠檬</li>\n<li>水牛奶</li>\n<li>山羊奶</li>\n<li>辣椒</li>\n<li>生姜</li>\n<li>鹰嘴豆</li>\n<li>小米</li>\n<li>黄麻</li>\n<li>木材燃料</li>\n</ul>\n<p>你用过或者吃过吗？</p>"},{"title":"大O表示法（时间复杂度）","date":"2019-09-15T06:07:20.000Z","notebook":"笔记","_content":"\n大O表示法，又名 `时间复杂度`，平时在对不同的数据结构进行操作时，都会有不同的时间复杂度，下面看下时间复杂度怎么计算的？\n\n![时间复杂度](大O表示法（时间复杂度）/time_complex_degree.png)\n\n<!-- more -->\n具体来看看如何定义的：\n\n![1](大O表示法（时间复杂度）/1.png)\n![2](大O表示法（时间复杂度）/2.png)\n![3](大O表示法（时间复杂度）/3.png)\n![4](大O表示法（时间复杂度）/4.png)\n![5](大O表示法（时间复杂度）/5.png)\n![6](大O表示法（时间复杂度）/6.png)\n\n\n- - -\nDon't be one of the leeches.","source":"_posts/大O表示法（时间复杂度）.md","raw":"---\ntitle: 大O表示法（时间复杂度）\ndate: 2019-09-15 14:07:20\ntags: [时间复杂度,大O表示法]\ncategories: 数据结构与算法\nnotebook: 笔记\n---\n\n大O表示法，又名 `时间复杂度`，平时在对不同的数据结构进行操作时，都会有不同的时间复杂度，下面看下时间复杂度怎么计算的？\n\n![时间复杂度](大O表示法（时间复杂度）/time_complex_degree.png)\n\n<!-- more -->\n具体来看看如何定义的：\n\n![1](大O表示法（时间复杂度）/1.png)\n![2](大O表示法（时间复杂度）/2.png)\n![3](大O表示法（时间复杂度）/3.png)\n![4](大O表示法（时间复杂度）/4.png)\n![5](大O表示法（时间复杂度）/5.png)\n![6](大O表示法（时间复杂度）/6.png)\n\n\n- - -\nDon't be one of the leeches.","slug":"大O表示法（时间复杂度）","published":1,"updated":"2019-09-15T06:24:30.048Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l1001lfbs68ci3cwt5","content":"<p>大O表示法，又名 <code>时间复杂度</code>，平时在对不同的数据结构进行操作时，都会有不同的时间复杂度，下面看下时间复杂度怎么计算的？</p>\n<p><img src=\"/2019/09/15/大O表示法（时间复杂度）/time_complex_degree.png\" alt=\"时间复杂度\"></p>\n<a id=\"more\"></a>\n<p>具体来看看如何定义的：</p>\n<p><img src=\"/2019/09/15/大O表示法（时间复杂度）/1.png\" alt=\"1\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/2.png\" alt=\"2\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/3.png\" alt=\"3\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/4.png\" alt=\"4\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/5.png\" alt=\"5\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/6.png\" alt=\"6\"></p>\n<hr>\n<p>Don’t be one of the leeches.</p>\n","site":{"data":{}},"excerpt":"<p>大O表示法，又名 <code>时间复杂度</code>，平时在对不同的数据结构进行操作时，都会有不同的时间复杂度，下面看下时间复杂度怎么计算的？</p>\n<p><img src=\"/2019/09/15/大O表示法（时间复杂度）/time_complex_degree.png\" alt=\"时间复杂度\"></p>","more":"<p>具体来看看如何定义的：</p>\n<p><img src=\"/2019/09/15/大O表示法（时间复杂度）/1.png\" alt=\"1\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/2.png\" alt=\"2\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/3.png\" alt=\"3\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/4.png\" alt=\"4\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/5.png\" alt=\"5\"><br><img src=\"/2019/09/15/大O表示法（时间复杂度）/6.png\" alt=\"6\"></p>\n<hr>\n<p>Don’t be one of the leeches.</p>"},{"title":"尼古拉·特斯拉","date":"2019-01-03T13:26:15.000Z","_content":"下面介绍 尼古拉·特斯拉 这个交流电之父。\n<!-- more -->\n24岁的特斯拉\n全无天才的气质，甚至可以说，是一个失败者。\n1882年，成为一家电话公司的工程师。特斯拉开始展现才华，设计出第一台感应电机模型。\n1884年，带着前雇主的推荐信，特斯拉第一次来到美国，见到了传说中的爱迪生，成为他的助手。\n后来辞职后创业。\n爱迪生是直流电的死忠，特斯拉主推交流电。可以说，直流电与交流电之争决定两家公司的生死。\n再后来，交流电取代直流电，成为主流，奠定了现代电力的基础。\n因此，特斯拉，而非爱迪生才是真正的“电气时代之父”。\n1897年就获得了无线电技术的专利。\n1898年，特斯拉制造了能产生人工地震的振荡器，在输入频率时，差点将纽约市夷为平地。\n1899年，特斯拉造出一大堆球状闪电，这是迄今为止，世界上唯一一次在实验室制造出球状闪电。\n1901年，特斯拉建造了沃登克里弗塔，用于横跨大西洋的无线电能传输实验。\n1917年，特斯拉就向美国海军提出雷达的概念。\n特斯拉先于伦琴发现X射线。\n还发明了遥控器、发动机火花塞、霓虹灯、现代电动机。\n建立了\n第一次成功记录接收了来自外太空无线电电波，他在一百多年前就持有晶体管的专利世界上第一个水利发电站——尼亚加拉水电站。\n现在手机吹嘘的“无线充电技术”，其实是特斯拉100年前玩剩下的。\n特斯拉的无线照明\n特斯拉还设计过一种”没有机翼，没有副翼，没有螺旋桨，没有其他外部装置的飞机“。飞行速度极高，完全通过反作用实现续航和驱动。\n\n他每天只睡2个小时，独自取得700多项发明专利，合作开发1000种以上。\n他被诺贝尔物理学奖提名11次，全部让贤。\n作为交流电的发明人，一年之内，就可以靠专利费，成为世界首富。他却毅然将“交流电专利”撕毁，免费向社会开放。\n最终，一生贫困潦倒。\n1943年，尼古拉·特斯拉在贫穷、孤独中去世。\n今天，提起特斯拉，大部分人想到的只是一辆电动车，而非一位科学家。\n","source":"_posts/尼古拉·特斯拉.md","raw":"---\ntitle: 尼古拉·特斯拉\ntags: 特斯拉\ndate: 2019-01-03 21:26:15\ncategories: 人物\n---\n下面介绍 尼古拉·特斯拉 这个交流电之父。\n<!-- more -->\n24岁的特斯拉\n全无天才的气质，甚至可以说，是一个失败者。\n1882年，成为一家电话公司的工程师。特斯拉开始展现才华，设计出第一台感应电机模型。\n1884年，带着前雇主的推荐信，特斯拉第一次来到美国，见到了传说中的爱迪生，成为他的助手。\n后来辞职后创业。\n爱迪生是直流电的死忠，特斯拉主推交流电。可以说，直流电与交流电之争决定两家公司的生死。\n再后来，交流电取代直流电，成为主流，奠定了现代电力的基础。\n因此，特斯拉，而非爱迪生才是真正的“电气时代之父”。\n1897年就获得了无线电技术的专利。\n1898年，特斯拉制造了能产生人工地震的振荡器，在输入频率时，差点将纽约市夷为平地。\n1899年，特斯拉造出一大堆球状闪电，这是迄今为止，世界上唯一一次在实验室制造出球状闪电。\n1901年，特斯拉建造了沃登克里弗塔，用于横跨大西洋的无线电能传输实验。\n1917年，特斯拉就向美国海军提出雷达的概念。\n特斯拉先于伦琴发现X射线。\n还发明了遥控器、发动机火花塞、霓虹灯、现代电动机。\n建立了\n第一次成功记录接收了来自外太空无线电电波，他在一百多年前就持有晶体管的专利世界上第一个水利发电站——尼亚加拉水电站。\n现在手机吹嘘的“无线充电技术”，其实是特斯拉100年前玩剩下的。\n特斯拉的无线照明\n特斯拉还设计过一种”没有机翼，没有副翼，没有螺旋桨，没有其他外部装置的飞机“。飞行速度极高，完全通过反作用实现续航和驱动。\n\n他每天只睡2个小时，独自取得700多项发明专利，合作开发1000种以上。\n他被诺贝尔物理学奖提名11次，全部让贤。\n作为交流电的发明人，一年之内，就可以靠专利费，成为世界首富。他却毅然将“交流电专利”撕毁，免费向社会开放。\n最终，一生贫困潦倒。\n1943年，尼古拉·特斯拉在贫穷、孤独中去世。\n今天，提起特斯拉，大部分人想到的只是一辆电动车，而非一位科学家。\n","slug":"尼古拉·特斯拉","published":1,"updated":"2019-04-21T04:12:56.331Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l2001mfbs686e5408o","content":"<p>下面介绍 尼古拉·特斯拉 这个交流电之父。</p>\n<a id=\"more\"></a>\n<p>24岁的特斯拉<br>全无天才的气质，甚至可以说，是一个失败者。<br>1882年，成为一家电话公司的工程师。特斯拉开始展现才华，设计出第一台感应电机模型。<br>1884年，带着前雇主的推荐信，特斯拉第一次来到美国，见到了传说中的爱迪生，成为他的助手。<br>后来辞职后创业。<br>爱迪生是直流电的死忠，特斯拉主推交流电。可以说，直流电与交流电之争决定两家公司的生死。<br>再后来，交流电取代直流电，成为主流，奠定了现代电力的基础。<br>因此，特斯拉，而非爱迪生才是真正的“电气时代之父”。<br>1897年就获得了无线电技术的专利。<br>1898年，特斯拉制造了能产生人工地震的振荡器，在输入频率时，差点将纽约市夷为平地。<br>1899年，特斯拉造出一大堆球状闪电，这是迄今为止，世界上唯一一次在实验室制造出球状闪电。<br>1901年，特斯拉建造了沃登克里弗塔，用于横跨大西洋的无线电能传输实验。<br>1917年，特斯拉就向美国海军提出雷达的概念。<br>特斯拉先于伦琴发现X射线。<br>还发明了遥控器、发动机火花塞、霓虹灯、现代电动机。<br>建立了<br>第一次成功记录接收了来自外太空无线电电波，他在一百多年前就持有晶体管的专利世界上第一个水利发电站——尼亚加拉水电站。<br>现在手机吹嘘的“无线充电技术”，其实是特斯拉100年前玩剩下的。<br>特斯拉的无线照明<br>特斯拉还设计过一种”没有机翼，没有副翼，没有螺旋桨，没有其他外部装置的飞机“。飞行速度极高，完全通过反作用实现续航和驱动。</p>\n<p>他每天只睡2个小时，独自取得700多项发明专利，合作开发1000种以上。<br>他被诺贝尔物理学奖提名11次，全部让贤。<br>作为交流电的发明人，一年之内，就可以靠专利费，成为世界首富。他却毅然将“交流电专利”撕毁，免费向社会开放。<br>最终，一生贫困潦倒。<br>1943年，尼古拉·特斯拉在贫穷、孤独中去世。<br>今天，提起特斯拉，大部分人想到的只是一辆电动车，而非一位科学家。</p>\n","site":{"data":{}},"excerpt":"<p>下面介绍 尼古拉·特斯拉 这个交流电之父。</p>","more":"<p>24岁的特斯拉<br>全无天才的气质，甚至可以说，是一个失败者。<br>1882年，成为一家电话公司的工程师。特斯拉开始展现才华，设计出第一台感应电机模型。<br>1884年，带着前雇主的推荐信，特斯拉第一次来到美国，见到了传说中的爱迪生，成为他的助手。<br>后来辞职后创业。<br>爱迪生是直流电的死忠，特斯拉主推交流电。可以说，直流电与交流电之争决定两家公司的生死。<br>再后来，交流电取代直流电，成为主流，奠定了现代电力的基础。<br>因此，特斯拉，而非爱迪生才是真正的“电气时代之父”。<br>1897年就获得了无线电技术的专利。<br>1898年，特斯拉制造了能产生人工地震的振荡器，在输入频率时，差点将纽约市夷为平地。<br>1899年，特斯拉造出一大堆球状闪电，这是迄今为止，世界上唯一一次在实验室制造出球状闪电。<br>1901年，特斯拉建造了沃登克里弗塔，用于横跨大西洋的无线电能传输实验。<br>1917年，特斯拉就向美国海军提出雷达的概念。<br>特斯拉先于伦琴发现X射线。<br>还发明了遥控器、发动机火花塞、霓虹灯、现代电动机。<br>建立了<br>第一次成功记录接收了来自外太空无线电电波，他在一百多年前就持有晶体管的专利世界上第一个水利发电站——尼亚加拉水电站。<br>现在手机吹嘘的“无线充电技术”，其实是特斯拉100年前玩剩下的。<br>特斯拉的无线照明<br>特斯拉还设计过一种”没有机翼，没有副翼，没有螺旋桨，没有其他外部装置的飞机“。飞行速度极高，完全通过反作用实现续航和驱动。</p>\n<p>他每天只睡2个小时，独自取得700多项发明专利，合作开发1000种以上。<br>他被诺贝尔物理学奖提名11次，全部让贤。<br>作为交流电的发明人，一年之内，就可以靠专利费，成为世界首富。他却毅然将“交流电专利”撕毁，免费向社会开放。<br>最终，一生贫困潦倒。<br>1943年，尼古拉·特斯拉在贫穷、孤独中去世。<br>今天，提起特斯拉，大部分人想到的只是一辆电动车，而非一位科学家。</p>"},{"title":"并发与并行","date":"2019-08-18T06:07:48.000Z","notebook":"笔记","_content":"\n下面一张图片可以让你更好地理解程序中的并发与并行之间的区别：\n<!-- more -->\n![concurrency and parallel](并发与并行/concurrency_and_parallelism.png)\n\n更详细的信息，请参考链接<a>https://golangbot.com/concurrency/</a>","source":"_posts/并发与并行.md","raw":"---\ntitle: 并发与并行\ndate: 2019-08-18 14:07:48\ntags: [并发,并行]\ncategories: 计算机语言\nnotebook: 笔记\n---\n\n下面一张图片可以让你更好地理解程序中的并发与并行之间的区别：\n<!-- more -->\n![concurrency and parallel](并发与并行/concurrency_and_parallelism.png)\n\n更详细的信息，请参考链接<a>https://golangbot.com/concurrency/</a>","slug":"并发与并行","published":1,"updated":"2019-08-18T10:32:46.264Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l3001nfbs64mtq2nrk","content":"<p>下面一张图片可以让你更好地理解程序中的并发与并行之间的区别：</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/08/18/并发与并行/concurrency_and_parallelism.png\" alt=\"concurrency and parallel\"></p>\n<p>更详细的信息，请参考链接<a><a href=\"https://golangbot.com/concurrency/\" target=\"_blank\" rel=\"noopener\">https://golangbot.com/concurrency/</a></a></p>\n","site":{"data":{}},"excerpt":"<p>下面一张图片可以让你更好地理解程序中的并发与并行之间的区别：</p>","more":"<p><img src=\"/2019/08/18/并发与并行/concurrency_and_parallelism.png\" alt=\"concurrency and parallel\"></p>\n<p>更详细的信息，请参考链接<a><a href=\"https://golangbot.com/concurrency/\" target=\"_blank\" rel=\"noopener\">https://golangbot.com/concurrency/</a></a></p>"},{"title":"恒星币（XLM）","date":"2019-01-04T13:26:15.000Z","_content":"下面介绍全球数字货币市值排名第九的恒星币（XLM）\n<!-- more -->\n概述：代码是基于瑞波币的基础上修改的。用于搭建一个数字货币与法定货币之间传输的去中心化网关，是一个用于价值交换的开源协议；\n\t该协议由非营利性、非股票型组织因此，基金的创始人无法从其经营或出售其股份中获益；\n\tStellar Development Foundation基金会提供支持；\n\t平台完全对外开源；\n\t该平台承诺发布涵盖其活动的各种报告：关于雇员工资的报告;关于流氓补助金工作人员的报告;预算;分布流明数;流明的分布机制等；\n\t在平台上可以看到发行量，每周产生的流量（每年产生1%的认为通胀），基金的发展将要花多少钱（总数的5%）；\n\t大多数免费发放，5%作为运营使用，25%流向非营利组织；\n\t拥有大量恒星币的组织或个人必须拥有5年以上才能出售其资产；\n\tStellar平台的组织者已经尽一切可能从这个项目中排除任何赌博组件；\n\t2019年3月，IBM发布公告称，包括Banco Bradesco，Bank Rusan和Rizal Commercial Banking Corporation在内的六家国际银行签署了在World Wire上发行自己的稳定币的意向书，这是IBM利用Stellar公共区块链的支付网络。\n\n创始人：瑞波币的前创始人Jed McCaleb，电驴（BT下载软件）的创始人\n\n发行量：1000亿枚，95%用于免费发放。目前流通量约为191亿枚：\n\t50%通过直接分发计划分配给全世界；\n\t25%通过增加覆盖计划分配给非营利组织以给予金融服务匮乏的人群；\n\t20%通过比特币计划分配；\n\t5%留作运营费用恒星币运营。\n\n发行时间：2014年\n\n用途：去中心化网关，通过转换全球各国之间的稳定加密货币的方式，进行跨境支付\n\n客户：IBM、菲律宾的RCBC、巴西的Banco Bradesco、韩国的Bank Busan\n\t2017年10月Stellar宣布与IBM合作，成为IBM Blockchain平台战略的一部分，为跨国界提供更便宜，更快速的支付\n","source":"_posts/恒星币（XLM）.md","raw":"---\ntitle: 恒星币（XLM）\ntags: [XLM,恒星币]\ndate: 2019-01-04 21:26:15\ncategories: 数字货币\n---\n下面介绍全球数字货币市值排名第九的恒星币（XLM）\n<!-- more -->\n概述：代码是基于瑞波币的基础上修改的。用于搭建一个数字货币与法定货币之间传输的去中心化网关，是一个用于价值交换的开源协议；\n\t该协议由非营利性、非股票型组织因此，基金的创始人无法从其经营或出售其股份中获益；\n\tStellar Development Foundation基金会提供支持；\n\t平台完全对外开源；\n\t该平台承诺发布涵盖其活动的各种报告：关于雇员工资的报告;关于流氓补助金工作人员的报告;预算;分布流明数;流明的分布机制等；\n\t在平台上可以看到发行量，每周产生的流量（每年产生1%的认为通胀），基金的发展将要花多少钱（总数的5%）；\n\t大多数免费发放，5%作为运营使用，25%流向非营利组织；\n\t拥有大量恒星币的组织或个人必须拥有5年以上才能出售其资产；\n\tStellar平台的组织者已经尽一切可能从这个项目中排除任何赌博组件；\n\t2019年3月，IBM发布公告称，包括Banco Bradesco，Bank Rusan和Rizal Commercial Banking Corporation在内的六家国际银行签署了在World Wire上发行自己的稳定币的意向书，这是IBM利用Stellar公共区块链的支付网络。\n\n创始人：瑞波币的前创始人Jed McCaleb，电驴（BT下载软件）的创始人\n\n发行量：1000亿枚，95%用于免费发放。目前流通量约为191亿枚：\n\t50%通过直接分发计划分配给全世界；\n\t25%通过增加覆盖计划分配给非营利组织以给予金融服务匮乏的人群；\n\t20%通过比特币计划分配；\n\t5%留作运营费用恒星币运营。\n\n发行时间：2014年\n\n用途：去中心化网关，通过转换全球各国之间的稳定加密货币的方式，进行跨境支付\n\n客户：IBM、菲律宾的RCBC、巴西的Banco Bradesco、韩国的Bank Busan\n\t2017年10月Stellar宣布与IBM合作，成为IBM Blockchain平台战略的一部分，为跨国界提供更便宜，更快速的支付\n","slug":"恒星币（XLM）","published":1,"updated":"2019-04-21T03:53:33.152Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l4001ofbs6rt88ymuz","content":"<p>下面介绍全球数字货币市值排名第九的恒星币（XLM）</p>\n<a id=\"more\"></a>\n<p>概述：代码是基于瑞波币的基础上修改的。用于搭建一个数字货币与法定货币之间传输的去中心化网关，是一个用于价值交换的开源协议；<br>    该协议由非营利性、非股票型组织因此，基金的创始人无法从其经营或出售其股份中获益；<br>    Stellar Development Foundation基金会提供支持；<br>    平台完全对外开源；<br>    该平台承诺发布涵盖其活动的各种报告：关于雇员工资的报告;关于流氓补助金工作人员的报告;预算;分布流明数;流明的分布机制等；<br>    在平台上可以看到发行量，每周产生的流量（每年产生1%的认为通胀），基金的发展将要花多少钱（总数的5%）；<br>    大多数免费发放，5%作为运营使用，25%流向非营利组织；<br>    拥有大量恒星币的组织或个人必须拥有5年以上才能出售其资产；<br>    Stellar平台的组织者已经尽一切可能从这个项目中排除任何赌博组件；<br>    2019年3月，IBM发布公告称，包括Banco Bradesco，Bank Rusan和Rizal Commercial Banking Corporation在内的六家国际银行签署了在World Wire上发行自己的稳定币的意向书，这是IBM利用Stellar公共区块链的支付网络。</p>\n<p>创始人：瑞波币的前创始人Jed McCaleb，电驴（BT下载软件）的创始人</p>\n<p>发行量：1000亿枚，95%用于免费发放。目前流通量约为191亿枚：<br>    50%通过直接分发计划分配给全世界；<br>    25%通过增加覆盖计划分配给非营利组织以给予金融服务匮乏的人群；<br>    20%通过比特币计划分配；<br>    5%留作运营费用恒星币运营。</p>\n<p>发行时间：2014年</p>\n<p>用途：去中心化网关，通过转换全球各国之间的稳定加密货币的方式，进行跨境支付</p>\n<p>客户：IBM、菲律宾的RCBC、巴西的Banco Bradesco、韩国的Bank Busan<br>    2017年10月Stellar宣布与IBM合作，成为IBM Blockchain平台战略的一部分，为跨国界提供更便宜，更快速的支付</p>\n","site":{"data":{}},"excerpt":"<p>下面介绍全球数字货币市值排名第九的恒星币（XLM）</p>","more":"<p>概述：代码是基于瑞波币的基础上修改的。用于搭建一个数字货币与法定货币之间传输的去中心化网关，是一个用于价值交换的开源协议；<br>    该协议由非营利性、非股票型组织因此，基金的创始人无法从其经营或出售其股份中获益；<br>    Stellar Development Foundation基金会提供支持；<br>    平台完全对外开源；<br>    该平台承诺发布涵盖其活动的各种报告：关于雇员工资的报告;关于流氓补助金工作人员的报告;预算;分布流明数;流明的分布机制等；<br>    在平台上可以看到发行量，每周产生的流量（每年产生1%的认为通胀），基金的发展将要花多少钱（总数的5%）；<br>    大多数免费发放，5%作为运营使用，25%流向非营利组织；<br>    拥有大量恒星币的组织或个人必须拥有5年以上才能出售其资产；<br>    Stellar平台的组织者已经尽一切可能从这个项目中排除任何赌博组件；<br>    2019年3月，IBM发布公告称，包括Banco Bradesco，Bank Rusan和Rizal Commercial Banking Corporation在内的六家国际银行签署了在World Wire上发行自己的稳定币的意向书，这是IBM利用Stellar公共区块链的支付网络。</p>\n<p>创始人：瑞波币的前创始人Jed McCaleb，电驴（BT下载软件）的创始人</p>\n<p>发行量：1000亿枚，95%用于免费发放。目前流通量约为191亿枚：<br>    50%通过直接分发计划分配给全世界；<br>    25%通过增加覆盖计划分配给非营利组织以给予金融服务匮乏的人群；<br>    20%通过比特币计划分配；<br>    5%留作运营费用恒星币运营。</p>\n<p>发行时间：2014年</p>\n<p>用途：去中心化网关，通过转换全球各国之间的稳定加密货币的方式，进行跨境支付</p>\n<p>客户：IBM、菲律宾的RCBC、巴西的Banco Bradesco、韩国的Bank Busan<br>    2017年10月Stellar宣布与IBM合作，成为IBM Blockchain平台战略的一部分，为跨国界提供更便宜，更快速的支付</p>"},{"title":"德国的世界品牌","date":"2019-01-04T13:26:15.000Z","_content":"Companies based in Germany:\n德国的世界品牌：\n<!-- more -->\n品牌如下：\n```\n- Volkswagen\t\t大众\t\t\t汽车\n- Allianz\t\t\t安联\t\t\t保险\n- Mercedes Benz\t\t奔驰\t\t\t汽车\n- Audi\t\t\t\t奥迪\t\t\t汽车\n- BMW\t\t\t\t宝马\t\t\t汽车\n- Porsche\t\t\t保时捷\t\t    汽车\n- Lufthansa\t\t\t汉莎\t\t\t航空\n- Siemens\t\t\t西门子\t\t    电子电器工程\n- BASF\t\t\t\t巴斯夫\t\t    化工\n- Bayer\t\t\t\t拜耳\t\t\t医疗保健、化工及农业\n- Fresenius\t\t\t费森尤斯\t\t医药\n- Merck\t\t\t\t默克\t\t\t生物科技\n- Linde\t\t\t\t林德\t\t\t工业机械\n- ThyssenKrupp Group蒂森克虏伯\t    工业工程、钢铁\n- SAP\t\t\t\t思爱普\t\t    企业管理、咨询\n- Deutsche Telekom\t德国电信\t\t电信\n- Aldi\t\t\t\t阿尔迪\t\t    食品连锁超市\n- Bosch\t\t\t\t博世\t\t\t工业、交通\n- Lidl\t\t\t\t历德\t\t\t零售（欧洲的沃尔玛）\n- Adidas\t\t\t阿迪达斯\t\t服装\n```\n\n你用到了哪些呢？","source":"_posts/德国的世界品牌.md","raw":"---\ntitle: 德国的世界品牌\ntags: 德国\ndate: 2019-01-04 21:26:15\ncategories: 世界排名\n---\nCompanies based in Germany:\n德国的世界品牌：\n<!-- more -->\n品牌如下：\n```\n- Volkswagen\t\t大众\t\t\t汽车\n- Allianz\t\t\t安联\t\t\t保险\n- Mercedes Benz\t\t奔驰\t\t\t汽车\n- Audi\t\t\t\t奥迪\t\t\t汽车\n- BMW\t\t\t\t宝马\t\t\t汽车\n- Porsche\t\t\t保时捷\t\t    汽车\n- Lufthansa\t\t\t汉莎\t\t\t航空\n- Siemens\t\t\t西门子\t\t    电子电器工程\n- BASF\t\t\t\t巴斯夫\t\t    化工\n- Bayer\t\t\t\t拜耳\t\t\t医疗保健、化工及农业\n- Fresenius\t\t\t费森尤斯\t\t医药\n- Merck\t\t\t\t默克\t\t\t生物科技\n- Linde\t\t\t\t林德\t\t\t工业机械\n- ThyssenKrupp Group蒂森克虏伯\t    工业工程、钢铁\n- SAP\t\t\t\t思爱普\t\t    企业管理、咨询\n- Deutsche Telekom\t德国电信\t\t电信\n- Aldi\t\t\t\t阿尔迪\t\t    食品连锁超市\n- Bosch\t\t\t\t博世\t\t\t工业、交通\n- Lidl\t\t\t\t历德\t\t\t零售（欧洲的沃尔玛）\n- Adidas\t\t\t阿迪达斯\t\t服装\n```\n\n你用到了哪些呢？","slug":"德国的世界品牌","published":1,"updated":"2019-04-21T03:51:54.069Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l5001pfbs61aitigm2","content":"<p>Companies based in Germany:<br>德国的世界品牌：</p>\n<a id=\"more\"></a>\n<p>品牌如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Volkswagen\t\t大众\t\t\t汽车</span><br><span class=\"line\">- Allianz\t\t\t安联\t\t\t保险</span><br><span class=\"line\">- Mercedes Benz\t\t奔驰\t\t\t汽车</span><br><span class=\"line\">- Audi\t\t\t\t奥迪\t\t\t汽车</span><br><span class=\"line\">- BMW\t\t\t\t宝马\t\t\t汽车</span><br><span class=\"line\">- Porsche\t\t\t保时捷\t\t    汽车</span><br><span class=\"line\">- Lufthansa\t\t\t汉莎\t\t\t航空</span><br><span class=\"line\">- Siemens\t\t\t西门子\t\t    电子电器工程</span><br><span class=\"line\">- BASF\t\t\t\t巴斯夫\t\t    化工</span><br><span class=\"line\">- Bayer\t\t\t\t拜耳\t\t\t医疗保健、化工及农业</span><br><span class=\"line\">- Fresenius\t\t\t费森尤斯\t\t医药</span><br><span class=\"line\">- Merck\t\t\t\t默克\t\t\t生物科技</span><br><span class=\"line\">- Linde\t\t\t\t林德\t\t\t工业机械</span><br><span class=\"line\">- ThyssenKrupp Group蒂森克虏伯\t    工业工程、钢铁</span><br><span class=\"line\">- SAP\t\t\t\t思爱普\t\t    企业管理、咨询</span><br><span class=\"line\">- Deutsche Telekom\t德国电信\t\t电信</span><br><span class=\"line\">- Aldi\t\t\t\t阿尔迪\t\t    食品连锁超市</span><br><span class=\"line\">- Bosch\t\t\t\t博世\t\t\t工业、交通</span><br><span class=\"line\">- Lidl\t\t\t\t历德\t\t\t零售（欧洲的沃尔玛）</span><br><span class=\"line\">- Adidas\t\t\t阿迪达斯\t\t服装</span><br></pre></td></tr></table></figure>\n\n<p>你用到了哪些呢？</p>\n","site":{"data":{}},"excerpt":"<p>Companies based in Germany:<br>德国的世界品牌：</p>","more":"<p>品牌如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- Volkswagen\t\t大众\t\t\t汽车</span><br><span class=\"line\">- Allianz\t\t\t安联\t\t\t保险</span><br><span class=\"line\">- Mercedes Benz\t\t奔驰\t\t\t汽车</span><br><span class=\"line\">- Audi\t\t\t\t奥迪\t\t\t汽车</span><br><span class=\"line\">- BMW\t\t\t\t宝马\t\t\t汽车</span><br><span class=\"line\">- Porsche\t\t\t保时捷\t\t    汽车</span><br><span class=\"line\">- Lufthansa\t\t\t汉莎\t\t\t航空</span><br><span class=\"line\">- Siemens\t\t\t西门子\t\t    电子电器工程</span><br><span class=\"line\">- BASF\t\t\t\t巴斯夫\t\t    化工</span><br><span class=\"line\">- Bayer\t\t\t\t拜耳\t\t\t医疗保健、化工及农业</span><br><span class=\"line\">- Fresenius\t\t\t费森尤斯\t\t医药</span><br><span class=\"line\">- Merck\t\t\t\t默克\t\t\t生物科技</span><br><span class=\"line\">- Linde\t\t\t\t林德\t\t\t工业机械</span><br><span class=\"line\">- ThyssenKrupp Group蒂森克虏伯\t    工业工程、钢铁</span><br><span class=\"line\">- SAP\t\t\t\t思爱普\t\t    企业管理、咨询</span><br><span class=\"line\">- Deutsche Telekom\t德国电信\t\t电信</span><br><span class=\"line\">- Aldi\t\t\t\t阿尔迪\t\t    食品连锁超市</span><br><span class=\"line\">- Bosch\t\t\t\t博世\t\t\t工业、交通</span><br><span class=\"line\">- Lidl\t\t\t\t历德\t\t\t零售（欧洲的沃尔玛）</span><br><span class=\"line\">- Adidas\t\t\t阿迪达斯\t\t服装</span><br></pre></td></tr></table></figure>\n\n<p>你用到了哪些呢？</p>"},{"title":"截至2019年5月5日世界上最富有的人排行","date":"2019-05-05T13:29:44.000Z","_content":"\n截至2019年的最富有的人。（以十亿美元计）\n\n<!-- more -->\n\n马云在2018年7月已跌出亚洲首富，现为印度人穆克什·安巴尼，世界排名如下：\n![amazon_kindle](截至2019年5月5日世界上最富有的人排行/kindle.jpeg)\n\n```\n🇺🇸杰夫·贝索斯：161\t\t亚马逊\t\t\t电子商务\t\t美国\n🇺🇸比尔·盖茨：102\t\t\t微软\t\t\t软件 \t\t美国\n🇫🇷伯纳德·阿诺特：94\t\tLVMH集团总裁\t\t奢侈品\t\t法国\n🇺🇸沃伦·巴菲特：90\t\t\t伯克希尔哈撒韦\t\t投资、咨询\t美国\n🇺🇸马克·扎克伯格：73\t\tFacebook\t\t社交\t\t美国\n🇺🇸拉里·埃里森：67\t\t\t甲骨文Oracle\t\t软件服务\t\t美国\n🇪🇸阿曼西奥·奥特加：66\t\tZara\t\t\t服装零售\t\t西班牙\n🇲🇽卡洛斯·斯利姆：61\t\t卡尔索集团\t\t商业、电信\t墨西哥\n🇮🇳穆克什·安巴尼：56\t\t信诚工业集团\t\t商业 \t\t印度\n🇺🇸迈克尔·布隆伯格：55\t\t彭博\t\t\t媒体、慈善\t美国\n```","source":"_posts/截至2019年5月5日世界上最富有的人排行.md","raw":"---\ntitle: 截至2019年5月5日世界上最富有的人排行\ndate: 2019-05-05 21:29:44\ntags: 世界财富排名\ncategories: 世界排名\n---\n\n截至2019年的最富有的人。（以十亿美元计）\n\n<!-- more -->\n\n马云在2018年7月已跌出亚洲首富，现为印度人穆克什·安巴尼，世界排名如下：\n![amazon_kindle](截至2019年5月5日世界上最富有的人排行/kindle.jpeg)\n\n```\n🇺🇸杰夫·贝索斯：161\t\t亚马逊\t\t\t电子商务\t\t美国\n🇺🇸比尔·盖茨：102\t\t\t微软\t\t\t软件 \t\t美国\n🇫🇷伯纳德·阿诺特：94\t\tLVMH集团总裁\t\t奢侈品\t\t法国\n🇺🇸沃伦·巴菲特：90\t\t\t伯克希尔哈撒韦\t\t投资、咨询\t美国\n🇺🇸马克·扎克伯格：73\t\tFacebook\t\t社交\t\t美国\n🇺🇸拉里·埃里森：67\t\t\t甲骨文Oracle\t\t软件服务\t\t美国\n🇪🇸阿曼西奥·奥特加：66\t\tZara\t\t\t服装零售\t\t西班牙\n🇲🇽卡洛斯·斯利姆：61\t\t卡尔索集团\t\t商业、电信\t墨西哥\n🇮🇳穆克什·安巴尼：56\t\t信诚工业集团\t\t商业 \t\t印度\n🇺🇸迈克尔·布隆伯格：55\t\t彭博\t\t\t媒体、慈善\t美国\n```","slug":"截至2019年5月5日世界上最富有的人排行","published":1,"updated":"2019-05-05T14:02:11.574Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l7001qfbs6s6rq1m8c","content":"<p>截至2019年的最富有的人。（以十亿美元计）</p>\n<a id=\"more\"></a>\n\n<p>马云在2018年7月已跌出亚洲首富，现为印度人穆克什·安巴尼，世界排名如下：<br><img src=\"/2019/05/05/截至2019年5月5日世界上最富有的人排行/kindle.jpeg\" alt=\"amazon_kindle\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🇺🇸杰夫·贝索斯：161\t\t亚马逊\t\t\t电子商务\t\t美国</span><br><span class=\"line\">🇺🇸比尔·盖茨：102\t\t\t微软\t\t\t软件 \t\t美国</span><br><span class=\"line\">🇫🇷伯纳德·阿诺特：94\t\tLVMH集团总裁\t\t奢侈品\t\t法国</span><br><span class=\"line\">🇺🇸沃伦·巴菲特：90\t\t\t伯克希尔哈撒韦\t\t投资、咨询\t美国</span><br><span class=\"line\">🇺🇸马克·扎克伯格：73\t\tFacebook\t\t社交\t\t美国</span><br><span class=\"line\">🇺🇸拉里·埃里森：67\t\t\t甲骨文Oracle\t\t软件服务\t\t美国</span><br><span class=\"line\">🇪🇸阿曼西奥·奥特加：66\t\tZara\t\t\t服装零售\t\t西班牙</span><br><span class=\"line\">🇲🇽卡洛斯·斯利姆：61\t\t卡尔索集团\t\t商业、电信\t墨西哥</span><br><span class=\"line\">🇮🇳穆克什·安巴尼：56\t\t信诚工业集团\t\t商业 \t\t印度</span><br><span class=\"line\">🇺🇸迈克尔·布隆伯格：55\t\t彭博\t\t\t媒体、慈善\t美国</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>截至2019年的最富有的人。（以十亿美元计）</p>","more":"<p>马云在2018年7月已跌出亚洲首富，现为印度人穆克什·安巴尼，世界排名如下：<br><img src=\"/2019/05/05/截至2019年5月5日世界上最富有的人排行/kindle.jpeg\" alt=\"amazon_kindle\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">🇺🇸杰夫·贝索斯：161\t\t亚马逊\t\t\t电子商务\t\t美国</span><br><span class=\"line\">🇺🇸比尔·盖茨：102\t\t\t微软\t\t\t软件 \t\t美国</span><br><span class=\"line\">🇫🇷伯纳德·阿诺特：94\t\tLVMH集团总裁\t\t奢侈品\t\t法国</span><br><span class=\"line\">🇺🇸沃伦·巴菲特：90\t\t\t伯克希尔哈撒韦\t\t投资、咨询\t美国</span><br><span class=\"line\">🇺🇸马克·扎克伯格：73\t\tFacebook\t\t社交\t\t美国</span><br><span class=\"line\">🇺🇸拉里·埃里森：67\t\t\t甲骨文Oracle\t\t软件服务\t\t美国</span><br><span class=\"line\">🇪🇸阿曼西奥·奥特加：66\t\tZara\t\t\t服装零售\t\t西班牙</span><br><span class=\"line\">🇲🇽卡洛斯·斯利姆：61\t\t卡尔索集团\t\t商业、电信\t墨西哥</span><br><span class=\"line\">🇮🇳穆克什·安巴尼：56\t\t信诚工业集团\t\t商业 \t\t印度</span><br><span class=\"line\">🇺🇸迈克尔·布隆伯格：55\t\t彭博\t\t\t媒体、慈善\t美国</span><br></pre></td></tr></table></figure>"},{"title":"拜占庭问题","date":"2019-08-18T10:08:30.000Z","notebook":"区块链","_content":"\n拜占庭问题，即去中心化网络的一致性问题。\n![拜占庭问题](拜占庭问题/Byzantine.jpeg)\n\n<!-- more -->\n# 一、问题\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拜占庭帝国想要进攻一个强大的敌人，为此派出了 10 支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御 5 支常规拜占庭军队的同时袭击。这 10 支军队在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少 6 支军队（一半以上）同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵骑马相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们才能保证有多于 6 支军队在同一时间一起发起进攻，从而赢取战斗？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先看在没有叛徒情况下，假如一个将军 A 提一个进攻提议（如：明日下午 1 点进攻，你愿意加入吗？）由通信兵通信分别告诉其他的将军，如果幸运中的幸运，他收到了其他 6 位将军以上的同意，发起进攻。如果不幸，其他的将军也在此时发出不同的进攻提议（如：明日下午 2 点、3 点进攻，你愿意加入吗？），由于时间上的差异，不同的将军收到（并认可）的进攻提议可能是不一样的，这是可能出现 A 提议有 3 个支持者，B 提议有 4 个支持者，C 提议有 2 个支持者等等。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再加一点复杂性，在有叛徒情况下，一个叛徒会向不同的将军发出不同的进攻提议（通知 A 明日下午 1 点进攻， 通知 B 明日下午 2 点进攻等等），一个叛徒也会可能同意多个进攻提议（即同意下午 1 点进攻又同意下午 2 点进攻）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;叛徒发送前后不一致的进攻提议，被称为 “拜占庭错误”，而能够处理拜占庭错误的这种容错性称为「Byzantine fault tolerance」，简称为 BFT。\n\n# 二、解决方案\n\n## 1. 中本聪的解决方案: 工作量证明机制（POW）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在出现比特币之前，解决分布式系统一致性问题主要是 Lamport 提出的 Paxos 算法或其衍生算法。Paxos 类算法仅适用于中心化的分布式系统，这样的系统的没有不诚实的节点（不会发送虚假错误消息，但允许出现网络不通或宕机出现的消息延迟）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中本聪在比特币中创造性的引入了 \"工作量证明（POW : Proof of Work）\" 来解决这个问题，有兴趣可进一步阅读工作量证明。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过工作量证明就增加了发送信息的成本，降低节点发送消息速率，这样就以保证在一个时间只有一个节点 (或是很少) 在进行广播，同时在广播时会附上自己的签名。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个过程就像一位将军 A 在向其他的将军（B、C、D…）发起一个进攻提议一样，将军 B、C、D… 看到将军 A 签过名的进攻提议书，如果是诚实的将军就会立刻同意进攻提议，而不会发起自己新的进攻提议。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是比特币网络中是单个区块（账本）达成共识的方法（取得一致性）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;理解了单个区块取得一致性的方法，那么整个区块链（总账本）如果达成一致也好理解。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们稍微把将军问题改一下：假设攻下一个城堡需要多次的进攻，每次进攻的提议必须基于之前最多次数的胜利进攻下提出的（只有这样敌方已有损失最大，我方进攻胜利的可能性就更大），这样约定之后，将军 A 在收到进攻提议时，就会检查一下这个提议是不是基于最多的胜利提出的，如果不是（基于最多的胜利）将军 A 就不会同意这样的提议，如果是的，将军 A 就会把这次提议记下来。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是比特币网络最长链选择。\n\n## 2. 权益证明机制（POS）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工作量证明其实相当于提高了做叛徒（发布虚假区块）的成本，在工作量证明下，只有第一个完成证明的节点才能广播区块，竞争难度非常大，需要很高的算力，如果不成功其算力就白白的耗费了（算力是需要成本的），如果有这样的算力作为诚实的节点，同样也可以获得很大的收益（这就是矿工所作的工作），这也实际就不会有做叛徒的动机，整个系统也因此而更稳定。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多人批评工作量证明造成巨大的电力浪费，促使人们去探索新的解决一致性（共识）问题的机制：\"权益证明机制（POS: Proof of Stake）\"是一个代表。在拜占庭将军问题的角度来看，它同样提高了做叛徒的成本，因为账户需要首先持有大量余额才能有更多的几率广播区块。\n\n2019-08-25更新\n————————————\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。","source":"_posts/拜占庭问题.md","raw":"---\ntitle: 拜占庭问题\ndate: 2019-08-18 18:08:30\ntags: 拜占庭问题,拜占庭容错\ncategories: 区块链\nnotebook: 区块链\n---\n\n拜占庭问题，即去中心化网络的一致性问题。\n![拜占庭问题](拜占庭问题/Byzantine.jpeg)\n\n<!-- more -->\n# 一、问题\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拜占庭帝国想要进攻一个强大的敌人，为此派出了 10 支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御 5 支常规拜占庭军队的同时袭击。这 10 支军队在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少 6 支军队（一半以上）同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵骑马相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们才能保证有多于 6 支军队在同一时间一起发起进攻，从而赢取战斗？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先看在没有叛徒情况下，假如一个将军 A 提一个进攻提议（如：明日下午 1 点进攻，你愿意加入吗？）由通信兵通信分别告诉其他的将军，如果幸运中的幸运，他收到了其他 6 位将军以上的同意，发起进攻。如果不幸，其他的将军也在此时发出不同的进攻提议（如：明日下午 2 点、3 点进攻，你愿意加入吗？），由于时间上的差异，不同的将军收到（并认可）的进攻提议可能是不一样的，这是可能出现 A 提议有 3 个支持者，B 提议有 4 个支持者，C 提议有 2 个支持者等等。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再加一点复杂性，在有叛徒情况下，一个叛徒会向不同的将军发出不同的进攻提议（通知 A 明日下午 1 点进攻， 通知 B 明日下午 2 点进攻等等），一个叛徒也会可能同意多个进攻提议（即同意下午 1 点进攻又同意下午 2 点进攻）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;叛徒发送前后不一致的进攻提议，被称为 “拜占庭错误”，而能够处理拜占庭错误的这种容错性称为「Byzantine fault tolerance」，简称为 BFT。\n\n# 二、解决方案\n\n## 1. 中本聪的解决方案: 工作量证明机制（POW）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在出现比特币之前，解决分布式系统一致性问题主要是 Lamport 提出的 Paxos 算法或其衍生算法。Paxos 类算法仅适用于中心化的分布式系统，这样的系统的没有不诚实的节点（不会发送虚假错误消息，但允许出现网络不通或宕机出现的消息延迟）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中本聪在比特币中创造性的引入了 \"工作量证明（POW : Proof of Work）\" 来解决这个问题，有兴趣可进一步阅读工作量证明。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过工作量证明就增加了发送信息的成本，降低节点发送消息速率，这样就以保证在一个时间只有一个节点 (或是很少) 在进行广播，同时在广播时会附上自己的签名。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个过程就像一位将军 A 在向其他的将军（B、C、D…）发起一个进攻提议一样，将军 B、C、D… 看到将军 A 签过名的进攻提议书，如果是诚实的将军就会立刻同意进攻提议，而不会发起自己新的进攻提议。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是比特币网络中是单个区块（账本）达成共识的方法（取得一致性）。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;理解了单个区块取得一致性的方法，那么整个区块链（总账本）如果达成一致也好理解。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们稍微把将军问题改一下：假设攻下一个城堡需要多次的进攻，每次进攻的提议必须基于之前最多次数的胜利进攻下提出的（只有这样敌方已有损失最大，我方进攻胜利的可能性就更大），这样约定之后，将军 A 在收到进攻提议时，就会检查一下这个提议是不是基于最多的胜利提出的，如果不是（基于最多的胜利）将军 A 就不会同意这样的提议，如果是的，将军 A 就会把这次提议记下来。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是比特币网络最长链选择。\n\n## 2. 权益证明机制（POS）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工作量证明其实相当于提高了做叛徒（发布虚假区块）的成本，在工作量证明下，只有第一个完成证明的节点才能广播区块，竞争难度非常大，需要很高的算力，如果不成功其算力就白白的耗费了（算力是需要成本的），如果有这样的算力作为诚实的节点，同样也可以获得很大的收益（这就是矿工所作的工作），这也实际就不会有做叛徒的动机，整个系统也因此而更稳定。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多人批评工作量证明造成巨大的电力浪费，促使人们去探索新的解决一致性（共识）问题的机制：\"权益证明机制（POS: Proof of Stake）\"是一个代表。在拜占庭将军问题的角度来看，它同样提高了做叛徒的成本，因为账户需要首先持有大量余额才能有更多的几率广播区块。\n\n2019-08-25更新\n————————————\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。","slug":"拜占庭问题","published":1,"updated":"2019-09-08T06:20:43.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l8001rfbs6ivpg0067","content":"<p>拜占庭问题，即去中心化网络的一致性问题。<br><img src=\"/2019/08/18/拜占庭问题/Byzantine.jpeg\" alt=\"拜占庭问题\"></p>\n<a id=\"more\"></a>\n<h1 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拜占庭帝国想要进攻一个强大的敌人，为此派出了 10 支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御 5 支常规拜占庭军队的同时袭击。这 10 支军队在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少 6 支军队（一半以上）同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵骑马相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们才能保证有多于 6 支军队在同一时间一起发起进攻，从而赢取战斗？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先看在没有叛徒情况下，假如一个将军 A 提一个进攻提议（如：明日下午 1 点进攻，你愿意加入吗？）由通信兵通信分别告诉其他的将军，如果幸运中的幸运，他收到了其他 6 位将军以上的同意，发起进攻。如果不幸，其他的将军也在此时发出不同的进攻提议（如：明日下午 2 点、3 点进攻，你愿意加入吗？），由于时间上的差异，不同的将军收到（并认可）的进攻提议可能是不一样的，这是可能出现 A 提议有 3 个支持者，B 提议有 4 个支持者，C 提议有 2 个支持者等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再加一点复杂性，在有叛徒情况下，一个叛徒会向不同的将军发出不同的进攻提议（通知 A 明日下午 1 点进攻， 通知 B 明日下午 2 点进攻等等），一个叛徒也会可能同意多个进攻提议（即同意下午 1 点进攻又同意下午 2 点进攻）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;叛徒发送前后不一致的进攻提议，被称为 “拜占庭错误”，而能够处理拜占庭错误的这种容错性称为「Byzantine fault tolerance」，简称为 BFT。</p>\n<h1 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h1><h2 id=\"1-中本聪的解决方案-工作量证明机制（POW）\"><a href=\"#1-中本聪的解决方案-工作量证明机制（POW）\" class=\"headerlink\" title=\"1. 中本聪的解决方案: 工作量证明机制（POW）\"></a>1. 中本聪的解决方案: 工作量证明机制（POW）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在出现比特币之前，解决分布式系统一致性问题主要是 Lamport 提出的 Paxos 算法或其衍生算法。Paxos 类算法仅适用于中心化的分布式系统，这样的系统的没有不诚实的节点（不会发送虚假错误消息，但允许出现网络不通或宕机出现的消息延迟）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中本聪在比特币中创造性的引入了 “工作量证明（POW : Proof of Work）” 来解决这个问题，有兴趣可进一步阅读工作量证明。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过工作量证明就增加了发送信息的成本，降低节点发送消息速率，这样就以保证在一个时间只有一个节点 (或是很少) 在进行广播，同时在广播时会附上自己的签名。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个过程就像一位将军 A 在向其他的将军（B、C、D…）发起一个进攻提议一样，将军 B、C、D… 看到将军 A 签过名的进攻提议书，如果是诚实的将军就会立刻同意进攻提议，而不会发起自己新的进攻提议。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是比特币网络中是单个区块（账本）达成共识的方法（取得一致性）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;理解了单个区块取得一致性的方法，那么整个区块链（总账本）如果达成一致也好理解。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们稍微把将军问题改一下：假设攻下一个城堡需要多次的进攻，每次进攻的提议必须基于之前最多次数的胜利进攻下提出的（只有这样敌方已有损失最大，我方进攻胜利的可能性就更大），这样约定之后，将军 A 在收到进攻提议时，就会检查一下这个提议是不是基于最多的胜利提出的，如果不是（基于最多的胜利）将军 A 就不会同意这样的提议，如果是的，将军 A 就会把这次提议记下来。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是比特币网络最长链选择。</p>\n<h2 id=\"2-权益证明机制（POS）\"><a href=\"#2-权益证明机制（POS）\" class=\"headerlink\" title=\"2. 权益证明机制（POS）\"></a>2. 权益证明机制（POS）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工作量证明其实相当于提高了做叛徒（发布虚假区块）的成本，在工作量证明下，只有第一个完成证明的节点才能广播区块，竞争难度非常大，需要很高的算力，如果不成功其算力就白白的耗费了（算力是需要成本的），如果有这样的算力作为诚实的节点，同样也可以获得很大的收益（这就是矿工所作的工作），这也实际就不会有做叛徒的动机，整个系统也因此而更稳定。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多人批评工作量证明造成巨大的电力浪费，促使人们去探索新的解决一致性（共识）问题的机制：”权益证明机制（POS: Proof of Stake）”是一个代表。在拜占庭将军问题的角度来看，它同样提高了做叛徒的成本，因为账户需要首先持有大量余额才能有更多的几率广播区块。</p>\n<p>2019-08-25更新<br>————————————<br>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>\n","site":{"data":{}},"excerpt":"<p>拜占庭问题，即去中心化网络的一致性问题。<br><img src=\"/2019/08/18/拜占庭问题/Byzantine.jpeg\" alt=\"拜占庭问题\"></p>","more":"<h1 id=\"一、问题\"><a href=\"#一、问题\" class=\"headerlink\" title=\"一、问题\"></a>一、问题</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;拜占庭帝国想要进攻一个强大的敌人，为此派出了 10 支军队去包围这个敌人。这个敌人虽不比拜占庭帝国，但也足以抵御 5 支常规拜占庭军队的同时袭击。这 10 支军队在分开的包围状态下同时攻击。他们任一支军队单独进攻都毫无胜算，除非有至少 6 支军队（一半以上）同时袭击才能攻下敌国。他们分散在敌国的四周，依靠通信兵骑马相互通信来协商进攻意向及进攻时间。困扰这些将军的问题是，他们不确定他们中是否有叛徒，叛徒可能擅自变更进攻意向或者进攻时间。在这种状态下，拜占庭将军们才能保证有多于 6 支军队在同一时间一起发起进攻，从而赢取战斗？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;先看在没有叛徒情况下，假如一个将军 A 提一个进攻提议（如：明日下午 1 点进攻，你愿意加入吗？）由通信兵通信分别告诉其他的将军，如果幸运中的幸运，他收到了其他 6 位将军以上的同意，发起进攻。如果不幸，其他的将军也在此时发出不同的进攻提议（如：明日下午 2 点、3 点进攻，你愿意加入吗？），由于时间上的差异，不同的将军收到（并认可）的进攻提议可能是不一样的，这是可能出现 A 提议有 3 个支持者，B 提议有 4 个支持者，C 提议有 2 个支持者等等。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;再加一点复杂性，在有叛徒情况下，一个叛徒会向不同的将军发出不同的进攻提议（通知 A 明日下午 1 点进攻， 通知 B 明日下午 2 点进攻等等），一个叛徒也会可能同意多个进攻提议（即同意下午 1 点进攻又同意下午 2 点进攻）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;叛徒发送前后不一致的进攻提议，被称为 “拜占庭错误”，而能够处理拜占庭错误的这种容错性称为「Byzantine fault tolerance」，简称为 BFT。</p>\n<h1 id=\"二、解决方案\"><a href=\"#二、解决方案\" class=\"headerlink\" title=\"二、解决方案\"></a>二、解决方案</h1><h2 id=\"1-中本聪的解决方案-工作量证明机制（POW）\"><a href=\"#1-中本聪的解决方案-工作量证明机制（POW）\" class=\"headerlink\" title=\"1. 中本聪的解决方案: 工作量证明机制（POW）\"></a>1. 中本聪的解决方案: 工作量证明机制（POW）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在出现比特币之前，解决分布式系统一致性问题主要是 Lamport 提出的 Paxos 算法或其衍生算法。Paxos 类算法仅适用于中心化的分布式系统，这样的系统的没有不诚实的节点（不会发送虚假错误消息，但允许出现网络不通或宕机出现的消息延迟）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;中本聪在比特币中创造性的引入了 “工作量证明（POW : Proof of Work）” 来解决这个问题，有兴趣可进一步阅读工作量证明。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过工作量证明就增加了发送信息的成本，降低节点发送消息速率，这样就以保证在一个时间只有一个节点 (或是很少) 在进行广播，同时在广播时会附上自己的签名。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个过程就像一位将军 A 在向其他的将军（B、C、D…）发起一个进攻提议一样，将军 B、C、D… 看到将军 A 签过名的进攻提议书，如果是诚实的将军就会立刻同意进攻提议，而不会发起自己新的进攻提议。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以上就是比特币网络中是单个区块（账本）达成共识的方法（取得一致性）。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;理解了单个区块取得一致性的方法，那么整个区块链（总账本）如果达成一致也好理解。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们稍微把将军问题改一下：假设攻下一个城堡需要多次的进攻，每次进攻的提议必须基于之前最多次数的胜利进攻下提出的（只有这样敌方已有损失最大，我方进攻胜利的可能性就更大），这样约定之后，将军 A 在收到进攻提议时，就会检查一下这个提议是不是基于最多的胜利提出的，如果不是（基于最多的胜利）将军 A 就不会同意这样的提议，如果是的，将军 A 就会把这次提议记下来。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这就是比特币网络最长链选择。</p>\n<h2 id=\"2-权益证明机制（POS）\"><a href=\"#2-权益证明机制（POS）\" class=\"headerlink\" title=\"2. 权益证明机制（POS）\"></a>2. 权益证明机制（POS）</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;工作量证明其实相当于提高了做叛徒（发布虚假区块）的成本，在工作量证明下，只有第一个完成证明的节点才能广播区块，竞争难度非常大，需要很高的算力，如果不成功其算力就白白的耗费了（算力是需要成本的），如果有这样的算力作为诚实的节点，同样也可以获得很大的收益（这就是矿工所作的工作），这也实际就不会有做叛徒的动机，整个系统也因此而更稳定。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;很多人批评工作量证明造成巨大的电力浪费，促使人们去探索新的解决一致性（共识）问题的机制：”权益证明机制（POS: Proof of Stake）”是一个代表。在拜占庭将军问题的角度来看，它同样提高了做叛徒的成本，因为账户需要首先持有大量余额才能有更多的几率广播区块。</p>\n<p>2019-08-25更新<br>————————————<br>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>"},{"title":"搭建maven私服nexus","date":"2017-12-26T13:30:16.000Z","_content":"maven私服搭建，目的就是我们在使用maven打包时，如果私服中有相对应的包时，可以直接拉取过来，而不需要去下载，仅仅第一次使用该包时才会下载，这样会减少很多的时间，提高效率。\n<!-- more -->\n# 安装配置nexus\n下载：<a href=https://www.sonatype.com/download-oss-sonatype>nexus下载</a>\n解压：\n```\n$ tar zxvf nexus-3.6.1-02-unix.tar.gz\n```\nnexus详解文档参考<a href=https://www.xncoding.com/2017/09/02/tool/nexus.html>\n## 修改启动用户\n```\n$ vim $NEXUS_HOME/bin/nexus.rc\n```\n## 修改默认端口\n```\n$ vim $NEXUS_HOME/ etc/nexus-default.properties\n```\n## 启动\n```\n$ ./bin/nexus run\n```\n## 访问\n浏览器访问8081端口，默认登陆：\nuser: admin\npassword: admin123\n## 配置\nmaven-central：maven中央库，默认从https://repo1.maven.org/maven2上拉取jar包；\nmaven-releases：私库发行版jar，初次安装nexus请将Deployment policy设置成Allow redeploy；\nmaven-snapshots：私库快照调试版本jar；\nmaven-public：仓库分组，把上面三个仓库组合起来一起对外提供服务，在本地maven配置settings.xml中使用。\n\n# 本地maven使用私服nexus\n## maven默认配置settings.xml\n```\n<servers>\n    <server>\n        <id>releases</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n    <server>\n        <id>snapshots</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n</servers>\n\n<mirrors>\n    <mirror>\n        <id>nexus</id>\n        <mirrorOf>*</mirrorOf>\n        <url>http://123.207.66.156:8081/repository/maven-public/</url>\n    </mirror>\n</mirrors>\n\n<profiles>\n    <profile>  \n      <id>dev</id>\n      <repositories>\n        <repository>\n          <id>Nexus</id>\n          <url>http://123.207.66.156:8081/repository/maven-public/</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n    </profile>\n</profiles>\n<activeProfiles>\n    <activeProfile>dev</activeProfile>\n</activeProfiles>\n```\n## 修改工程pom.xml\n```\n<distributionManagement>\n    <repository>\n        <id>releases</id>\n        <name>Releases</name>\n        <url>http://123.207.66.156:8081/repository/maven-releases/</url>\n    </repository>\n    <snapshotRepository>\n        <id>snapshots</id>\n        <name>Snapshot</name>\n        <url>http://123.207.66.156:8081/repository/maven-snapshots/</url>\n    </snapshotRepository>\n</distributionManagement>\n```\n注意上面的repository的id值一定要跟settings.xml文件中配置的server一致。","source":"_posts/搭建maven私服nexus.md","raw":"---\ntitle: 搭建maven私服nexus\ndate: 2017-12-26 21:30:16\ntags: [maven,nexus]\ncategories: maven\n---\nmaven私服搭建，目的就是我们在使用maven打包时，如果私服中有相对应的包时，可以直接拉取过来，而不需要去下载，仅仅第一次使用该包时才会下载，这样会减少很多的时间，提高效率。\n<!-- more -->\n# 安装配置nexus\n下载：<a href=https://www.sonatype.com/download-oss-sonatype>nexus下载</a>\n解压：\n```\n$ tar zxvf nexus-3.6.1-02-unix.tar.gz\n```\nnexus详解文档参考<a href=https://www.xncoding.com/2017/09/02/tool/nexus.html>\n## 修改启动用户\n```\n$ vim $NEXUS_HOME/bin/nexus.rc\n```\n## 修改默认端口\n```\n$ vim $NEXUS_HOME/ etc/nexus-default.properties\n```\n## 启动\n```\n$ ./bin/nexus run\n```\n## 访问\n浏览器访问8081端口，默认登陆：\nuser: admin\npassword: admin123\n## 配置\nmaven-central：maven中央库，默认从https://repo1.maven.org/maven2上拉取jar包；\nmaven-releases：私库发行版jar，初次安装nexus请将Deployment policy设置成Allow redeploy；\nmaven-snapshots：私库快照调试版本jar；\nmaven-public：仓库分组，把上面三个仓库组合起来一起对外提供服务，在本地maven配置settings.xml中使用。\n\n# 本地maven使用私服nexus\n## maven默认配置settings.xml\n```\n<servers>\n    <server>\n        <id>releases</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n    <server>\n        <id>snapshots</id>\n        <username>admin</username>\n        <password>admin123</password>\n    </server>\n</servers>\n\n<mirrors>\n    <mirror>\n        <id>nexus</id>\n        <mirrorOf>*</mirrorOf>\n        <url>http://123.207.66.156:8081/repository/maven-public/</url>\n    </mirror>\n</mirrors>\n\n<profiles>\n    <profile>  \n      <id>dev</id>\n      <repositories>\n        <repository>\n          <id>Nexus</id>\n          <url>http://123.207.66.156:8081/repository/maven-public/</url>\n          <releases>\n            <enabled>true</enabled>\n          </releases>\n          <snapshots>\n            <enabled>true</enabled>\n          </snapshots>\n        </repository>\n      </repositories>\n    </profile>\n</profiles>\n<activeProfiles>\n    <activeProfile>dev</activeProfile>\n</activeProfiles>\n```\n## 修改工程pom.xml\n```\n<distributionManagement>\n    <repository>\n        <id>releases</id>\n        <name>Releases</name>\n        <url>http://123.207.66.156:8081/repository/maven-releases/</url>\n    </repository>\n    <snapshotRepository>\n        <id>snapshots</id>\n        <name>Snapshot</name>\n        <url>http://123.207.66.156:8081/repository/maven-snapshots/</url>\n    </snapshotRepository>\n</distributionManagement>\n```\n注意上面的repository的id值一定要跟settings.xml文件中配置的server一致。","slug":"搭建maven私服nexus","published":1,"updated":"2018-12-11T13:57:13.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0l9001sfbs6w2bo9u1y","content":"<p>maven私服搭建，目的就是我们在使用maven打包时，如果私服中有相对应的包时，可以直接拉取过来，而不需要去下载，仅仅第一次使用该包时才会下载，这样会减少很多的时间，提高效率。</p>\n<a id=\"more\"></a>\n<h1 id=\"安装配置nexus\"><a href=\"#安装配置nexus\" class=\"headerlink\" title=\"安装配置nexus\"></a>安装配置nexus</h1><p>下载：<a href=\"https://www.sonatype.com/download-oss-sonatype\" target=\"_blank\" rel=\"noopener\">nexus下载</a><br>解压：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxvf nexus-3.6.1-02-unix.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>nexus详解文档参考<a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"修改启动用户\"><a href=\"#修改启动用户\" class=\"headerlink\" title=\"修改启动用户\"></a>修改启动用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim $NEXUS_HOME/bin/nexus.rc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改默认端口\"><a href=\"#修改默认端口\" class=\"headerlink\" title=\"修改默认端口\"></a>修改默认端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim $NEXUS_HOME/ etc/nexus-default.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./bin/nexus run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>浏览器访问8081端口，默认登陆：<br>user: admin<br>password: admin123</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>maven-central：maven中央库，默认从https://repo1.maven.org/maven2上拉取jar包；<br>maven-releases：私库发行版jar，初次安装nexus请将Deployment policy设置成Allow redeploy；<br>maven-snapshots：私库快照调试版本jar；<br>maven-public：仓库分组，把上面三个仓库组合起来一起对外提供服务，在本地maven配置settings.xml中使用。</p>\n<h1 id=\"本地maven使用私服nexus\"><a href=\"#本地maven使用私服nexus\" class=\"headerlink\" title=\"本地maven使用私服nexus\"></a>本地maven使用私服nexus</h1><h2 id=\"maven默认配置settings-xml\"><a href=\"#maven默认配置settings-xml\" class=\"headerlink\" title=\"maven默认配置settings.xml\"></a>maven默认配置settings.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;releases&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">        &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;url&gt;http://123.207.66.156:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">&lt;/mirrors&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;  </span><br><span class=\"line\">      &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">      &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">          &lt;id&gt;Nexus&lt;/id&gt;</span><br><span class=\"line\">          &lt;url&gt;http://123.207.66.156:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">          &lt;releases&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">          &lt;/releases&gt;</span><br><span class=\"line\">          &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">          &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">      &lt;/repositories&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">&lt;/profiles&gt;</span><br><span class=\"line\">&lt;activeProfiles&gt;</span><br><span class=\"line\">    &lt;activeProfile&gt;dev&lt;/activeProfile&gt;</span><br><span class=\"line\">&lt;/activeProfiles&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改工程pom-xml\"><a href=\"#修改工程pom-xml\" class=\"headerlink\" title=\"修改工程pom.xml\"></a>修改工程pom.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;distributionManagement&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;releases&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Releases&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://123.207.66.156:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">    &lt;snapshotRepository&gt;</span><br><span class=\"line\">        &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Snapshot&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://123.207.66.156:8081/repository/maven-snapshots/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/snapshotRepository&gt;</span><br><span class=\"line\">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的repository的id值一定要跟settings.xml文件中配置的server一致。</p>\n","site":{"data":{}},"excerpt":"<p>maven私服搭建，目的就是我们在使用maven打包时，如果私服中有相对应的包时，可以直接拉取过来，而不需要去下载，仅仅第一次使用该包时才会下载，这样会减少很多的时间，提高效率。</p>","more":"<h1 id=\"安装配置nexus\"><a href=\"#安装配置nexus\" class=\"headerlink\" title=\"安装配置nexus\"></a>安装配置nexus</h1><p>下载：<a href=\"https://www.sonatype.com/download-oss-sonatype\" target=\"_blank\" rel=\"noopener\">nexus下载</a><br>解压：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ tar zxvf nexus-3.6.1-02-unix.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>nexus详解文档参考<a href=\"https://www.xncoding.com/2017/09/02/tool/nexus.html\" target=\"_blank\" rel=\"noopener\"></a></p>\n<h2 id=\"修改启动用户\"><a href=\"#修改启动用户\" class=\"headerlink\" title=\"修改启动用户\"></a>修改启动用户</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim $NEXUS_HOME/bin/nexus.rc</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改默认端口\"><a href=\"#修改默认端口\" class=\"headerlink\" title=\"修改默认端口\"></a>修改默认端口</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ vim $NEXUS_HOME/ etc/nexus-default.properties</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ ./bin/nexus run</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问\"><a href=\"#访问\" class=\"headerlink\" title=\"访问\"></a>访问</h2><p>浏览器访问8081端口，默认登陆：<br>user: admin<br>password: admin123</p>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><p>maven-central：maven中央库，默认从https://repo1.maven.org/maven2上拉取jar包；<br>maven-releases：私库发行版jar，初次安装nexus请将Deployment policy设置成Allow redeploy；<br>maven-snapshots：私库快照调试版本jar；<br>maven-public：仓库分组，把上面三个仓库组合起来一起对外提供服务，在本地maven配置settings.xml中使用。</p>\n<h1 id=\"本地maven使用私服nexus\"><a href=\"#本地maven使用私服nexus\" class=\"headerlink\" title=\"本地maven使用私服nexus\"></a>本地maven使用私服nexus</h1><h2 id=\"maven默认配置settings-xml\"><a href=\"#maven默认配置settings-xml\" class=\"headerlink\" title=\"maven默认配置settings.xml\"></a>maven默认配置settings.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;servers&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;releases&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">    &lt;server&gt;</span><br><span class=\"line\">        &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class=\"line\">        &lt;username&gt;admin&lt;/username&gt;</span><br><span class=\"line\">        &lt;password&gt;admin123&lt;/password&gt;</span><br><span class=\"line\">    &lt;/server&gt;</span><br><span class=\"line\">&lt;/servers&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;mirrors&gt;</span><br><span class=\"line\">    &lt;mirror&gt;</span><br><span class=\"line\">        &lt;id&gt;nexus&lt;/id&gt;</span><br><span class=\"line\">        &lt;mirrorOf&gt;*&lt;/mirrorOf&gt;</span><br><span class=\"line\">        &lt;url&gt;http://123.207.66.156:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/mirror&gt;</span><br><span class=\"line\">&lt;/mirrors&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;profiles&gt;</span><br><span class=\"line\">    &lt;profile&gt;  </span><br><span class=\"line\">      &lt;id&gt;dev&lt;/id&gt;</span><br><span class=\"line\">      &lt;repositories&gt;</span><br><span class=\"line\">        &lt;repository&gt;</span><br><span class=\"line\">          &lt;id&gt;Nexus&lt;/id&gt;</span><br><span class=\"line\">          &lt;url&gt;http://123.207.66.156:8081/repository/maven-public/&lt;/url&gt;</span><br><span class=\"line\">          &lt;releases&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">          &lt;/releases&gt;</span><br><span class=\"line\">          &lt;snapshots&gt;</span><br><span class=\"line\">            &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class=\"line\">          &lt;/snapshots&gt;</span><br><span class=\"line\">        &lt;/repository&gt;</span><br><span class=\"line\">      &lt;/repositories&gt;</span><br><span class=\"line\">    &lt;/profile&gt;</span><br><span class=\"line\">&lt;/profiles&gt;</span><br><span class=\"line\">&lt;activeProfiles&gt;</span><br><span class=\"line\">    &lt;activeProfile&gt;dev&lt;/activeProfile&gt;</span><br><span class=\"line\">&lt;/activeProfiles&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"修改工程pom-xml\"><a href=\"#修改工程pom-xml\" class=\"headerlink\" title=\"修改工程pom.xml\"></a>修改工程pom.xml</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;distributionManagement&gt;</span><br><span class=\"line\">    &lt;repository&gt;</span><br><span class=\"line\">        &lt;id&gt;releases&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Releases&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://123.207.66.156:8081/repository/maven-releases/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/repository&gt;</span><br><span class=\"line\">    &lt;snapshotRepository&gt;</span><br><span class=\"line\">        &lt;id&gt;snapshots&lt;/id&gt;</span><br><span class=\"line\">        &lt;name&gt;Snapshot&lt;/name&gt;</span><br><span class=\"line\">        &lt;url&gt;http://123.207.66.156:8081/repository/maven-snapshots/&lt;/url&gt;</span><br><span class=\"line\">    &lt;/snapshotRepository&gt;</span><br><span class=\"line\">&lt;/distributionManagement&gt;</span><br></pre></td></tr></table></figure>\n\n<p>注意上面的repository的id值一定要跟settings.xml文件中配置的server一致。</p>"},{"title":"搭建zookeeper集群","date":"2019-08-31T02:46:45.000Z","_content":"\nzookeeper作为一个hadoop生态组件的连接器，在节点服务之间的通信及元数据管理上起着非常重要的作用，下面看看搭建步骤。\n![zookeeper_logo](搭建zookeeper集群/zookeeper_small.gif)\n<!-- more -->\n\n# 1、软件环境\n    Linux服务器。使用数量为一台，三台，五台，（2*n+1）。zookeeper集群的工作是超过半数才能对外提供服务，三台中超过两台超过半数，允许一台挂掉。最好不要使用偶数台。\n例如：如果有4台，那么挂掉一台还剩下三台，如果再挂掉一台就不能行了，因为是要超过半数。\n    Java jdk1.8\n    zookeeper包\n# 2、配置与安装zookeeper\n## 配置文件zoo.cfg\n```\ntar -zxvf zookeeper-*.tar.gz  -C /usr/local\ncd  /usr/local/zookeeper/conf\ncp  zoo_sample.cfg zoo.cfg\nvim zoo.cfg\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/usr/local/zookeeper/zkdata\ndataLogDir=/usr/local/zookeeper/zkdatalog\nclientPort=2181\n// 此处的IP就是你所操作的三台虚拟机的IP地址，每台虚拟机的zoo.cfg中都需要填入这三个地址。第一个端口是master和slave之间的通信端口，默认是2888，第二个端口是leader选举的端口，集群刚启动的时候选举或者leader挂掉之后进行新的选举的端口默认是3888\nserver.1=192.168.172.10:2888:3888\nserver.2=192.168.172.11:2888:3888\nserver.3=192.168.172.12:2888:3888\n// server.1 这个1是服务器的标识也可以是其他的数字， 表示这个是第几号服务器，用来标识服务器，这个标识要写到快照目录下面myid文件里\n创建myid文件。以现在所在的第一台虚拟机192.168.172.10为例，对应server.1，通过上边的配置信息可以查到。创建myid文件的目的是为了让zookeeper知道自己在哪台服务器上，例如现在所在的虚拟机是192.168.172.10，它对应的id是1，那么就在myid文件中写入1.\n```\n\n## 节点id配置\n```\necho \"1\" > /usr/local/zookeeper/zkdata/myid\n另外两台虚拟机上也需要创建myid文件并写入相应的id，id根据zoo.cfg文件中的IP地址查询。\necho \"2\" > /usr/local/zookeeper/zkdata/myid\necho \"3\" > /usr/local/zookeeper/zkdata/myid\n```\n# 3、启动zookeeper\n```\ncd /usr/local/zookeeper/bin\n// 启动服务 (注意！三台虚拟机都要进行该操作)\n./zkServer.sh start\n// 检查服务器状态\n./zkServer.sh status\n```\n// 显示如下\nJMX enabled by default\nUsing config: /opt/zookeeper/zookeeper-3.4.6/bin/../conf/zoo.cfg\nMode: follower #他是主节点leader还是从节点follower\n# 4、补充说明\n## 1. myid文件和server.myid\n在快照目录下存放的标识本台服务器的文件，他是整个zk集群用来发现彼此的一个重要标识，myid必须与zoo.cfg配置中的 server.? 一致。\n## 2. zoo.cfg配置文件\nzoo.cfg文件是zookeeper配置文件，在conf目录里。\n```\n// tickTime：\n这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。\n// initLimit：\n这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 52000=10 秒\n// syncLimit：\n这个配置项标识 Leader 与Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是52000=10秒\n// dataDir：\n快照日志的存储路径\n// dataLogDir：\n事物日志的存储路径，如果不配置这个那么事物日志会默认存储到dataDir制定的目录，这样会严重影响zk的性能，当zk吞吐量较大的时候，产生的事物日志、快照日志太多\n// clientPort：\n这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。修改他的端口改大点\n```","source":"_posts/搭建zookeeper集群.md","raw":"---\ntitle: 搭建zookeeper集群\ndate: 2019-08-31 10:46:45\ntags: zookeeper\ncategories: 环境搭建\n---\n\nzookeeper作为一个hadoop生态组件的连接器，在节点服务之间的通信及元数据管理上起着非常重要的作用，下面看看搭建步骤。\n![zookeeper_logo](搭建zookeeper集群/zookeeper_small.gif)\n<!-- more -->\n\n# 1、软件环境\n    Linux服务器。使用数量为一台，三台，五台，（2*n+1）。zookeeper集群的工作是超过半数才能对外提供服务，三台中超过两台超过半数，允许一台挂掉。最好不要使用偶数台。\n例如：如果有4台，那么挂掉一台还剩下三台，如果再挂掉一台就不能行了，因为是要超过半数。\n    Java jdk1.8\n    zookeeper包\n# 2、配置与安装zookeeper\n## 配置文件zoo.cfg\n```\ntar -zxvf zookeeper-*.tar.gz  -C /usr/local\ncd  /usr/local/zookeeper/conf\ncp  zoo_sample.cfg zoo.cfg\nvim zoo.cfg\ntickTime=2000\ninitLimit=10\nsyncLimit=5\ndataDir=/usr/local/zookeeper/zkdata\ndataLogDir=/usr/local/zookeeper/zkdatalog\nclientPort=2181\n// 此处的IP就是你所操作的三台虚拟机的IP地址，每台虚拟机的zoo.cfg中都需要填入这三个地址。第一个端口是master和slave之间的通信端口，默认是2888，第二个端口是leader选举的端口，集群刚启动的时候选举或者leader挂掉之后进行新的选举的端口默认是3888\nserver.1=192.168.172.10:2888:3888\nserver.2=192.168.172.11:2888:3888\nserver.3=192.168.172.12:2888:3888\n// server.1 这个1是服务器的标识也可以是其他的数字， 表示这个是第几号服务器，用来标识服务器，这个标识要写到快照目录下面myid文件里\n创建myid文件。以现在所在的第一台虚拟机192.168.172.10为例，对应server.1，通过上边的配置信息可以查到。创建myid文件的目的是为了让zookeeper知道自己在哪台服务器上，例如现在所在的虚拟机是192.168.172.10，它对应的id是1，那么就在myid文件中写入1.\n```\n\n## 节点id配置\n```\necho \"1\" > /usr/local/zookeeper/zkdata/myid\n另外两台虚拟机上也需要创建myid文件并写入相应的id，id根据zoo.cfg文件中的IP地址查询。\necho \"2\" > /usr/local/zookeeper/zkdata/myid\necho \"3\" > /usr/local/zookeeper/zkdata/myid\n```\n# 3、启动zookeeper\n```\ncd /usr/local/zookeeper/bin\n// 启动服务 (注意！三台虚拟机都要进行该操作)\n./zkServer.sh start\n// 检查服务器状态\n./zkServer.sh status\n```\n// 显示如下\nJMX enabled by default\nUsing config: /opt/zookeeper/zookeeper-3.4.6/bin/../conf/zoo.cfg\nMode: follower #他是主节点leader还是从节点follower\n# 4、补充说明\n## 1. myid文件和server.myid\n在快照目录下存放的标识本台服务器的文件，他是整个zk集群用来发现彼此的一个重要标识，myid必须与zoo.cfg配置中的 server.? 一致。\n## 2. zoo.cfg配置文件\nzoo.cfg文件是zookeeper配置文件，在conf目录里。\n```\n// tickTime：\n这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。\n// initLimit：\n这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 52000=10 秒\n// syncLimit：\n这个配置项标识 Leader 与Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是52000=10秒\n// dataDir：\n快照日志的存储路径\n// dataLogDir：\n事物日志的存储路径，如果不配置这个那么事物日志会默认存储到dataDir制定的目录，这样会严重影响zk的性能，当zk吞吐量较大的时候，产生的事物日志、快照日志太多\n// clientPort：\n这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。修改他的端口改大点\n```","slug":"搭建zookeeper集群","published":1,"updated":"2019-08-31T03:21:57.832Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lb001tfbs6ju3k26vl","content":"<p>zookeeper作为一个hadoop生态组件的连接器，在节点服务之间的通信及元数据管理上起着非常重要的作用，下面看看搭建步骤。<br><img src=\"/2019/08/31/搭建zookeeper集群/zookeeper_small.gif\" alt=\"zookeeper_logo\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1、软件环境\"><a href=\"#1、软件环境\" class=\"headerlink\" title=\"1、软件环境\"></a>1、软件环境</h1><pre><code>Linux服务器。使用数量为一台，三台，五台，（2*n+1）。zookeeper集群的工作是超过半数才能对外提供服务，三台中超过两台超过半数，允许一台挂掉。最好不要使用偶数台。</code></pre><p>例如：如果有4台，那么挂掉一台还剩下三台，如果再挂掉一台就不能行了，因为是要超过半数。<br>    Java jdk1.8<br>    zookeeper包</p>\n<h1 id=\"2、配置与安装zookeeper\"><a href=\"#2、配置与安装zookeeper\" class=\"headerlink\" title=\"2、配置与安装zookeeper\"></a>2、配置与安装zookeeper</h1><h2 id=\"配置文件zoo-cfg\"><a href=\"#配置文件zoo-cfg\" class=\"headerlink\" title=\"配置文件zoo.cfg\"></a>配置文件zoo.cfg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf zookeeper-*.tar.gz  -C /usr/local</span><br><span class=\"line\">cd  /usr/local/zookeeper/conf</span><br><span class=\"line\">cp  zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vim zoo.cfg</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=/usr/local/zookeeper/zkdata</span><br><span class=\"line\">dataLogDir=/usr/local/zookeeper/zkdatalog</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">// 此处的IP就是你所操作的三台虚拟机的IP地址，每台虚拟机的zoo.cfg中都需要填入这三个地址。第一个端口是master和slave之间的通信端口，默认是2888，第二个端口是leader选举的端口，集群刚启动的时候选举或者leader挂掉之后进行新的选举的端口默认是3888</span><br><span class=\"line\">server.1=192.168.172.10:2888:3888</span><br><span class=\"line\">server.2=192.168.172.11:2888:3888</span><br><span class=\"line\">server.3=192.168.172.12:2888:3888</span><br><span class=\"line\">// server.1 这个1是服务器的标识也可以是其他的数字， 表示这个是第几号服务器，用来标识服务器，这个标识要写到快照目录下面myid文件里</span><br><span class=\"line\">创建myid文件。以现在所在的第一台虚拟机192.168.172.10为例，对应server.1，通过上边的配置信息可以查到。创建myid文件的目的是为了让zookeeper知道自己在哪台服务器上，例如现在所在的虚拟机是192.168.172.10，它对应的id是1，那么就在myid文件中写入1.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点id配置\"><a href=\"#节点id配置\" class=\"headerlink\" title=\"节点id配置\"></a>节点id配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;1&quot; &gt; /usr/local/zookeeper/zkdata/myid</span><br><span class=\"line\">另外两台虚拟机上也需要创建myid文件并写入相应的id，id根据zoo.cfg文件中的IP地址查询。</span><br><span class=\"line\">echo &quot;2&quot; &gt; /usr/local/zookeeper/zkdata/myid</span><br><span class=\"line\">echo &quot;3&quot; &gt; /usr/local/zookeeper/zkdata/myid</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、启动zookeeper\"><a href=\"#3、启动zookeeper\" class=\"headerlink\" title=\"3、启动zookeeper\"></a>3、启动zookeeper</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/zookeeper/bin</span><br><span class=\"line\">// 启动服务 (注意！三台虚拟机都要进行该操作)</span><br><span class=\"line\">./zkServer.sh start</span><br><span class=\"line\">// 检查服务器状态</span><br><span class=\"line\">./zkServer.sh status</span><br></pre></td></tr></table></figure>\n\n<p>// 显示如下<br>JMX enabled by default<br>Using config: /opt/zookeeper/zookeeper-3.4.6/bin/../conf/zoo.cfg<br>Mode: follower #他是主节点leader还是从节点follower</p>\n<h1 id=\"4、补充说明\"><a href=\"#4、补充说明\" class=\"headerlink\" title=\"4、补充说明\"></a>4、补充说明</h1><h2 id=\"1-myid文件和server-myid\"><a href=\"#1-myid文件和server-myid\" class=\"headerlink\" title=\"1. myid文件和server.myid\"></a>1. myid文件和server.myid</h2><p>在快照目录下存放的标识本台服务器的文件，他是整个zk集群用来发现彼此的一个重要标识，myid必须与zoo.cfg配置中的 server.? 一致。</p>\n<h2 id=\"2-zoo-cfg配置文件\"><a href=\"#2-zoo-cfg配置文件\" class=\"headerlink\" title=\"2. zoo.cfg配置文件\"></a>2. zoo.cfg配置文件</h2><p>zoo.cfg文件是zookeeper配置文件，在conf目录里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tickTime：</span><br><span class=\"line\">这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</span><br><span class=\"line\">// initLimit：</span><br><span class=\"line\">这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 52000=10 秒</span><br><span class=\"line\">// syncLimit：</span><br><span class=\"line\">这个配置项标识 Leader 与Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是52000=10秒</span><br><span class=\"line\">// dataDir：</span><br><span class=\"line\">快照日志的存储路径</span><br><span class=\"line\">// dataLogDir：</span><br><span class=\"line\">事物日志的存储路径，如果不配置这个那么事物日志会默认存储到dataDir制定的目录，这样会严重影响zk的性能，当zk吞吐量较大的时候，产生的事物日志、快照日志太多</span><br><span class=\"line\">// clientPort：</span><br><span class=\"line\">这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。修改他的端口改大点</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>zookeeper作为一个hadoop生态组件的连接器，在节点服务之间的通信及元数据管理上起着非常重要的作用，下面看看搭建步骤。<br><img src=\"/2019/08/31/搭建zookeeper集群/zookeeper_small.gif\" alt=\"zookeeper_logo\"></p>","more":"<h1 id=\"1、软件环境\"><a href=\"#1、软件环境\" class=\"headerlink\" title=\"1、软件环境\"></a>1、软件环境</h1><pre><code>Linux服务器。使用数量为一台，三台，五台，（2*n+1）。zookeeper集群的工作是超过半数才能对外提供服务，三台中超过两台超过半数，允许一台挂掉。最好不要使用偶数台。</code></pre><p>例如：如果有4台，那么挂掉一台还剩下三台，如果再挂掉一台就不能行了，因为是要超过半数。<br>    Java jdk1.8<br>    zookeeper包</p>\n<h1 id=\"2、配置与安装zookeeper\"><a href=\"#2、配置与安装zookeeper\" class=\"headerlink\" title=\"2、配置与安装zookeeper\"></a>2、配置与安装zookeeper</h1><h2 id=\"配置文件zoo-cfg\"><a href=\"#配置文件zoo-cfg\" class=\"headerlink\" title=\"配置文件zoo.cfg\"></a>配置文件zoo.cfg</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf zookeeper-*.tar.gz  -C /usr/local</span><br><span class=\"line\">cd  /usr/local/zookeeper/conf</span><br><span class=\"line\">cp  zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vim zoo.cfg</span><br><span class=\"line\">tickTime=2000</span><br><span class=\"line\">initLimit=10</span><br><span class=\"line\">syncLimit=5</span><br><span class=\"line\">dataDir=/usr/local/zookeeper/zkdata</span><br><span class=\"line\">dataLogDir=/usr/local/zookeeper/zkdatalog</span><br><span class=\"line\">clientPort=2181</span><br><span class=\"line\">// 此处的IP就是你所操作的三台虚拟机的IP地址，每台虚拟机的zoo.cfg中都需要填入这三个地址。第一个端口是master和slave之间的通信端口，默认是2888，第二个端口是leader选举的端口，集群刚启动的时候选举或者leader挂掉之后进行新的选举的端口默认是3888</span><br><span class=\"line\">server.1=192.168.172.10:2888:3888</span><br><span class=\"line\">server.2=192.168.172.11:2888:3888</span><br><span class=\"line\">server.3=192.168.172.12:2888:3888</span><br><span class=\"line\">// server.1 这个1是服务器的标识也可以是其他的数字， 表示这个是第几号服务器，用来标识服务器，这个标识要写到快照目录下面myid文件里</span><br><span class=\"line\">创建myid文件。以现在所在的第一台虚拟机192.168.172.10为例，对应server.1，通过上边的配置信息可以查到。创建myid文件的目的是为了让zookeeper知道自己在哪台服务器上，例如现在所在的虚拟机是192.168.172.10，它对应的id是1，那么就在myid文件中写入1.</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"节点id配置\"><a href=\"#节点id配置\" class=\"headerlink\" title=\"节点id配置\"></a>节点id配置</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;1&quot; &gt; /usr/local/zookeeper/zkdata/myid</span><br><span class=\"line\">另外两台虚拟机上也需要创建myid文件并写入相应的id，id根据zoo.cfg文件中的IP地址查询。</span><br><span class=\"line\">echo &quot;2&quot; &gt; /usr/local/zookeeper/zkdata/myid</span><br><span class=\"line\">echo &quot;3&quot; &gt; /usr/local/zookeeper/zkdata/myid</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、启动zookeeper\"><a href=\"#3、启动zookeeper\" class=\"headerlink\" title=\"3、启动zookeeper\"></a>3、启动zookeeper</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/zookeeper/bin</span><br><span class=\"line\">// 启动服务 (注意！三台虚拟机都要进行该操作)</span><br><span class=\"line\">./zkServer.sh start</span><br><span class=\"line\">// 检查服务器状态</span><br><span class=\"line\">./zkServer.sh status</span><br></pre></td></tr></table></figure>\n\n<p>// 显示如下<br>JMX enabled by default<br>Using config: /opt/zookeeper/zookeeper-3.4.6/bin/../conf/zoo.cfg<br>Mode: follower #他是主节点leader还是从节点follower</p>\n<h1 id=\"4、补充说明\"><a href=\"#4、补充说明\" class=\"headerlink\" title=\"4、补充说明\"></a>4、补充说明</h1><h2 id=\"1-myid文件和server-myid\"><a href=\"#1-myid文件和server-myid\" class=\"headerlink\" title=\"1. myid文件和server.myid\"></a>1. myid文件和server.myid</h2><p>在快照目录下存放的标识本台服务器的文件，他是整个zk集群用来发现彼此的一个重要标识，myid必须与zoo.cfg配置中的 server.? 一致。</p>\n<h2 id=\"2-zoo-cfg配置文件\"><a href=\"#2-zoo-cfg配置文件\" class=\"headerlink\" title=\"2. zoo.cfg配置文件\"></a>2. zoo.cfg配置文件</h2><p>zoo.cfg文件是zookeeper配置文件，在conf目录里。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// tickTime：</span><br><span class=\"line\">这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</span><br><span class=\"line\">// initLimit：</span><br><span class=\"line\">这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 5个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 52000=10 秒</span><br><span class=\"line\">// syncLimit：</span><br><span class=\"line\">这个配置项标识 Leader 与Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是52000=10秒</span><br><span class=\"line\">// dataDir：</span><br><span class=\"line\">快照日志的存储路径</span><br><span class=\"line\">// dataLogDir：</span><br><span class=\"line\">事物日志的存储路径，如果不配置这个那么事物日志会默认存储到dataDir制定的目录，这样会严重影响zk的性能，当zk吞吐量较大的时候，产生的事物日志、快照日志太多</span><br><span class=\"line\">// clientPort：</span><br><span class=\"line\">这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。修改他的端口改大点</span><br></pre></td></tr></table></figure>"},{"title":"数据库、数据仓库、数据集市的区别与联系","date":"2019-09-17T14:36:45.000Z","notebook":"笔记","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据库</b>：按照数据结构来<b>组织</b>、<b>存储</b>、<b>管理</b>数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据仓库</b>(Data Warehouse) 是一个<b>面向主题的</b>(SubjectOri2ented) 、<b>集成的</b>(Integrate) 、<b>相对稳定的</b>(Non -Volatile) 、<b>反映历史变化</b>(TimeVariant) 的数据集合用于支持管理决策。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据集市</b>：数据集市不同于数据仓库，一般是服务于某几个部门。<b>数据仓库向各个数据集市提供数据</b>，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。\n\n![data_relationship](数据库、数据仓库、数据集市的区别与联系/data-relationship.jpeg)\n\n<!-- more -->\n\n# 一.数据库\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照数据结构来组织、存储、管理数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。\n\n# 二.数据仓库\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库(Data Warehouse) 是一个面向主题的(SubjectOri2ented) 、集成的( Integrate ) 、相对稳定的(Non -Volatile ) 、反映历史变化( TimeVariant) 的数据集合用于支持管理决策。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个定义比较系统地阐述了数据仓库的特点，下面我们一一解读。\n## 1. 面向主题的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库是为了提供决策服务的，会建立不同的主题，而主题是进行决策是需要重点关注的部分。\n## 2. 集成的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库可以整合来自不同数据源的数据，将这个数据入库、清洗整合成统一的标准化数据。同时上文中提到的一个主题往往与多个系统相关，集成的数据很好的满足了主题构建的数据需求。数据仓库对原有的分散的数据库进行数据抽取、清理的基础上经过系统加工、汇总整理得到，清除原数据中的不一致性（面向事务的数据库往往单独存放单个系统的数据，且不同数据库相互独立，且是异构的）\n## 3. 相对稳定的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库的数据面向决策，这就表明了仓库中的数据数据进入之后就会长期保留，主要面对的是查询， 修改与删除操作比较少，一般是定期的加载、更新\n## 4. 反映历史变化的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库中会保存各个日期节点的数据，以满足不断变化的业务的需求。\n\n# 三.数据集市\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据集市不同于数据仓库，一般是服务于某几个部门。数据仓库向各个数据集市提供数据，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下图：\n![data_warehouse](数据库、数据仓库、数据集市的区别与联系/data_warehouse.jpeg)\n\n# 四.总结\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于操作型系统，我们希望数据便于修改、满足一致性，因此产生了三范式数据库；在面对企业级决策需求的数据支撑时，我们希望系统可以集成不同的数据源的数据、数据稳定、结构统一、保存历史数据，可以满足不同部门的不断变化的数据系统，因此产生了数据仓库；对于不同的部门来讲，进行决策时如果直接访问数据仓库，得到信息需要多张表进行关联，访问压力大，且主题繁多不易于管理。因此需要建立数据集市，从数据仓库中直接取数，对数据进行汇总整理以满足特定部门的需求。\n\n\n- - -\n仰望星空，脚踏实地","source":"_posts/数据库、数据仓库、数据集市的区别与联系.md","raw":"---\ntitle: 数据库、数据仓库、数据集市的区别与联系\ndate: 2019-09-17 22:36:45\ntags: [数据库,数据仓库,数据集市]\ncategories: 数据仓库\nnotebook: 笔记\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据库</b>：按照数据结构来<b>组织</b>、<b>存储</b>、<b>管理</b>数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据仓库</b>(Data Warehouse) 是一个<b>面向主题的</b>(SubjectOri2ented) 、<b>集成的</b>(Integrate) 、<b>相对稳定的</b>(Non -Volatile) 、<b>反映历史变化</b>(TimeVariant) 的数据集合用于支持管理决策。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据集市</b>：数据集市不同于数据仓库，一般是服务于某几个部门。<b>数据仓库向各个数据集市提供数据</b>，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。\n\n![data_relationship](数据库、数据仓库、数据集市的区别与联系/data-relationship.jpeg)\n\n<!-- more -->\n\n# 一.数据库\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照数据结构来组织、存储、管理数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。\n\n# 二.数据仓库\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库(Data Warehouse) 是一个面向主题的(SubjectOri2ented) 、集成的( Integrate ) 、相对稳定的(Non -Volatile ) 、反映历史变化( TimeVariant) 的数据集合用于支持管理决策。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个定义比较系统地阐述了数据仓库的特点，下面我们一一解读。\n## 1. 面向主题的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库是为了提供决策服务的，会建立不同的主题，而主题是进行决策是需要重点关注的部分。\n## 2. 集成的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库可以整合来自不同数据源的数据，将这个数据入库、清洗整合成统一的标准化数据。同时上文中提到的一个主题往往与多个系统相关，集成的数据很好的满足了主题构建的数据需求。数据仓库对原有的分散的数据库进行数据抽取、清理的基础上经过系统加工、汇总整理得到，清除原数据中的不一致性（面向事务的数据库往往单独存放单个系统的数据，且不同数据库相互独立，且是异构的）\n## 3. 相对稳定的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库的数据面向决策，这就表明了仓库中的数据数据进入之后就会长期保留，主要面对的是查询， 修改与删除操作比较少，一般是定期的加载、更新\n## 4. 反映历史变化的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库中会保存各个日期节点的数据，以满足不断变化的业务的需求。\n\n# 三.数据集市\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据集市不同于数据仓库，一般是服务于某几个部门。数据仓库向各个数据集市提供数据，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下图：\n![data_warehouse](数据库、数据仓库、数据集市的区别与联系/data_warehouse.jpeg)\n\n# 四.总结\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于操作型系统，我们希望数据便于修改、满足一致性，因此产生了三范式数据库；在面对企业级决策需求的数据支撑时，我们希望系统可以集成不同的数据源的数据、数据稳定、结构统一、保存历史数据，可以满足不同部门的不断变化的数据系统，因此产生了数据仓库；对于不同的部门来讲，进行决策时如果直接访问数据仓库，得到信息需要多张表进行关联，访问压力大，且主题繁多不易于管理。因此需要建立数据集市，从数据仓库中直接取数，对数据进行汇总整理以满足特定部门的需求。\n\n\n- - -\n仰望星空，脚踏实地","slug":"数据库、数据仓库、数据集市的区别与联系","published":1,"updated":"2019-09-17T15:58:41.816Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lf001ufbs6nrwys8o2","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据库</b>：按照数据结构来<b>组织</b>、<b>存储</b>、<b>管理</b>数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据仓库</b>(Data Warehouse) 是一个<b>面向主题的</b>(SubjectOri2ented) 、<b>集成的</b>(Integrate) 、<b>相对稳定的</b>(Non -Volatile) 、<b>反映历史变化</b>(TimeVariant) 的数据集合用于支持管理决策。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据集市</b>：数据集市不同于数据仓库，一般是服务于某几个部门。<b>数据仓库向各个数据集市提供数据</b>，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。</p>\n<p><img src=\"/2019/09/17/数据库、数据仓库、数据集市的区别与联系/data-relationship.jpeg\" alt=\"data_relationship\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"一-数据库\"><a href=\"#一-数据库\" class=\"headerlink\" title=\"一.数据库\"></a>一.数据库</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照数据结构来组织、存储、管理数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。</p>\n<h1 id=\"二-数据仓库\"><a href=\"#二-数据仓库\" class=\"headerlink\" title=\"二.数据仓库\"></a>二.数据仓库</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库(Data Warehouse) 是一个面向主题的(SubjectOri2ented) 、集成的( Integrate ) 、相对稳定的(Non -Volatile ) 、反映历史变化( TimeVariant) 的数据集合用于支持管理决策。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个定义比较系统地阐述了数据仓库的特点，下面我们一一解读。</p>\n<h2 id=\"1-面向主题的\"><a href=\"#1-面向主题的\" class=\"headerlink\" title=\"1. 面向主题的\"></a>1. 面向主题的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库是为了提供决策服务的，会建立不同的主题，而主题是进行决策是需要重点关注的部分。</p>\n<h2 id=\"2-集成的\"><a href=\"#2-集成的\" class=\"headerlink\" title=\"2. 集成的\"></a>2. 集成的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库可以整合来自不同数据源的数据，将这个数据入库、清洗整合成统一的标准化数据。同时上文中提到的一个主题往往与多个系统相关，集成的数据很好的满足了主题构建的数据需求。数据仓库对原有的分散的数据库进行数据抽取、清理的基础上经过系统加工、汇总整理得到，清除原数据中的不一致性（面向事务的数据库往往单独存放单个系统的数据，且不同数据库相互独立，且是异构的）</p>\n<h2 id=\"3-相对稳定的\"><a href=\"#3-相对稳定的\" class=\"headerlink\" title=\"3. 相对稳定的\"></a>3. 相对稳定的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库的数据面向决策，这就表明了仓库中的数据数据进入之后就会长期保留，主要面对的是查询， 修改与删除操作比较少，一般是定期的加载、更新</p>\n<h2 id=\"4-反映历史变化的\"><a href=\"#4-反映历史变化的\" class=\"headerlink\" title=\"4. 反映历史变化的\"></a>4. 反映历史变化的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库中会保存各个日期节点的数据，以满足不断变化的业务的需求。</p>\n<h1 id=\"三-数据集市\"><a href=\"#三-数据集市\" class=\"headerlink\" title=\"三.数据集市\"></a>三.数据集市</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据集市不同于数据仓库，一般是服务于某几个部门。数据仓库向各个数据集市提供数据，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下图：<br><img src=\"/2019/09/17/数据库、数据仓库、数据集市的区别与联系/data_warehouse.jpeg\" alt=\"data_warehouse\"></p>\n<h1 id=\"四-总结\"><a href=\"#四-总结\" class=\"headerlink\" title=\"四.总结\"></a>四.总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于操作型系统，我们希望数据便于修改、满足一致性，因此产生了三范式数据库；在面对企业级决策需求的数据支撑时，我们希望系统可以集成不同的数据源的数据、数据稳定、结构统一、保存历史数据，可以满足不同部门的不断变化的数据系统，因此产生了数据仓库；对于不同的部门来讲，进行决策时如果直接访问数据仓库，得到信息需要多张表进行关联，访问压力大，且主题繁多不易于管理。因此需要建立数据集市，从数据仓库中直接取数，对数据进行汇总整理以满足特定部门的需求。</p>\n<hr>\n<p>仰望星空，脚踏实地</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据库</b>：按照数据结构来<b>组织</b>、<b>存储</b>、<b>管理</b>数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据仓库</b>(Data Warehouse) 是一个<b>面向主题的</b>(SubjectOri2ented) 、<b>集成的</b>(Integrate) 、<b>相对稳定的</b>(Non -Volatile) 、<b>反映历史变化</b>(TimeVariant) 的数据集合用于支持管理决策。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>数据集市</b>：数据集市不同于数据仓库，一般是服务于某几个部门。<b>数据仓库向各个数据集市提供数据</b>，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。</p>\n<p><img src=\"/2019/09/17/数据库、数据仓库、数据集市的区别与联系/data-relationship.jpeg\" alt=\"data_relationship\"></p>","more":"<h1 id=\"一-数据库\"><a href=\"#一-数据库\" class=\"headerlink\" title=\"一.数据库\"></a>一.数据库</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照数据结构来组织、存储、管理数据的建立在计算机存储设备上面的仓库。数据库一般适用于操作型系统。因为符合三范式的设置，数据的一致性较好。</p>\n<h1 id=\"二-数据仓库\"><a href=\"#二-数据仓库\" class=\"headerlink\" title=\"二.数据仓库\"></a>二.数据仓库</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库(Data Warehouse) 是一个面向主题的(SubjectOri2ented) 、集成的( Integrate ) 、相对稳定的(Non -Volatile ) 、反映历史变化( TimeVariant) 的数据集合用于支持管理决策。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个定义比较系统地阐述了数据仓库的特点，下面我们一一解读。</p>\n<h2 id=\"1-面向主题的\"><a href=\"#1-面向主题的\" class=\"headerlink\" title=\"1. 面向主题的\"></a>1. 面向主题的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库是为了提供决策服务的，会建立不同的主题，而主题是进行决策是需要重点关注的部分。</p>\n<h2 id=\"2-集成的\"><a href=\"#2-集成的\" class=\"headerlink\" title=\"2. 集成的\"></a>2. 集成的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库可以整合来自不同数据源的数据，将这个数据入库、清洗整合成统一的标准化数据。同时上文中提到的一个主题往往与多个系统相关，集成的数据很好的满足了主题构建的数据需求。数据仓库对原有的分散的数据库进行数据抽取、清理的基础上经过系统加工、汇总整理得到，清除原数据中的不一致性（面向事务的数据库往往单独存放单个系统的数据，且不同数据库相互独立，且是异构的）</p>\n<h2 id=\"3-相对稳定的\"><a href=\"#3-相对稳定的\" class=\"headerlink\" title=\"3. 相对稳定的\"></a>3. 相对稳定的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库的数据面向决策，这就表明了仓库中的数据数据进入之后就会长期保留，主要面对的是查询， 修改与删除操作比较少，一般是定期的加载、更新</p>\n<h2 id=\"4-反映历史变化的\"><a href=\"#4-反映历史变化的\" class=\"headerlink\" title=\"4. 反映历史变化的\"></a>4. 反映历史变化的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库中会保存各个日期节点的数据，以满足不断变化的业务的需求。</p>\n<h1 id=\"三-数据集市\"><a href=\"#三-数据集市\" class=\"headerlink\" title=\"三.数据集市\"></a>三.数据集市</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据集市不同于数据仓库，一般是服务于某几个部门。数据仓库向各个数据集市提供数据，且一般来讲，数据仓库的表设计符合规范化设计，而数据集市一般使用维度建模。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下图：<br><img src=\"/2019/09/17/数据库、数据仓库、数据集市的区别与联系/data_warehouse.jpeg\" alt=\"data_warehouse\"></p>\n<h1 id=\"四-总结\"><a href=\"#四-总结\" class=\"headerlink\" title=\"四.总结\"></a>四.总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;对于操作型系统，我们希望数据便于修改、满足一致性，因此产生了三范式数据库；在面对企业级决策需求的数据支撑时，我们希望系统可以集成不同的数据源的数据、数据稳定、结构统一、保存历史数据，可以满足不同部门的不断变化的数据系统，因此产生了数据仓库；对于不同的部门来讲，进行决策时如果直接访问数据仓库，得到信息需要多张表进行关联，访问压力大，且主题繁多不易于管理。因此需要建立数据集市，从数据仓库中直接取数，对数据进行汇总整理以满足特定部门的需求。</p>\n<hr>\n<p>仰望星空，脚踏实地</p>"},{"title":"2019年最健康的国家指数","date":"2019-01-01T13:26:15.000Z","_content":"最健康的国家指数，2019年\n<!-- more -->\n排名如下：\n1.西班牙\n2.意大利\n3.冰岛\n4.日本\n6.瑞典\n7.澳大利亚\n8.新加坡\n9.挪威\n10.以色列\n12.法国\n16.加拿大\n17.韩国\n19.英国\n23.德国\n26.希腊\n35.美国\n40.波兰\n48.匈牙利\n51.土耳其\n52.中国\n53.墨西哥\n54.阿根廷\n（彭博社）\n\n希望你所在的国家，没有食品安全问题。","source":"_posts/最健康的国家指数，2019年.md","raw":"---\ntitle: 2019年最健康的国家指数\ntags: 健康\ndate: 2019-01-01 21:26:15\ncategories: 世界排名\n---\n最健康的国家指数，2019年\n<!-- more -->\n排名如下：\n1.西班牙\n2.意大利\n3.冰岛\n4.日本\n6.瑞典\n7.澳大利亚\n8.新加坡\n9.挪威\n10.以色列\n12.法国\n16.加拿大\n17.韩国\n19.英国\n23.德国\n26.希腊\n35.美国\n40.波兰\n48.匈牙利\n51.土耳其\n52.中国\n53.墨西哥\n54.阿根廷\n（彭博社）\n\n希望你所在的国家，没有食品安全问题。","slug":"最健康的国家指数，2019年","published":1,"updated":"2019-04-21T03:37:33.813Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lg001vfbs602hxesqz","content":"<p>最健康的国家指数，2019年</p>\n<a id=\"more\"></a>\n<p>排名如下：<br>1.西班牙<br>2.意大利<br>3.冰岛<br>4.日本<br>6.瑞典<br>7.澳大利亚<br>8.新加坡<br>9.挪威<br>10.以色列<br>12.法国<br>16.加拿大<br>17.韩国<br>19.英国<br>23.德国<br>26.希腊<br>35.美国<br>40.波兰<br>48.匈牙利<br>51.土耳其<br>52.中国<br>53.墨西哥<br>54.阿根廷<br>（彭博社）</p>\n<p>希望你所在的国家，没有食品安全问题。</p>\n","site":{"data":{}},"excerpt":"<p>最健康的国家指数，2019年</p>","more":"<p>排名如下：<br>1.西班牙<br>2.意大利<br>3.冰岛<br>4.日本<br>6.瑞典<br>7.澳大利亚<br>8.新加坡<br>9.挪威<br>10.以色列<br>12.法国<br>16.加拿大<br>17.韩国<br>19.英国<br>23.德国<br>26.希腊<br>35.美国<br>40.波兰<br>48.匈牙利<br>51.土耳其<br>52.中国<br>53.墨西哥<br>54.阿根廷<br>（彭博社）</p>\n<p>希望你所在的国家，没有食品安全问题。</p>"},{"title":"比原链-共享经济平台简介","date":"2019-08-04T01:57:08.000Z","_content":"\nOrigin Protocol ：基于以太坊，开源的共享经济平台，是否能够成功呢？\n\n<!-- more -->\n\n![origin_protocol_chain](比原链-共享经济平台简介/structure-light-led-movement-158826.jpeg)\n\n# Origin Protocol ：基于以太坊，开源的共享经济平台\n\n诸如Airbnb、Uber、Craigslist、WeWork等共享经济公司出现之后，共享经济改变了整个商业世界的规则：消费者更喜欢去拥有一个事物的使用权，而不是所有权；而服务提供者从自己提供服务变成了生产者和消费者之间连接的纽带。整个商业模式发生了变化。\n\n到2016年为止，美国有大约22%成年人成为了共享经济的供应商，共享经济平台的收入在2017年是186亿美元，而据估计在2022年会达到400多亿美元，这是一个巨大的市场。\n\n## 痛点\n\n现有市场还存在哪些问题呢？\n\n首先，价值的分配是不公平的。都说第一个吃螃蟹的人能够获取更多的利益，但是第一个开Uber、第一个给Airbnb提供房间的人并没有因为自己是早期参与者（共建者）而受益，利益全部都在公司本身手里。\n\n其次，高昂的终结费用。Airbnb对房客收取5%-15%手续费，对房东也收取3%-5%，Uber也会对司机和乘客收取类似比例的费用。并且在平台做大之后，他们为了垄断会把收入用在阻碍创新上。\n\n然后，还有数据的所有权、安全性等问题。\n\n其实上述的问题都是中心化平台出现的问题。Origin Protocol就是为解决上述的痛点开发的。\n\n￼\n\n## 简介\n\nOrigin Protocol是基于以太坊上的共享经济平台，并用IPFS解决文件的存储问题，在分布式网络环境中促进开放、免费的服务交换。平台主要由三个部分组成：\n\n### 1、 Origin Dapp：分布式应用（Dapp）\n服务提供者能够锁定一定的代币作为抵押来创建列表，让用户搜索服务，在Dapp中能够利用法币、ERC20代币来进行结算。在不同垂直行业可以开发不同的应用来做到定制化。并且，在Origin Protocol中注册的用户能够方便地访问基于Origin Protocol的所有应用。\n\n### 2、 Origin 共享数据层和标准\n共享数据层能够让所有人都能够访问数据库。这些数据存储在IPFS和以太坊中，任何人都可以从中获取到列表项目、交易记录和买卖双方的信誉评级，从而能够被信任。\n\n### 3、 Origin 社区基金\n很大一部分的资金会交与基金管理，保证平台的长期发展。基金需要负责；项目管理、项目的孵化、雇佣开发者编写以及审核代码、财务和技术审核、提供仲裁服务等。\n\n### 4、Origin Protocol的特点\n\n用智能合约保证价值的点对点传播（无中介，安全可靠）\n\n支持数百种列表类型，提供多元化的服务\n\n用共享数据鼓励创新\n\n利用区块链技术保证数据和身份的安全\n\n### 5、团队\n\n目前，Origin的核心团队有10名成员，延伸团队有8名成员，涵盖了技术团队、社群运营专家、商业产品团队，具备了项目研发、商业落地的人力资源。核心成员来自伯克利、斯坦福等高校，拥有丰富的创业经验，其创业项目被沃尔玛、雅虎等公司收购。首席区块链工程师曾任Sphero（知名智能玩具公司）的核心技术工程师，技术团队都拥有软硬件开发的从业经历。总的来说，这是一个组成完备，从业经验丰富的团队。\n￼\n\n### 6、Origin Protocol代币\n\n技术层面上Origin Protocol的代币是十分复杂的，具体可以参考白皮书。一句话来说，代币的作用是用正面和负面的激励来确保平台的安全、实现管理并且促进买卖双方的交易。\n\n一个具体的场景是，为了避免垃圾信息，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。\n\n具体代币分配暂未公布。\n\n目前在COINLIST上开放投资者注册通道，不允许中国投资者参与，请需要参加的准备好相关材料。\n\n### 7、开发路线\n\nOrigin Protocol项目从17年五月开始，12月份就推出了测试网络，预计在18年第三季度完成平台的开发，19年达到去中心化并且正式运行。\n\n合作伙伴\n\n官网上列出大量合作伙伴，并且有不少团队已经开始基于Origin Protocol的app开发。\n\n￼\n\n## 总结\n\n总体来看，Origin Protocol相比于各类提出4.0、5.0概念的公链，是一个十分落地的项目，并且已经与大量的企业建立合作关系。目前Origin Protocol的测试网络已经上线，我们期待未来Origin Protocol的发展。\n\n官网：https://www.originprotocol.com\n\n白皮书：https://www.originprotocol.com/en/product-brief\n\nDEMO视频：https://demo.originprotocol.com\n\n\n## 个人观点\n比原链如何避免共享平台的垃圾信息、虚假信息呢？\n比原链的解决方案是，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。\n那在所有人都可以参与的情况下，如何保证刷单的事情发生呢？卖家同时拥有许多账号，并且进行投票给自己的竞争对手，此时，就会形成恶性竞争。","source":"_posts/比原链-共享经济平台简介.md","raw":"---\ntitle: 比原链-共享经济平台简介\ndate: 2019-08-04 09:57:08\ntags: [比原链,公链]\ncategories: 区块链\n---\n\nOrigin Protocol ：基于以太坊，开源的共享经济平台，是否能够成功呢？\n\n<!-- more -->\n\n![origin_protocol_chain](比原链-共享经济平台简介/structure-light-led-movement-158826.jpeg)\n\n# Origin Protocol ：基于以太坊，开源的共享经济平台\n\n诸如Airbnb、Uber、Craigslist、WeWork等共享经济公司出现之后，共享经济改变了整个商业世界的规则：消费者更喜欢去拥有一个事物的使用权，而不是所有权；而服务提供者从自己提供服务变成了生产者和消费者之间连接的纽带。整个商业模式发生了变化。\n\n到2016年为止，美国有大约22%成年人成为了共享经济的供应商，共享经济平台的收入在2017年是186亿美元，而据估计在2022年会达到400多亿美元，这是一个巨大的市场。\n\n## 痛点\n\n现有市场还存在哪些问题呢？\n\n首先，价值的分配是不公平的。都说第一个吃螃蟹的人能够获取更多的利益，但是第一个开Uber、第一个给Airbnb提供房间的人并没有因为自己是早期参与者（共建者）而受益，利益全部都在公司本身手里。\n\n其次，高昂的终结费用。Airbnb对房客收取5%-15%手续费，对房东也收取3%-5%，Uber也会对司机和乘客收取类似比例的费用。并且在平台做大之后，他们为了垄断会把收入用在阻碍创新上。\n\n然后，还有数据的所有权、安全性等问题。\n\n其实上述的问题都是中心化平台出现的问题。Origin Protocol就是为解决上述的痛点开发的。\n\n￼\n\n## 简介\n\nOrigin Protocol是基于以太坊上的共享经济平台，并用IPFS解决文件的存储问题，在分布式网络环境中促进开放、免费的服务交换。平台主要由三个部分组成：\n\n### 1、 Origin Dapp：分布式应用（Dapp）\n服务提供者能够锁定一定的代币作为抵押来创建列表，让用户搜索服务，在Dapp中能够利用法币、ERC20代币来进行结算。在不同垂直行业可以开发不同的应用来做到定制化。并且，在Origin Protocol中注册的用户能够方便地访问基于Origin Protocol的所有应用。\n\n### 2、 Origin 共享数据层和标准\n共享数据层能够让所有人都能够访问数据库。这些数据存储在IPFS和以太坊中，任何人都可以从中获取到列表项目、交易记录和买卖双方的信誉评级，从而能够被信任。\n\n### 3、 Origin 社区基金\n很大一部分的资金会交与基金管理，保证平台的长期发展。基金需要负责；项目管理、项目的孵化、雇佣开发者编写以及审核代码、财务和技术审核、提供仲裁服务等。\n\n### 4、Origin Protocol的特点\n\n用智能合约保证价值的点对点传播（无中介，安全可靠）\n\n支持数百种列表类型，提供多元化的服务\n\n用共享数据鼓励创新\n\n利用区块链技术保证数据和身份的安全\n\n### 5、团队\n\n目前，Origin的核心团队有10名成员，延伸团队有8名成员，涵盖了技术团队、社群运营专家、商业产品团队，具备了项目研发、商业落地的人力资源。核心成员来自伯克利、斯坦福等高校，拥有丰富的创业经验，其创业项目被沃尔玛、雅虎等公司收购。首席区块链工程师曾任Sphero（知名智能玩具公司）的核心技术工程师，技术团队都拥有软硬件开发的从业经历。总的来说，这是一个组成完备，从业经验丰富的团队。\n￼\n\n### 6、Origin Protocol代币\n\n技术层面上Origin Protocol的代币是十分复杂的，具体可以参考白皮书。一句话来说，代币的作用是用正面和负面的激励来确保平台的安全、实现管理并且促进买卖双方的交易。\n\n一个具体的场景是，为了避免垃圾信息，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。\n\n具体代币分配暂未公布。\n\n目前在COINLIST上开放投资者注册通道，不允许中国投资者参与，请需要参加的准备好相关材料。\n\n### 7、开发路线\n\nOrigin Protocol项目从17年五月开始，12月份就推出了测试网络，预计在18年第三季度完成平台的开发，19年达到去中心化并且正式运行。\n\n合作伙伴\n\n官网上列出大量合作伙伴，并且有不少团队已经开始基于Origin Protocol的app开发。\n\n￼\n\n## 总结\n\n总体来看，Origin Protocol相比于各类提出4.0、5.0概念的公链，是一个十分落地的项目，并且已经与大量的企业建立合作关系。目前Origin Protocol的测试网络已经上线，我们期待未来Origin Protocol的发展。\n\n官网：https://www.originprotocol.com\n\n白皮书：https://www.originprotocol.com/en/product-brief\n\nDEMO视频：https://demo.originprotocol.com\n\n\n## 个人观点\n比原链如何避免共享平台的垃圾信息、虚假信息呢？\n比原链的解决方案是，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。\n那在所有人都可以参与的情况下，如何保证刷单的事情发生呢？卖家同时拥有许多账号，并且进行投票给自己的竞争对手，此时，就会形成恶性竞争。","slug":"比原链-共享经济平台简介","published":1,"updated":"2019-08-04T02:00:32.873Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lh001wfbs61m1udnpx","content":"<p>Origin Protocol ：基于以太坊，开源的共享经济平台，是否能够成功呢？</p>\n<a id=\"more\"></a>\n\n<p><img src=\"/2019/08/04/比原链-共享经济平台简介/structure-light-led-movement-158826.jpeg\" alt=\"origin_protocol_chain\"></p>\n<h1 id=\"Origin-Protocol-：基于以太坊，开源的共享经济平台\"><a href=\"#Origin-Protocol-：基于以太坊，开源的共享经济平台\" class=\"headerlink\" title=\"Origin Protocol ：基于以太坊，开源的共享经济平台\"></a>Origin Protocol ：基于以太坊，开源的共享经济平台</h1><p>诸如Airbnb、Uber、Craigslist、WeWork等共享经济公司出现之后，共享经济改变了整个商业世界的规则：消费者更喜欢去拥有一个事物的使用权，而不是所有权；而服务提供者从自己提供服务变成了生产者和消费者之间连接的纽带。整个商业模式发生了变化。</p>\n<p>到2016年为止，美国有大约22%成年人成为了共享经济的供应商，共享经济平台的收入在2017年是186亿美元，而据估计在2022年会达到400多亿美元，这是一个巨大的市场。</p>\n<h2 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h2><p>现有市场还存在哪些问题呢？</p>\n<p>首先，价值的分配是不公平的。都说第一个吃螃蟹的人能够获取更多的利益，但是第一个开Uber、第一个给Airbnb提供房间的人并没有因为自己是早期参与者（共建者）而受益，利益全部都在公司本身手里。</p>\n<p>其次，高昂的终结费用。Airbnb对房客收取5%-15%手续费，对房东也收取3%-5%，Uber也会对司机和乘客收取类似比例的费用。并且在平台做大之后，他们为了垄断会把收入用在阻碍创新上。</p>\n<p>然后，还有数据的所有权、安全性等问题。</p>\n<p>其实上述的问题都是中心化平台出现的问题。Origin Protocol就是为解决上述的痛点开发的。</p>\n<p>￼</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Origin Protocol是基于以太坊上的共享经济平台，并用IPFS解决文件的存储问题，在分布式网络环境中促进开放、免费的服务交换。平台主要由三个部分组成：</p>\n<h3 id=\"1、-Origin-Dapp：分布式应用（Dapp）\"><a href=\"#1、-Origin-Dapp：分布式应用（Dapp）\" class=\"headerlink\" title=\"1、 Origin Dapp：分布式应用（Dapp）\"></a>1、 Origin Dapp：分布式应用（Dapp）</h3><p>服务提供者能够锁定一定的代币作为抵押来创建列表，让用户搜索服务，在Dapp中能够利用法币、ERC20代币来进行结算。在不同垂直行业可以开发不同的应用来做到定制化。并且，在Origin Protocol中注册的用户能够方便地访问基于Origin Protocol的所有应用。</p>\n<h3 id=\"2、-Origin-共享数据层和标准\"><a href=\"#2、-Origin-共享数据层和标准\" class=\"headerlink\" title=\"2、 Origin 共享数据层和标准\"></a>2、 Origin 共享数据层和标准</h3><p>共享数据层能够让所有人都能够访问数据库。这些数据存储在IPFS和以太坊中，任何人都可以从中获取到列表项目、交易记录和买卖双方的信誉评级，从而能够被信任。</p>\n<h3 id=\"3、-Origin-社区基金\"><a href=\"#3、-Origin-社区基金\" class=\"headerlink\" title=\"3、 Origin 社区基金\"></a>3、 Origin 社区基金</h3><p>很大一部分的资金会交与基金管理，保证平台的长期发展。基金需要负责；项目管理、项目的孵化、雇佣开发者编写以及审核代码、财务和技术审核、提供仲裁服务等。</p>\n<h3 id=\"4、Origin-Protocol的特点\"><a href=\"#4、Origin-Protocol的特点\" class=\"headerlink\" title=\"4、Origin Protocol的特点\"></a>4、Origin Protocol的特点</h3><p>用智能合约保证价值的点对点传播（无中介，安全可靠）</p>\n<p>支持数百种列表类型，提供多元化的服务</p>\n<p>用共享数据鼓励创新</p>\n<p>利用区块链技术保证数据和身份的安全</p>\n<h3 id=\"5、团队\"><a href=\"#5、团队\" class=\"headerlink\" title=\"5、团队\"></a>5、团队</h3><p>目前，Origin的核心团队有10名成员，延伸团队有8名成员，涵盖了技术团队、社群运营专家、商业产品团队，具备了项目研发、商业落地的人力资源。核心成员来自伯克利、斯坦福等高校，拥有丰富的创业经验，其创业项目被沃尔玛、雅虎等公司收购。首席区块链工程师曾任Sphero（知名智能玩具公司）的核心技术工程师，技术团队都拥有软硬件开发的从业经历。总的来说，这是一个组成完备，从业经验丰富的团队。<br>￼</p>\n<h3 id=\"6、Origin-Protocol代币\"><a href=\"#6、Origin-Protocol代币\" class=\"headerlink\" title=\"6、Origin Protocol代币\"></a>6、Origin Protocol代币</h3><p>技术层面上Origin Protocol的代币是十分复杂的，具体可以参考白皮书。一句话来说，代币的作用是用正面和负面的激励来确保平台的安全、实现管理并且促进买卖双方的交易。</p>\n<p>一个具体的场景是，为了避免垃圾信息，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。</p>\n<p>具体代币分配暂未公布。</p>\n<p>目前在COINLIST上开放投资者注册通道，不允许中国投资者参与，请需要参加的准备好相关材料。</p>\n<h3 id=\"7、开发路线\"><a href=\"#7、开发路线\" class=\"headerlink\" title=\"7、开发路线\"></a>7、开发路线</h3><p>Origin Protocol项目从17年五月开始，12月份就推出了测试网络，预计在18年第三季度完成平台的开发，19年达到去中心化并且正式运行。</p>\n<p>合作伙伴</p>\n<p>官网上列出大量合作伙伴，并且有不少团队已经开始基于Origin Protocol的app开发。</p>\n<p>￼</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来看，Origin Protocol相比于各类提出4.0、5.0概念的公链，是一个十分落地的项目，并且已经与大量的企业建立合作关系。目前Origin Protocol的测试网络已经上线，我们期待未来Origin Protocol的发展。</p>\n<p>官网：<a href=\"https://www.originprotocol.com\" target=\"_blank\" rel=\"noopener\">https://www.originprotocol.com</a></p>\n<p>白皮书：<a href=\"https://www.originprotocol.com/en/product-brief\" target=\"_blank\" rel=\"noopener\">https://www.originprotocol.com/en/product-brief</a></p>\n<p>DEMO视频：<a href=\"https://demo.originprotocol.com\" target=\"_blank\" rel=\"noopener\">https://demo.originprotocol.com</a></p>\n<h2 id=\"个人观点\"><a href=\"#个人观点\" class=\"headerlink\" title=\"个人观点\"></a>个人观点</h2><p>比原链如何避免共享平台的垃圾信息、虚假信息呢？<br>比原链的解决方案是，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。<br>那在所有人都可以参与的情况下，如何保证刷单的事情发生呢？卖家同时拥有许多账号，并且进行投票给自己的竞争对手，此时，就会形成恶性竞争。</p>\n","site":{"data":{}},"excerpt":"<p>Origin Protocol ：基于以太坊，开源的共享经济平台，是否能够成功呢？</p>","more":"<p><img src=\"/2019/08/04/比原链-共享经济平台简介/structure-light-led-movement-158826.jpeg\" alt=\"origin_protocol_chain\"></p>\n<h1 id=\"Origin-Protocol-：基于以太坊，开源的共享经济平台\"><a href=\"#Origin-Protocol-：基于以太坊，开源的共享经济平台\" class=\"headerlink\" title=\"Origin Protocol ：基于以太坊，开源的共享经济平台\"></a>Origin Protocol ：基于以太坊，开源的共享经济平台</h1><p>诸如Airbnb、Uber、Craigslist、WeWork等共享经济公司出现之后，共享经济改变了整个商业世界的规则：消费者更喜欢去拥有一个事物的使用权，而不是所有权；而服务提供者从自己提供服务变成了生产者和消费者之间连接的纽带。整个商业模式发生了变化。</p>\n<p>到2016年为止，美国有大约22%成年人成为了共享经济的供应商，共享经济平台的收入在2017年是186亿美元，而据估计在2022年会达到400多亿美元，这是一个巨大的市场。</p>\n<h2 id=\"痛点\"><a href=\"#痛点\" class=\"headerlink\" title=\"痛点\"></a>痛点</h2><p>现有市场还存在哪些问题呢？</p>\n<p>首先，价值的分配是不公平的。都说第一个吃螃蟹的人能够获取更多的利益，但是第一个开Uber、第一个给Airbnb提供房间的人并没有因为自己是早期参与者（共建者）而受益，利益全部都在公司本身手里。</p>\n<p>其次，高昂的终结费用。Airbnb对房客收取5%-15%手续费，对房东也收取3%-5%，Uber也会对司机和乘客收取类似比例的费用。并且在平台做大之后，他们为了垄断会把收入用在阻碍创新上。</p>\n<p>然后，还有数据的所有权、安全性等问题。</p>\n<p>其实上述的问题都是中心化平台出现的问题。Origin Protocol就是为解决上述的痛点开发的。</p>\n<p>￼</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>Origin Protocol是基于以太坊上的共享经济平台，并用IPFS解决文件的存储问题，在分布式网络环境中促进开放、免费的服务交换。平台主要由三个部分组成：</p>\n<h3 id=\"1、-Origin-Dapp：分布式应用（Dapp）\"><a href=\"#1、-Origin-Dapp：分布式应用（Dapp）\" class=\"headerlink\" title=\"1、 Origin Dapp：分布式应用（Dapp）\"></a>1、 Origin Dapp：分布式应用（Dapp）</h3><p>服务提供者能够锁定一定的代币作为抵押来创建列表，让用户搜索服务，在Dapp中能够利用法币、ERC20代币来进行结算。在不同垂直行业可以开发不同的应用来做到定制化。并且，在Origin Protocol中注册的用户能够方便地访问基于Origin Protocol的所有应用。</p>\n<h3 id=\"2、-Origin-共享数据层和标准\"><a href=\"#2、-Origin-共享数据层和标准\" class=\"headerlink\" title=\"2、 Origin 共享数据层和标准\"></a>2、 Origin 共享数据层和标准</h3><p>共享数据层能够让所有人都能够访问数据库。这些数据存储在IPFS和以太坊中，任何人都可以从中获取到列表项目、交易记录和买卖双方的信誉评级，从而能够被信任。</p>\n<h3 id=\"3、-Origin-社区基金\"><a href=\"#3、-Origin-社区基金\" class=\"headerlink\" title=\"3、 Origin 社区基金\"></a>3、 Origin 社区基金</h3><p>很大一部分的资金会交与基金管理，保证平台的长期发展。基金需要负责；项目管理、项目的孵化、雇佣开发者编写以及审核代码、财务和技术审核、提供仲裁服务等。</p>\n<h3 id=\"4、Origin-Protocol的特点\"><a href=\"#4、Origin-Protocol的特点\" class=\"headerlink\" title=\"4、Origin Protocol的特点\"></a>4、Origin Protocol的特点</h3><p>用智能合约保证价值的点对点传播（无中介，安全可靠）</p>\n<p>支持数百种列表类型，提供多元化的服务</p>\n<p>用共享数据鼓励创新</p>\n<p>利用区块链技术保证数据和身份的安全</p>\n<h3 id=\"5、团队\"><a href=\"#5、团队\" class=\"headerlink\" title=\"5、团队\"></a>5、团队</h3><p>目前，Origin的核心团队有10名成员，延伸团队有8名成员，涵盖了技术团队、社群运营专家、商业产品团队，具备了项目研发、商业落地的人力资源。核心成员来自伯克利、斯坦福等高校，拥有丰富的创业经验，其创业项目被沃尔玛、雅虎等公司收购。首席区块链工程师曾任Sphero（知名智能玩具公司）的核心技术工程师，技术团队都拥有软硬件开发的从业经历。总的来说，这是一个组成完备，从业经验丰富的团队。<br>￼</p>\n<h3 id=\"6、Origin-Protocol代币\"><a href=\"#6、Origin-Protocol代币\" class=\"headerlink\" title=\"6、Origin Protocol代币\"></a>6、Origin Protocol代币</h3><p>技术层面上Origin Protocol的代币是十分复杂的，具体可以参考白皮书。一句话来说，代币的作用是用正面和负面的激励来确保平台的安全、实现管理并且促进买卖双方的交易。</p>\n<p>一个具体的场景是，为了避免垃圾信息，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。</p>\n<p>具体代币分配暂未公布。</p>\n<p>目前在COINLIST上开放投资者注册通道，不允许中国投资者参与，请需要参加的准备好相关材料。</p>\n<h3 id=\"7、开发路线\"><a href=\"#7、开发路线\" class=\"headerlink\" title=\"7、开发路线\"></a>7、开发路线</h3><p>Origin Protocol项目从17年五月开始，12月份就推出了测试网络，预计在18年第三季度完成平台的开发，19年达到去中心化并且正式运行。</p>\n<p>合作伙伴</p>\n<p>官网上列出大量合作伙伴，并且有不少团队已经开始基于Origin Protocol的app开发。</p>\n<p>￼</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总体来看，Origin Protocol相比于各类提出4.0、5.0概念的公链，是一个十分落地的项目，并且已经与大量的企业建立合作关系。目前Origin Protocol的测试网络已经上线，我们期待未来Origin Protocol的发展。</p>\n<p>官网：<a href=\"https://www.originprotocol.com\" target=\"_blank\" rel=\"noopener\">https://www.originprotocol.com</a></p>\n<p>白皮书：<a href=\"https://www.originprotocol.com/en/product-brief\" target=\"_blank\" rel=\"noopener\">https://www.originprotocol.com/en/product-brief</a></p>\n<p>DEMO视频：<a href=\"https://demo.originprotocol.com\" target=\"_blank\" rel=\"noopener\">https://demo.originprotocol.com</a></p>\n<h2 id=\"个人观点\"><a href=\"#个人观点\" class=\"headerlink\" title=\"个人观点\"></a>个人观点</h2><p>比原链如何避免共享平台的垃圾信息、虚假信息呢？<br>比原链的解决方案是，卖家在实施相关措施的时候需要抵押一定的代币，通过“押金-质疑-投票”机制，鼓励用户抵押等量代币，标记出质疑的内容，社区进行投票，胜利方可以获得这些代币，通过这样的机制来避免垃圾信息。<br>那在所有人都可以参与的情况下，如何保证刷单的事情发生呢？卖家同时拥有许多账号，并且进行投票给自己的竞争对手，此时，就会形成恶性竞争。</p>"},{"title":"数据结构与算法","date":"2019-09-11T14:05:49.000Z","notebook":"笔记","_content":"\n数据结构，是指数据在计算机存储空间中（磁盘中）的安排方式，算法，是指软件程序用来操作这些数据结构中的数据的过程。\n\n![data](数据结构与算法/city_data.jpeg)\n\n<!-- more -->\n\n# 1.数组Array\n## 1.1查找\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从数据的第一位开始查找，直到找到为止，需要n/2步操作；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组中数据项允许重复，则需要全部遍历一遍，需要n步操作。\n\n## 1.2插入\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插入过程是很快的，一步完成，新的数据项只需插入到数组中的第一个空位上；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组不允许重复项出现，则需要进行n步查询对比操作。\n\n## 1.3删除\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除操作有3个过程：查找、删除、移动。删除算法中暗含着一个假设，即数组中不允许有洞，洞指的是一个或几个空的数据单元，他们后面还有非空数据单元（在更高的下标下还有数据项），如果删除算法中允许有洞，那么所有其他算法都将变得复杂，因为在查看某一单元数据项时，都需要判断一下是否为空。同样算法需要找到非空数据项而变得效率低下；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，删除操作后，需要将后面非空数据项前移，来填补这个洞。\n![delete_from_array](数据结构与算法/delete_from_array.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除需要（假设不允许重复）查找平均n/2个数据项，并平均移动剩下的n/2个数据项来填洞，总共是n步。\n<font color=#0099ff><a>[查看删除的代码](https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/delete/Delete.java)</a></font>\n\n2019-09-13更新\n————————————————————————\n## 1.4有序数组\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组的有点\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有序数组会给我们带来什么好处？最主要的好处就是查找速度比无序数组快多了。不好的地方就是在插入数据时，由于所有靠后的数据都需要向后移动一位以腾开空间，导致速度比无序数组慢一些。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组和无序数组的删除操作都比较慢，因为数据项必须向前移动来填补删除数据带来的洞。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组在查找频繁的情况下非常有用，但若是插入和删除比较多的情况下，则不太适用，无法高效工作。例如，有序数组适用于公司雇员的数据库；另一方面，零售商店的货物清单不适用有序数组来实现，这是由于频繁的进货出货导致的插入删除操作都会执行地很慢。\n\n>记住一个结论:\n>二分查找法的查询次数最大为log2n，即2对n的对数，n为数组的长度；而线性查找法的平均查询次数为n/2。\n>当n很大时，就可以发现二分查找法的优势了，具体看下图示例：\n\n![half_search](数据结构与算法/half_search.png)\n<font color=#0099ff><a>[查看二分查找法的代码](https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/search/HalfSplitSearch.java)</a></font>\n\n## 1.5对象存储\n使用对数组的增删改查功能，自定义对象封装数组，具体代码如下\n<font color=#0099ff><a>[查看二分查找法的代码](https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/ClassDataApp.java)</a></font>\n\n\n- - -\nPretty looks are in a rut, while interesting souls are cream of crop,\nIn love, looks and talents,\nWhich do you think is pretty important?","source":"_posts/数据结构与算法.md","raw":"---\ntitle: 数据结构与算法\ndate: 2019-09-11 22:05:49\ntags: 数据结构\ncategories: 数据结构\nnotebook: 笔记\n---\n\n数据结构，是指数据在计算机存储空间中（磁盘中）的安排方式，算法，是指软件程序用来操作这些数据结构中的数据的过程。\n\n![data](数据结构与算法/city_data.jpeg)\n\n<!-- more -->\n\n# 1.数组Array\n## 1.1查找\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从数据的第一位开始查找，直到找到为止，需要n/2步操作；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组中数据项允许重复，则需要全部遍历一遍，需要n步操作。\n\n## 1.2插入\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插入过程是很快的，一步完成，新的数据项只需插入到数组中的第一个空位上；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组不允许重复项出现，则需要进行n步查询对比操作。\n\n## 1.3删除\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除操作有3个过程：查找、删除、移动。删除算法中暗含着一个假设，即数组中不允许有洞，洞指的是一个或几个空的数据单元，他们后面还有非空数据单元（在更高的下标下还有数据项），如果删除算法中允许有洞，那么所有其他算法都将变得复杂，因为在查看某一单元数据项时，都需要判断一下是否为空。同样算法需要找到非空数据项而变得效率低下；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，删除操作后，需要将后面非空数据项前移，来填补这个洞。\n![delete_from_array](数据结构与算法/delete_from_array.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除需要（假设不允许重复）查找平均n/2个数据项，并平均移动剩下的n/2个数据项来填洞，总共是n步。\n<font color=#0099ff><a>[查看删除的代码](https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/delete/Delete.java)</a></font>\n\n2019-09-13更新\n————————————————————————\n## 1.4有序数组\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组的有点\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有序数组会给我们带来什么好处？最主要的好处就是查找速度比无序数组快多了。不好的地方就是在插入数据时，由于所有靠后的数据都需要向后移动一位以腾开空间，导致速度比无序数组慢一些。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组和无序数组的删除操作都比较慢，因为数据项必须向前移动来填补删除数据带来的洞。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组在查找频繁的情况下非常有用，但若是插入和删除比较多的情况下，则不太适用，无法高效工作。例如，有序数组适用于公司雇员的数据库；另一方面，零售商店的货物清单不适用有序数组来实现，这是由于频繁的进货出货导致的插入删除操作都会执行地很慢。\n\n>记住一个结论:\n>二分查找法的查询次数最大为log2n，即2对n的对数，n为数组的长度；而线性查找法的平均查询次数为n/2。\n>当n很大时，就可以发现二分查找法的优势了，具体看下图示例：\n\n![half_search](数据结构与算法/half_search.png)\n<font color=#0099ff><a>[查看二分查找法的代码](https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/search/HalfSplitSearch.java)</a></font>\n\n## 1.5对象存储\n使用对数组的增删改查功能，自定义对象封装数组，具体代码如下\n<font color=#0099ff><a>[查看二分查找法的代码](https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/ClassDataApp.java)</a></font>\n\n\n- - -\nPretty looks are in a rut, while interesting souls are cream of crop,\nIn love, looks and talents,\nWhich do you think is pretty important?","slug":"数据结构与算法","published":1,"updated":"2019-09-14T03:06:59.489Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0li001xfbs6s2ailnry","content":"<p>数据结构，是指数据在计算机存储空间中（磁盘中）的安排方式，算法，是指软件程序用来操作这些数据结构中的数据的过程。</p>\n<p><img src=\"/2019/09/11/数据结构与算法/city_data.jpeg\" alt=\"data\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-数组Array\"><a href=\"#1-数组Array\" class=\"headerlink\" title=\"1.数组Array\"></a>1.数组Array</h1><h2 id=\"1-1查找\"><a href=\"#1-1查找\" class=\"headerlink\" title=\"1.1查找\"></a>1.1查找</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从数据的第一位开始查找，直到找到为止，需要n/2步操作；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组中数据项允许重复，则需要全部遍历一遍，需要n步操作。</p>\n<h2 id=\"1-2插入\"><a href=\"#1-2插入\" class=\"headerlink\" title=\"1.2插入\"></a>1.2插入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插入过程是很快的，一步完成，新的数据项只需插入到数组中的第一个空位上；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组不允许重复项出现，则需要进行n步查询对比操作。</p>\n<h2 id=\"1-3删除\"><a href=\"#1-3删除\" class=\"headerlink\" title=\"1.3删除\"></a>1.3删除</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除操作有3个过程：查找、删除、移动。删除算法中暗含着一个假设，即数组中不允许有洞，洞指的是一个或几个空的数据单元，他们后面还有非空数据单元（在更高的下标下还有数据项），如果删除算法中允许有洞，那么所有其他算法都将变得复杂，因为在查看某一单元数据项时，都需要判断一下是否为空。同样算法需要找到非空数据项而变得效率低下；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，删除操作后，需要将后面非空数据项前移，来填补这个洞。<br><img src=\"/2019/09/11/数据结构与算法/delete_from_array.png\" alt=\"delete_from_array\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除需要（假设不允许重复）查找平均n/2个数据项，并平均移动剩下的n/2个数据项来填洞，总共是n步。<br><font color=\"#0099ff\"><a><a href=\"https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/delete/Delete.java\" target=\"_blank\" rel=\"noopener\">查看删除的代码</a></a></font></p>\n<p>2019-09-13更新<br>————————————————————————</p>\n<h2 id=\"1-4有序数组\"><a href=\"#1-4有序数组\" class=\"headerlink\" title=\"1.4有序数组\"></a>1.4有序数组</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组的有点<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有序数组会给我们带来什么好处？最主要的好处就是查找速度比无序数组快多了。不好的地方就是在插入数据时，由于所有靠后的数据都需要向后移动一位以腾开空间，导致速度比无序数组慢一些。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组和无序数组的删除操作都比较慢，因为数据项必须向前移动来填补删除数据带来的洞。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组在查找频繁的情况下非常有用，但若是插入和删除比较多的情况下，则不太适用，无法高效工作。例如，有序数组适用于公司雇员的数据库；另一方面，零售商店的货物清单不适用有序数组来实现，这是由于频繁的进货出货导致的插入删除操作都会执行地很慢。</p>\n<blockquote>\n<p>记住一个结论:<br>二分查找法的查询次数最大为log2n，即2对n的对数，n为数组的长度；而线性查找法的平均查询次数为n/2。<br>当n很大时，就可以发现二分查找法的优势了，具体看下图示例：</p>\n</blockquote>\n<p><img src=\"/2019/09/11/数据结构与算法/half_search.png\" alt=\"half_search\"><br><font color=\"#0099ff\"><a><a href=\"https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/search/HalfSplitSearch.java\" target=\"_blank\" rel=\"noopener\">查看二分查找法的代码</a></a></font></p>\n<h2 id=\"1-5对象存储\"><a href=\"#1-5对象存储\" class=\"headerlink\" title=\"1.5对象存储\"></a>1.5对象存储</h2><p>使用对数组的增删改查功能，自定义对象封装数组，具体代码如下<br><font color=\"#0099ff\"><a><a href=\"https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/ClassDataApp.java\" target=\"_blank\" rel=\"noopener\">查看二分查找法的代码</a></a></font></p>\n<hr>\n<p>Pretty looks are in a rut, while interesting souls are cream of crop,<br>In love, looks and talents,<br>Which do you think is pretty important?</p>\n","site":{"data":{}},"excerpt":"<p>数据结构，是指数据在计算机存储空间中（磁盘中）的安排方式，算法，是指软件程序用来操作这些数据结构中的数据的过程。</p>\n<p><img src=\"/2019/09/11/数据结构与算法/city_data.jpeg\" alt=\"data\"></p>","more":"<h1 id=\"1-数组Array\"><a href=\"#1-数组Array\" class=\"headerlink\" title=\"1.数组Array\"></a>1.数组Array</h1><h2 id=\"1-1查找\"><a href=\"#1-1查找\" class=\"headerlink\" title=\"1.1查找\"></a>1.1查找</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从数据的第一位开始查找，直到找到为止，需要n/2步操作；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组中数据项允许重复，则需要全部遍历一遍，需要n步操作。</p>\n<h2 id=\"1-2插入\"><a href=\"#1-2插入\" class=\"headerlink\" title=\"1.2插入\"></a>1.2插入</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;插入过程是很快的，一步完成，新的数据项只需插入到数组中的第一个空位上；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果数组不允许重复项出现，则需要进行n步查询对比操作。</p>\n<h2 id=\"1-3删除\"><a href=\"#1-3删除\" class=\"headerlink\" title=\"1.3删除\"></a>1.3删除</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除操作有3个过程：查找、删除、移动。删除算法中暗含着一个假设，即数组中不允许有洞，洞指的是一个或几个空的数据单元，他们后面还有非空数据单元（在更高的下标下还有数据项），如果删除算法中允许有洞，那么所有其他算法都将变得复杂，因为在查看某一单元数据项时，都需要判断一下是否为空。同样算法需要找到非空数据项而变得效率低下；<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，删除操作后，需要将后面非空数据项前移，来填补这个洞。<br><img src=\"/2019/09/11/数据结构与算法/delete_from_array.png\" alt=\"delete_from_array\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;删除需要（假设不允许重复）查找平均n/2个数据项，并平均移动剩下的n/2个数据项来填洞，总共是n步。<br><font color=\"#0099ff\"><a><a href=\"https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/delete/Delete.java\" target=\"_blank\" rel=\"noopener\">查看删除的代码</a></a></font></p>\n<p>2019-09-13更新<br>————————————————————————</p>\n<h2 id=\"1-4有序数组\"><a href=\"#1-4有序数组\" class=\"headerlink\" title=\"1.4有序数组\"></a>1.4有序数组</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组的有点<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;使用有序数组会给我们带来什么好处？最主要的好处就是查找速度比无序数组快多了。不好的地方就是在插入数据时，由于所有靠后的数据都需要向后移动一位以腾开空间，导致速度比无序数组慢一些。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组和无序数组的删除操作都比较慢，因为数据项必须向前移动来填补删除数据带来的洞。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有序数组在查找频繁的情况下非常有用，但若是插入和删除比较多的情况下，则不太适用，无法高效工作。例如，有序数组适用于公司雇员的数据库；另一方面，零售商店的货物清单不适用有序数组来实现，这是由于频繁的进货出货导致的插入删除操作都会执行地很慢。</p>\n<blockquote>\n<p>记住一个结论:<br>二分查找法的查询次数最大为log2n，即2对n的对数，n为数组的长度；而线性查找法的平均查询次数为n/2。<br>当n很大时，就可以发现二分查找法的优势了，具体看下图示例：</p>\n</blockquote>\n<p><img src=\"/2019/09/11/数据结构与算法/half_search.png\" alt=\"half_search\"><br><font color=\"#0099ff\"><a><a href=\"https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/search/HalfSplitSearch.java\" target=\"_blank\" rel=\"noopener\">查看二分查找法的代码</a></a></font></p>\n<h2 id=\"1-5对象存储\"><a href=\"#1-5对象存储\" class=\"headerlink\" title=\"1.5对象存储\"></a>1.5对象存储</h2><p>使用对数组的增删改查功能，自定义对象封装数组，具体代码如下<br><font color=\"#0099ff\"><a><a href=\"https://github.com/chenzuoli/ETL/blob/master/src/main/java/top/wetech/tools/data_structure/ClassDataApp.java\" target=\"_blank\" rel=\"noopener\">查看二分查找法的代码</a></a></font></p>\n<hr>\n<p>Pretty looks are in a rut, while interesting souls are cream of crop,<br>In love, looks and talents,<br>Which do you think is pretty important?</p>"},{"title":"比特币双花攻击","date":"2019-09-09T15:38:14.000Z","notebook":"区块链","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在学习区块链的过程中，大家一定对会听到“双花”这个词，意思就是双重支付，或者更直白点就是一笔资金被花费了两次。这篇文章我们来简单的分析一下为什么会有双花，比特币是如何避免双花的。\n\n![btc](比特币双花攻击/btc.jpeg)\n\n<!-- more -->\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在传统的交易中，因为有银行这样的中心化机构，所以是不会存在双花问题的：每一笔支付都将从你的银行账户中扣除相应的资金，所有的明细在银行都有记录。但是在比特币中，因为没有账户的概念，而是引入了UTXO即未花费交易输出。因为没有银行这样的中心化机构的保证，当发生一笔交易时就可能存在着双花的危险：比方说A有一个比特币，然后他同时构造两笔交易T1和T2来花费这1个比特币，其中一个给了B，从B那里买件衣服，一个给了C，从C那里买双鞋。如果不引入某种机制来避免这种情况，那作为数字货币的比特币将没有任何存在的意义。接下来就来分析一下比特币是如何做到防止这种“双花”攻击的。\n\n# (1) 正常情况\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们来看看正常情况，说白了就是绝大多数时候，区块链的共识机制就能将双花消灭在萌芽状态。我们还是以上面提到的例子来做说明：\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设A构造了两笔交易T1和T2，将自己价值1btc的UTXO分别转给了B和C，妄图同时从B和C那里获得好处。然后A几乎在同一时间将构造好的这两笔交易广播至网络。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设网络中的矿工节点先收到了交易T1，<b>发现这笔交易的资金来源确实没有被花费过</b>，于是将T1加入到自己的内存交易池中等待打包进区块。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分情况下，这个矿工节点会在不久后又收到交易T2，此时矿工会先检查A的UTXO是否足够，因为T2所指向的交易输入与已经加入交易池的T1相同，于是发现UTXO不足，矿工节点会拒绝处理该交易。网络中其他的矿工节点都类似，因此A试图双花的尝试胎死腹中。\n\n# (2) 分叉情况\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面说的是正常的情况，但是也有非正常的情况要考虑：假设矿工节点M1和M2几乎在同一时间挖出了区块，并且很不幸M1挖到区块时只收到了交易T1，而M2挖到的区块时只收到了交易T2，这样交易T1和T2被分别打包进两个区块。因为这两个区块是差不多同一时间被挖出，于是造成了区块链的分叉：\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络中某些节点（可能是离M1近的）先收到了M1打包的区块BLK1，于是用该区块延长自己的区块链，而另外一些节点（邻近M2的）则先收到M2打包的区块BLK2，用该区块延长自己的区块链，于是整个区块链网络中呈现出了不一致的问题：\n\n![chain](比特币双花攻击/chain.png)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像这种不一致问题，一般只需要一个确认就能得到解决：假设随后又收到新区块，而新区块是以BLK1作为父区块，那么之前用BLK1延长自己区块链的节点，只需要将新区块链接到自己的区块链上，而之前以BLK2延长自己区块链的节点，则需要切换到新的最长链上，如下图：\n![back_chain](比特币双花攻击/back_chain.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此在出现分叉的情况下，通常也只需要等一个区块的确认时间网络节点中的区块链就可以重新一致，在这个例子中，经过一个区块的确认期以后，B最终确认自己收到A的1btc，而因为包含有转账给C的交易T2的区块BLK2位于备用链上，因此无法通过支付验证。A的双花尝试也以失败告终。\n\n# (3) 为什么说比特币需要6个确认才安全\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面提到一般情况下，只要经过1个区块的确认时间基本上就能确保“相对的安全”。而在比特币中，对于很小额的支付，为了提高交易速度，一般也就是等1个区块的确认即可。但是注意这里说的是“相对安全”，对于数额特别大交易，1个区块的确认远远不够。我们考虑上面提到的分叉情况：假设经过1个区块的确认后，B知道了A给他的1btc确实已经位于链上，于是发货给A。此时A及其同伙掌握着很大的一部分算力，A通知其同伙开始使劲挖矿延长备用链（攻击链），当A最终成功的使攻击链的长度（累计工作量）超过当前主链时，会再一次导致网络中的节点切换主链的情况，如下面的示意图：\n\n![attack_chain](比特币双花攻击/attack_chain.png)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是包含了A转给C的交易T2的区块BLK2位于了主链之上，此时A通知C钱已到账，C做支付验证也没问题，于是C给A发货，A的双花攻击成功。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此对于额度稍大的交易，必须要等待6个区块的确认才能保证安全，因为攻击者要想构造攻击链追上已经经过6个区块确认的主链需要花费的算力成本是非常大的，很有可能得不偿失。\n\n# 总结\n\n>(1) 大部分情况下比特币的UTXO机制和区块链的共识机制都能有效应对双花攻击；\n\n>(2) 对于小额支付，等待一个确认通常就可以认为安全了，但是对于大额支付，需要等6个确认才能大概率的认为安全，否则如果攻击者掌握很强算力，有可能构造累计工作量超过当前主链的攻击链导致双花成功。\n\n\n\nNever give up on something if you think you can fight for it. It's difficult to wait but it's more difficult when you regret. ","source":"_posts/比特币双花攻击.md","raw":"---\ntitle: 比特币双花攻击\ndate: 2019-09-09 23:38:14\ntags: [BTC,双花攻击]\ncategories: 区块链\nnotebook: 区块链\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在学习区块链的过程中，大家一定对会听到“双花”这个词，意思就是双重支付，或者更直白点就是一笔资金被花费了两次。这篇文章我们来简单的分析一下为什么会有双花，比特币是如何避免双花的。\n\n![btc](比特币双花攻击/btc.jpeg)\n\n<!-- more -->\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在传统的交易中，因为有银行这样的中心化机构，所以是不会存在双花问题的：每一笔支付都将从你的银行账户中扣除相应的资金，所有的明细在银行都有记录。但是在比特币中，因为没有账户的概念，而是引入了UTXO即未花费交易输出。因为没有银行这样的中心化机构的保证，当发生一笔交易时就可能存在着双花的危险：比方说A有一个比特币，然后他同时构造两笔交易T1和T2来花费这1个比特币，其中一个给了B，从B那里买件衣服，一个给了C，从C那里买双鞋。如果不引入某种机制来避免这种情况，那作为数字货币的比特币将没有任何存在的意义。接下来就来分析一下比特币是如何做到防止这种“双花”攻击的。\n\n# (1) 正常情况\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们来看看正常情况，说白了就是绝大多数时候，区块链的共识机制就能将双花消灭在萌芽状态。我们还是以上面提到的例子来做说明：\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设A构造了两笔交易T1和T2，将自己价值1btc的UTXO分别转给了B和C，妄图同时从B和C那里获得好处。然后A几乎在同一时间将构造好的这两笔交易广播至网络。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设网络中的矿工节点先收到了交易T1，<b>发现这笔交易的资金来源确实没有被花费过</b>，于是将T1加入到自己的内存交易池中等待打包进区块。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分情况下，这个矿工节点会在不久后又收到交易T2，此时矿工会先检查A的UTXO是否足够，因为T2所指向的交易输入与已经加入交易池的T1相同，于是发现UTXO不足，矿工节点会拒绝处理该交易。网络中其他的矿工节点都类似，因此A试图双花的尝试胎死腹中。\n\n# (2) 分叉情况\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面说的是正常的情况，但是也有非正常的情况要考虑：假设矿工节点M1和M2几乎在同一时间挖出了区块，并且很不幸M1挖到区块时只收到了交易T1，而M2挖到的区块时只收到了交易T2，这样交易T1和T2被分别打包进两个区块。因为这两个区块是差不多同一时间被挖出，于是造成了区块链的分叉：\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络中某些节点（可能是离M1近的）先收到了M1打包的区块BLK1，于是用该区块延长自己的区块链，而另外一些节点（邻近M2的）则先收到M2打包的区块BLK2，用该区块延长自己的区块链，于是整个区块链网络中呈现出了不一致的问题：\n\n![chain](比特币双花攻击/chain.png)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像这种不一致问题，一般只需要一个确认就能得到解决：假设随后又收到新区块，而新区块是以BLK1作为父区块，那么之前用BLK1延长自己区块链的节点，只需要将新区块链接到自己的区块链上，而之前以BLK2延长自己区块链的节点，则需要切换到新的最长链上，如下图：\n![back_chain](比特币双花攻击/back_chain.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此在出现分叉的情况下，通常也只需要等一个区块的确认时间网络节点中的区块链就可以重新一致，在这个例子中，经过一个区块的确认期以后，B最终确认自己收到A的1btc，而因为包含有转账给C的交易T2的区块BLK2位于备用链上，因此无法通过支付验证。A的双花尝试也以失败告终。\n\n# (3) 为什么说比特币需要6个确认才安全\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面提到一般情况下，只要经过1个区块的确认时间基本上就能确保“相对的安全”。而在比特币中，对于很小额的支付，为了提高交易速度，一般也就是等1个区块的确认即可。但是注意这里说的是“相对安全”，对于数额特别大交易，1个区块的确认远远不够。我们考虑上面提到的分叉情况：假设经过1个区块的确认后，B知道了A给他的1btc确实已经位于链上，于是发货给A。此时A及其同伙掌握着很大的一部分算力，A通知其同伙开始使劲挖矿延长备用链（攻击链），当A最终成功的使攻击链的长度（累计工作量）超过当前主链时，会再一次导致网络中的节点切换主链的情况，如下面的示意图：\n\n![attack_chain](比特币双花攻击/attack_chain.png)\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是包含了A转给C的交易T2的区块BLK2位于了主链之上，此时A通知C钱已到账，C做支付验证也没问题，于是C给A发货，A的双花攻击成功。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此对于额度稍大的交易，必须要等待6个区块的确认才能保证安全，因为攻击者要想构造攻击链追上已经经过6个区块确认的主链需要花费的算力成本是非常大的，很有可能得不偿失。\n\n# 总结\n\n>(1) 大部分情况下比特币的UTXO机制和区块链的共识机制都能有效应对双花攻击；\n\n>(2) 对于小额支付，等待一个确认通常就可以认为安全了，但是对于大额支付，需要等6个确认才能大概率的认为安全，否则如果攻击者掌握很强算力，有可能构造累计工作量超过当前主链的攻击链导致双花成功。\n\n\n\nNever give up on something if you think you can fight for it. It's difficult to wait but it's more difficult when you regret. ","slug":"比特币双花攻击","published":1,"updated":"2019-09-09T16:00:14.470Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lj001yfbs6aik2r88x","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在学习区块链的过程中，大家一定对会听到“双花”这个词，意思就是双重支付，或者更直白点就是一笔资金被花费了两次。这篇文章我们来简单的分析一下为什么会有双花，比特币是如何避免双花的。</p>\n<p><img src=\"/2019/09/09/比特币双花攻击/btc.jpeg\" alt=\"btc\"></p>\n<a id=\"more\"></a>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在传统的交易中，因为有银行这样的中心化机构，所以是不会存在双花问题的：每一笔支付都将从你的银行账户中扣除相应的资金，所有的明细在银行都有记录。但是在比特币中，因为没有账户的概念，而是引入了UTXO即未花费交易输出。因为没有银行这样的中心化机构的保证，当发生一笔交易时就可能存在着双花的危险：比方说A有一个比特币，然后他同时构造两笔交易T1和T2来花费这1个比特币，其中一个给了B，从B那里买件衣服，一个给了C，从C那里买双鞋。如果不引入某种机制来避免这种情况，那作为数字货币的比特币将没有任何存在的意义。接下来就来分析一下比特币是如何做到防止这种“双花”攻击的。</p>\n<h1 id=\"1-正常情况\"><a href=\"#1-正常情况\" class=\"headerlink\" title=\"(1) 正常情况\"></a>(1) 正常情况</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们来看看正常情况，说白了就是绝大多数时候，区块链的共识机制就能将双花消灭在萌芽状态。我们还是以上面提到的例子来做说明：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设A构造了两笔交易T1和T2，将自己价值1btc的UTXO分别转给了B和C，妄图同时从B和C那里获得好处。然后A几乎在同一时间将构造好的这两笔交易广播至网络。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设网络中的矿工节点先收到了交易T1，<b>发现这笔交易的资金来源确实没有被花费过</b>，于是将T1加入到自己的内存交易池中等待打包进区块。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分情况下，这个矿工节点会在不久后又收到交易T2，此时矿工会先检查A的UTXO是否足够，因为T2所指向的交易输入与已经加入交易池的T1相同，于是发现UTXO不足，矿工节点会拒绝处理该交易。网络中其他的矿工节点都类似，因此A试图双花的尝试胎死腹中。</p>\n<h1 id=\"2-分叉情况\"><a href=\"#2-分叉情况\" class=\"headerlink\" title=\"(2) 分叉情况\"></a>(2) 分叉情况</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面说的是正常的情况，但是也有非正常的情况要考虑：假设矿工节点M1和M2几乎在同一时间挖出了区块，并且很不幸M1挖到区块时只收到了交易T1，而M2挖到的区块时只收到了交易T2，这样交易T1和T2被分别打包进两个区块。因为这两个区块是差不多同一时间被挖出，于是造成了区块链的分叉：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络中某些节点（可能是离M1近的）先收到了M1打包的区块BLK1，于是用该区块延长自己的区块链，而另外一些节点（邻近M2的）则先收到M2打包的区块BLK2，用该区块延长自己的区块链，于是整个区块链网络中呈现出了不一致的问题：</p>\n<p><img src=\"/2019/09/09/比特币双花攻击/chain.png\" alt=\"chain\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像这种不一致问题，一般只需要一个确认就能得到解决：假设随后又收到新区块，而新区块是以BLK1作为父区块，那么之前用BLK1延长自己区块链的节点，只需要将新区块链接到自己的区块链上，而之前以BLK2延长自己区块链的节点，则需要切换到新的最长链上，如下图：<br><img src=\"/2019/09/09/比特币双花攻击/back_chain.png\" alt=\"back_chain\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此在出现分叉的情况下，通常也只需要等一个区块的确认时间网络节点中的区块链就可以重新一致，在这个例子中，经过一个区块的确认期以后，B最终确认自己收到A的1btc，而因为包含有转账给C的交易T2的区块BLK2位于备用链上，因此无法通过支付验证。A的双花尝试也以失败告终。</p>\n<h1 id=\"3-为什么说比特币需要6个确认才安全\"><a href=\"#3-为什么说比特币需要6个确认才安全\" class=\"headerlink\" title=\"(3) 为什么说比特币需要6个确认才安全\"></a>(3) 为什么说比特币需要6个确认才安全</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面提到一般情况下，只要经过1个区块的确认时间基本上就能确保“相对的安全”。而在比特币中，对于很小额的支付，为了提高交易速度，一般也就是等1个区块的确认即可。但是注意这里说的是“相对安全”，对于数额特别大交易，1个区块的确认远远不够。我们考虑上面提到的分叉情况：假设经过1个区块的确认后，B知道了A给他的1btc确实已经位于链上，于是发货给A。此时A及其同伙掌握着很大的一部分算力，A通知其同伙开始使劲挖矿延长备用链（攻击链），当A最终成功的使攻击链的长度（累计工作量）超过当前主链时，会再一次导致网络中的节点切换主链的情况，如下面的示意图：</p>\n<p><img src=\"/2019/09/09/比特币双花攻击/attack_chain.png\" alt=\"attack_chain\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是包含了A转给C的交易T2的区块BLK2位于了主链之上，此时A通知C钱已到账，C做支付验证也没问题，于是C给A发货，A的双花攻击成功。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此对于额度稍大的交易，必须要等待6个区块的确认才能保证安全，因为攻击者要想构造攻击链追上已经经过6个区块确认的主链需要花费的算力成本是非常大的，很有可能得不偿失。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><blockquote>\n<p>(1) 大部分情况下比特币的UTXO机制和区块链的共识机制都能有效应对双花攻击；</p>\n</blockquote>\n<blockquote>\n<p>(2) 对于小额支付，等待一个确认通常就可以认为安全了，但是对于大额支付，需要等6个确认才能大概率的认为安全，否则如果攻击者掌握很强算力，有可能构造累计工作量超过当前主链的攻击链导致双花成功。</p>\n</blockquote>\n<p>Never give up on something if you think you can fight for it. It’s difficult to wait but it’s more difficult when you regret. </p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在学习区块链的过程中，大家一定对会听到“双花”这个词，意思就是双重支付，或者更直白点就是一笔资金被花费了两次。这篇文章我们来简单的分析一下为什么会有双花，比特币是如何避免双花的。</p>\n<p><img src=\"/2019/09/09/比特币双花攻击/btc.jpeg\" alt=\"btc\"></p>","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在传统的交易中，因为有银行这样的中心化机构，所以是不会存在双花问题的：每一笔支付都将从你的银行账户中扣除相应的资金，所有的明细在银行都有记录。但是在比特币中，因为没有账户的概念，而是引入了UTXO即未花费交易输出。因为没有银行这样的中心化机构的保证，当发生一笔交易时就可能存在着双花的危险：比方说A有一个比特币，然后他同时构造两笔交易T1和T2来花费这1个比特币，其中一个给了B，从B那里买件衣服，一个给了C，从C那里买双鞋。如果不引入某种机制来避免这种情况，那作为数字货币的比特币将没有任何存在的意义。接下来就来分析一下比特币是如何做到防止这种“双花”攻击的。</p>\n<h1 id=\"1-正常情况\"><a href=\"#1-正常情况\" class=\"headerlink\" title=\"(1) 正常情况\"></a>(1) 正常情况</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;首先我们来看看正常情况，说白了就是绝大多数时候，区块链的共识机制就能将双花消灭在萌芽状态。我们还是以上面提到的例子来做说明：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设A构造了两笔交易T1和T2，将自己价值1btc的UTXO分别转给了B和C，妄图同时从B和C那里获得好处。然后A几乎在同一时间将构造好的这两笔交易广播至网络。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;假设网络中的矿工节点先收到了交易T1，<b>发现这笔交易的资金来源确实没有被花费过</b>，于是将T1加入到自己的内存交易池中等待打包进区块。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大部分情况下，这个矿工节点会在不久后又收到交易T2，此时矿工会先检查A的UTXO是否足够，因为T2所指向的交易输入与已经加入交易池的T1相同，于是发现UTXO不足，矿工节点会拒绝处理该交易。网络中其他的矿工节点都类似，因此A试图双花的尝试胎死腹中。</p>\n<h1 id=\"2-分叉情况\"><a href=\"#2-分叉情况\" class=\"headerlink\" title=\"(2) 分叉情况\"></a>(2) 分叉情况</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面说的是正常的情况，但是也有非正常的情况要考虑：假设矿工节点M1和M2几乎在同一时间挖出了区块，并且很不幸M1挖到区块时只收到了交易T1，而M2挖到的区块时只收到了交易T2，这样交易T1和T2被分别打包进两个区块。因为这两个区块是差不多同一时间被挖出，于是造成了区块链的分叉：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;网络中某些节点（可能是离M1近的）先收到了M1打包的区块BLK1，于是用该区块延长自己的区块链，而另外一些节点（邻近M2的）则先收到M2打包的区块BLK2，用该区块延长自己的区块链，于是整个区块链网络中呈现出了不一致的问题：</p>\n<p><img src=\"/2019/09/09/比特币双花攻击/chain.png\" alt=\"chain\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;像这种不一致问题，一般只需要一个确认就能得到解决：假设随后又收到新区块，而新区块是以BLK1作为父区块，那么之前用BLK1延长自己区块链的节点，只需要将新区块链接到自己的区块链上，而之前以BLK2延长自己区块链的节点，则需要切换到新的最长链上，如下图：<br><img src=\"/2019/09/09/比特币双花攻击/back_chain.png\" alt=\"back_chain\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此在出现分叉的情况下，通常也只需要等一个区块的确认时间网络节点中的区块链就可以重新一致，在这个例子中，经过一个区块的确认期以后，B最终确认自己收到A的1btc，而因为包含有转账给C的交易T2的区块BLK2位于备用链上，因此无法通过支付验证。A的双花尝试也以失败告终。</p>\n<h1 id=\"3-为什么说比特币需要6个确认才安全\"><a href=\"#3-为什么说比特币需要6个确认才安全\" class=\"headerlink\" title=\"(3) 为什么说比特币需要6个确认才安全\"></a>(3) 为什么说比特币需要6个确认才安全</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;上面提到一般情况下，只要经过1个区块的确认时间基本上就能确保“相对的安全”。而在比特币中，对于很小额的支付，为了提高交易速度，一般也就是等1个区块的确认即可。但是注意这里说的是“相对安全”，对于数额特别大交易，1个区块的确认远远不够。我们考虑上面提到的分叉情况：假设经过1个区块的确认后，B知道了A给他的1btc确实已经位于链上，于是发货给A。此时A及其同伙掌握着很大的一部分算力，A通知其同伙开始使劲挖矿延长备用链（攻击链），当A最终成功的使攻击链的长度（累计工作量）超过当前主链时，会再一次导致网络中的节点切换主链的情况，如下面的示意图：</p>\n<p><img src=\"/2019/09/09/比特币双花攻击/attack_chain.png\" alt=\"attack_chain\"></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;于是包含了A转给C的交易T2的区块BLK2位于了主链之上，此时A通知C钱已到账，C做支付验证也没问题，于是C给A发货，A的双花攻击成功。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此对于额度稍大的交易，必须要等待6个区块的确认才能保证安全，因为攻击者要想构造攻击链追上已经经过6个区块确认的主链需要花费的算力成本是非常大的，很有可能得不偿失。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><blockquote>\n<p>(1) 大部分情况下比特币的UTXO机制和区块链的共识机制都能有效应对双花攻击；</p>\n</blockquote>\n<blockquote>\n<p>(2) 对于小额支付，等待一个确认通常就可以认为安全了，但是对于大额支付，需要等6个确认才能大概率的认为安全，否则如果攻击者掌握很强算力，有可能构造累计工作量超过当前主链的攻击链导致双花成功。</p>\n</blockquote>\n<p>Never give up on something if you think you can fight for it. It’s difficult to wait but it’s more difficult when you regret. </p>"},{"title":"比特币本质其实是UTXO","date":"2019-09-09T15:22:42.000Z","notebook":"区块链","_content":"\nUTXO的全称为Unspent Transaction Output，翻译过来就是未被花费的交易输出。其实并没有什么比特币，我们在交易所里或者钱包里显示的比特币余额其实是UTXO。那到底什么是UTXO呢?\n\n![btc](比特币本质其实是UTXO/btc.jpeg)\n<!-- more -->\n\n好像觉得还是不太理解。。。。？\n\n# 示例\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在比特币区块链账本上记录了一笔一笔的交易，每一笔交易都有若干个交易输入（转账者），也就是资金来源，同时也有若干个交易输出（收款者），也就是资金去向。每一笔交易都要花费一笔输入，产生一笔输出，而产生的这笔输出，就是UTXO。\n\n举个简单的例子：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A地址下有1个btc，A要把1个btc转给B，则账本上交易的输入就是A，输出为B的地址，这时脚本会校验A地址是否有1个btc（余额都不够怎么会给你转），即在某一笔输出（UTXO）中查询到了A确实有1个btc。所以A可以作为输入转给B一个btc，这时就有一笔价值1个btc的输出指向B地址，直到B进行下一次转账前这笔交易都是B未被花费的输出（UTXO）。后续B要转给C时又重复A转B的操作。\n\n# 总结\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>比特币并不是基于账户的方案</b>，而是基于UTXO方案。这个和传统银行账户的思维完全不一样。张三拥有10个btc，其实就是当前区块链账本中，有若干笔交易的输出（UTXO）收款人都是张三的地址，而这些UXTO的总额为10。这个地址一共收了多少UTXO，则是要通过比特币钱包代为跟踪计算，所以钱包里显示的余额其实是有多少价值btc的输出指向你的地址。\n\n\n\nThis is your life, and you've got to fight for it. Fight for what's right. Fight for what's important to you. Fight for the people you love. ","source":"_posts/比特币本质其实是UTXO.md","raw":"---\ntitle: 比特币本质其实是UTXO\ndate: 2019-09-09 23:22:42\ntags: [BTC,UTXO]\ncategories: 区块链\nnotebook: 区块链\n---\n\nUTXO的全称为Unspent Transaction Output，翻译过来就是未被花费的交易输出。其实并没有什么比特币，我们在交易所里或者钱包里显示的比特币余额其实是UTXO。那到底什么是UTXO呢?\n\n![btc](比特币本质其实是UTXO/btc.jpeg)\n<!-- more -->\n\n好像觉得还是不太理解。。。。？\n\n# 示例\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在比特币区块链账本上记录了一笔一笔的交易，每一笔交易都有若干个交易输入（转账者），也就是资金来源，同时也有若干个交易输出（收款者），也就是资金去向。每一笔交易都要花费一笔输入，产生一笔输出，而产生的这笔输出，就是UTXO。\n\n举个简单的例子：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A地址下有1个btc，A要把1个btc转给B，则账本上交易的输入就是A，输出为B的地址，这时脚本会校验A地址是否有1个btc（余额都不够怎么会给你转），即在某一笔输出（UTXO）中查询到了A确实有1个btc。所以A可以作为输入转给B一个btc，这时就有一笔价值1个btc的输出指向B地址，直到B进行下一次转账前这笔交易都是B未被花费的输出（UTXO）。后续B要转给C时又重复A转B的操作。\n\n# 总结\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>比特币并不是基于账户的方案</b>，而是基于UTXO方案。这个和传统银行账户的思维完全不一样。张三拥有10个btc，其实就是当前区块链账本中，有若干笔交易的输出（UTXO）收款人都是张三的地址，而这些UXTO的总额为10。这个地址一共收了多少UTXO，则是要通过比特币钱包代为跟踪计算，所以钱包里显示的余额其实是有多少价值btc的输出指向你的地址。\n\n\n\nThis is your life, and you've got to fight for it. Fight for what's right. Fight for what's important to you. Fight for the people you love. ","slug":"比特币本质其实是UTXO","published":1,"updated":"2019-09-09T16:03:44.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lj001zfbs6ccde09pc","content":"<p>UTXO的全称为Unspent Transaction Output，翻译过来就是未被花费的交易输出。其实并没有什么比特币，我们在交易所里或者钱包里显示的比特币余额其实是UTXO。那到底什么是UTXO呢?</p>\n<p><img src=\"/2019/09/09/比特币本质其实是UTXO/btc.jpeg\" alt=\"btc\"></p>\n<a id=\"more\"></a>\n\n<p>好像觉得还是不太理解。。。。？</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在比特币区块链账本上记录了一笔一笔的交易，每一笔交易都有若干个交易输入（转账者），也就是资金来源，同时也有若干个交易输出（收款者），也就是资金去向。每一笔交易都要花费一笔输入，产生一笔输出，而产生的这笔输出，就是UTXO。</p>\n<p>举个简单的例子：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A地址下有1个btc，A要把1个btc转给B，则账本上交易的输入就是A，输出为B的地址，这时脚本会校验A地址是否有1个btc（余额都不够怎么会给你转），即在某一笔输出（UTXO）中查询到了A确实有1个btc。所以A可以作为输入转给B一个btc，这时就有一笔价值1个btc的输出指向B地址，直到B进行下一次转账前这笔交易都是B未被花费的输出（UTXO）。后续B要转给C时又重复A转B的操作。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>比特币并不是基于账户的方案</b>，而是基于UTXO方案。这个和传统银行账户的思维完全不一样。张三拥有10个btc，其实就是当前区块链账本中，有若干笔交易的输出（UTXO）收款人都是张三的地址，而这些UXTO的总额为10。这个地址一共收了多少UTXO，则是要通过比特币钱包代为跟踪计算，所以钱包里显示的余额其实是有多少价值btc的输出指向你的地址。</p>\n<p>This is your life, and you’ve got to fight for it. Fight for what’s right. Fight for what’s important to you. Fight for the people you love. </p>\n","site":{"data":{}},"excerpt":"<p>UTXO的全称为Unspent Transaction Output，翻译过来就是未被花费的交易输出。其实并没有什么比特币，我们在交易所里或者钱包里显示的比特币余额其实是UTXO。那到底什么是UTXO呢?</p>\n<p><img src=\"/2019/09/09/比特币本质其实是UTXO/btc.jpeg\" alt=\"btc\"></p>","more":"<p>好像觉得还是不太理解。。。。？</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在比特币区块链账本上记录了一笔一笔的交易，每一笔交易都有若干个交易输入（转账者），也就是资金来源，同时也有若干个交易输出（收款者），也就是资金去向。每一笔交易都要花费一笔输入，产生一笔输出，而产生的这笔输出，就是UTXO。</p>\n<p>举个简单的例子：<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;A地址下有1个btc，A要把1个btc转给B，则账本上交易的输入就是A，输出为B的地址，这时脚本会校验A地址是否有1个btc（余额都不够怎么会给你转），即在某一笔输出（UTXO）中查询到了A确实有1个btc。所以A可以作为输入转给B一个btc，这时就有一笔价值1个btc的输出指向B地址，直到B进行下一次转账前这笔交易都是B未被花费的输出（UTXO）。后续B要转给C时又重复A转B的操作。</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>比特币并不是基于账户的方案</b>，而是基于UTXO方案。这个和传统银行账户的思维完全不一样。张三拥有10个btc，其实就是当前区块链账本中，有若干笔交易的输出（UTXO）收款人都是张三的地址，而这些UXTO的总额为10。这个地址一共收了多少UTXO，则是要通过比特币钱包代为跟踪计算，所以钱包里显示的余额其实是有多少价值btc的输出指向你的地址。</p>\n<p>This is your life, and you’ve got to fight for it. Fight for what’s right. Fight for what’s important to you. Fight for the people you love. </p>"},{"title":"全球数字货币市值排名第三瑞波币XRP介绍","date":"2019-01-06T13:26:15.000Z","_content":"下面介绍瑞波币（XRP）的信息，希望对大家数字货币及投资有帮助。\n<!-- more -->\n概述：\n\t旨在消除比特币对集中交换的依赖，比比特币使用更少的电力，并且比比特币更快地执行交易；\n\t Ripple加密货币协议于2012年推出，其主要目标是确保“任何规模的安全，即时和几乎免费的全球资金运营，无需任何退款”。该协议支持使用法定货币，加密货币，货物或任何其他单位（如旅客奖励里程或移动会议纪要）付款。\n\t Ripple数字货币系统确认交易不是采矿，而是网络参与者的共识。 这种方法消除了对比特币中使用的集中交换的依赖。 Ripple也比比特币使用更少的电力，而交易执行得更快。\n\n创始人：\n\tRipple coin于2004年由加拿大温哥华市的网络开发人员Ryan Fugger首次实施跨境支付；\n\t\t2005年，Fugger开始将Ripplepay建成金融服务，通过全球网络为在线社区成员提供安全支付选项；\n\t\t在此协议的基础上，2011年5月出现了一种新的数字货币系统，其中发布了自己的加密货币XRP；\n\n发行量：1000亿枚\n\n发行时间：2011年\n\n用途：\n\t在Ripple中，用户通过使用以任意现实世界资产（美元，黄金，飞行里程等）计价的加密签名交易在他们之间进行支付。 为此，Ripple保留了一个分类账，用于记录彼此信任的用户之间的债务。 通过这种方式，所有资产都表示为债务。 当在彼此信任的两个用户之间进行支付时，根据每个用户设置的限制调整相互信用额度的余额。 为了在没有直接建立信任关系的用户之间发送资产，系统尝试在两个用户之间找到路径，使得路径的每个链接在具有信任关系的两个用户之间。 然后沿路径平衡所有，同时原子性调整。\n\n客户：欧洲进出口银行、SendFriend、JNFX、FTCS、科威特Ahli银行、Transpaygo、BFC Bahrain、ConnectPay、GMT、WorldCom Finance、Olympia Trust company、Pontual/USEND和Rendimento等200家商业银行和金融机构。\n\n\n事件：\n　　1.2011-04-18，瑞波币是Ripple网络的基础货币，它可以在整个ripple网络中流通，总数量为1000亿\n　　\n   2.2015-01-20，Ripple Labs任命前白宫顾问Gene Sperling为董事\n\tSperling表示：“我很高兴加入Ripple Labs，他们的使命是通过一个通用的互联网协议大幅提高跨境支付的速度和效率。“与货币无关的Ripple协议是一项独特的技术，可以从根本上改变通信银行业务，并导致实时支付系统。\n\n   3.2016-10-20，Ripple和R3在跨境银行支付方面取得突破\n\t该试验发生在旧金山的Ripple和由数十家银行支持的金融创新联盟R3之间。周四发布的公告涉及到12家银行，其中包括巴克莱和BMO,这些银行使用Ripple的货币XRP来为跨境结算提供流动性\n   \n   4.2017-10-11：瑞波全球支付网络产品签署九个新用户 计划进行跨境资金转移\n\t新成员包括国际支付处理服务商Bexs Banco de Cambio、为优步和GoDaddy提供支付服务的dLocal。目前该网络成员超过100，包括Credit Agricole、Currencies Direct、IFX、TransferGo、Cuallix, Krungsri和Rakbank。\n   \n   5.2018年2月6日，交易平台BitMEX对外公布一份Ripple调查报告，其中阐述瑞波币早期的分类账本中已遗失32570个区块，无法修复并获得其中的数据，而无法完整审核整个瑞波币区块链和1000亿XRP币的完整路径；\n   \n   6.2018年2月，西联汇款宣布与Ripple公司合作，测试通过Ripple进行资金交易并实现资本最优化。\n\n   7.2018年某段时期一度超越以太坊成为第二大加密货币，目前第三位。\n","source":"_posts/瑞波币（XRP）.md","raw":"---\ntitle: 全球数字货币市值排名第三瑞波币XRP介绍\ntags: [XRP,瑞波币]\ndate: 2019-01-06 21:26:15\ncategories: 数字货币\n---\n下面介绍瑞波币（XRP）的信息，希望对大家数字货币及投资有帮助。\n<!-- more -->\n概述：\n\t旨在消除比特币对集中交换的依赖，比比特币使用更少的电力，并且比比特币更快地执行交易；\n\t Ripple加密货币协议于2012年推出，其主要目标是确保“任何规模的安全，即时和几乎免费的全球资金运营，无需任何退款”。该协议支持使用法定货币，加密货币，货物或任何其他单位（如旅客奖励里程或移动会议纪要）付款。\n\t Ripple数字货币系统确认交易不是采矿，而是网络参与者的共识。 这种方法消除了对比特币中使用的集中交换的依赖。 Ripple也比比特币使用更少的电力，而交易执行得更快。\n\n创始人：\n\tRipple coin于2004年由加拿大温哥华市的网络开发人员Ryan Fugger首次实施跨境支付；\n\t\t2005年，Fugger开始将Ripplepay建成金融服务，通过全球网络为在线社区成员提供安全支付选项；\n\t\t在此协议的基础上，2011年5月出现了一种新的数字货币系统，其中发布了自己的加密货币XRP；\n\n发行量：1000亿枚\n\n发行时间：2011年\n\n用途：\n\t在Ripple中，用户通过使用以任意现实世界资产（美元，黄金，飞行里程等）计价的加密签名交易在他们之间进行支付。 为此，Ripple保留了一个分类账，用于记录彼此信任的用户之间的债务。 通过这种方式，所有资产都表示为债务。 当在彼此信任的两个用户之间进行支付时，根据每个用户设置的限制调整相互信用额度的余额。 为了在没有直接建立信任关系的用户之间发送资产，系统尝试在两个用户之间找到路径，使得路径的每个链接在具有信任关系的两个用户之间。 然后沿路径平衡所有，同时原子性调整。\n\n客户：欧洲进出口银行、SendFriend、JNFX、FTCS、科威特Ahli银行、Transpaygo、BFC Bahrain、ConnectPay、GMT、WorldCom Finance、Olympia Trust company、Pontual/USEND和Rendimento等200家商业银行和金融机构。\n\n\n事件：\n　　1.2011-04-18，瑞波币是Ripple网络的基础货币，它可以在整个ripple网络中流通，总数量为1000亿\n　　\n   2.2015-01-20，Ripple Labs任命前白宫顾问Gene Sperling为董事\n\tSperling表示：“我很高兴加入Ripple Labs，他们的使命是通过一个通用的互联网协议大幅提高跨境支付的速度和效率。“与货币无关的Ripple协议是一项独特的技术，可以从根本上改变通信银行业务，并导致实时支付系统。\n\n   3.2016-10-20，Ripple和R3在跨境银行支付方面取得突破\n\t该试验发生在旧金山的Ripple和由数十家银行支持的金融创新联盟R3之间。周四发布的公告涉及到12家银行，其中包括巴克莱和BMO,这些银行使用Ripple的货币XRP来为跨境结算提供流动性\n   \n   4.2017-10-11：瑞波全球支付网络产品签署九个新用户 计划进行跨境资金转移\n\t新成员包括国际支付处理服务商Bexs Banco de Cambio、为优步和GoDaddy提供支付服务的dLocal。目前该网络成员超过100，包括Credit Agricole、Currencies Direct、IFX、TransferGo、Cuallix, Krungsri和Rakbank。\n   \n   5.2018年2月6日，交易平台BitMEX对外公布一份Ripple调查报告，其中阐述瑞波币早期的分类账本中已遗失32570个区块，无法修复并获得其中的数据，而无法完整审核整个瑞波币区块链和1000亿XRP币的完整路径；\n   \n   6.2018年2月，西联汇款宣布与Ripple公司合作，测试通过Ripple进行资金交易并实现资本最优化。\n\n   7.2018年某段时期一度超越以太坊成为第二大加密货币，目前第三位。\n","slug":"瑞波币（XRP）","published":1,"updated":"2019-04-21T03:57:18.134Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lk0020fbs62udcee4l","content":"<p>下面介绍瑞波币（XRP）的信息，希望对大家数字货币及投资有帮助。</p>\n<a id=\"more\"></a>\n<p>概述：<br>    旨在消除比特币对集中交换的依赖，比比特币使用更少的电力，并且比比特币更快地执行交易；<br>     Ripple加密货币协议于2012年推出，其主要目标是确保“任何规模的安全，即时和几乎免费的全球资金运营，无需任何退款”。该协议支持使用法定货币，加密货币，货物或任何其他单位（如旅客奖励里程或移动会议纪要）付款。<br>     Ripple数字货币系统确认交易不是采矿，而是网络参与者的共识。 这种方法消除了对比特币中使用的集中交换的依赖。 Ripple也比比特币使用更少的电力，而交易执行得更快。</p>\n<p>创始人：<br>    Ripple coin于2004年由加拿大温哥华市的网络开发人员Ryan Fugger首次实施跨境支付；<br>        2005年，Fugger开始将Ripplepay建成金融服务，通过全球网络为在线社区成员提供安全支付选项；<br>        在此协议的基础上，2011年5月出现了一种新的数字货币系统，其中发布了自己的加密货币XRP；</p>\n<p>发行量：1000亿枚</p>\n<p>发行时间：2011年</p>\n<p>用途：<br>    在Ripple中，用户通过使用以任意现实世界资产（美元，黄金，飞行里程等）计价的加密签名交易在他们之间进行支付。 为此，Ripple保留了一个分类账，用于记录彼此信任的用户之间的债务。 通过这种方式，所有资产都表示为债务。 当在彼此信任的两个用户之间进行支付时，根据每个用户设置的限制调整相互信用额度的余额。 为了在没有直接建立信任关系的用户之间发送资产，系统尝试在两个用户之间找到路径，使得路径的每个链接在具有信任关系的两个用户之间。 然后沿路径平衡所有，同时原子性调整。</p>\n<p>客户：欧洲进出口银行、SendFriend、JNFX、FTCS、科威特Ahli银行、Transpaygo、BFC Bahrain、ConnectPay、GMT、WorldCom Finance、Olympia Trust company、Pontual/USEND和Rendimento等200家商业银行和金融机构。</p>\n<p>事件：<br>　　1.2011-04-18，瑞波币是Ripple网络的基础货币，它可以在整个ripple网络中流通，总数量为1000亿<br>　　<br>   2.2015-01-20，Ripple Labs任命前白宫顾问Gene Sperling为董事<br>    Sperling表示：“我很高兴加入Ripple Labs，他们的使命是通过一个通用的互联网协议大幅提高跨境支付的速度和效率。“与货币无关的Ripple协议是一项独特的技术，可以从根本上改变通信银行业务，并导致实时支付系统。</p>\n<p>   3.2016-10-20，Ripple和R3在跨境银行支付方面取得突破<br>    该试验发生在旧金山的Ripple和由数十家银行支持的金融创新联盟R3之间。周四发布的公告涉及到12家银行，其中包括巴克莱和BMO,这些银行使用Ripple的货币XRP来为跨境结算提供流动性</p>\n<p>   4.2017-10-11：瑞波全球支付网络产品签署九个新用户 计划进行跨境资金转移<br>    新成员包括国际支付处理服务商Bexs Banco de Cambio、为优步和GoDaddy提供支付服务的dLocal。目前该网络成员超过100，包括Credit Agricole、Currencies Direct、IFX、TransferGo、Cuallix, Krungsri和Rakbank。</p>\n<p>   5.2018年2月6日，交易平台BitMEX对外公布一份Ripple调查报告，其中阐述瑞波币早期的分类账本中已遗失32570个区块，无法修复并获得其中的数据，而无法完整审核整个瑞波币区块链和1000亿XRP币的完整路径；</p>\n<p>   6.2018年2月，西联汇款宣布与Ripple公司合作，测试通过Ripple进行资金交易并实现资本最优化。</p>\n<p>   7.2018年某段时期一度超越以太坊成为第二大加密货币，目前第三位。</p>\n","site":{"data":{}},"excerpt":"<p>下面介绍瑞波币（XRP）的信息，希望对大家数字货币及投资有帮助。</p>","more":"<p>概述：<br>    旨在消除比特币对集中交换的依赖，比比特币使用更少的电力，并且比比特币更快地执行交易；<br>     Ripple加密货币协议于2012年推出，其主要目标是确保“任何规模的安全，即时和几乎免费的全球资金运营，无需任何退款”。该协议支持使用法定货币，加密货币，货物或任何其他单位（如旅客奖励里程或移动会议纪要）付款。<br>     Ripple数字货币系统确认交易不是采矿，而是网络参与者的共识。 这种方法消除了对比特币中使用的集中交换的依赖。 Ripple也比比特币使用更少的电力，而交易执行得更快。</p>\n<p>创始人：<br>    Ripple coin于2004年由加拿大温哥华市的网络开发人员Ryan Fugger首次实施跨境支付；<br>        2005年，Fugger开始将Ripplepay建成金融服务，通过全球网络为在线社区成员提供安全支付选项；<br>        在此协议的基础上，2011年5月出现了一种新的数字货币系统，其中发布了自己的加密货币XRP；</p>\n<p>发行量：1000亿枚</p>\n<p>发行时间：2011年</p>\n<p>用途：<br>    在Ripple中，用户通过使用以任意现实世界资产（美元，黄金，飞行里程等）计价的加密签名交易在他们之间进行支付。 为此，Ripple保留了一个分类账，用于记录彼此信任的用户之间的债务。 通过这种方式，所有资产都表示为债务。 当在彼此信任的两个用户之间进行支付时，根据每个用户设置的限制调整相互信用额度的余额。 为了在没有直接建立信任关系的用户之间发送资产，系统尝试在两个用户之间找到路径，使得路径的每个链接在具有信任关系的两个用户之间。 然后沿路径平衡所有，同时原子性调整。</p>\n<p>客户：欧洲进出口银行、SendFriend、JNFX、FTCS、科威特Ahli银行、Transpaygo、BFC Bahrain、ConnectPay、GMT、WorldCom Finance、Olympia Trust company、Pontual/USEND和Rendimento等200家商业银行和金融机构。</p>\n<p>事件：<br>　　1.2011-04-18，瑞波币是Ripple网络的基础货币，它可以在整个ripple网络中流通，总数量为1000亿<br>　　<br>   2.2015-01-20，Ripple Labs任命前白宫顾问Gene Sperling为董事<br>    Sperling表示：“我很高兴加入Ripple Labs，他们的使命是通过一个通用的互联网协议大幅提高跨境支付的速度和效率。“与货币无关的Ripple协议是一项独特的技术，可以从根本上改变通信银行业务，并导致实时支付系统。</p>\n<p>   3.2016-10-20，Ripple和R3在跨境银行支付方面取得突破<br>    该试验发生在旧金山的Ripple和由数十家银行支持的金融创新联盟R3之间。周四发布的公告涉及到12家银行，其中包括巴克莱和BMO,这些银行使用Ripple的货币XRP来为跨境结算提供流动性</p>\n<p>   4.2017-10-11：瑞波全球支付网络产品签署九个新用户 计划进行跨境资金转移<br>    新成员包括国际支付处理服务商Bexs Banco de Cambio、为优步和GoDaddy提供支付服务的dLocal。目前该网络成员超过100，包括Credit Agricole、Currencies Direct、IFX、TransferGo、Cuallix, Krungsri和Rakbank。</p>\n<p>   5.2018年2月6日，交易平台BitMEX对外公布一份Ripple调查报告，其中阐述瑞波币早期的分类账本中已遗失32570个区块，无法修复并获得其中的数据，而无法完整审核整个瑞波币区块链和1000亿XRP币的完整路径；</p>\n<p>   6.2018年2月，西联汇款宣布与Ripple公司合作，测试通过Ripple进行资金交易并实现资本最优化。</p>\n<p>   7.2018年某段时期一度超越以太坊成为第二大加密货币，目前第三位。</p>"},{"title":"全球游戏公司游戏营收排行","date":"2019-01-05T13:26:15.000Z","_content":"游戏市场\n市场研究机构Newzoo发布2018年全球游戏市场报告，报告中显示，腾讯游戏相关营收增长9%，达到197亿美元，占据全球游戏市场近15%的份额。索尼以142亿美元营收排名第二，微软营收98亿美元排名第三。\n<!-- more -->\n游戏营收排名：\n1.腾讯\n2.索尼\n3.微软\n4.苹果\n5.动视暴雪\n6.谷歌\n7.网易\n8.EA\n9.任天堂\n10.万代南梦宫","source":"_posts/游戏市场营收排名.md","raw":"---\ntitle: 全球游戏公司游戏营收排行\ntags: 游戏\ndate: 2019-01-05 21:26:15\ncategories: 世界排名\n---\n游戏市场\n市场研究机构Newzoo发布2018年全球游戏市场报告，报告中显示，腾讯游戏相关营收增长9%，达到197亿美元，占据全球游戏市场近15%的份额。索尼以142亿美元营收排名第二，微软营收98亿美元排名第三。\n<!-- more -->\n游戏营收排名：\n1.腾讯\n2.索尼\n3.微软\n4.苹果\n5.动视暴雪\n6.谷歌\n7.网易\n8.EA\n9.任天堂\n10.万代南梦宫","slug":"游戏市场营收排名","published":1,"updated":"2019-04-21T03:54:53.544Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ll0021fbs6e8edzk44","content":"<p>游戏市场<br>市场研究机构Newzoo发布2018年全球游戏市场报告，报告中显示，腾讯游戏相关营收增长9%，达到197亿美元，占据全球游戏市场近15%的份额。索尼以142亿美元营收排名第二，微软营收98亿美元排名第三。</p>\n<a id=\"more\"></a>\n<p>游戏营收排名：<br>1.腾讯<br>2.索尼<br>3.微软<br>4.苹果<br>5.动视暴雪<br>6.谷歌<br>7.网易<br>8.EA<br>9.任天堂<br>10.万代南梦宫</p>\n","site":{"data":{}},"excerpt":"<p>游戏市场<br>市场研究机构Newzoo发布2018年全球游戏市场报告，报告中显示，腾讯游戏相关营收增长9%，达到197亿美元，占据全球游戏市场近15%的份额。索尼以142亿美元营收排名第二，微软营收98亿美元排名第三。</p>","more":"<p>游戏营收排名：<br>1.腾讯<br>2.索尼<br>3.微软<br>4.苹果<br>5.动视暴雪<br>6.谷歌<br>7.网易<br>8.EA<br>9.任天堂<br>10.万代南梦宫</p>"},{"title":"程序设计","date":"2019-09-13T02:46:23.000Z","notebook":"笔记","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序如何设计，达到用户使用简单，是我们需要不停探索的问题。\n![program_design](程序设计/program_design.jpeg)\n<!-- more -->\n\n# 1.抽象\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从what（什么）中将how（如何）分离出来的过程，即类中的操作如何进行，相对什么是类用户可见的，被称为抽象。抽象是软件工程中重要的方面，把类的功能抽象出来，会使程序设计变得更简单，因为在设计的初期就考虑操作的细节。\n\n\n- - -\nBe an especially simple person,\ndo not expect good luck coming suddenly, \nmanage yourself well and cherish time at the moment.","source":"_posts/程序设计.md","raw":"---\ntitle: 程序设计\ndate: 2019-09-13 10:46:23\ntags: 程序设计\ncategories: 程序设计\nnotebook: 笔记\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序如何设计，达到用户使用简单，是我们需要不停探索的问题。\n![program_design](程序设计/program_design.jpeg)\n<!-- more -->\n\n# 1.抽象\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从what（什么）中将how（如何）分离出来的过程，即类中的操作如何进行，相对什么是类用户可见的，被称为抽象。抽象是软件工程中重要的方面，把类的功能抽象出来，会使程序设计变得更简单，因为在设计的初期就考虑操作的细节。\n\n\n- - -\nBe an especially simple person,\ndo not expect good luck coming suddenly, \nmanage yourself well and cherish time at the moment.","slug":"程序设计","published":1,"updated":"2019-09-13T10:31:33.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lm0022fbs6cx4tqrey","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序如何设计，达到用户使用简单，是我们需要不停探索的问题。<br><img src=\"/2019/09/13/程序设计/program_design.jpeg\" alt=\"program_design\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-抽象\"><a href=\"#1-抽象\" class=\"headerlink\" title=\"1.抽象\"></a>1.抽象</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从what（什么）中将how（如何）分离出来的过程，即类中的操作如何进行，相对什么是类用户可见的，被称为抽象。抽象是软件工程中重要的方面，把类的功能抽象出来，会使程序设计变得更简单，因为在设计的初期就考虑操作的细节。</p>\n<hr>\n<p>Be an especially simple person,<br>do not expect good luck coming suddenly,<br>manage yourself well and cherish time at the moment.</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;程序如何设计，达到用户使用简单，是我们需要不停探索的问题。<br><img src=\"/2019/09/13/程序设计/program_design.jpeg\" alt=\"program_design\"></p>","more":"<h1 id=\"1-抽象\"><a href=\"#1-抽象\" class=\"headerlink\" title=\"1.抽象\"></a>1.抽象</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从what（什么）中将how（如何）分离出来的过程，即类中的操作如何进行，相对什么是类用户可见的，被称为抽象。抽象是软件工程中重要的方面，把类的功能抽象出来，会使程序设计变得更简单，因为在设计的初期就考虑操作的细节。</p>\n<hr>\n<p>Be an especially simple person,<br>do not expect good luck coming suddenly,<br>manage yourself well and cherish time at the moment.</p>"},{"title":"简单排序","date":"2019-09-15T09:01:58.000Z","notebook":"笔记","_content":"\n简单排序，包括冒泡、选择、插入，他们的时间复杂度都很高，为 `O(N^2)` 但是相对来说 插入比选择快，选择比冒泡快，下面来看看如何操作。\n\n![simple_sort](简单排序/simple_sort.jpeg)\n\n<!-- more -->\n\n# 1.冒泡排序\n![bubble sort](简单排序/bubble_sort.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/BubbleSort.java)</a></b>\n\n# 2.选择排序\n![select sort](简单排序/select_sort.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/SelectSort.java)</a></b>\n\n# 3.插入排序\n![insert sort](简单排序/insert_sort_1.png)\n![insert sort](简单排序/insert_sort_2.png)\n![insert sort](简单排序/insert_sort_3.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/InsertSort.java)</a></b>\n\n\n- - -\nAll experience comes from mistakes.","source":"_posts/简单排序.md","raw":"---\ntitle: 简单排序\ndate: 2019-09-15 17:01:58\ntags: [冒泡排序,选择排序,插入排序]\ncategories: 数据结构与算法\nnotebook: 笔记\n---\n\n简单排序，包括冒泡、选择、插入，他们的时间复杂度都很高，为 `O(N^2)` 但是相对来说 插入比选择快，选择比冒泡快，下面来看看如何操作。\n\n![simple_sort](简单排序/simple_sort.jpeg)\n\n<!-- more -->\n\n# 1.冒泡排序\n![bubble sort](简单排序/bubble_sort.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/BubbleSort.java)</a></b>\n\n# 2.选择排序\n![select sort](简单排序/select_sort.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/SelectSort.java)</a></b>\n\n# 3.插入排序\n![insert sort](简单排序/insert_sort_1.png)\n![insert sort](简单排序/insert_sort_2.png)\n![insert sort](简单排序/insert_sort_3.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/InsertSort.java)</a></b>\n\n\n- - -\nAll experience comes from mistakes.","slug":"简单排序","published":1,"updated":"2019-09-15T13:44:09.096Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ln0023fbs6j00el5gt","content":"<p>简单排序，包括冒泡、选择、插入，他们的时间复杂度都很高，为 <code>O(N^2)</code> 但是相对来说 插入比选择快，选择比冒泡快，下面来看看如何操作。</p>\n<p><img src=\"/2019/09/15/简单排序/simple_sort.jpeg\" alt=\"simple_sort\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h1><p><img src=\"/2019/09/15/简单排序/bubble_sort.png\" alt=\"bubble sort\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/BubbleSort.java\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2.选择排序\"></a>2.选择排序</h1><p><img src=\"/2019/09/15/简单排序/select_sort.png\" alt=\"select sort\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/SelectSort.java\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3.插入排序\"></a>3.插入排序</h1><p><img src=\"/2019/09/15/简单排序/insert_sort_1.png\" alt=\"insert sort\"><br><img src=\"/2019/09/15/简单排序/insert_sort_2.png\" alt=\"insert sort\"><br><img src=\"/2019/09/15/简单排序/insert_sort_3.png\" alt=\"insert sort\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/InsertSort.java\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<hr>\n<p>All experience comes from mistakes.</p>\n","site":{"data":{}},"excerpt":"<p>简单排序，包括冒泡、选择、插入，他们的时间复杂度都很高，为 <code>O(N^2)</code> 但是相对来说 插入比选择快，选择比冒泡快，下面来看看如何操作。</p>\n<p><img src=\"/2019/09/15/简单排序/simple_sort.jpeg\" alt=\"simple_sort\"></p>","more":"<h1 id=\"1-冒泡排序\"><a href=\"#1-冒泡排序\" class=\"headerlink\" title=\"1.冒泡排序\"></a>1.冒泡排序</h1><p><img src=\"/2019/09/15/简单排序/bubble_sort.png\" alt=\"bubble sort\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/BubbleSort.java\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"2-选择排序\"><a href=\"#2-选择排序\" class=\"headerlink\" title=\"2.选择排序\"></a>2.选择排序</h1><p><img src=\"/2019/09/15/简单排序/select_sort.png\" alt=\"select sort\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/SelectSort.java\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<h1 id=\"3-插入排序\"><a href=\"#3-插入排序\" class=\"headerlink\" title=\"3.插入排序\"></a>3.插入排序</h1><p><img src=\"/2019/09/15/简单排序/insert_sort_1.png\" alt=\"insert sort\"><br><img src=\"/2019/09/15/简单排序/insert_sort_2.png\" alt=\"insert sort\"><br><img src=\"/2019/09/15/简单排序/insert_sort_3.png\" alt=\"insert sort\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://github.com/chenzuoli/ETL/tree/master/src/main/java/top/wetech/tools/data_structure/sort/InsertSort.java\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b></p>\n<hr>\n<p>All experience comes from mistakes.</p>"},{"title":"英国构成国","date":"2019-07-07T05:01:51.000Z","_content":"\n英国，全称为大不列颠及北爱尔兰联合王国（United Kingdom of Great Britain and Northern Ireland），世界第五大经济体。\n\n<!-- more -->\n听说，去了北爱尔兰，不要说英格兰好，不然会被打，哈哈\n\n地理位置：\n![英国地理位置](英国构成国/Britain.png)\n\n构成国：\n![构成国](英国构成国/TheBritainCounties.png)\n\n各构成国详情：\n![各国详情](英国构成国/Britain_countris.png)","source":"_posts/英国构成国.md","raw":"---\ntitle: 英国构成国\ndate: 2019-07-07 13:01:51\ntags: [英国,北爱尔兰,英格兰,苏格兰,威尔士]\ncategories: 世界国家\n---\n\n英国，全称为大不列颠及北爱尔兰联合王国（United Kingdom of Great Britain and Northern Ireland），世界第五大经济体。\n\n<!-- more -->\n听说，去了北爱尔兰，不要说英格兰好，不然会被打，哈哈\n\n地理位置：\n![英国地理位置](英国构成国/Britain.png)\n\n构成国：\n![构成国](英国构成国/TheBritainCounties.png)\n\n各构成国详情：\n![各国详情](英国构成国/Britain_countris.png)","slug":"英国构成国","published":1,"updated":"2019-07-07T05:42:17.657Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lo0024fbs63rpxhxqr","content":"<p>英国，全称为大不列颠及北爱尔兰联合王国（United Kingdom of Great Britain and Northern Ireland），世界第五大经济体。</p>\n<a id=\"more\"></a>\n<p>听说，去了北爱尔兰，不要说英格兰好，不然会被打，哈哈</p>\n<p>地理位置：<br><img src=\"/2019/07/07/英国构成国/Britain.png\" alt=\"英国地理位置\"></p>\n<p>构成国：<br><img src=\"/2019/07/07/英国构成国/TheBritainCounties.png\" alt=\"构成国\"></p>\n<p>各构成国详情：<br><img src=\"/2019/07/07/英国构成国/Britain_countris.png\" alt=\"各国详情\"></p>\n","site":{"data":{}},"excerpt":"<p>英国，全称为大不列颠及北爱尔兰联合王国（United Kingdom of Great Britain and Northern Ireland），世界第五大经济体。</p>","more":"<p>听说，去了北爱尔兰，不要说英格兰好，不然会被打，哈哈</p>\n<p>地理位置：<br><img src=\"/2019/07/07/英国构成国/Britain.png\" alt=\"英国地理位置\"></p>\n<p>构成国：<br><img src=\"/2019/07/07/英国构成国/TheBritainCounties.png\" alt=\"构成国\"></p>\n<p>各构成国详情：<br><img src=\"/2019/07/07/英国构成国/Britain_countris.png\" alt=\"各国详情\"></p>"},{"title":"美国软件巨头Oracle简介","date":"2019-05-11T09:34:25.000Z","_content":"甲骨文公司（英语：Oracle，NASDAQ：ORCL）是一间全球性的大型企业软件公司。总部位于美国加州红木城的红木岸（Redwood Shores），现时首席执行官为公司创办人劳伦斯·埃里森（Lawrence J. Ellison）。\n甲骨文是继微软后，全球收入第二多的软件公司。\n随着中美之间的贸易摩擦升级，美国软件巨头Oracle公司撤离中国区研发中心，只留下销售部门。这个软件巨头什么来历呢？\n\n<!-- more -->\n![tech](美国软件巨头Oracle简介/tech.jpeg)\n\n# 发展历史\n---\n> 1977年劳伦斯·埃里森、鲍勃·迈纳（Bob Miner）、埃德·奥茨（Ed Oates）在美国加州资成立公司，名为软件发展实验室（Software Development Laboratories，SDL)。其中创始人拉里·埃里森以670亿美元的身价排名全球第六。\n> 1978年，开发出第一版甲骨文系统（Oracle），以汇编语言写成；\n> 1979年，更名为关连式软件公司（Relational Software, Inc.，RSI)。\n> 1982年，推出甲骨文系统，公司也更名为甲骨文系统公司（Oracle Systems Corporation）；\n> 2016年，每年的研发投入$22亿美金，应用软件收入$70亿美金，中间件收入$10亿美金。30,000应用软件客户，30,000中间件客户，270,000数据库客户。\n> Oracle 在云端 SaaS 上的收入已为全球最大。\n\n# 产品\n---\n主要分两类：\n1.服务器及工具\n* 数据库服务器：12c\n* 应用服务器：Oracle WebLogic Application Server\n* 开发工具：Oracle JDeveloper，Oracle Designer，Oracle Developer，等等\n\n2.应用软件\n* 应用软件包与2010年9月20日甲骨文OpenWorld大会上推出的Oracle Fusion Application，一个全面的模块化的应用包；\n* 企业资源计划（ERP）软件。已有10年以上的历史。2005年，并购了开发企业软件的仁科软件公司以增强在这方面的竞争力；\n* 客户关系管理（CRM）软件。自1998年开始研发这种软件。2005年，并购了开发客户关系管理软件的希柏软件公司（Siebel）；\n* 人力资源管理（HCM），收购了仁科（PeopleSoft）软件；\n\n## 操作系统\nSolaris\nOracle Linux\n\n## 虚拟技术\nOracle VM\nVirtualBox\n\n## Java平台\nJava\nGlassFish（Sun Java System Application Server）\nWebLogic\n\n## 数据库管理系统\nOracle数据库\nBerkeley DB\nMySQL\nJava DB\n\n## 云计算\nOracle Cloud\n下图是Oracle Cloud在全球市场份额占比：\n![oracle_cloud](美国软件巨头Oracle简介/oracle_cloud.jpg)\n\n## 其它软件\nNetBeans\nSun Grid Engine\nSun Studio\n\n# 都有自己的操作系统了，真的厉害\n","source":"_posts/美国软件巨头Oracle简介.md","raw":"---\ntitle: 美国软件巨头Oracle简介\ndate: 2019-05-11 17:34:25\ntags: 软件\ncategories: 公司\n---\n甲骨文公司（英语：Oracle，NASDAQ：ORCL）是一间全球性的大型企业软件公司。总部位于美国加州红木城的红木岸（Redwood Shores），现时首席执行官为公司创办人劳伦斯·埃里森（Lawrence J. Ellison）。\n甲骨文是继微软后，全球收入第二多的软件公司。\n随着中美之间的贸易摩擦升级，美国软件巨头Oracle公司撤离中国区研发中心，只留下销售部门。这个软件巨头什么来历呢？\n\n<!-- more -->\n![tech](美国软件巨头Oracle简介/tech.jpeg)\n\n# 发展历史\n---\n> 1977年劳伦斯·埃里森、鲍勃·迈纳（Bob Miner）、埃德·奥茨（Ed Oates）在美国加州资成立公司，名为软件发展实验室（Software Development Laboratories，SDL)。其中创始人拉里·埃里森以670亿美元的身价排名全球第六。\n> 1978年，开发出第一版甲骨文系统（Oracle），以汇编语言写成；\n> 1979年，更名为关连式软件公司（Relational Software, Inc.，RSI)。\n> 1982年，推出甲骨文系统，公司也更名为甲骨文系统公司（Oracle Systems Corporation）；\n> 2016年，每年的研发投入$22亿美金，应用软件收入$70亿美金，中间件收入$10亿美金。30,000应用软件客户，30,000中间件客户，270,000数据库客户。\n> Oracle 在云端 SaaS 上的收入已为全球最大。\n\n# 产品\n---\n主要分两类：\n1.服务器及工具\n* 数据库服务器：12c\n* 应用服务器：Oracle WebLogic Application Server\n* 开发工具：Oracle JDeveloper，Oracle Designer，Oracle Developer，等等\n\n2.应用软件\n* 应用软件包与2010年9月20日甲骨文OpenWorld大会上推出的Oracle Fusion Application，一个全面的模块化的应用包；\n* 企业资源计划（ERP）软件。已有10年以上的历史。2005年，并购了开发企业软件的仁科软件公司以增强在这方面的竞争力；\n* 客户关系管理（CRM）软件。自1998年开始研发这种软件。2005年，并购了开发客户关系管理软件的希柏软件公司（Siebel）；\n* 人力资源管理（HCM），收购了仁科（PeopleSoft）软件；\n\n## 操作系统\nSolaris\nOracle Linux\n\n## 虚拟技术\nOracle VM\nVirtualBox\n\n## Java平台\nJava\nGlassFish（Sun Java System Application Server）\nWebLogic\n\n## 数据库管理系统\nOracle数据库\nBerkeley DB\nMySQL\nJava DB\n\n## 云计算\nOracle Cloud\n下图是Oracle Cloud在全球市场份额占比：\n![oracle_cloud](美国软件巨头Oracle简介/oracle_cloud.jpg)\n\n## 其它软件\nNetBeans\nSun Grid Engine\nSun Studio\n\n# 都有自己的操作系统了，真的厉害\n","slug":"美国软件巨头Oracle简介","published":1,"updated":"2019-05-11T10:00:03.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lp0025fbs69rymmq4v","content":"<p>甲骨文公司（英语：Oracle，NASDAQ：ORCL）是一间全球性的大型企业软件公司。总部位于美国加州红木城的红木岸（Redwood Shores），现时首席执行官为公司创办人劳伦斯·埃里森（Lawrence J. Ellison）。<br>甲骨文是继微软后，全球收入第二多的软件公司。<br>随着中美之间的贸易摩擦升级，美国软件巨头Oracle公司撤离中国区研发中心，只留下销售部门。这个软件巨头什么来历呢？</p>\n<a id=\"more\"></a>\n<p><img src=\"/2019/05/11/美国软件巨头Oracle简介/tech.jpeg\" alt=\"tech\"></p>\n<h1 id=\"发展历史\"><a href=\"#发展历史\" class=\"headerlink\" title=\"发展历史\"></a>发展历史</h1><hr>\n<blockquote>\n<p>1977年劳伦斯·埃里森、鲍勃·迈纳（Bob Miner）、埃德·奥茨（Ed Oates）在美国加州资成立公司，名为软件发展实验室（Software Development Laboratories，SDL)。其中创始人拉里·埃里森以670亿美元的身价排名全球第六。<br>1978年，开发出第一版甲骨文系统（Oracle），以汇编语言写成；<br>1979年，更名为关连式软件公司（Relational Software, Inc.，RSI)。<br>1982年，推出甲骨文系统，公司也更名为甲骨文系统公司（Oracle Systems Corporation）；<br>2016年，每年的研发投入$22亿美金，应用软件收入$70亿美金，中间件收入$10亿美金。30,000应用软件客户，30,000中间件客户，270,000数据库客户。<br>Oracle 在云端 SaaS 上的收入已为全球最大。</p>\n</blockquote>\n<h1 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h1><hr>\n<p>主要分两类：<br>1.服务器及工具</p>\n<ul>\n<li>数据库服务器：12c</li>\n<li>应用服务器：Oracle WebLogic Application Server</li>\n<li>开发工具：Oracle JDeveloper，Oracle Designer，Oracle Developer，等等</li>\n</ul>\n<p>2.应用软件</p>\n<ul>\n<li>应用软件包与2010年9月20日甲骨文OpenWorld大会上推出的Oracle Fusion Application，一个全面的模块化的应用包；</li>\n<li>企业资源计划（ERP）软件。已有10年以上的历史。2005年，并购了开发企业软件的仁科软件公司以增强在这方面的竞争力；</li>\n<li>客户关系管理（CRM）软件。自1998年开始研发这种软件。2005年，并购了开发客户关系管理软件的希柏软件公司（Siebel）；</li>\n<li>人力资源管理（HCM），收购了仁科（PeopleSoft）软件；</li>\n</ul>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><p>Solaris<br>Oracle Linux</p>\n<h2 id=\"虚拟技术\"><a href=\"#虚拟技术\" class=\"headerlink\" title=\"虚拟技术\"></a>虚拟技术</h2><p>Oracle VM<br>VirtualBox</p>\n<h2 id=\"Java平台\"><a href=\"#Java平台\" class=\"headerlink\" title=\"Java平台\"></a>Java平台</h2><p>Java<br>GlassFish（Sun Java System Application Server）<br>WebLogic</p>\n<h2 id=\"数据库管理系统\"><a href=\"#数据库管理系统\" class=\"headerlink\" title=\"数据库管理系统\"></a>数据库管理系统</h2><p>Oracle数据库<br>Berkeley DB<br>MySQL<br>Java DB</p>\n<h2 id=\"云计算\"><a href=\"#云计算\" class=\"headerlink\" title=\"云计算\"></a>云计算</h2><p>Oracle Cloud<br>下图是Oracle Cloud在全球市场份额占比：<br><img src=\"/2019/05/11/美国软件巨头Oracle简介/oracle_cloud.jpg\" alt=\"oracle_cloud\"></p>\n<h2 id=\"其它软件\"><a href=\"#其它软件\" class=\"headerlink\" title=\"其它软件\"></a>其它软件</h2><p>NetBeans<br>Sun Grid Engine<br>Sun Studio</p>\n<h1 id=\"都有自己的操作系统了，真的厉害\"><a href=\"#都有自己的操作系统了，真的厉害\" class=\"headerlink\" title=\"都有自己的操作系统了，真的厉害\"></a>都有自己的操作系统了，真的厉害</h1>","site":{"data":{}},"excerpt":"<p>甲骨文公司（英语：Oracle，NASDAQ：ORCL）是一间全球性的大型企业软件公司。总部位于美国加州红木城的红木岸（Redwood Shores），现时首席执行官为公司创办人劳伦斯·埃里森（Lawrence J. Ellison）。<br>甲骨文是继微软后，全球收入第二多的软件公司。<br>随着中美之间的贸易摩擦升级，美国软件巨头Oracle公司撤离中国区研发中心，只留下销售部门。这个软件巨头什么来历呢？</p>","more":"<p><img src=\"/2019/05/11/美国软件巨头Oracle简介/tech.jpeg\" alt=\"tech\"></p>\n<h1 id=\"发展历史\"><a href=\"#发展历史\" class=\"headerlink\" title=\"发展历史\"></a>发展历史</h1><hr>\n<blockquote>\n<p>1977年劳伦斯·埃里森、鲍勃·迈纳（Bob Miner）、埃德·奥茨（Ed Oates）在美国加州资成立公司，名为软件发展实验室（Software Development Laboratories，SDL)。其中创始人拉里·埃里森以670亿美元的身价排名全球第六。<br>1978年，开发出第一版甲骨文系统（Oracle），以汇编语言写成；<br>1979年，更名为关连式软件公司（Relational Software, Inc.，RSI)。<br>1982年，推出甲骨文系统，公司也更名为甲骨文系统公司（Oracle Systems Corporation）；<br>2016年，每年的研发投入$22亿美金，应用软件收入$70亿美金，中间件收入$10亿美金。30,000应用软件客户，30,000中间件客户，270,000数据库客户。<br>Oracle 在云端 SaaS 上的收入已为全球最大。</p>\n</blockquote>\n<h1 id=\"产品\"><a href=\"#产品\" class=\"headerlink\" title=\"产品\"></a>产品</h1><hr>\n<p>主要分两类：<br>1.服务器及工具</p>\n<ul>\n<li>数据库服务器：12c</li>\n<li>应用服务器：Oracle WebLogic Application Server</li>\n<li>开发工具：Oracle JDeveloper，Oracle Designer，Oracle Developer，等等</li>\n</ul>\n<p>2.应用软件</p>\n<ul>\n<li>应用软件包与2010年9月20日甲骨文OpenWorld大会上推出的Oracle Fusion Application，一个全面的模块化的应用包；</li>\n<li>企业资源计划（ERP）软件。已有10年以上的历史。2005年，并购了开发企业软件的仁科软件公司以增强在这方面的竞争力；</li>\n<li>客户关系管理（CRM）软件。自1998年开始研发这种软件。2005年，并购了开发客户关系管理软件的希柏软件公司（Siebel）；</li>\n<li>人力资源管理（HCM），收购了仁科（PeopleSoft）软件；</li>\n</ul>\n<h2 id=\"操作系统\"><a href=\"#操作系统\" class=\"headerlink\" title=\"操作系统\"></a>操作系统</h2><p>Solaris<br>Oracle Linux</p>\n<h2 id=\"虚拟技术\"><a href=\"#虚拟技术\" class=\"headerlink\" title=\"虚拟技术\"></a>虚拟技术</h2><p>Oracle VM<br>VirtualBox</p>\n<h2 id=\"Java平台\"><a href=\"#Java平台\" class=\"headerlink\" title=\"Java平台\"></a>Java平台</h2><p>Java<br>GlassFish（Sun Java System Application Server）<br>WebLogic</p>\n<h2 id=\"数据库管理系统\"><a href=\"#数据库管理系统\" class=\"headerlink\" title=\"数据库管理系统\"></a>数据库管理系统</h2><p>Oracle数据库<br>Berkeley DB<br>MySQL<br>Java DB</p>\n<h2 id=\"云计算\"><a href=\"#云计算\" class=\"headerlink\" title=\"云计算\"></a>云计算</h2><p>Oracle Cloud<br>下图是Oracle Cloud在全球市场份额占比：<br><img src=\"/2019/05/11/美国软件巨头Oracle简介/oracle_cloud.jpg\" alt=\"oracle_cloud\"></p>\n<h2 id=\"其它软件\"><a href=\"#其它软件\" class=\"headerlink\" title=\"其它软件\"></a>其它软件</h2><p>NetBeans<br>Sun Grid Engine<br>Sun Studio</p>\n<h1 id=\"都有自己的操作系统了，真的厉害\"><a href=\"#都有自己的操作系统了，真的厉害\" class=\"headerlink\" title=\"都有自己的操作系统了，真的厉害\"></a>都有自己的操作系统了，真的厉害</h1>"},{"title":"说英语的国家","date":"2019-06-28T10:59:53.000Z","_content":"\n有哪些以英语为母语的国家呢？\n\n<!-- more -->\n\n参照下图，印度人说的最多。\n\n![说英语的国家](说英语的国家/English_country.png)\n\n英语学起来，走向全世界。","source":"_posts/说英语的国家.md","raw":"---\ntitle: 说英语的国家\ndate: 2019-06-28 18:59:53\ntags: English\ncategories: 语言\n---\n\n有哪些以英语为母语的国家呢？\n\n<!-- more -->\n\n参照下图，印度人说的最多。\n\n![说英语的国家](说英语的国家/English_country.png)\n\n英语学起来，走向全世界。","slug":"说英语的国家","published":1,"updated":"2019-06-28T11:05:02.955Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lr0026fbs607gbswb4","content":"<p>有哪些以英语为母语的国家呢？</p>\n<a id=\"more\"></a>\n\n<p>参照下图，印度人说的最多。</p>\n<p><img src=\"/2019/06/28/说英语的国家/English_country.png\" alt=\"说英语的国家\"></p>\n<p>英语学起来，走向全世界。</p>\n","site":{"data":{}},"excerpt":"<p>有哪些以英语为母语的国家呢？</p>","more":"<p>参照下图，印度人说的最多。</p>\n<p><img src=\"/2019/06/28/说英语的国家/English_country.png\" alt=\"说英语的国家\"></p>\n<p>英语学起来，走向全世界。</p>"},{"title":"读取配置文件工具类","date":"2018-04-03T12:45:53.000Z","_content":"我们在编程过程中，尤其是应用程序，需要经常更改的配置参数或者某些使用较多的固定值，我们可以把它提取出来，放到一个配置文件中，当我们需要修改这个值时，就可以做到不重新发布应用，或者不更改许多的代码，这样，即降低了程序代码的后期维护成本，也降低了程序代码的耦合性，这是我们每个合格的程序员应该具备的基本技能。\n下面来介绍一个读取配置文件的工具类。\n<!-- more -->\n# maven项目引入依赖\n```\n<!-- https://mvnrepository.com/artifact/log4j/log4j -->\n<dependency>\n\t<groupId>log4j</groupId>\n\t<artifactId>log4j</artifactId>\n\t<version>1.2.17</version>\n</dependency>\n```\n# 代码\n```\npackage com.payegis.czl.util;\n\nimport org.apache.log4j.Logger;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * User: chenzuoli\n * Date: 2018/3/20\n * Time: 15:13\n * Description: 读取配置文件工具类\n * Ps: Properties\n */\n\npublic class PropertiesUtils {\n    private static Logger logger = Logger.getLogger(PropertiesUtils.class);\n    private static Properties props;\n    private static String configHome = System.getenv(\"pesdk_home\");\n    private static String configFilePath = configHome + File.separator + \"conf\" + File.separator + \"db.properties\";\n    \n    static {\n        readProperties(configFilePath);\n        logger.info(\"配置文件加载成功。\");\n    }\n\n\tpublic static void main(String[] args) {\n        logger.info(get(\"psqlPassword\"));\n    }\n\t\n    /**\n     * 加载配置文件\n     *\n     * @param fileName\n     */\n    private static void readProperties(String fileName) {\n        try {\n            props = new Properties();\n            InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(new File(fileName)), \"utf-8\");\n            props.load(inputStreamReader);\n        } catch (Exception e) {\n            logger.error(\"加载配置文件失败！\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 根据key读取对应的value\n     *\n     * @param key\n     * @return\n     */\n    public static String get(String key) {\n        return props.getProperty(key);\n    }\n\n    /**\n     * 得到所有的配置信息\n     *\n     * @return\n     */\n    public static Map<?, ?> getAll() {\n        Map<String, String> map = new HashMap<String, String>();\n        Enumeration<?> enu = props.propertyNames();\n        while (enu.hasMoreElements()) {\n            String key = (String) enu.nextElement();\n            String value = props.getProperty(key);\n            map.put(key, value);\n        }\n        return map;\n    }\n\n```\n# 使用方法\n首先在本地环境变量中配置一个环境变量，名称为pesdk_home，当然你自己也可以随便定义，然后在该环境变量对应的路径下创建conf文件夹，再在conf文件夹下创建db.properties文件，你的配置项就可以添加到该配置文件中了，使用的时候，直接调用get方法，传入响应的key就可以获得value，赶紧试试吧。\n# ps\n如果大家在使用logger打印不出任何东西的时候，可能原因是你没有配置log4j的打印等级，这里就粘贴一下log4j的配置文件吧。这个配置文件的功能是error及fatal级日志打印到一个文件中，info及warn打印到另一个文件中，分日期打印。\n```\n# Root logger option\nlog4j.rootLogger=INFO, file, stdout \n# Direct log messages to a log file\nlog4j.appender.file=org.apache.log4j.RollingFileAppender\nlog4j.appender.file.File=DFTSystemWeb2.log\nlog4j.appender.file.MaxFileSize=10MB\nlog4j.appender.file.MaxBackupIndex=1\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=[%d{dd/MM/yy HH:mm:ss:sss z}] %5p %c{1}:%L - %m%n\n# Direct log messages to stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d{dd/MM/yy HH:mm:ss:sss z}] %5p %c{1}:%L - %m%n\nlog4j.logger.org.eclipse.jetty=INFO\nlog4j.logger.org.springframework=INFO\nlog4j.logger.com.mchange=ERROR\nlog4j.logger.org.hibernate=INFO\n#log4j.logger.org.hibernate.type=trace\nlog4j.logger.com.tulando.common.filter.MethodProfileAspect=info,ProfileAspect\nlog4j.appender.ProfileAspect=org.apache.log4j.RollingFileAppender\nlog4j.appender.ProfileAspect.File=api-profile.log\nlog4j.appender.ProfileAspect.MaxFileSize=1024KB\nlog4j.appender.ProfileAspect.MaxBackupIndex=5\nlog4j.appender.ProfileAspect.Append=true\nlog4j.appender.ProfileAspect.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ProfileAspect.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%c]-[%p] %m%n\n```\n整个方式到这里就配置完成了，如果在使用的过程中，有什么问题，或者有值得优化的地方，请联系我chenzuoli709@gmail.com.","source":"_posts/读取配置文件工具类.md","raw":"---\ntitle: 读取配置文件工具类\ndate: 2018-04-03 20:45:53\ntags: java\ncategories: 工具类\n---\n我们在编程过程中，尤其是应用程序，需要经常更改的配置参数或者某些使用较多的固定值，我们可以把它提取出来，放到一个配置文件中，当我们需要修改这个值时，就可以做到不重新发布应用，或者不更改许多的代码，这样，即降低了程序代码的后期维护成本，也降低了程序代码的耦合性，这是我们每个合格的程序员应该具备的基本技能。\n下面来介绍一个读取配置文件的工具类。\n<!-- more -->\n# maven项目引入依赖\n```\n<!-- https://mvnrepository.com/artifact/log4j/log4j -->\n<dependency>\n\t<groupId>log4j</groupId>\n\t<artifactId>log4j</artifactId>\n\t<version>1.2.17</version>\n</dependency>\n```\n# 代码\n```\npackage com.payegis.czl.util;\n\nimport org.apache.log4j.Logger;\nimport java.io.File;\nimport java.io.InputStreamReader;\nimport java.util.Enumeration;\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.Properties;\n\n/**\n * User: chenzuoli\n * Date: 2018/3/20\n * Time: 15:13\n * Description: 读取配置文件工具类\n * Ps: Properties\n */\n\npublic class PropertiesUtils {\n    private static Logger logger = Logger.getLogger(PropertiesUtils.class);\n    private static Properties props;\n    private static String configHome = System.getenv(\"pesdk_home\");\n    private static String configFilePath = configHome + File.separator + \"conf\" + File.separator + \"db.properties\";\n    \n    static {\n        readProperties(configFilePath);\n        logger.info(\"配置文件加载成功。\");\n    }\n\n\tpublic static void main(String[] args) {\n        logger.info(get(\"psqlPassword\"));\n    }\n\t\n    /**\n     * 加载配置文件\n     *\n     * @param fileName\n     */\n    private static void readProperties(String fileName) {\n        try {\n            props = new Properties();\n            InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(new File(fileName)), \"utf-8\");\n            props.load(inputStreamReader);\n        } catch (Exception e) {\n            logger.error(\"加载配置文件失败！\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * 根据key读取对应的value\n     *\n     * @param key\n     * @return\n     */\n    public static String get(String key) {\n        return props.getProperty(key);\n    }\n\n    /**\n     * 得到所有的配置信息\n     *\n     * @return\n     */\n    public static Map<?, ?> getAll() {\n        Map<String, String> map = new HashMap<String, String>();\n        Enumeration<?> enu = props.propertyNames();\n        while (enu.hasMoreElements()) {\n            String key = (String) enu.nextElement();\n            String value = props.getProperty(key);\n            map.put(key, value);\n        }\n        return map;\n    }\n\n```\n# 使用方法\n首先在本地环境变量中配置一个环境变量，名称为pesdk_home，当然你自己也可以随便定义，然后在该环境变量对应的路径下创建conf文件夹，再在conf文件夹下创建db.properties文件，你的配置项就可以添加到该配置文件中了，使用的时候，直接调用get方法，传入响应的key就可以获得value，赶紧试试吧。\n# ps\n如果大家在使用logger打印不出任何东西的时候，可能原因是你没有配置log4j的打印等级，这里就粘贴一下log4j的配置文件吧。这个配置文件的功能是error及fatal级日志打印到一个文件中，info及warn打印到另一个文件中，分日期打印。\n```\n# Root logger option\nlog4j.rootLogger=INFO, file, stdout \n# Direct log messages to a log file\nlog4j.appender.file=org.apache.log4j.RollingFileAppender\nlog4j.appender.file.File=DFTSystemWeb2.log\nlog4j.appender.file.MaxFileSize=10MB\nlog4j.appender.file.MaxBackupIndex=1\nlog4j.appender.file.layout=org.apache.log4j.PatternLayout\nlog4j.appender.file.layout.ConversionPattern=[%d{dd/MM/yy HH:mm:ss:sss z}] %5p %c{1}:%L - %m%n\n# Direct log messages to stdout\nlog4j.appender.stdout=org.apache.log4j.ConsoleAppender\nlog4j.appender.stdout.Target=System.out\nlog4j.appender.stdout.layout=org.apache.log4j.PatternLayout\nlog4j.appender.stdout.layout.ConversionPattern=[%d{dd/MM/yy HH:mm:ss:sss z}] %5p %c{1}:%L - %m%n\nlog4j.logger.org.eclipse.jetty=INFO\nlog4j.logger.org.springframework=INFO\nlog4j.logger.com.mchange=ERROR\nlog4j.logger.org.hibernate=INFO\n#log4j.logger.org.hibernate.type=trace\nlog4j.logger.com.tulando.common.filter.MethodProfileAspect=info,ProfileAspect\nlog4j.appender.ProfileAspect=org.apache.log4j.RollingFileAppender\nlog4j.appender.ProfileAspect.File=api-profile.log\nlog4j.appender.ProfileAspect.MaxFileSize=1024KB\nlog4j.appender.ProfileAspect.MaxBackupIndex=5\nlog4j.appender.ProfileAspect.Append=true\nlog4j.appender.ProfileAspect.layout=org.apache.log4j.PatternLayout\nlog4j.appender.ProfileAspect.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss,SSS} [%c]-[%p] %m%n\n```\n整个方式到这里就配置完成了，如果在使用的过程中，有什么问题，或者有值得优化的地方，请联系我chenzuoli709@gmail.com.","slug":"读取配置文件工具类","published":1,"updated":"2018-12-11T13:57:13.102Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ls0027fbs6yy6xv6n2","content":"<p>我们在编程过程中，尤其是应用程序，需要经常更改的配置参数或者某些使用较多的固定值，我们可以把它提取出来，放到一个配置文件中，当我们需要修改这个值时，就可以做到不重新发布应用，或者不更改许多的代码，这样，即降低了程序代码的后期维护成本，也降低了程序代码的耦合性，这是我们每个合格的程序员应该具备的基本技能。<br>下面来介绍一个读取配置文件的工具类。</p>\n<a id=\"more\"></a>\n<h1 id=\"maven项目引入依赖\"><a href=\"#maven项目引入依赖\" class=\"headerlink\" title=\"maven项目引入依赖\"></a>maven项目引入依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.payegis.czl.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.util.Enumeration;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * User: chenzuoli</span><br><span class=\"line\"> * Date: 2018/3/20</span><br><span class=\"line\"> * Time: 15:13</span><br><span class=\"line\"> * Description: 读取配置文件工具类</span><br><span class=\"line\"> * Ps: Properties</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class PropertiesUtils &#123;</span><br><span class=\"line\">    private static Logger logger = Logger.getLogger(PropertiesUtils.class);</span><br><span class=\"line\">    private static Properties props;</span><br><span class=\"line\">    private static String configHome = System.getenv(&quot;pesdk_home&quot;);</span><br><span class=\"line\">    private static String configFilePath = configHome + File.separator + &quot;conf&quot; + File.separator + &quot;db.properties&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        readProperties(configFilePath);</span><br><span class=\"line\">        logger.info(&quot;配置文件加载成功。&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">        logger.info(get(&quot;psqlPassword&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 加载配置文件</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param fileName</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void readProperties(String fileName) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            props = new Properties();</span><br><span class=\"line\">            InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(new File(fileName)), &quot;utf-8&quot;);</span><br><span class=\"line\">            props.load(inputStreamReader);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;加载配置文件失败！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据key读取对应的value</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String get(String key) &#123;</span><br><span class=\"line\">        return props.getProperty(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到所有的配置信息</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;?, ?&gt; getAll() &#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        Enumeration&lt;?&gt; enu = props.propertyNames();</span><br><span class=\"line\">        while (enu.hasMoreElements()) &#123;</span><br><span class=\"line\">            String key = (String) enu.nextElement();</span><br><span class=\"line\">            String value = props.getProperty(key);</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>首先在本地环境变量中配置一个环境变量，名称为pesdk_home，当然你自己也可以随便定义，然后在该环境变量对应的路径下创建conf文件夹，再在conf文件夹下创建db.properties文件，你的配置项就可以添加到该配置文件中了，使用的时候，直接调用get方法，传入响应的key就可以获得value，赶紧试试吧。</p>\n<h1 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h1><p>如果大家在使用logger打印不出任何东西的时候，可能原因是你没有配置log4j的打印等级，这里就粘贴一下log4j的配置文件吧。这个配置文件的功能是error及fatal级日志打印到一个文件中，info及warn打印到另一个文件中，分日期打印。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Root logger option</span><br><span class=\"line\">log4j.rootLogger=INFO, file, stdout </span><br><span class=\"line\"># Direct log messages to a log file</span><br><span class=\"line\">log4j.appender.file=org.apache.log4j.RollingFileAppender</span><br><span class=\"line\">log4j.appender.file.File=DFTSystemWeb2.log</span><br><span class=\"line\">log4j.appender.file.MaxFileSize=10MB</span><br><span class=\"line\">log4j.appender.file.MaxBackupIndex=1</span><br><span class=\"line\">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.file.layout.ConversionPattern=[%d&#123;dd/MM/yy HH:mm:ss:sss z&#125;] %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"># Direct log messages to stdout</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.Target=System.out</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=[%d&#123;dd/MM/yy HH:mm:ss:sss z&#125;] %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\">log4j.logger.org.eclipse.jetty=INFO</span><br><span class=\"line\">log4j.logger.org.springframework=INFO</span><br><span class=\"line\">log4j.logger.com.mchange=ERROR</span><br><span class=\"line\">log4j.logger.org.hibernate=INFO</span><br><span class=\"line\">#log4j.logger.org.hibernate.type=trace</span><br><span class=\"line\">log4j.logger.com.tulando.common.filter.MethodProfileAspect=info,ProfileAspect</span><br><span class=\"line\">log4j.appender.ProfileAspect=org.apache.log4j.RollingFileAppender</span><br><span class=\"line\">log4j.appender.ProfileAspect.File=api-profile.log</span><br><span class=\"line\">log4j.appender.ProfileAspect.MaxFileSize=1024KB</span><br><span class=\"line\">log4j.appender.ProfileAspect.MaxBackupIndex=5</span><br><span class=\"line\">log4j.appender.ProfileAspect.Append=true</span><br><span class=\"line\">log4j.appender.ProfileAspect.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.ProfileAspect.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n</span><br></pre></td></tr></table></figure>\n\n<p>整个方式到这里就配置完成了，如果在使用的过程中，有什么问题，或者有值得优化的地方，请联系我<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>.</p>\n","site":{"data":{}},"excerpt":"<p>我们在编程过程中，尤其是应用程序，需要经常更改的配置参数或者某些使用较多的固定值，我们可以把它提取出来，放到一个配置文件中，当我们需要修改这个值时，就可以做到不重新发布应用，或者不更改许多的代码，这样，即降低了程序代码的后期维护成本，也降低了程序代码的耦合性，这是我们每个合格的程序员应该具备的基本技能。<br>下面来介绍一个读取配置文件的工具类。</p>","more":"<h1 id=\"maven项目引入依赖\"><a href=\"#maven项目引入依赖\" class=\"headerlink\" title=\"maven项目引入依赖\"></a>maven项目引入依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/log4j/log4j --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;log4j&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;log4j&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.2.17&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.payegis.czl.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\">import java.io.File;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.util.Enumeration;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\">import java.util.Properties;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * User: chenzuoli</span><br><span class=\"line\"> * Date: 2018/3/20</span><br><span class=\"line\"> * Time: 15:13</span><br><span class=\"line\"> * Description: 读取配置文件工具类</span><br><span class=\"line\"> * Ps: Properties</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class PropertiesUtils &#123;</span><br><span class=\"line\">    private static Logger logger = Logger.getLogger(PropertiesUtils.class);</span><br><span class=\"line\">    private static Properties props;</span><br><span class=\"line\">    private static String configHome = System.getenv(&quot;pesdk_home&quot;);</span><br><span class=\"line\">    private static String configFilePath = configHome + File.separator + &quot;conf&quot; + File.separator + &quot;db.properties&quot;;</span><br><span class=\"line\">    </span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        readProperties(configFilePath);</span><br><span class=\"line\">        logger.info(&quot;配置文件加载成功。&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpublic static void main(String[] args) &#123;</span><br><span class=\"line\">        logger.info(get(&quot;psqlPassword&quot;));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 加载配置文件</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param fileName</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void readProperties(String fileName) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            props = new Properties();</span><br><span class=\"line\">            InputStreamReader inputStreamReader = new InputStreamReader(new FileInputStream(new File(fileName)), &quot;utf-8&quot;);</span><br><span class=\"line\">            props.load(inputStreamReader);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;加载配置文件失败！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 根据key读取对应的value</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param key</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static String get(String key) &#123;</span><br><span class=\"line\">        return props.getProperty(key);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 得到所有的配置信息</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Map&lt;?, ?&gt; getAll() &#123;</span><br><span class=\"line\">        Map&lt;String, String&gt; map = new HashMap&lt;String, String&gt;();</span><br><span class=\"line\">        Enumeration&lt;?&gt; enu = props.propertyNames();</span><br><span class=\"line\">        while (enu.hasMoreElements()) &#123;</span><br><span class=\"line\">            String key = (String) enu.nextElement();</span><br><span class=\"line\">            String value = props.getProperty(key);</span><br><span class=\"line\">            map.put(key, value);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return map;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"使用方法\"><a href=\"#使用方法\" class=\"headerlink\" title=\"使用方法\"></a>使用方法</h1><p>首先在本地环境变量中配置一个环境变量，名称为pesdk_home，当然你自己也可以随便定义，然后在该环境变量对应的路径下创建conf文件夹，再在conf文件夹下创建db.properties文件，你的配置项就可以添加到该配置文件中了，使用的时候，直接调用get方法，传入响应的key就可以获得value，赶紧试试吧。</p>\n<h1 id=\"ps\"><a href=\"#ps\" class=\"headerlink\" title=\"ps\"></a>ps</h1><p>如果大家在使用logger打印不出任何东西的时候，可能原因是你没有配置log4j的打印等级，这里就粘贴一下log4j的配置文件吧。这个配置文件的功能是error及fatal级日志打印到一个文件中，info及warn打印到另一个文件中，分日期打印。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Root logger option</span><br><span class=\"line\">log4j.rootLogger=INFO, file, stdout </span><br><span class=\"line\"># Direct log messages to a log file</span><br><span class=\"line\">log4j.appender.file=org.apache.log4j.RollingFileAppender</span><br><span class=\"line\">log4j.appender.file.File=DFTSystemWeb2.log</span><br><span class=\"line\">log4j.appender.file.MaxFileSize=10MB</span><br><span class=\"line\">log4j.appender.file.MaxBackupIndex=1</span><br><span class=\"line\">log4j.appender.file.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.file.layout.ConversionPattern=[%d&#123;dd/MM/yy HH:mm:ss:sss z&#125;] %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\"># Direct log messages to stdout</span><br><span class=\"line\">log4j.appender.stdout=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.stdout.Target=System.out</span><br><span class=\"line\">log4j.appender.stdout.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.stdout.layout.ConversionPattern=[%d&#123;dd/MM/yy HH:mm:ss:sss z&#125;] %5p %c&#123;1&#125;:%L - %m%n</span><br><span class=\"line\">log4j.logger.org.eclipse.jetty=INFO</span><br><span class=\"line\">log4j.logger.org.springframework=INFO</span><br><span class=\"line\">log4j.logger.com.mchange=ERROR</span><br><span class=\"line\">log4j.logger.org.hibernate=INFO</span><br><span class=\"line\">#log4j.logger.org.hibernate.type=trace</span><br><span class=\"line\">log4j.logger.com.tulando.common.filter.MethodProfileAspect=info,ProfileAspect</span><br><span class=\"line\">log4j.appender.ProfileAspect=org.apache.log4j.RollingFileAppender</span><br><span class=\"line\">log4j.appender.ProfileAspect.File=api-profile.log</span><br><span class=\"line\">log4j.appender.ProfileAspect.MaxFileSize=1024KB</span><br><span class=\"line\">log4j.appender.ProfileAspect.MaxBackupIndex=5</span><br><span class=\"line\">log4j.appender.ProfileAspect.Append=true</span><br><span class=\"line\">log4j.appender.ProfileAspect.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.ProfileAspect.layout.ConversionPattern=%d&#123;yyyy-MM-dd HH:mm:ss,SSS&#125; [%c]-[%p] %m%n</span><br></pre></td></tr></table></figure>\n\n<p>整个方式到这里就配置完成了，如果在使用的过程中，有什么问题，或者有值得优化的地方，请联系我<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>.</p>"},{"title":"身份证号校验工具类IdentityUtil","date":"2018-03-30T11:32:14.000Z","_content":"一个人的身份证号，每个字符都有他独特的含义，前2位代表省、自治区、直辖市代码，3-4位代表地级市、盟、自治州代码，5-6位代表县、县级市、区代码，7-14位代表出生年月日，15-17位代表当天出生的顺序号，奇数代表男，偶数代表女，18位为校验码，由0-9、X组成，这个校验码的由来，是由前17位数字计算得来，具体计算方式，可以参考下述代码。\n<!-- more -->\n本代码介绍的是校验身份证的合法性工具类，具体如下：\n```\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 身份证验证的工具（支持5位或18位省份证）\n * 身份证号码结构：\n * 17位数字和1位校验码：6位地址码数字，8位生日数字，3位出生时间顺序号，1位校验码。\n * 地址码（前6位）：表示对象常住户口所在县（市、镇、区）的行政区划代码，按GB/T2260的规定执行。\n * 出生日期码，（第七位 至十四位）：表示编码对象出生年、月、日，按GB按GB/T7408的规定执行，年、月、日代码之间不用分隔符。\n * 顺序码（第十五位至十七位）：表示在同一地址码所标示的区域范围内，对同年、同月、同日出生的人编订的顺序号，\n * 顺序码的奇数分配给男性，偶数分配给女性。\n * 校验码（第十八位数）：\n * 十七位数字本体码加权求和公式 s = sum(Ai*Wi), i = 0,,16，先对前17位数字的权求和；\n *  Ai:表示第i位置上的身份证号码数字值.Wi:表示第i位置上的加权因.Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2；\n * 计算模 Y = mod(S, 11)\n * 通过模得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0 X 9 8 7 6 5 4 3 2\n */\npublic class IdentityUtil {\n    final static Map<Integer, String> zoneNum = new HashMap<Integer, String>();\n    static {\n        zoneNum.put(11, \"北京\");\n        zoneNum.put(12, \"天津\");\n        zoneNum.put(13, \"河北\");\n        zoneNum.put(14, \"山西\");\n        zoneNum.put(15, \"内蒙古\");\n        zoneNum.put(21, \"辽宁\");\n        zoneNum.put(22, \"吉林\");\n        zoneNum.put(23, \"黑龙江\");\n        zoneNum.put(31, \"上海\");\n        zoneNum.put(32, \"江苏\");\n        zoneNum.put(33, \"浙江\");\n        zoneNum.put(34, \"安徽\");\n        zoneNum.put(35, \"福建\");\n        zoneNum.put(36, \"江西\");\n        zoneNum.put(37, \"山东\");\n        zoneNum.put(41, \"河南\");\n        zoneNum.put(42, \"湖北\");\n        zoneNum.put(43, \"湖南\");\n        zoneNum.put(44, \"广东\");\n        zoneNum.put(45, \"广西\");\n        zoneNum.put(46, \"海南\");\n        zoneNum.put(50, \"重庆\");\n        zoneNum.put(51, \"四川\");\n        zoneNum.put(52, \"贵州\");\n        zoneNum.put(53, \"云南\");\n        zoneNum.put(54, \"西藏\");\n        zoneNum.put(61, \"陕西\");\n        zoneNum.put(62, \"甘肃\");\n        zoneNum.put(63, \"青海\");\n        zoneNum.put(64, \"宁夏\");\n        zoneNum.put(65, \"新疆\");\n        zoneNum.put(71, \"台湾\");\n        zoneNum.put(81, \"香港\");\n        zoneNum.put(82, \"澳门\");\n        zoneNum.put(91, \"外国\");\n    }\n\n    final static int[] PARITYBIT = {'1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'};\n    final static int[] POWER_LIST = { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10,\n            5, 8, 4, 2};\n\n    /**\n     * 身份证验证\n     *@param s  号码内容\n     *@return 是否有效 null和\"\" 都是false\n     */\n    public static boolean checkIDCard(String certNo){\n        if(certNo == null || (certNo.length() != 15 && certNo.length() != 18))\n            return false;\n        final char[] cs = certNo.toUpperCase().toCharArray();\n        //校验位数\n        int power = 0;\n        for(int i=0; i<cs.length; i++){\n            if(i==cs.length-1 && cs[i] == 'X')\n                break;//最后一位可以 是X或x\n            if(cs[i]<'0' || cs[i]>'9')\n                return false;\n            if(i < cs.length -1){\n                power += (cs[i] - '0') * POWER_LIST[i];\n            }\n        }\n\n        //校验区位码\n        if(!zoneNum.containsKey(Integer.valueOf(certNo.substring(0,2)))){\n            return false;\n        }\n\n        //校验年份\n        String year = certNo.length() == 15 ? getIdcardCalendar() + certNo.substring(6,8) :certNo.substring(6, 10);\n\n        final int iyear = Integer.parseInt(year);\n        if(iyear < 1900 || iyear > Calendar.getInstance().get(Calendar.YEAR))\n            return false;//1900年的PASS，超过今年的PASS\n\n        //校验月份\n        String month = certNo.length() == 15 ? certNo.substring(8, 10) : certNo.substring(10,12);\n        final int imonth = Integer.parseInt(month);\n        if(imonth <1 || imonth >12){\n            return false;\n        }\n\n        //校验天数\n        String day = certNo.length() ==15 ? certNo.substring(10, 12) : certNo.substring(12, 14);\n        final int iday = Integer.parseInt(day);\n        if(iday < 1 || iday > 31)\n            return false;\n\n        //校验\"校验码\"\n        if(certNo.length() == 15)\n            return true;\n        return cs[cs.length -1 ] == PARITYBIT[power % 11];\n    }\n\n    private static int getIdcardCalendar() {\n        GregorianCalendar curDay = new GregorianCalendar();\n        int curYear = curDay.get(Calendar.YEAR);\n        int year2bit = Integer.parseInt(String.valueOf(curYear).substring(2));\n        return  year2bit;\n    }\n\n    public static void main(String[] args) {\n        boolean mark = checkIDCard(\"650105195604040056\");\n        System.out.println(mark);\n    }\n\n}\n```\n到这里就结束了，如有什么问题，请联系chenzuoli709@gmail.com","source":"_posts/身份证号校验工具类IdentityUtil.md","raw":"---\ntitle: 身份证号校验工具类IdentityUtil\ndate: 2018-03-30 19:32:14\ntags: utils\ncategories: 工具类\n---\n一个人的身份证号，每个字符都有他独特的含义，前2位代表省、自治区、直辖市代码，3-4位代表地级市、盟、自治州代码，5-6位代表县、县级市、区代码，7-14位代表出生年月日，15-17位代表当天出生的顺序号，奇数代表男，偶数代表女，18位为校验码，由0-9、X组成，这个校验码的由来，是由前17位数字计算得来，具体计算方式，可以参考下述代码。\n<!-- more -->\n本代码介绍的是校验身份证的合法性工具类，具体如下：\n```\nimport java.util.Calendar;\nimport java.util.GregorianCalendar;\nimport java.util.HashMap;\nimport java.util.Map;\n\n/**\n * 身份证验证的工具（支持5位或18位省份证）\n * 身份证号码结构：\n * 17位数字和1位校验码：6位地址码数字，8位生日数字，3位出生时间顺序号，1位校验码。\n * 地址码（前6位）：表示对象常住户口所在县（市、镇、区）的行政区划代码，按GB/T2260的规定执行。\n * 出生日期码，（第七位 至十四位）：表示编码对象出生年、月、日，按GB按GB/T7408的规定执行，年、月、日代码之间不用分隔符。\n * 顺序码（第十五位至十七位）：表示在同一地址码所标示的区域范围内，对同年、同月、同日出生的人编订的顺序号，\n * 顺序码的奇数分配给男性，偶数分配给女性。\n * 校验码（第十八位数）：\n * 十七位数字本体码加权求和公式 s = sum(Ai*Wi), i = 0,,16，先对前17位数字的权求和；\n *  Ai:表示第i位置上的身份证号码数字值.Wi:表示第i位置上的加权因.Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2；\n * 计算模 Y = mod(S, 11)\n * 通过模得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0 X 9 8 7 6 5 4 3 2\n */\npublic class IdentityUtil {\n    final static Map<Integer, String> zoneNum = new HashMap<Integer, String>();\n    static {\n        zoneNum.put(11, \"北京\");\n        zoneNum.put(12, \"天津\");\n        zoneNum.put(13, \"河北\");\n        zoneNum.put(14, \"山西\");\n        zoneNum.put(15, \"内蒙古\");\n        zoneNum.put(21, \"辽宁\");\n        zoneNum.put(22, \"吉林\");\n        zoneNum.put(23, \"黑龙江\");\n        zoneNum.put(31, \"上海\");\n        zoneNum.put(32, \"江苏\");\n        zoneNum.put(33, \"浙江\");\n        zoneNum.put(34, \"安徽\");\n        zoneNum.put(35, \"福建\");\n        zoneNum.put(36, \"江西\");\n        zoneNum.put(37, \"山东\");\n        zoneNum.put(41, \"河南\");\n        zoneNum.put(42, \"湖北\");\n        zoneNum.put(43, \"湖南\");\n        zoneNum.put(44, \"广东\");\n        zoneNum.put(45, \"广西\");\n        zoneNum.put(46, \"海南\");\n        zoneNum.put(50, \"重庆\");\n        zoneNum.put(51, \"四川\");\n        zoneNum.put(52, \"贵州\");\n        zoneNum.put(53, \"云南\");\n        zoneNum.put(54, \"西藏\");\n        zoneNum.put(61, \"陕西\");\n        zoneNum.put(62, \"甘肃\");\n        zoneNum.put(63, \"青海\");\n        zoneNum.put(64, \"宁夏\");\n        zoneNum.put(65, \"新疆\");\n        zoneNum.put(71, \"台湾\");\n        zoneNum.put(81, \"香港\");\n        zoneNum.put(82, \"澳门\");\n        zoneNum.put(91, \"外国\");\n    }\n\n    final static int[] PARITYBIT = {'1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'};\n    final static int[] POWER_LIST = { 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10,\n            5, 8, 4, 2};\n\n    /**\n     * 身份证验证\n     *@param s  号码内容\n     *@return 是否有效 null和\"\" 都是false\n     */\n    public static boolean checkIDCard(String certNo){\n        if(certNo == null || (certNo.length() != 15 && certNo.length() != 18))\n            return false;\n        final char[] cs = certNo.toUpperCase().toCharArray();\n        //校验位数\n        int power = 0;\n        for(int i=0; i<cs.length; i++){\n            if(i==cs.length-1 && cs[i] == 'X')\n                break;//最后一位可以 是X或x\n            if(cs[i]<'0' || cs[i]>'9')\n                return false;\n            if(i < cs.length -1){\n                power += (cs[i] - '0') * POWER_LIST[i];\n            }\n        }\n\n        //校验区位码\n        if(!zoneNum.containsKey(Integer.valueOf(certNo.substring(0,2)))){\n            return false;\n        }\n\n        //校验年份\n        String year = certNo.length() == 15 ? getIdcardCalendar() + certNo.substring(6,8) :certNo.substring(6, 10);\n\n        final int iyear = Integer.parseInt(year);\n        if(iyear < 1900 || iyear > Calendar.getInstance().get(Calendar.YEAR))\n            return false;//1900年的PASS，超过今年的PASS\n\n        //校验月份\n        String month = certNo.length() == 15 ? certNo.substring(8, 10) : certNo.substring(10,12);\n        final int imonth = Integer.parseInt(month);\n        if(imonth <1 || imonth >12){\n            return false;\n        }\n\n        //校验天数\n        String day = certNo.length() ==15 ? certNo.substring(10, 12) : certNo.substring(12, 14);\n        final int iday = Integer.parseInt(day);\n        if(iday < 1 || iday > 31)\n            return false;\n\n        //校验\"校验码\"\n        if(certNo.length() == 15)\n            return true;\n        return cs[cs.length -1 ] == PARITYBIT[power % 11];\n    }\n\n    private static int getIdcardCalendar() {\n        GregorianCalendar curDay = new GregorianCalendar();\n        int curYear = curDay.get(Calendar.YEAR);\n        int year2bit = Integer.parseInt(String.valueOf(curYear).substring(2));\n        return  year2bit;\n    }\n\n    public static void main(String[] args) {\n        boolean mark = checkIDCard(\"650105195604040056\");\n        System.out.println(mark);\n    }\n\n}\n```\n到这里就结束了，如有什么问题，请联系chenzuoli709@gmail.com","slug":"身份证号校验工具类IdentityUtil","published":1,"updated":"2018-12-11T13:57:13.103Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ls0028fbs64aw0s35n","content":"<p>一个人的身份证号，每个字符都有他独特的含义，前2位代表省、自治区、直辖市代码，3-4位代表地级市、盟、自治州代码，5-6位代表县、县级市、区代码，7-14位代表出生年月日，15-17位代表当天出生的顺序号，奇数代表男，偶数代表女，18位为校验码，由0-9、X组成，这个校验码的由来，是由前17位数字计算得来，具体计算方式，可以参考下述代码。</p>\n<a id=\"more\"></a>\n<p>本代码介绍的是校验身份证的合法性工具类，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Calendar;</span><br><span class=\"line\">import java.util.GregorianCalendar;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 身份证验证的工具（支持5位或18位省份证）</span><br><span class=\"line\"> * 身份证号码结构：</span><br><span class=\"line\"> * 17位数字和1位校验码：6位地址码数字，8位生日数字，3位出生时间顺序号，1位校验码。</span><br><span class=\"line\"> * 地址码（前6位）：表示对象常住户口所在县（市、镇、区）的行政区划代码，按GB/T2260的规定执行。</span><br><span class=\"line\"> * 出生日期码，（第七位 至十四位）：表示编码对象出生年、月、日，按GB按GB/T7408的规定执行，年、月、日代码之间不用分隔符。</span><br><span class=\"line\"> * 顺序码（第十五位至十七位）：表示在同一地址码所标示的区域范围内，对同年、同月、同日出生的人编订的顺序号，</span><br><span class=\"line\"> * 顺序码的奇数分配给男性，偶数分配给女性。</span><br><span class=\"line\"> * 校验码（第十八位数）：</span><br><span class=\"line\"> * 十七位数字本体码加权求和公式 s = sum(Ai*Wi), i = 0,,16，先对前17位数字的权求和；</span><br><span class=\"line\"> *  Ai:表示第i位置上的身份证号码数字值.Wi:表示第i位置上的加权因.Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2；</span><br><span class=\"line\"> * 计算模 Y = mod(S, 11)</span><br><span class=\"line\"> * 通过模得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0 X 9 8 7 6 5 4 3 2</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class IdentityUtil &#123;</span><br><span class=\"line\">    final static Map&lt;Integer, String&gt; zoneNum = new HashMap&lt;Integer, String&gt;();</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        zoneNum.put(11, &quot;北京&quot;);</span><br><span class=\"line\">        zoneNum.put(12, &quot;天津&quot;);</span><br><span class=\"line\">        zoneNum.put(13, &quot;河北&quot;);</span><br><span class=\"line\">        zoneNum.put(14, &quot;山西&quot;);</span><br><span class=\"line\">        zoneNum.put(15, &quot;内蒙古&quot;);</span><br><span class=\"line\">        zoneNum.put(21, &quot;辽宁&quot;);</span><br><span class=\"line\">        zoneNum.put(22, &quot;吉林&quot;);</span><br><span class=\"line\">        zoneNum.put(23, &quot;黑龙江&quot;);</span><br><span class=\"line\">        zoneNum.put(31, &quot;上海&quot;);</span><br><span class=\"line\">        zoneNum.put(32, &quot;江苏&quot;);</span><br><span class=\"line\">        zoneNum.put(33, &quot;浙江&quot;);</span><br><span class=\"line\">        zoneNum.put(34, &quot;安徽&quot;);</span><br><span class=\"line\">        zoneNum.put(35, &quot;福建&quot;);</span><br><span class=\"line\">        zoneNum.put(36, &quot;江西&quot;);</span><br><span class=\"line\">        zoneNum.put(37, &quot;山东&quot;);</span><br><span class=\"line\">        zoneNum.put(41, &quot;河南&quot;);</span><br><span class=\"line\">        zoneNum.put(42, &quot;湖北&quot;);</span><br><span class=\"line\">        zoneNum.put(43, &quot;湖南&quot;);</span><br><span class=\"line\">        zoneNum.put(44, &quot;广东&quot;);</span><br><span class=\"line\">        zoneNum.put(45, &quot;广西&quot;);</span><br><span class=\"line\">        zoneNum.put(46, &quot;海南&quot;);</span><br><span class=\"line\">        zoneNum.put(50, &quot;重庆&quot;);</span><br><span class=\"line\">        zoneNum.put(51, &quot;四川&quot;);</span><br><span class=\"line\">        zoneNum.put(52, &quot;贵州&quot;);</span><br><span class=\"line\">        zoneNum.put(53, &quot;云南&quot;);</span><br><span class=\"line\">        zoneNum.put(54, &quot;西藏&quot;);</span><br><span class=\"line\">        zoneNum.put(61, &quot;陕西&quot;);</span><br><span class=\"line\">        zoneNum.put(62, &quot;甘肃&quot;);</span><br><span class=\"line\">        zoneNum.put(63, &quot;青海&quot;);</span><br><span class=\"line\">        zoneNum.put(64, &quot;宁夏&quot;);</span><br><span class=\"line\">        zoneNum.put(65, &quot;新疆&quot;);</span><br><span class=\"line\">        zoneNum.put(71, &quot;台湾&quot;);</span><br><span class=\"line\">        zoneNum.put(81, &quot;香港&quot;);</span><br><span class=\"line\">        zoneNum.put(82, &quot;澳门&quot;);</span><br><span class=\"line\">        zoneNum.put(91, &quot;外国&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    final static int[] PARITYBIT = &#123;&apos;1&apos;, &apos;0&apos;, &apos;X&apos;, &apos;9&apos;, &apos;8&apos;, &apos;7&apos;, &apos;6&apos;, &apos;5&apos;, &apos;4&apos;, &apos;3&apos;, &apos;2&apos;&#125;;</span><br><span class=\"line\">    final static int[] POWER_LIST = &#123; 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10,</span><br><span class=\"line\">            5, 8, 4, 2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 身份证验证</span><br><span class=\"line\">     *@param s  号码内容</span><br><span class=\"line\">     *@return 是否有效 null和&quot;&quot; 都是false</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean checkIDCard(String certNo)&#123;</span><br><span class=\"line\">        if(certNo == null || (certNo.length() != 15 &amp;&amp; certNo.length() != 18))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        final char[] cs = certNo.toUpperCase().toCharArray();</span><br><span class=\"line\">        //校验位数</span><br><span class=\"line\">        int power = 0;</span><br><span class=\"line\">        for(int i=0; i&lt;cs.length; i++)&#123;</span><br><span class=\"line\">            if(i==cs.length-1 &amp;&amp; cs[i] == &apos;X&apos;)</span><br><span class=\"line\">                break;//最后一位可以 是X或x</span><br><span class=\"line\">            if(cs[i]&lt;&apos;0&apos; || cs[i]&gt;&apos;9&apos;)</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            if(i &lt; cs.length -1)&#123;</span><br><span class=\"line\">                power += (cs[i] - &apos;0&apos;) * POWER_LIST[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验区位码</span><br><span class=\"line\">        if(!zoneNum.containsKey(Integer.valueOf(certNo.substring(0,2))))&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验年份</span><br><span class=\"line\">        String year = certNo.length() == 15 ? getIdcardCalendar() + certNo.substring(6,8) :certNo.substring(6, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">        final int iyear = Integer.parseInt(year);</span><br><span class=\"line\">        if(iyear &lt; 1900 || iyear &gt; Calendar.getInstance().get(Calendar.YEAR))</span><br><span class=\"line\">            return false;//1900年的PASS，超过今年的PASS</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验月份</span><br><span class=\"line\">        String month = certNo.length() == 15 ? certNo.substring(8, 10) : certNo.substring(10,12);</span><br><span class=\"line\">        final int imonth = Integer.parseInt(month);</span><br><span class=\"line\">        if(imonth &lt;1 || imonth &gt;12)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验天数</span><br><span class=\"line\">        String day = certNo.length() ==15 ? certNo.substring(10, 12) : certNo.substring(12, 14);</span><br><span class=\"line\">        final int iday = Integer.parseInt(day);</span><br><span class=\"line\">        if(iday &lt; 1 || iday &gt; 31)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验&quot;校验码&quot;</span><br><span class=\"line\">        if(certNo.length() == 15)</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        return cs[cs.length -1 ] == PARITYBIT[power % 11];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int getIdcardCalendar() &#123;</span><br><span class=\"line\">        GregorianCalendar curDay = new GregorianCalendar();</span><br><span class=\"line\">        int curYear = curDay.get(Calendar.YEAR);</span><br><span class=\"line\">        int year2bit = Integer.parseInt(String.valueOf(curYear).substring(2));</span><br><span class=\"line\">        return  year2bit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        boolean mark = checkIDCard(&quot;650105195604040056&quot;);</span><br><span class=\"line\">        System.out.println(mark);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里就结束了，如有什么问题，请联系<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"<p>一个人的身份证号，每个字符都有他独特的含义，前2位代表省、自治区、直辖市代码，3-4位代表地级市、盟、自治州代码，5-6位代表县、县级市、区代码，7-14位代表出生年月日，15-17位代表当天出生的顺序号，奇数代表男，偶数代表女，18位为校验码，由0-9、X组成，这个校验码的由来，是由前17位数字计算得来，具体计算方式，可以参考下述代码。</p>","more":"<p>本代码介绍的是校验身份证的合法性工具类，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import java.util.Calendar;</span><br><span class=\"line\">import java.util.GregorianCalendar;</span><br><span class=\"line\">import java.util.HashMap;</span><br><span class=\"line\">import java.util.Map;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 身份证验证的工具（支持5位或18位省份证）</span><br><span class=\"line\"> * 身份证号码结构：</span><br><span class=\"line\"> * 17位数字和1位校验码：6位地址码数字，8位生日数字，3位出生时间顺序号，1位校验码。</span><br><span class=\"line\"> * 地址码（前6位）：表示对象常住户口所在县（市、镇、区）的行政区划代码，按GB/T2260的规定执行。</span><br><span class=\"line\"> * 出生日期码，（第七位 至十四位）：表示编码对象出生年、月、日，按GB按GB/T7408的规定执行，年、月、日代码之间不用分隔符。</span><br><span class=\"line\"> * 顺序码（第十五位至十七位）：表示在同一地址码所标示的区域范围内，对同年、同月、同日出生的人编订的顺序号，</span><br><span class=\"line\"> * 顺序码的奇数分配给男性，偶数分配给女性。</span><br><span class=\"line\"> * 校验码（第十八位数）：</span><br><span class=\"line\"> * 十七位数字本体码加权求和公式 s = sum(Ai*Wi), i = 0,,16，先对前17位数字的权求和；</span><br><span class=\"line\"> *  Ai:表示第i位置上的身份证号码数字值.Wi:表示第i位置上的加权因.Wi: 7 9 10 5 8 4 2 1 6 3 7 9 10 5 8 4 2；</span><br><span class=\"line\"> * 计算模 Y = mod(S, 11)</span><br><span class=\"line\"> * 通过模得到对应的校验码 Y: 0 1 2 3 4 5 6 7 8 9 10 校验码: 1 0 X 9 8 7 6 5 4 3 2</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class IdentityUtil &#123;</span><br><span class=\"line\">    final static Map&lt;Integer, String&gt; zoneNum = new HashMap&lt;Integer, String&gt;();</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        zoneNum.put(11, &quot;北京&quot;);</span><br><span class=\"line\">        zoneNum.put(12, &quot;天津&quot;);</span><br><span class=\"line\">        zoneNum.put(13, &quot;河北&quot;);</span><br><span class=\"line\">        zoneNum.put(14, &quot;山西&quot;);</span><br><span class=\"line\">        zoneNum.put(15, &quot;内蒙古&quot;);</span><br><span class=\"line\">        zoneNum.put(21, &quot;辽宁&quot;);</span><br><span class=\"line\">        zoneNum.put(22, &quot;吉林&quot;);</span><br><span class=\"line\">        zoneNum.put(23, &quot;黑龙江&quot;);</span><br><span class=\"line\">        zoneNum.put(31, &quot;上海&quot;);</span><br><span class=\"line\">        zoneNum.put(32, &quot;江苏&quot;);</span><br><span class=\"line\">        zoneNum.put(33, &quot;浙江&quot;);</span><br><span class=\"line\">        zoneNum.put(34, &quot;安徽&quot;);</span><br><span class=\"line\">        zoneNum.put(35, &quot;福建&quot;);</span><br><span class=\"line\">        zoneNum.put(36, &quot;江西&quot;);</span><br><span class=\"line\">        zoneNum.put(37, &quot;山东&quot;);</span><br><span class=\"line\">        zoneNum.put(41, &quot;河南&quot;);</span><br><span class=\"line\">        zoneNum.put(42, &quot;湖北&quot;);</span><br><span class=\"line\">        zoneNum.put(43, &quot;湖南&quot;);</span><br><span class=\"line\">        zoneNum.put(44, &quot;广东&quot;);</span><br><span class=\"line\">        zoneNum.put(45, &quot;广西&quot;);</span><br><span class=\"line\">        zoneNum.put(46, &quot;海南&quot;);</span><br><span class=\"line\">        zoneNum.put(50, &quot;重庆&quot;);</span><br><span class=\"line\">        zoneNum.put(51, &quot;四川&quot;);</span><br><span class=\"line\">        zoneNum.put(52, &quot;贵州&quot;);</span><br><span class=\"line\">        zoneNum.put(53, &quot;云南&quot;);</span><br><span class=\"line\">        zoneNum.put(54, &quot;西藏&quot;);</span><br><span class=\"line\">        zoneNum.put(61, &quot;陕西&quot;);</span><br><span class=\"line\">        zoneNum.put(62, &quot;甘肃&quot;);</span><br><span class=\"line\">        zoneNum.put(63, &quot;青海&quot;);</span><br><span class=\"line\">        zoneNum.put(64, &quot;宁夏&quot;);</span><br><span class=\"line\">        zoneNum.put(65, &quot;新疆&quot;);</span><br><span class=\"line\">        zoneNum.put(71, &quot;台湾&quot;);</span><br><span class=\"line\">        zoneNum.put(81, &quot;香港&quot;);</span><br><span class=\"line\">        zoneNum.put(82, &quot;澳门&quot;);</span><br><span class=\"line\">        zoneNum.put(91, &quot;外国&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    final static int[] PARITYBIT = &#123;&apos;1&apos;, &apos;0&apos;, &apos;X&apos;, &apos;9&apos;, &apos;8&apos;, &apos;7&apos;, &apos;6&apos;, &apos;5&apos;, &apos;4&apos;, &apos;3&apos;, &apos;2&apos;&#125;;</span><br><span class=\"line\">    final static int[] POWER_LIST = &#123; 7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10,</span><br><span class=\"line\">            5, 8, 4, 2&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 身份证验证</span><br><span class=\"line\">     *@param s  号码内容</span><br><span class=\"line\">     *@return 是否有效 null和&quot;&quot; 都是false</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean checkIDCard(String certNo)&#123;</span><br><span class=\"line\">        if(certNo == null || (certNo.length() != 15 &amp;&amp; certNo.length() != 18))</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        final char[] cs = certNo.toUpperCase().toCharArray();</span><br><span class=\"line\">        //校验位数</span><br><span class=\"line\">        int power = 0;</span><br><span class=\"line\">        for(int i=0; i&lt;cs.length; i++)&#123;</span><br><span class=\"line\">            if(i==cs.length-1 &amp;&amp; cs[i] == &apos;X&apos;)</span><br><span class=\"line\">                break;//最后一位可以 是X或x</span><br><span class=\"line\">            if(cs[i]&lt;&apos;0&apos; || cs[i]&gt;&apos;9&apos;)</span><br><span class=\"line\">                return false;</span><br><span class=\"line\">            if(i &lt; cs.length -1)&#123;</span><br><span class=\"line\">                power += (cs[i] - &apos;0&apos;) * POWER_LIST[i];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验区位码</span><br><span class=\"line\">        if(!zoneNum.containsKey(Integer.valueOf(certNo.substring(0,2))))&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验年份</span><br><span class=\"line\">        String year = certNo.length() == 15 ? getIdcardCalendar() + certNo.substring(6,8) :certNo.substring(6, 10);</span><br><span class=\"line\"></span><br><span class=\"line\">        final int iyear = Integer.parseInt(year);</span><br><span class=\"line\">        if(iyear &lt; 1900 || iyear &gt; Calendar.getInstance().get(Calendar.YEAR))</span><br><span class=\"line\">            return false;//1900年的PASS，超过今年的PASS</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验月份</span><br><span class=\"line\">        String month = certNo.length() == 15 ? certNo.substring(8, 10) : certNo.substring(10,12);</span><br><span class=\"line\">        final int imonth = Integer.parseInt(month);</span><br><span class=\"line\">        if(imonth &lt;1 || imonth &gt;12)&#123;</span><br><span class=\"line\">            return false;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验天数</span><br><span class=\"line\">        String day = certNo.length() ==15 ? certNo.substring(10, 12) : certNo.substring(12, 14);</span><br><span class=\"line\">        final int iday = Integer.parseInt(day);</span><br><span class=\"line\">        if(iday &lt; 1 || iday &gt; 31)</span><br><span class=\"line\">            return false;</span><br><span class=\"line\"></span><br><span class=\"line\">        //校验&quot;校验码&quot;</span><br><span class=\"line\">        if(certNo.length() == 15)</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        return cs[cs.length -1 ] == PARITYBIT[power % 11];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int getIdcardCalendar() &#123;</span><br><span class=\"line\">        GregorianCalendar curDay = new GregorianCalendar();</span><br><span class=\"line\">        int curYear = curDay.get(Calendar.YEAR);</span><br><span class=\"line\">        int year2bit = Integer.parseInt(String.valueOf(curYear).substring(2));</span><br><span class=\"line\">        return  year2bit;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        boolean mark = checkIDCard(&quot;650105195604040056&quot;);</span><br><span class=\"line\">        System.out.println(mark);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>到这里就结束了，如有什么问题，请联系<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a></p>"},{"title":"2018年全球道路质量排行","date":"2019-01-10T13:26:15.000Z","_content":"Quality of roads, 2018. (of 140 countries)\n<!-- more -->\nindex as below: \n1.🇸🇬Singapore\t\t新加坡\n2.🇨🇭Switzerland\t\t瑞士\n3.🇳🇱Netherlands\t\t荷兰\n\n6.🇯🇵Japan\t\t\t日本\n7.🇫🇷France\t\t\t法国\n9.🇦🇪UAE\t\t\t\t阿拉伯联合酋长国\n11.🇺🇸USA\t\t\t美国\n13.🇪🇸Spain\t\t\t西班牙\n19.🇩🇪Germany\t\t德国\n25.🇨🇦Canada\t\t\t加拿大\n26.🇬🇧UK\t\t\t\t英国\n33.🇹🇷Turkey\t\t\t土耳其\n42.🇨🇳China\t\t\t中国\n51.🇮🇳India\t\t\t印度\n69.🇵🇰PAK\t\t\t巴基斯坦\n104.🇷🇺Russia\t\t俄国\n110.🇲🇳Mongolia\t\t蒙古\n112.🇧🇷Brazil\t\t巴西\n132.🇳🇬Nigeria\t\t尼日利亚","source":"_posts/道路质量排行.md","raw":"---\ntitle: 2018年全球道路质量排行\ntags: 道路质量\ndate: 2019-01-10 21:26:15\ncategories: 世界排名\n---\nQuality of roads, 2018. (of 140 countries)\n<!-- more -->\nindex as below: \n1.🇸🇬Singapore\t\t新加坡\n2.🇨🇭Switzerland\t\t瑞士\n3.🇳🇱Netherlands\t\t荷兰\n\n6.🇯🇵Japan\t\t\t日本\n7.🇫🇷France\t\t\t法国\n9.🇦🇪UAE\t\t\t\t阿拉伯联合酋长国\n11.🇺🇸USA\t\t\t美国\n13.🇪🇸Spain\t\t\t西班牙\n19.🇩🇪Germany\t\t德国\n25.🇨🇦Canada\t\t\t加拿大\n26.🇬🇧UK\t\t\t\t英国\n33.🇹🇷Turkey\t\t\t土耳其\n42.🇨🇳China\t\t\t中国\n51.🇮🇳India\t\t\t印度\n69.🇵🇰PAK\t\t\t巴基斯坦\n104.🇷🇺Russia\t\t俄国\n110.🇲🇳Mongolia\t\t蒙古\n112.🇧🇷Brazil\t\t巴西\n132.🇳🇬Nigeria\t\t尼日利亚","slug":"道路质量排行","published":1,"updated":"2019-04-21T03:59:38.461Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lt0029fbs67vh7hcjz","content":"<p>Quality of roads, 2018. (of 140 countries)</p>\n<a id=\"more\"></a>\n<p>index as below:<br>1.🇸🇬Singapore        新加坡<br>2.🇨🇭Switzerland        瑞士<br>3.🇳🇱Netherlands        荷兰</p>\n<p>6.🇯🇵Japan            日本<br>7.🇫🇷France            法国<br>9.🇦🇪UAE                阿拉伯联合酋长国<br>11.🇺🇸USA            美国<br>13.🇪🇸Spain            西班牙<br>19.🇩🇪Germany        德国<br>25.🇨🇦Canada            加拿大<br>26.🇬🇧UK                英国<br>33.🇹🇷Turkey            土耳其<br>42.🇨🇳China            中国<br>51.🇮🇳India            印度<br>69.🇵🇰PAK            巴基斯坦<br>104.🇷🇺Russia        俄国<br>110.🇲🇳Mongolia        蒙古<br>112.🇧🇷Brazil        巴西<br>132.🇳🇬Nigeria        尼日利亚</p>\n","site":{"data":{}},"excerpt":"<p>Quality of roads, 2018. (of 140 countries)</p>","more":"<p>index as below:<br>1.🇸🇬Singapore        新加坡<br>2.🇨🇭Switzerland        瑞士<br>3.🇳🇱Netherlands        荷兰</p>\n<p>6.🇯🇵Japan            日本<br>7.🇫🇷France            法国<br>9.🇦🇪UAE                阿拉伯联合酋长国<br>11.🇺🇸USA            美国<br>13.🇪🇸Spain            西班牙<br>19.🇩🇪Germany        德国<br>25.🇨🇦Canada            加拿大<br>26.🇬🇧UK                英国<br>33.🇹🇷Turkey            土耳其<br>42.🇨🇳China            中国<br>51.🇮🇳India            印度<br>69.🇵🇰PAK            巴基斯坦<br>104.🇷🇺Russia        俄国<br>110.🇲🇳Mongolia        蒙古<br>112.🇧🇷Brazil        巴西<br>132.🇳🇬Nigeria        尼日利亚</p>"},{"title":"重温《头号玩家》VR游戏中的区块链世界","date":"2019-08-19T15:34:06.000Z","notebook":"区块链","_content":"\n2018年上映的电影《头号玩家》，得到许多年轻人的喜爱，故事情节紧凑而又丰富，其中包含许多区块链世界的元素，咱们一起探讨下吧。\n\n2019-08-25更新\n————————————\n![ready-player-one](重温《头号玩家》VR游戏中的区块链世界/ready-player-one.jpg)\n<!-- more -->\n游戏中通用的金币、不同的游乐场景、统一的入口等等，貌似现在的区块链世界。\n比特币、以太坊、比特现金，谁会是区块链游戏中的通用货币呢？\n每个玩家都有自己的唯一私钥，可以访问不同区域不同游戏，音乐、电影、游戏、运动等等，应有尽有，其中私钥就是区块链世界的入口。\n而且金币可以买现实世界中的物品，所以金币属于虚拟资产，类似现在的Q币、游戏币等等。\n你们觉得这种游戏会在现实中出现吗？\n我觉得可能，中心化的游戏，为并发和性能提供支持，区块链实现资产的去中心化，不受别人控制。\n所有如何实现centralized app与decentralized app之间的交互呢？\n\n","source":"_posts/重温《头号玩家》VR游戏中的区块链世界.md","raw":"---\ntitle: 重温《头号玩家》VR游戏中的区块链世界\ndate: 2019-08-19 23:34:06\ntags: 头号玩家\ncategories: 区块链\nnotebook: 区块链\n---\n\n2018年上映的电影《头号玩家》，得到许多年轻人的喜爱，故事情节紧凑而又丰富，其中包含许多区块链世界的元素，咱们一起探讨下吧。\n\n2019-08-25更新\n————————————\n![ready-player-one](重温《头号玩家》VR游戏中的区块链世界/ready-player-one.jpg)\n<!-- more -->\n游戏中通用的金币、不同的游乐场景、统一的入口等等，貌似现在的区块链世界。\n比特币、以太坊、比特现金，谁会是区块链游戏中的通用货币呢？\n每个玩家都有自己的唯一私钥，可以访问不同区域不同游戏，音乐、电影、游戏、运动等等，应有尽有，其中私钥就是区块链世界的入口。\n而且金币可以买现实世界中的物品，所以金币属于虚拟资产，类似现在的Q币、游戏币等等。\n你们觉得这种游戏会在现实中出现吗？\n我觉得可能，中心化的游戏，为并发和性能提供支持，区块链实现资产的去中心化，不受别人控制。\n所有如何实现centralized app与decentralized app之间的交互呢？\n\n","slug":"重温《头号玩家》VR游戏中的区块链世界","published":1,"updated":"2019-08-25T05:30:04.143Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lu002afbs6rv42vvrt","content":"<p>2018年上映的电影《头号玩家》，得到许多年轻人的喜爱，故事情节紧凑而又丰富，其中包含许多区块链世界的元素，咱们一起探讨下吧。</p>\n<p>2019-08-25更新<br>————————————<br><img src=\"/2019/08/19/重温《头号玩家》VR游戏中的区块链世界/ready-player-one.jpg\" alt=\"ready-player-one\"></p>\n<a id=\"more\"></a>\n<p>游戏中通用的金币、不同的游乐场景、统一的入口等等，貌似现在的区块链世界。<br>比特币、以太坊、比特现金，谁会是区块链游戏中的通用货币呢？<br>每个玩家都有自己的唯一私钥，可以访问不同区域不同游戏，音乐、电影、游戏、运动等等，应有尽有，其中私钥就是区块链世界的入口。<br>而且金币可以买现实世界中的物品，所以金币属于虚拟资产，类似现在的Q币、游戏币等等。<br>你们觉得这种游戏会在现实中出现吗？<br>我觉得可能，中心化的游戏，为并发和性能提供支持，区块链实现资产的去中心化，不受别人控制。<br>所有如何实现centralized app与decentralized app之间的交互呢？</p>\n","site":{"data":{}},"excerpt":"<p>2018年上映的电影《头号玩家》，得到许多年轻人的喜爱，故事情节紧凑而又丰富，其中包含许多区块链世界的元素，咱们一起探讨下吧。</p>\n<p>2019-08-25更新<br>————————————<br><img src=\"/2019/08/19/重温《头号玩家》VR游戏中的区块链世界/ready-player-one.jpg\" alt=\"ready-player-one\"></p>","more":"<p>游戏中通用的金币、不同的游乐场景、统一的入口等等，貌似现在的区块链世界。<br>比特币、以太坊、比特现金，谁会是区块链游戏中的通用货币呢？<br>每个玩家都有自己的唯一私钥，可以访问不同区域不同游戏，音乐、电影、游戏、运动等等，应有尽有，其中私钥就是区块链世界的入口。<br>而且金币可以买现实世界中的物品，所以金币属于虚拟资产，类似现在的Q币、游戏币等等。<br>你们觉得这种游戏会在现实中出现吗？<br>我觉得可能，中心化的游戏，为并发和性能提供支持，区块链实现资产的去中心化，不受别人控制。<br>所有如何实现centralized app与decentralized app之间的交互呢？</p>"},{"title":"阿里巴巴mysql数据库binlog的增量订阅与消费组件canal","date":"2018-09-05T12:15:44.000Z","_content":"首先介绍下canal他可以做什么，基于日志增量订阅&消费支持的业务, 监控mysql数据，将mysql增量数据从binlog中获取过来实现数据库的镜像、数据库实时备份、多级索引、业务cache刷新等，具体参考阿里开源项目代码：\n<a href=\"https://github.com/alibaba/canal\">canal github</a>\n<!-- more -->\n# canaldbkafka\n## 简介\ncanaldbkafka是连接canal和kafka的一个中间件。目的是实现数据库某个表格数据变更转变成消息流的形式，以便后续业务消费kafka的消息流。 canal wiki:https://github.com/alibaba/canal/wiki\n## 消息的类型\ncanal的binlog 会被解析成以下3中类型的消息。其他的类型被过滤掉了。\n### insert\n\n```\n{\n    \"data\": {\n        \"need_sub\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"order_description\": {\n            \"type\": \"varchar(1024)\",\n            \"updated\": true,\n            \"value\": \"\"\n        },\n        \"pay_amount\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"pay_order\": {\n            \"type\": \"varchar(30)\",\n            \"updated\": true,\n            \"value\": \"\"\n        }\n    },\n    \"type\": \"insert\"\n}\n```\n\n### delete\n```\n{\n    \"data\": {\n        \"need_sub\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"order_description\": {\n            \"type\": \"varchar(1024)\",\n            \"updated\": true,\n            \"value\": \"\"\n        },\n        \"pay_amount\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"pay_order\": {\n            \"type\": \"varchar(30)\",\n            \"updated\": true,\n            \"value\": \"\"\n        }\n    },\n    \"type\": \"delete\"\n}\n```\n### update\ndata对象是各字段类型、是否被更新、值。olddata对象是之前的状态。\n\n```\n{\n    \"data\": {\n        \"Quota\": {\n            \"type\": \"tinyint(4)\",\n            \"updated\": false,\n            \"value\": \"0\"\n        },\n        \"ReqAmount\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"100\"\n        }\n    },\n    \"olddata\": {\n        \"Quota\": {\n            \"type\": \"tinyint(4)\",\n            \"updated\": false,\n            \"value\": \"0\"\n        },\n        \"ReqAmount\": {\n            \"type\": \"int(11)\",\n            \"updated\": false,\n            \"value\": \"0\"\n        }\n    },\n    \"type\": \"update\"\n}\n```\n\n## 使用说明\n### 编译安装\n\n```\nmvn compile\n\nmvn package\n\nll target/canal-dbkafka   #可部署\ntotal 0\ndrwxr-xr-x   5 xxx  staff   170B 12 21 21:26 bin\ndrwxr-xr-x   3 xxx  staff   102B 12 21 21:26 conf\ndrwxr-xr-x  24 xxx  staff   816B 12 21 21:26 lib\ndrwxr-xr-x   2 xxx  staff    68B 12 21 21:26 logs\n\nll target/canal-dbkafka/bin  #startmy.sh为启动示例\n-rwxr-xr-x  1 xxx  staff   271B 12 21 21:26 startmy.sh\n-rwxr-xr-x  1 xxx  staff   2.5K 12 21 21:26 startup.sh\n-rwxr-xr-x  1 xxx  staff   1.0K 12 21 21:26 stop.sh\n\n```\n### 启动说明\n已startmy.sh为例\n```\n#!/bin/bash\n\ncurrent_path=`pwd`\ncase \"`uname`\" in\n    Linux)\n        bin_abs_path=$(readlink -f $(dirname $0))\n        ;;\n    *)\n        bin_abs_path=`cd $(dirname $0); pwd`\n        ;;\nesac\ncd ${bin_abs_path} && ./startup.sh testdb thetable 127.0.0.1:2181 127.0.0.1:9092\n```\n1. testdb 是canal配置的destination\n2. thetable kafka的具体topic\n3. 127.0.0.1:2181 是canal配置HA 对应的zookeeper的地址\n4. 127.0.0.1:9092  是kafka的地址\n\n\n### 使用注意事项\n1. mysql binlog模式设置为row模式\n2. 为了保证数据库消息的顺序性，将消息存储kafka的时候组件采用了同步的方式\n3. canal 必须配置zookeeper ha的模式 https://github.com/alibaba/canal/wiki/AdminGuide#ha%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE\n4. 之前使用针对的是数据库中的一个表在canal配置中已经过滤所以消息中没有表名 可以说是个设计的缺陷。\n\n# 高可用及分布式\n## 监控多个mysql\ncanal分服务端和客户端，我们需要监控多个mysql时，可以配置多个instance，具体编辑服务端配置文件canal.properties：\n```\n#################################################\n############     destinations       #############\n#################################################\ncanal.destinations=dest21,dest14\n# conf root dir\ncanal.conf.dir = ../conf\n# auto scan instance dir add/remove and start/stop instance\ncanal.auto.scan = true\ncanal.auto.scan.interval = 5\n```\n其中dest21和dest14为不同的instance，目录结构如下：\n```\n-rwxr-xr-x 1 root root 2882 Aug 27 18:44 canal.properties\ndrwxr-xr-x 2 root root 4096 Sep  5 19:08 dest14\ndrwxr-xr-x 2 root root 4096 Sep  5 19:09 dest21\n-rwxr-xr-x 1 root root 3038 Jun 19 17:18 logback.xml\ndrwxr-xr-x 3 root root 4096 Jun 19 17:18 spring\n```\ndest14和dest21目录分别为监控不同mysql的配置文件放置位置，具体如下：\n```\n#################################################\n## mysql serverId\ncanal.instance.mysql.slaveId=14\n\n# position info\ncanal.instance.master.address=1.1.1.1:3306\ncanal.instance.master.journal.name=\ncanal.instance.master.position=\ncanal.instance.master.timestamp=\n\n\n# table meta tsdb info\ncanal.instance.tsdb.enable=true\ncanal.instance.tsdb.dir=${canal.file.data.dir:../conf}/${canal.instance.destination:}\ncanal.instance.tsdb.url=jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;\n#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb\ncanal.instance.tsdb.dbUsername=canal\ncanal.instance.tsdb.dbPassword=canal\n\n\n#canal.instance.standby.address =\n#canal.instance.standby.journal.name =\n#canal.instance.standby.position =\n#canal.instance.standby.timestamp =\n\n# username/password\ncanal.instance.dbUsername=canal\ncanal.instance.dbPassword=*****\ncanal.instance.defaultDatabaseName=\ncanal.instance.connectionCharset=UTF-8\n\n# table regex\n#canal.instance.filter.regex=.*\\\\..*\ncanal.instance.filter.regex=event_collection\\.user_location_lng_lat\n# table black regex\ncanal.instance.filter.black.regex=\n#################################################\n```\n你需要修改的地方：\n```\ncanal.instance.mysql.slaveId -- 不同的instance分配不同的slaveId，因为canal监控mysql的原理就是伪装成mysql的slave来获取binlog日志的\ncanal.instance.master.address -- 配置监控的mysql ip地址\ncanal.instance.dbUsername -- 连接mysql的用户名\ncanal.instance.dbPassword -- 连接mysql的密码\ncanal.instance.filter.regex -- 监控mysql中的哪个库，哪个表\n```\n其中监控mysql的哪个库哪个表编写格式如下：\n```\n.*\\\\..*  --表示监控mysql所有库所有表\ntest\\..*  --表示监控mysql test库下的所有表\ntest\\.test  --表示监控mysql test库下的test表\n```\n\n阿里巴巴，我们程序员的梦想，开源的canal还是不错的，希望大家借助这篇文章能够熟练掌握canal的简单使用，如果遇到什么问题，欢迎一起讨论，在下方留言或者mail我：chenzuoli@gmail.com","source":"_posts/阿里巴巴mysql数据库binlog的增量订阅与消费组件canal.md","raw":"---\ntitle: 阿里巴巴mysql数据库binlog的增量订阅与消费组件canal\ndate: 2018-09-05 20:15:44\ntags: [canal,监控,mysql]\ncategories: 监控组件\n---\n首先介绍下canal他可以做什么，基于日志增量订阅&消费支持的业务, 监控mysql数据，将mysql增量数据从binlog中获取过来实现数据库的镜像、数据库实时备份、多级索引、业务cache刷新等，具体参考阿里开源项目代码：\n<a href=\"https://github.com/alibaba/canal\">canal github</a>\n<!-- more -->\n# canaldbkafka\n## 简介\ncanaldbkafka是连接canal和kafka的一个中间件。目的是实现数据库某个表格数据变更转变成消息流的形式，以便后续业务消费kafka的消息流。 canal wiki:https://github.com/alibaba/canal/wiki\n## 消息的类型\ncanal的binlog 会被解析成以下3中类型的消息。其他的类型被过滤掉了。\n### insert\n\n```\n{\n    \"data\": {\n        \"need_sub\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"order_description\": {\n            \"type\": \"varchar(1024)\",\n            \"updated\": true,\n            \"value\": \"\"\n        },\n        \"pay_amount\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"pay_order\": {\n            \"type\": \"varchar(30)\",\n            \"updated\": true,\n            \"value\": \"\"\n        }\n    },\n    \"type\": \"insert\"\n}\n```\n\n### delete\n```\n{\n    \"data\": {\n        \"need_sub\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"order_description\": {\n            \"type\": \"varchar(1024)\",\n            \"updated\": true,\n            \"value\": \"\"\n        },\n        \"pay_amount\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"0\"\n        },\n        \"pay_order\": {\n            \"type\": \"varchar(30)\",\n            \"updated\": true,\n            \"value\": \"\"\n        }\n    },\n    \"type\": \"delete\"\n}\n```\n### update\ndata对象是各字段类型、是否被更新、值。olddata对象是之前的状态。\n\n```\n{\n    \"data\": {\n        \"Quota\": {\n            \"type\": \"tinyint(4)\",\n            \"updated\": false,\n            \"value\": \"0\"\n        },\n        \"ReqAmount\": {\n            \"type\": \"int(11)\",\n            \"updated\": true,\n            \"value\": \"100\"\n        }\n    },\n    \"olddata\": {\n        \"Quota\": {\n            \"type\": \"tinyint(4)\",\n            \"updated\": false,\n            \"value\": \"0\"\n        },\n        \"ReqAmount\": {\n            \"type\": \"int(11)\",\n            \"updated\": false,\n            \"value\": \"0\"\n        }\n    },\n    \"type\": \"update\"\n}\n```\n\n## 使用说明\n### 编译安装\n\n```\nmvn compile\n\nmvn package\n\nll target/canal-dbkafka   #可部署\ntotal 0\ndrwxr-xr-x   5 xxx  staff   170B 12 21 21:26 bin\ndrwxr-xr-x   3 xxx  staff   102B 12 21 21:26 conf\ndrwxr-xr-x  24 xxx  staff   816B 12 21 21:26 lib\ndrwxr-xr-x   2 xxx  staff    68B 12 21 21:26 logs\n\nll target/canal-dbkafka/bin  #startmy.sh为启动示例\n-rwxr-xr-x  1 xxx  staff   271B 12 21 21:26 startmy.sh\n-rwxr-xr-x  1 xxx  staff   2.5K 12 21 21:26 startup.sh\n-rwxr-xr-x  1 xxx  staff   1.0K 12 21 21:26 stop.sh\n\n```\n### 启动说明\n已startmy.sh为例\n```\n#!/bin/bash\n\ncurrent_path=`pwd`\ncase \"`uname`\" in\n    Linux)\n        bin_abs_path=$(readlink -f $(dirname $0))\n        ;;\n    *)\n        bin_abs_path=`cd $(dirname $0); pwd`\n        ;;\nesac\ncd ${bin_abs_path} && ./startup.sh testdb thetable 127.0.0.1:2181 127.0.0.1:9092\n```\n1. testdb 是canal配置的destination\n2. thetable kafka的具体topic\n3. 127.0.0.1:2181 是canal配置HA 对应的zookeeper的地址\n4. 127.0.0.1:9092  是kafka的地址\n\n\n### 使用注意事项\n1. mysql binlog模式设置为row模式\n2. 为了保证数据库消息的顺序性，将消息存储kafka的时候组件采用了同步的方式\n3. canal 必须配置zookeeper ha的模式 https://github.com/alibaba/canal/wiki/AdminGuide#ha%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE\n4. 之前使用针对的是数据库中的一个表在canal配置中已经过滤所以消息中没有表名 可以说是个设计的缺陷。\n\n# 高可用及分布式\n## 监控多个mysql\ncanal分服务端和客户端，我们需要监控多个mysql时，可以配置多个instance，具体编辑服务端配置文件canal.properties：\n```\n#################################################\n############     destinations       #############\n#################################################\ncanal.destinations=dest21,dest14\n# conf root dir\ncanal.conf.dir = ../conf\n# auto scan instance dir add/remove and start/stop instance\ncanal.auto.scan = true\ncanal.auto.scan.interval = 5\n```\n其中dest21和dest14为不同的instance，目录结构如下：\n```\n-rwxr-xr-x 1 root root 2882 Aug 27 18:44 canal.properties\ndrwxr-xr-x 2 root root 4096 Sep  5 19:08 dest14\ndrwxr-xr-x 2 root root 4096 Sep  5 19:09 dest21\n-rwxr-xr-x 1 root root 3038 Jun 19 17:18 logback.xml\ndrwxr-xr-x 3 root root 4096 Jun 19 17:18 spring\n```\ndest14和dest21目录分别为监控不同mysql的配置文件放置位置，具体如下：\n```\n#################################################\n## mysql serverId\ncanal.instance.mysql.slaveId=14\n\n# position info\ncanal.instance.master.address=1.1.1.1:3306\ncanal.instance.master.journal.name=\ncanal.instance.master.position=\ncanal.instance.master.timestamp=\n\n\n# table meta tsdb info\ncanal.instance.tsdb.enable=true\ncanal.instance.tsdb.dir=${canal.file.data.dir:../conf}/${canal.instance.destination:}\ncanal.instance.tsdb.url=jdbc:h2:${canal.instance.tsdb.dir}/h2;CACHE_SIZE=1000;MODE=MYSQL;\n#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb\ncanal.instance.tsdb.dbUsername=canal\ncanal.instance.tsdb.dbPassword=canal\n\n\n#canal.instance.standby.address =\n#canal.instance.standby.journal.name =\n#canal.instance.standby.position =\n#canal.instance.standby.timestamp =\n\n# username/password\ncanal.instance.dbUsername=canal\ncanal.instance.dbPassword=*****\ncanal.instance.defaultDatabaseName=\ncanal.instance.connectionCharset=UTF-8\n\n# table regex\n#canal.instance.filter.regex=.*\\\\..*\ncanal.instance.filter.regex=event_collection\\.user_location_lng_lat\n# table black regex\ncanal.instance.filter.black.regex=\n#################################################\n```\n你需要修改的地方：\n```\ncanal.instance.mysql.slaveId -- 不同的instance分配不同的slaveId，因为canal监控mysql的原理就是伪装成mysql的slave来获取binlog日志的\ncanal.instance.master.address -- 配置监控的mysql ip地址\ncanal.instance.dbUsername -- 连接mysql的用户名\ncanal.instance.dbPassword -- 连接mysql的密码\ncanal.instance.filter.regex -- 监控mysql中的哪个库，哪个表\n```\n其中监控mysql的哪个库哪个表编写格式如下：\n```\n.*\\\\..*  --表示监控mysql所有库所有表\ntest\\..*  --表示监控mysql test库下的所有表\ntest\\.test  --表示监控mysql test库下的test表\n```\n\n阿里巴巴，我们程序员的梦想，开源的canal还是不错的，希望大家借助这篇文章能够熟练掌握canal的简单使用，如果遇到什么问题，欢迎一起讨论，在下方留言或者mail我：chenzuoli@gmail.com","slug":"阿里巴巴mysql数据库binlog的增量订阅与消费组件canal","published":1,"updated":"2018-12-11T13:57:13.104Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lv002bfbs6oejfwsec","content":"<p>首先介绍下canal他可以做什么，基于日志增量订阅&amp;消费支持的业务, 监控mysql数据，将mysql增量数据从binlog中获取过来实现数据库的镜像、数据库实时备份、多级索引、业务cache刷新等，具体参考阿里开源项目代码：<br><a href=\"https://github.com/alibaba/canal\" target=\"_blank\" rel=\"noopener\">canal github</a></p>\n<a id=\"more\"></a>\n<h1 id=\"canaldbkafka\"><a href=\"#canaldbkafka\" class=\"headerlink\" title=\"canaldbkafka\"></a>canaldbkafka</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>canaldbkafka是连接canal和kafka的一个中间件。目的是实现数据库某个表格数据变更转变成消息流的形式，以便后续业务消费kafka的消息流。 canal wiki:<a href=\"https://github.com/alibaba/canal/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/canal/wiki</a></p>\n<h2 id=\"消息的类型\"><a href=\"#消息的类型\" class=\"headerlink\" title=\"消息的类型\"></a>消息的类型</h2><p>canal的binlog 会被解析成以下3中类型的消息。其他的类型被过滤掉了。</p>\n<h3 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">        &quot;need_sub&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;order_description&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(1024)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_amount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_order&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(30)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;insert&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">        &quot;need_sub&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;order_description&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(1024)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_amount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_order&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(30)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;delete&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h3><p>data对象是各字段类型、是否被更新、值。olddata对象是之前的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">        &quot;Quota&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;tinyint(4)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: false,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ReqAmount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;100&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;olddata&quot;: &#123;</span><br><span class=\"line\">        &quot;Quota&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;tinyint(4)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: false,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ReqAmount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: false,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;update&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile</span><br><span class=\"line\"></span><br><span class=\"line\">mvn package</span><br><span class=\"line\"></span><br><span class=\"line\">ll target/canal-dbkafka   #可部署</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   5 xxx  staff   170B 12 21 21:26 bin</span><br><span class=\"line\">drwxr-xr-x   3 xxx  staff   102B 12 21 21:26 conf</span><br><span class=\"line\">drwxr-xr-x  24 xxx  staff   816B 12 21 21:26 lib</span><br><span class=\"line\">drwxr-xr-x   2 xxx  staff    68B 12 21 21:26 logs</span><br><span class=\"line\"></span><br><span class=\"line\">ll target/canal-dbkafka/bin  #startmy.sh为启动示例</span><br><span class=\"line\">-rwxr-xr-x  1 xxx  staff   271B 12 21 21:26 startmy.sh</span><br><span class=\"line\">-rwxr-xr-x  1 xxx  staff   2.5K 12 21 21:26 startup.sh</span><br><span class=\"line\">-rwxr-xr-x  1 xxx  staff   1.0K 12 21 21:26 stop.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动说明\"><a href=\"#启动说明\" class=\"headerlink\" title=\"启动说明\"></a>启动说明</h3><p>已startmy.sh为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\">case &quot;`uname`&quot; in</span><br><span class=\"line\">    Linux)</span><br><span class=\"line\">        bin_abs_path=$(readlink -f $(dirname $0))</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        bin_abs_path=`cd $(dirname $0); pwd`</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\">cd $&#123;bin_abs_path&#125; &amp;&amp; ./startup.sh testdb thetable 127.0.0.1:2181 127.0.0.1:9092</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>testdb 是canal配置的destination</li>\n<li>thetable kafka的具体topic</li>\n<li>127.0.0.1:2181 是canal配置HA 对应的zookeeper的地址</li>\n<li>127.0.0.1:9092  是kafka的地址</li>\n</ol>\n<h3 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h3><ol>\n<li>mysql binlog模式设置为row模式</li>\n<li>为了保证数据库消息的顺序性，将消息存储kafka的时候组件采用了同步的方式</li>\n<li>canal 必须配置zookeeper ha的模式 <a href=\"https://github.com/alibaba/canal/wiki/AdminGuide#ha%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/canal/wiki/AdminGuide#ha%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE</a></li>\n<li>之前使用针对的是数据库中的一个表在canal配置中已经过滤所以消息中没有表名 可以说是个设计的缺陷。</li>\n</ol>\n<h1 id=\"高可用及分布式\"><a href=\"#高可用及分布式\" class=\"headerlink\" title=\"高可用及分布式\"></a>高可用及分布式</h1><h2 id=\"监控多个mysql\"><a href=\"#监控多个mysql\" class=\"headerlink\" title=\"监控多个mysql\"></a>监控多个mysql</h2><p>canal分服务端和客户端，我们需要监控多个mysql时，可以配置多个instance，具体编辑服务端配置文件canal.properties：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#################################################</span><br><span class=\"line\">############     destinations       #############</span><br><span class=\"line\">#################################################</span><br><span class=\"line\">canal.destinations=dest21,dest14</span><br><span class=\"line\"># conf root dir</span><br><span class=\"line\">canal.conf.dir = ../conf</span><br><span class=\"line\"># auto scan instance dir add/remove and start/stop instance</span><br><span class=\"line\">canal.auto.scan = true</span><br><span class=\"line\">canal.auto.scan.interval = 5</span><br></pre></td></tr></table></figure>\n\n<p>其中dest21和dest14为不同的instance，目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rwxr-xr-x 1 root root 2882 Aug 27 18:44 canal.properties</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Sep  5 19:08 dest14</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Sep  5 19:09 dest21</span><br><span class=\"line\">-rwxr-xr-x 1 root root 3038 Jun 19 17:18 logback.xml</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jun 19 17:18 spring</span><br></pre></td></tr></table></figure>\n\n<p>dest14和dest21目录分别为监控不同mysql的配置文件放置位置，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#################################################</span><br><span class=\"line\">## mysql serverId</span><br><span class=\"line\">canal.instance.mysql.slaveId=14</span><br><span class=\"line\"></span><br><span class=\"line\"># position info</span><br><span class=\"line\">canal.instance.master.address=1.1.1.1:3306</span><br><span class=\"line\">canal.instance.master.journal.name=</span><br><span class=\"line\">canal.instance.master.position=</span><br><span class=\"line\">canal.instance.master.timestamp=</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># table meta tsdb info</span><br><span class=\"line\">canal.instance.tsdb.enable=true</span><br><span class=\"line\">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class=\"line\">canal.instance.tsdb.url=jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class=\"line\">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span><br><span class=\"line\">canal.instance.tsdb.dbUsername=canal</span><br><span class=\"line\">canal.instance.tsdb.dbPassword=canal</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#canal.instance.standby.address =</span><br><span class=\"line\">#canal.instance.standby.journal.name =</span><br><span class=\"line\">#canal.instance.standby.position =</span><br><span class=\"line\">#canal.instance.standby.timestamp =</span><br><span class=\"line\"></span><br><span class=\"line\"># username/password</span><br><span class=\"line\">canal.instance.dbUsername=canal</span><br><span class=\"line\">canal.instance.dbPassword=*****</span><br><span class=\"line\">canal.instance.defaultDatabaseName=</span><br><span class=\"line\">canal.instance.connectionCharset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"># table regex</span><br><span class=\"line\">#canal.instance.filter.regex=.*\\\\..*</span><br><span class=\"line\">canal.instance.filter.regex=event_collection\\.user_location_lng_lat</span><br><span class=\"line\"># table black regex</span><br><span class=\"line\">canal.instance.filter.black.regex=</span><br><span class=\"line\">#################################################</span><br></pre></td></tr></table></figure>\n\n<p>你需要修改的地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canal.instance.mysql.slaveId -- 不同的instance分配不同的slaveId，因为canal监控mysql的原理就是伪装成mysql的slave来获取binlog日志的</span><br><span class=\"line\">canal.instance.master.address -- 配置监控的mysql ip地址</span><br><span class=\"line\">canal.instance.dbUsername -- 连接mysql的用户名</span><br><span class=\"line\">canal.instance.dbPassword -- 连接mysql的密码</span><br><span class=\"line\">canal.instance.filter.regex -- 监控mysql中的哪个库，哪个表</span><br></pre></td></tr></table></figure>\n\n<p>其中监控mysql的哪个库哪个表编写格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.*\\\\..*  --表示监控mysql所有库所有表</span><br><span class=\"line\">test\\..*  --表示监控mysql test库下的所有表</span><br><span class=\"line\">test\\.test  --表示监控mysql test库下的test表</span><br></pre></td></tr></table></figure>\n\n<p>阿里巴巴，我们程序员的梦想，开源的canal还是不错的，希望大家借助这篇文章能够熟练掌握canal的简单使用，如果遇到什么问题，欢迎一起讨论，在下方留言或者mail我：<a href=\"mailto:chenzuoli@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"<p>首先介绍下canal他可以做什么，基于日志增量订阅&amp;消费支持的业务, 监控mysql数据，将mysql增量数据从binlog中获取过来实现数据库的镜像、数据库实时备份、多级索引、业务cache刷新等，具体参考阿里开源项目代码：<br><a href=\"https://github.com/alibaba/canal\" target=\"_blank\" rel=\"noopener\">canal github</a></p>","more":"<h1 id=\"canaldbkafka\"><a href=\"#canaldbkafka\" class=\"headerlink\" title=\"canaldbkafka\"></a>canaldbkafka</h1><h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>canaldbkafka是连接canal和kafka的一个中间件。目的是实现数据库某个表格数据变更转变成消息流的形式，以便后续业务消费kafka的消息流。 canal wiki:<a href=\"https://github.com/alibaba/canal/wiki\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/canal/wiki</a></p>\n<h2 id=\"消息的类型\"><a href=\"#消息的类型\" class=\"headerlink\" title=\"消息的类型\"></a>消息的类型</h2><p>canal的binlog 会被解析成以下3中类型的消息。其他的类型被过滤掉了。</p>\n<h3 id=\"insert\"><a href=\"#insert\" class=\"headerlink\" title=\"insert\"></a>insert</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">        &quot;need_sub&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;order_description&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(1024)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_amount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_order&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(30)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;insert&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"delete\"><a href=\"#delete\" class=\"headerlink\" title=\"delete\"></a>delete</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">        &quot;need_sub&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;order_description&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(1024)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_amount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;pay_order&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;varchar(30)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;delete&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"update\"><a href=\"#update\" class=\"headerlink\" title=\"update\"></a>update</h3><p>data对象是各字段类型、是否被更新、值。olddata对象是之前的状态。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;data&quot;: &#123;</span><br><span class=\"line\">        &quot;Quota&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;tinyint(4)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: false,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ReqAmount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: true,</span><br><span class=\"line\">            &quot;value&quot;: &quot;100&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;olddata&quot;: &#123;</span><br><span class=\"line\">        &quot;Quota&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;tinyint(4)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: false,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &quot;ReqAmount&quot;: &#123;</span><br><span class=\"line\">            &quot;type&quot;: &quot;int(11)&quot;,</span><br><span class=\"line\">            &quot;updated&quot;: false,</span><br><span class=\"line\">            &quot;value&quot;: &quot;0&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;type&quot;: &quot;update&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用说明\"><a href=\"#使用说明\" class=\"headerlink\" title=\"使用说明\"></a>使用说明</h2><h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile</span><br><span class=\"line\"></span><br><span class=\"line\">mvn package</span><br><span class=\"line\"></span><br><span class=\"line\">ll target/canal-dbkafka   #可部署</span><br><span class=\"line\">total 0</span><br><span class=\"line\">drwxr-xr-x   5 xxx  staff   170B 12 21 21:26 bin</span><br><span class=\"line\">drwxr-xr-x   3 xxx  staff   102B 12 21 21:26 conf</span><br><span class=\"line\">drwxr-xr-x  24 xxx  staff   816B 12 21 21:26 lib</span><br><span class=\"line\">drwxr-xr-x   2 xxx  staff    68B 12 21 21:26 logs</span><br><span class=\"line\"></span><br><span class=\"line\">ll target/canal-dbkafka/bin  #startmy.sh为启动示例</span><br><span class=\"line\">-rwxr-xr-x  1 xxx  staff   271B 12 21 21:26 startmy.sh</span><br><span class=\"line\">-rwxr-xr-x  1 xxx  staff   2.5K 12 21 21:26 startup.sh</span><br><span class=\"line\">-rwxr-xr-x  1 xxx  staff   1.0K 12 21 21:26 stop.sh</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"启动说明\"><a href=\"#启动说明\" class=\"headerlink\" title=\"启动说明\"></a>启动说明</h3><p>已startmy.sh为例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">current_path=`pwd`</span><br><span class=\"line\">case &quot;`uname`&quot; in</span><br><span class=\"line\">    Linux)</span><br><span class=\"line\">        bin_abs_path=$(readlink -f $(dirname $0))</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">    *)</span><br><span class=\"line\">        bin_abs_path=`cd $(dirname $0); pwd`</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">esac</span><br><span class=\"line\">cd $&#123;bin_abs_path&#125; &amp;&amp; ./startup.sh testdb thetable 127.0.0.1:2181 127.0.0.1:9092</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>testdb 是canal配置的destination</li>\n<li>thetable kafka的具体topic</li>\n<li>127.0.0.1:2181 是canal配置HA 对应的zookeeper的地址</li>\n<li>127.0.0.1:9092  是kafka的地址</li>\n</ol>\n<h3 id=\"使用注意事项\"><a href=\"#使用注意事项\" class=\"headerlink\" title=\"使用注意事项\"></a>使用注意事项</h3><ol>\n<li>mysql binlog模式设置为row模式</li>\n<li>为了保证数据库消息的顺序性，将消息存储kafka的时候组件采用了同步的方式</li>\n<li>canal 必须配置zookeeper ha的模式 <a href=\"https://github.com/alibaba/canal/wiki/AdminGuide#ha%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE\" target=\"_blank\" rel=\"noopener\">https://github.com/alibaba/canal/wiki/AdminGuide#ha%E6%A8%A1%E5%BC%8F%E9%85%8D%E7%BD%AE</a></li>\n<li>之前使用针对的是数据库中的一个表在canal配置中已经过滤所以消息中没有表名 可以说是个设计的缺陷。</li>\n</ol>\n<h1 id=\"高可用及分布式\"><a href=\"#高可用及分布式\" class=\"headerlink\" title=\"高可用及分布式\"></a>高可用及分布式</h1><h2 id=\"监控多个mysql\"><a href=\"#监控多个mysql\" class=\"headerlink\" title=\"监控多个mysql\"></a>监控多个mysql</h2><p>canal分服务端和客户端，我们需要监控多个mysql时，可以配置多个instance，具体编辑服务端配置文件canal.properties：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#################################################</span><br><span class=\"line\">############     destinations       #############</span><br><span class=\"line\">#################################################</span><br><span class=\"line\">canal.destinations=dest21,dest14</span><br><span class=\"line\"># conf root dir</span><br><span class=\"line\">canal.conf.dir = ../conf</span><br><span class=\"line\"># auto scan instance dir add/remove and start/stop instance</span><br><span class=\"line\">canal.auto.scan = true</span><br><span class=\"line\">canal.auto.scan.interval = 5</span><br></pre></td></tr></table></figure>\n\n<p>其中dest21和dest14为不同的instance，目录结构如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-rwxr-xr-x 1 root root 2882 Aug 27 18:44 canal.properties</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Sep  5 19:08 dest14</span><br><span class=\"line\">drwxr-xr-x 2 root root 4096 Sep  5 19:09 dest21</span><br><span class=\"line\">-rwxr-xr-x 1 root root 3038 Jun 19 17:18 logback.xml</span><br><span class=\"line\">drwxr-xr-x 3 root root 4096 Jun 19 17:18 spring</span><br></pre></td></tr></table></figure>\n\n<p>dest14和dest21目录分别为监控不同mysql的配置文件放置位置，具体如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#################################################</span><br><span class=\"line\">## mysql serverId</span><br><span class=\"line\">canal.instance.mysql.slaveId=14</span><br><span class=\"line\"></span><br><span class=\"line\"># position info</span><br><span class=\"line\">canal.instance.master.address=1.1.1.1:3306</span><br><span class=\"line\">canal.instance.master.journal.name=</span><br><span class=\"line\">canal.instance.master.position=</span><br><span class=\"line\">canal.instance.master.timestamp=</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># table meta tsdb info</span><br><span class=\"line\">canal.instance.tsdb.enable=true</span><br><span class=\"line\">canal.instance.tsdb.dir=$&#123;canal.file.data.dir:../conf&#125;/$&#123;canal.instance.destination:&#125;</span><br><span class=\"line\">canal.instance.tsdb.url=jdbc:h2:$&#123;canal.instance.tsdb.dir&#125;/h2;CACHE_SIZE=1000;MODE=MYSQL;</span><br><span class=\"line\">#canal.instance.tsdb.url=jdbc:mysql://127.0.0.1:3306/canal_tsdb</span><br><span class=\"line\">canal.instance.tsdb.dbUsername=canal</span><br><span class=\"line\">canal.instance.tsdb.dbPassword=canal</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">#canal.instance.standby.address =</span><br><span class=\"line\">#canal.instance.standby.journal.name =</span><br><span class=\"line\">#canal.instance.standby.position =</span><br><span class=\"line\">#canal.instance.standby.timestamp =</span><br><span class=\"line\"></span><br><span class=\"line\"># username/password</span><br><span class=\"line\">canal.instance.dbUsername=canal</span><br><span class=\"line\">canal.instance.dbPassword=*****</span><br><span class=\"line\">canal.instance.defaultDatabaseName=</span><br><span class=\"line\">canal.instance.connectionCharset=UTF-8</span><br><span class=\"line\"></span><br><span class=\"line\"># table regex</span><br><span class=\"line\">#canal.instance.filter.regex=.*\\\\..*</span><br><span class=\"line\">canal.instance.filter.regex=event_collection\\.user_location_lng_lat</span><br><span class=\"line\"># table black regex</span><br><span class=\"line\">canal.instance.filter.black.regex=</span><br><span class=\"line\">#################################################</span><br></pre></td></tr></table></figure>\n\n<p>你需要修改的地方：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">canal.instance.mysql.slaveId -- 不同的instance分配不同的slaveId，因为canal监控mysql的原理就是伪装成mysql的slave来获取binlog日志的</span><br><span class=\"line\">canal.instance.master.address -- 配置监控的mysql ip地址</span><br><span class=\"line\">canal.instance.dbUsername -- 连接mysql的用户名</span><br><span class=\"line\">canal.instance.dbPassword -- 连接mysql的密码</span><br><span class=\"line\">canal.instance.filter.regex -- 监控mysql中的哪个库，哪个表</span><br></pre></td></tr></table></figure>\n\n<p>其中监控mysql的哪个库哪个表编写格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.*\\\\..*  --表示监控mysql所有库所有表</span><br><span class=\"line\">test\\..*  --表示监控mysql test库下的所有表</span><br><span class=\"line\">test\\.test  --表示监控mysql test库下的test表</span><br></pre></td></tr></table></figure>\n\n<p>阿里巴巴，我们程序员的梦想，开源的canal还是不错的，希望大家借助这篇文章能够熟练掌握canal的简单使用，如果遇到什么问题，欢迎一起讨论，在下方留言或者mail我：<a href=\"mailto:chenzuoli@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli@gmail.com</a></p>"},{"title":"阿甘正传剪辑","date":"2019-08-03T02:19:55.000Z","_content":"\n<!-- {% youku 480 400 %}\nXNDI5NzE3Mzk0MA\n{% endyouku %} -->\n\n<div id=\"youkuplayer\"style=\"width:700px;height:400px\"></div>\n<script type=\"text/javascript\" src=\"//player.youku.com/jsapi\"></script>\n<script type=\"text/javascript\">\n\tvar player = new YKU.Player(\n\t\t'youkuplayer',{\n\t\t\tstyleid: '0',\n\t\t\tclient_id: 'YOUR YOUKUOPENAPI CLIENT_ID',\n\t\t\tvid: 'XNDI5NzE3Mzk0MA',\n\t\t\tnewPlayer: true\n\t\t}\n\t);\n</script>","source":"_posts/阿甘正传剪辑.md","raw":"---\ntitle: 阿甘正传剪辑\ndate: 2019-08-03 10:19:55\ntags: 阿甘正传\ncategories: 视频剪辑\n---\n\n<!-- {% youku 480 400 %}\nXNDI5NzE3Mzk0MA\n{% endyouku %} -->\n\n<div id=\"youkuplayer\"style=\"width:700px;height:400px\"></div>\n<script type=\"text/javascript\" src=\"//player.youku.com/jsapi\"></script>\n<script type=\"text/javascript\">\n\tvar player = new YKU.Player(\n\t\t'youkuplayer',{\n\t\t\tstyleid: '0',\n\t\t\tclient_id: 'YOUR YOUKUOPENAPI CLIENT_ID',\n\t\t\tvid: 'XNDI5NzE3Mzk0MA',\n\t\t\tnewPlayer: true\n\t\t}\n\t);\n</script>","slug":"阿甘正传剪辑","published":1,"updated":"2019-08-03T03:33:32.626Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0lx002cfbs6jydonpf7","content":"<!-- <iframe height=480 width=400 src=\"http://player.youku.com/embed/XNDI5NzE3Mzk0MA\" frameborder=0 allowfullscreen></iframe> -->\n\n<div id=\"youkuplayer\" style=\"width:700px;height:400px\"></div>\n<script type=\"text/javascript\" src=\"//player.youku.com/jsapi\"></script>\n<script type=\"text/javascript\">\n    var player = new YKU.Player(\n        'youkuplayer',{\n            styleid: '0',\n            client_id: 'YOUR YOUKUOPENAPI CLIENT_ID',\n            vid: 'XNDI5NzE3Mzk0MA',\n            newPlayer: true\n        }\n    );\n</script>","site":{"data":{}},"excerpt":"","more":"<!-- <iframe height=480 width=400 src=\"http://player.youku.com/embed/XNDI5NzE3Mzk0MA\" frameborder=0 allowfullscreen></iframe> -->\n\n<div id=\"youkuplayer\" style=\"width:700px;height:400px\"></div>\n<script type=\"text/javascript\" src=\"//player.youku.com/jsapi\"></script>\n<script type=\"text/javascript\">\n    var player = new YKU.Player(\n        'youkuplayer',{\n            styleid: '0',\n            client_id: 'YOUR YOUKUOPENAPI CLIENT_ID',\n            vid: 'XNDI5NzE3Mzk0MA',\n            newPlayer: true\n        }\n    );\n</script>"},{"title":"Solidity学习","date":"2019-09-14T15:29:06.000Z","notebook":"区块链","_content":"\nsolidity 语言，作为以太坊平台智能合约语言，那必须得学一下啊。\n\n![solidity](Solidity学习/solidity.jpg)\n\n<!-- more -->\n\n# 一、入门智能合约\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我们先看一下最基本的例子。现在就算你都不理解也不要紧，后面我们会有更深入的讲解。\n\n## 1.1 存储合约（把一个数据保存到链上）\n\n```\npragma solidity >=0.4.0 <0.7.0;\n\ncontract SimpleStorage {\n    uint storedData;\n\n    function set(uint x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint) {\n        return storedData;\n    }\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一行就是告诉编译器源代码所适用的 Solidity 版本为>=0.4.0 及 <0.7.0 。这是为了确保合约不会在新的编译器版本中突然行为异常。关键字 pragma 的含义是，一般来说，pragmas（编译指令）是告知编译器如何处理源代码的指令的（例如， pragma once ）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Solidity 中合约的含义就是一组代码（它的 函数 )和数据（它的 状态 ），它们位于以太坊区块链的一个特定地址上。 代码行 uint storedData; 声明一个类型为 uint (256 位无符号整数）的状态变量，叫做 storedData 。 你可以认为它是数据库里的一个位置，可以通过调用管理数据库代码的函数进行查询和变更。对于以太坊来说，上述的合约就是拥有合约（owning contract）。在这种情况下，函数 set 和 get 可以用来变更或取出变量的值。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要访问一个状态变量，并不需要像 this. 这样的前缀，虽然这是其他语言常见的做法。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该合约能完成的事情并不多（由于以太坊构建的基础架构的原因）：它能允许任何人在合约中存储一个单独的数字，并且这个数字可以被世界上任何人访问，且没有可行的办法阻止你发布这个数字。当然，任何人都可以再次调用 set ，传入不同的值，覆盖你的数字，但是这个数字仍会被存储在区块链的历史记录中。随后，我们会看到怎样施加访问限制，以确保只有你才能改变这个数字。\n\n> 注解\n>\n> > 所有的标识符（合约名称，函数名称和变量名称）都只能使用 ASCII 字符集。UTF-8 编码的数据可以用字符串变量的形式存储。\n\n> 警告\n>\n> > 小心使用 Unicode 文本，因为有些字符虽然长得相像（甚至一样），但其字符码是不同的，其编码后的字符数组也会不一样。\n\n## 1.2 子货币合约（Subcurrency）示例\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的合约实现了一个最简单的加密货币。这里，币确实可以无中生有地产生，但是只有创建合约的人才能做到（实现一个不同的发行计划也不难）。而且，任何人都可以给其他人转币，不需要注册用户名和密码 —— 所需要的只是以太坊密钥对。\n\n```\npragma solidity >=0.5.0 <0.7.0;\n\ncontract Coin {\n// 关键字“public”让这些变量可以从外部读取\naddress public minter;\nmapping (address => uint) public balances;\n\n    // 轻客户端可以通过事件针对变化作出高效的反应\n    event Sent(address from, address to, uint amount);\n\n    // 这是构造函数，只有当合约创建时运行\n    constructor() public {\n        minter = msg.sender;\n    }\n\n    function mint(address receiver, uint amount) public {\n        require(msg.sender == minter);\n        equire(amount < 1e60);\n        balances[receiver] += amount;\n    }\n\n    function send(address receiver, uint amount) public {\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n        emit Sent(msg.sender, receiver, amount);\n    }\n\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个合约引入了一些新的概念，让我们逐一解读。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;address public minter; 这一行声明了一个可以被公开访问的 address 类型的状态变量。 address 类型是一个 160 位的值，且不允许任何算数操作。这种类型适合存储合约地址或外部人员的密钥对。关键字 public 自动生成一个函数，允许你在这个合约之外访问这个状态变量的当前值。如果没有这个关键字，其他的合约没有办法访问这个变量。由编译器生成的函数的代码大致如下所示（暂时忽略 external 和 view）：\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function minter() external view returns (address) { return minter; }\n当然，加一个和上面完全一样的函数是行不通的，因为我们会有同名的一个函数和一个变量，这里，主要是希望你能明白——编译器已经帮你实现了。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下一行， mapping (address => uint) public balances; 也创建一个公共状态变量，但它是一个更复杂的数据类型。 该类型将 address 映射为无符号整数。 Mappings 可以看作是一个 哈希表 它会执行虚拟初始化，以使所有可能存在的键都映射到一个字节表示为全零的值。 但是，这种类比并不太恰当，因为它既不能获得映射的所有键的列表，也不能获得所有值的列表。 因此，要么记住你添加到 mapping 中的数据（使用列表或更高级的数据类型会更好），要么在不需要键列表或值列表的上下文中使用它，就如本例。 而由 public 关键字创建的 getter 函数 getter function 则是更复杂一些的情况， 它大致如下所示：\n\n```\nfunction balances(address _account) external view returns (uint) {\n    return balances[_account];\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正如你所看到的，你可以通过该函数轻松地查询到账户的余额。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event Sent(address from, address to, uint amount); 这行声明了一个所谓的“事件（event）”，它会在 send 函数的最后一行被发出。用户界面（当然也包括服务器应用程序）可以监听区块链上正在发送的事件，而不会花费太多成本。一旦它被发出，监听该事件的 listener 都将收到通知。而所有的事件都包含了 from ， to 和 amount 三个参数，可方便追踪交易。 为了监听这个事件，你可以使用如下 JavaScript 代码（假设 Coin 是已经通过 web3.js 创建好的合约对象 ）：\n\n```\nCoin.Sent().watch({}, '', function(error, result) {\n    if (!error) {\n        console.log(\"Coin transfer: \" + result.args.amount +\n            \" coins were sent from \" + result.args.from +\n            \" to \" + result.args.to + \".\");\n        console.log(\"Balances now:\\n\" +\n            \"Sender: \" + Coin.balances.call(result.args.from) +\n            \"Receiver: \" + Coin.balances.call(result.args.to));\n    }\n})\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里请注意自动生成的 balances 函数是如何从用户界面调用的。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特殊函数 constructor 是在创建合约期间运行的构造函数，不能在事后调用。 它永久存储创建合约的人的地址: msg (以及 tx 和 block ) 是一个特殊的全局变量，其中包含一些允许访问区块链的属性。 msg.sender 始终是当前（外部）函数调用的来源地址。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，真正被用户或其他合约所调用的，以完成本合约功能的方法是 mint 和 send。 如果 mint 被合约创建者外的其他人调用则什么也不会发生。 另一方面， send 函数可被任何人用于向他人发送币 (当然，前提是发送者拥有这些币)。记住，如果你使用合约发送币给一个地址，当你在区块链浏览器上查看该地址时是看不到任何相关信息的。因为，实际上你发送币和更改余额的信息仅仅存储在特定合约的数据存储器中。通过使用事件，你可以非常简单地为你的新币创建一个“区块链浏览器”来追踪交易和余额。\n\n# 二、投票合约\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下的合约有一些复杂，但展示了很多 Solidity 的语言特性。它实现了一个投票合约。 当然，电子投票的主要问题是如何将投票权分配给正确的人员以及如何防止被操纵。 我们不会在这里解决所有的问题，但至少我们会展示如何进行委托投票，同时，计票又是 自动和完全透明的 。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的想法是为每个（投票）表决创建一份合约，为每个选项提供简称。 然后作为合约的创造者——即主席，将给予每个独立的地址以投票权。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地址后面的人可以选择自己投票，或者委托给他们信任的人来投票。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在投票时间结束时，winningProposal() 将返回获得最多投票的提案。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下是代码，从代码中学习 solidity 的其它一些语法：\n<b><a>[<font color=#0099ff>Ballot Smart Contract</font>](https://github.com/chenzuoli/soliditydemos/blob/master/contracts/Ballot.sol)</a></b>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://solidity.readthedocs.io/en/v0.5.10/solidity-by-example.html#voting)</a></b>，我在学习的时候照着模板编写发现有下面这个错误，就将 `address to` 引用到 tempTo 就 ok 了，我觉得是变量 `to` 在循环中被修改了导致的。\n![ballot_error](Solidity学习/solidity_Ballot_error.png)\n","source":"_posts/Solidity学习.md","raw":"---\ntitle: Solidity学习\ndate: 2019-09-14 23:29:06\ntags: [solidity, 智能合约]\ncategories: 区块链\nnotebook: 区块链\n---\n\nsolidity 语言，作为以太坊平台智能合约语言，那必须得学一下啊。\n\n![solidity](Solidity学习/solidity.jpg)\n\n<!-- more -->\n\n# 一、入门智能合约\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我们先看一下最基本的例子。现在就算你都不理解也不要紧，后面我们会有更深入的讲解。\n\n## 1.1 存储合约（把一个数据保存到链上）\n\n```\npragma solidity >=0.4.0 <0.7.0;\n\ncontract SimpleStorage {\n    uint storedData;\n\n    function set(uint x) public {\n        storedData = x;\n    }\n\n    function get() public view returns (uint) {\n        return storedData;\n    }\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一行就是告诉编译器源代码所适用的 Solidity 版本为>=0.4.0 及 <0.7.0 。这是为了确保合约不会在新的编译器版本中突然行为异常。关键字 pragma 的含义是，一般来说，pragmas（编译指令）是告知编译器如何处理源代码的指令的（例如， pragma once ）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Solidity 中合约的含义就是一组代码（它的 函数 )和数据（它的 状态 ），它们位于以太坊区块链的一个特定地址上。 代码行 uint storedData; 声明一个类型为 uint (256 位无符号整数）的状态变量，叫做 storedData 。 你可以认为它是数据库里的一个位置，可以通过调用管理数据库代码的函数进行查询和变更。对于以太坊来说，上述的合约就是拥有合约（owning contract）。在这种情况下，函数 set 和 get 可以用来变更或取出变量的值。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要访问一个状态变量，并不需要像 this. 这样的前缀，虽然这是其他语言常见的做法。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该合约能完成的事情并不多（由于以太坊构建的基础架构的原因）：它能允许任何人在合约中存储一个单独的数字，并且这个数字可以被世界上任何人访问，且没有可行的办法阻止你发布这个数字。当然，任何人都可以再次调用 set ，传入不同的值，覆盖你的数字，但是这个数字仍会被存储在区块链的历史记录中。随后，我们会看到怎样施加访问限制，以确保只有你才能改变这个数字。\n\n> 注解\n>\n> > 所有的标识符（合约名称，函数名称和变量名称）都只能使用 ASCII 字符集。UTF-8 编码的数据可以用字符串变量的形式存储。\n\n> 警告\n>\n> > 小心使用 Unicode 文本，因为有些字符虽然长得相像（甚至一样），但其字符码是不同的，其编码后的字符数组也会不一样。\n\n## 1.2 子货币合约（Subcurrency）示例\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的合约实现了一个最简单的加密货币。这里，币确实可以无中生有地产生，但是只有创建合约的人才能做到（实现一个不同的发行计划也不难）。而且，任何人都可以给其他人转币，不需要注册用户名和密码 —— 所需要的只是以太坊密钥对。\n\n```\npragma solidity >=0.5.0 <0.7.0;\n\ncontract Coin {\n// 关键字“public”让这些变量可以从外部读取\naddress public minter;\nmapping (address => uint) public balances;\n\n    // 轻客户端可以通过事件针对变化作出高效的反应\n    event Sent(address from, address to, uint amount);\n\n    // 这是构造函数，只有当合约创建时运行\n    constructor() public {\n        minter = msg.sender;\n    }\n\n    function mint(address receiver, uint amount) public {\n        require(msg.sender == minter);\n        equire(amount < 1e60);\n        balances[receiver] += amount;\n    }\n\n    function send(address receiver, uint amount) public {\n        require(amount <= balances[msg.sender], \"Insufficient balance.\");\n        balances[msg.sender] -= amount;\n        balances[receiver] += amount;\n        emit Sent(msg.sender, receiver, amount);\n    }\n\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个合约引入了一些新的概念，让我们逐一解读。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;address public minter; 这一行声明了一个可以被公开访问的 address 类型的状态变量。 address 类型是一个 160 位的值，且不允许任何算数操作。这种类型适合存储合约地址或外部人员的密钥对。关键字 public 自动生成一个函数，允许你在这个合约之外访问这个状态变量的当前值。如果没有这个关键字，其他的合约没有办法访问这个变量。由编译器生成的函数的代码大致如下所示（暂时忽略 external 和 view）：\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function minter() external view returns (address) { return minter; }\n当然，加一个和上面完全一样的函数是行不通的，因为我们会有同名的一个函数和一个变量，这里，主要是希望你能明白——编译器已经帮你实现了。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下一行， mapping (address => uint) public balances; 也创建一个公共状态变量，但它是一个更复杂的数据类型。 该类型将 address 映射为无符号整数。 Mappings 可以看作是一个 哈希表 它会执行虚拟初始化，以使所有可能存在的键都映射到一个字节表示为全零的值。 但是，这种类比并不太恰当，因为它既不能获得映射的所有键的列表，也不能获得所有值的列表。 因此，要么记住你添加到 mapping 中的数据（使用列表或更高级的数据类型会更好），要么在不需要键列表或值列表的上下文中使用它，就如本例。 而由 public 关键字创建的 getter 函数 getter function 则是更复杂一些的情况， 它大致如下所示：\n\n```\nfunction balances(address _account) external view returns (uint) {\n    return balances[_account];\n}\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正如你所看到的，你可以通过该函数轻松地查询到账户的余额。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event Sent(address from, address to, uint amount); 这行声明了一个所谓的“事件（event）”，它会在 send 函数的最后一行被发出。用户界面（当然也包括服务器应用程序）可以监听区块链上正在发送的事件，而不会花费太多成本。一旦它被发出，监听该事件的 listener 都将收到通知。而所有的事件都包含了 from ， to 和 amount 三个参数，可方便追踪交易。 为了监听这个事件，你可以使用如下 JavaScript 代码（假设 Coin 是已经通过 web3.js 创建好的合约对象 ）：\n\n```\nCoin.Sent().watch({}, '', function(error, result) {\n    if (!error) {\n        console.log(\"Coin transfer: \" + result.args.amount +\n            \" coins were sent from \" + result.args.from +\n            \" to \" + result.args.to + \".\");\n        console.log(\"Balances now:\\n\" +\n            \"Sender: \" + Coin.balances.call(result.args.from) +\n            \"Receiver: \" + Coin.balances.call(result.args.to));\n    }\n})\n```\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里请注意自动生成的 balances 函数是如何从用户界面调用的。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特殊函数 constructor 是在创建合约期间运行的构造函数，不能在事后调用。 它永久存储创建合约的人的地址: msg (以及 tx 和 block ) 是一个特殊的全局变量，其中包含一些允许访问区块链的属性。 msg.sender 始终是当前（外部）函数调用的来源地址。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，真正被用户或其他合约所调用的，以完成本合约功能的方法是 mint 和 send。 如果 mint 被合约创建者外的其他人调用则什么也不会发生。 另一方面， send 函数可被任何人用于向他人发送币 (当然，前提是发送者拥有这些币)。记住，如果你使用合约发送币给一个地址，当你在区块链浏览器上查看该地址时是看不到任何相关信息的。因为，实际上你发送币和更改余额的信息仅仅存储在特定合约的数据存储器中。通过使用事件，你可以非常简单地为你的新币创建一个“区块链浏览器”来追踪交易和余额。\n\n# 二、投票合约\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下的合约有一些复杂，但展示了很多 Solidity 的语言特性。它实现了一个投票合约。 当然，电子投票的主要问题是如何将投票权分配给正确的人员以及如何防止被操纵。 我们不会在这里解决所有的问题，但至少我们会展示如何进行委托投票，同时，计票又是 自动和完全透明的 。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的想法是为每个（投票）表决创建一份合约，为每个选项提供简称。 然后作为合约的创造者——即主席，将给予每个独立的地址以投票权。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地址后面的人可以选择自己投票，或者委托给他们信任的人来投票。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在投票时间结束时，winningProposal() 将返回获得最多投票的提案。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下是代码，从代码中学习 solidity 的其它一些语法：\n<b><a>[<font color=#0099ff>Ballot Smart Contract</font>](https://github.com/chenzuoli/soliditydemos/blob/master/contracts/Ballot.sol)</a></b>\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a>[<font color=#0099ff>这里</font>](https://solidity.readthedocs.io/en/v0.5.10/solidity-by-example.html#voting)</a></b>，我在学习的时候照着模板编写发现有下面这个错误，就将 `address to` 引用到 tempTo 就 ok 了，我觉得是变量 `to` 在循环中被修改了导致的。\n![ballot_error](Solidity学习/solidity_Ballot_error.png)\n","slug":"Solidity学习","published":1,"updated":"2019-09-14T16:08:55.073Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0rw002dfbs6jhgor9or","content":"<p>solidity 语言，作为以太坊平台智能合约语言，那必须得学一下啊。</p>\n<p><img src=\"/2019/09/14/Solidity学习/solidity.jpg\" alt=\"solidity\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"一、入门智能合约\"><a href=\"#一、入门智能合约\" class=\"headerlink\" title=\"一、入门智能合约\"></a>一、入门智能合约</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我们先看一下最基本的例子。现在就算你都不理解也不要紧，后面我们会有更深入的讲解。</p>\n<h2 id=\"1-1-存储合约（把一个数据保存到链上）\"><a href=\"#1-1-存储合约（把一个数据保存到链上）\" class=\"headerlink\" title=\"1.1 存储合约（把一个数据保存到链上）\"></a>1.1 存储合约（把一个数据保存到链上）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity &gt;=0.4.0 &lt;0.7.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract SimpleStorage &#123;</span><br><span class=\"line\">    uint storedData;</span><br><span class=\"line\"></span><br><span class=\"line\">    function set(uint x) public &#123;</span><br><span class=\"line\">        storedData = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get() public view returns (uint) &#123;</span><br><span class=\"line\">        return storedData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一行就是告诉编译器源代码所适用的 Solidity 版本为&gt;=0.4.0 及 &lt;0.7.0 。这是为了确保合约不会在新的编译器版本中突然行为异常。关键字 pragma 的含义是，一般来说，pragmas（编译指令）是告知编译器如何处理源代码的指令的（例如， pragma once ）。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Solidity 中合约的含义就是一组代码（它的 函数 )和数据（它的 状态 ），它们位于以太坊区块链的一个特定地址上。 代码行 uint storedData; 声明一个类型为 uint (256 位无符号整数）的状态变量，叫做 storedData 。 你可以认为它是数据库里的一个位置，可以通过调用管理数据库代码的函数进行查询和变更。对于以太坊来说，上述的合约就是拥有合约（owning contract）。在这种情况下，函数 set 和 get 可以用来变更或取出变量的值。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要访问一个状态变量，并不需要像 this. 这样的前缀，虽然这是其他语言常见的做法。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该合约能完成的事情并不多（由于以太坊构建的基础架构的原因）：它能允许任何人在合约中存储一个单独的数字，并且这个数字可以被世界上任何人访问，且没有可行的办法阻止你发布这个数字。当然，任何人都可以再次调用 set ，传入不同的值，覆盖你的数字，但是这个数字仍会被存储在区块链的历史记录中。随后，我们会看到怎样施加访问限制，以确保只有你才能改变这个数字。</p>\n<blockquote>\n<p>注解</p>\n<blockquote>\n<p>所有的标识符（合约名称，函数名称和变量名称）都只能使用 ASCII 字符集。UTF-8 编码的数据可以用字符串变量的形式存储。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>警告</p>\n<blockquote>\n<p>小心使用 Unicode 文本，因为有些字符虽然长得相像（甚至一样），但其字符码是不同的，其编码后的字符数组也会不一样。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"1-2-子货币合约（Subcurrency）示例\"><a href=\"#1-2-子货币合约（Subcurrency）示例\" class=\"headerlink\" title=\"1.2 子货币合约（Subcurrency）示例\"></a>1.2 子货币合约（Subcurrency）示例</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的合约实现了一个最简单的加密货币。这里，币确实可以无中生有地产生，但是只有创建合约的人才能做到（实现一个不同的发行计划也不难）。而且，任何人都可以给其他人转币，不需要注册用户名和密码 —— 所需要的只是以太坊密钥对。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity &gt;=0.5.0 &lt;0.7.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Coin &#123;</span><br><span class=\"line\">// 关键字“public”让这些变量可以从外部读取</span><br><span class=\"line\">address public minter;</span><br><span class=\"line\">mapping (address =&gt; uint) public balances;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 轻客户端可以通过事件针对变化作出高效的反应</span><br><span class=\"line\">    event Sent(address from, address to, uint amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 这是构造函数，只有当合约创建时运行</span><br><span class=\"line\">    constructor() public &#123;</span><br><span class=\"line\">        minter = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function mint(address receiver, uint amount) public &#123;</span><br><span class=\"line\">        require(msg.sender == minter);</span><br><span class=\"line\">        equire(amount &lt; 1e60);</span><br><span class=\"line\">        balances[receiver] += amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function send(address receiver, uint amount) public &#123;</span><br><span class=\"line\">        require(amount &lt;= balances[msg.sender], &quot;Insufficient balance.&quot;);</span><br><span class=\"line\">        balances[msg.sender] -= amount;</span><br><span class=\"line\">        balances[receiver] += amount;</span><br><span class=\"line\">        emit Sent(msg.sender, receiver, amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个合约引入了一些新的概念，让我们逐一解读。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;address public minter; 这一行声明了一个可以被公开访问的 address 类型的状态变量。 address 类型是一个 160 位的值，且不允许任何算数操作。这种类型适合存储合约地址或外部人员的密钥对。关键字 public 自动生成一个函数，允许你在这个合约之外访问这个状态变量的当前值。如果没有这个关键字，其他的合约没有办法访问这个变量。由编译器生成的函数的代码大致如下所示（暂时忽略 external 和 view）：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function minter() external view returns (address) { return minter; }<br>当然，加一个和上面完全一样的函数是行不通的，因为我们会有同名的一个函数和一个变量，这里，主要是希望你能明白——编译器已经帮你实现了。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下一行， mapping (address =&gt; uint) public balances; 也创建一个公共状态变量，但它是一个更复杂的数据类型。 该类型将 address 映射为无符号整数。 Mappings 可以看作是一个 哈希表 它会执行虚拟初始化，以使所有可能存在的键都映射到一个字节表示为全零的值。 但是，这种类比并不太恰当，因为它既不能获得映射的所有键的列表，也不能获得所有值的列表。 因此，要么记住你添加到 mapping 中的数据（使用列表或更高级的数据类型会更好），要么在不需要键列表或值列表的上下文中使用它，就如本例。 而由 public 关键字创建的 getter 函数 getter function 则是更复杂一些的情况， 它大致如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function balances(address _account) external view returns (uint) &#123;</span><br><span class=\"line\">    return balances[_account];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正如你所看到的，你可以通过该函数轻松地查询到账户的余额。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event Sent(address from, address to, uint amount); 这行声明了一个所谓的“事件（event）”，它会在 send 函数的最后一行被发出。用户界面（当然也包括服务器应用程序）可以监听区块链上正在发送的事件，而不会花费太多成本。一旦它被发出，监听该事件的 listener 都将收到通知。而所有的事件都包含了 from ， to 和 amount 三个参数，可方便追踪交易。 为了监听这个事件，你可以使用如下 JavaScript 代码（假设 Coin 是已经通过 web3.js 创建好的合约对象 ）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Coin.Sent().watch(&#123;&#125;, &apos;&apos;, function(error, result) &#123;</span><br><span class=\"line\">    if (!error) &#123;</span><br><span class=\"line\">        console.log(&quot;Coin transfer: &quot; + result.args.amount +</span><br><span class=\"line\">            &quot; coins were sent from &quot; + result.args.from +</span><br><span class=\"line\">            &quot; to &quot; + result.args.to + &quot;.&quot;);</span><br><span class=\"line\">        console.log(&quot;Balances now:\\n&quot; +</span><br><span class=\"line\">            &quot;Sender: &quot; + Coin.balances.call(result.args.from) +</span><br><span class=\"line\">            &quot;Receiver: &quot; + Coin.balances.call(result.args.to));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里请注意自动生成的 balances 函数是如何从用户界面调用的。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特殊函数 constructor 是在创建合约期间运行的构造函数，不能在事后调用。 它永久存储创建合约的人的地址: msg (以及 tx 和 block ) 是一个特殊的全局变量，其中包含一些允许访问区块链的属性。 msg.sender 始终是当前（外部）函数调用的来源地址。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，真正被用户或其他合约所调用的，以完成本合约功能的方法是 mint 和 send。 如果 mint 被合约创建者外的其他人调用则什么也不会发生。 另一方面， send 函数可被任何人用于向他人发送币 (当然，前提是发送者拥有这些币)。记住，如果你使用合约发送币给一个地址，当你在区块链浏览器上查看该地址时是看不到任何相关信息的。因为，实际上你发送币和更改余额的信息仅仅存储在特定合约的数据存储器中。通过使用事件，你可以非常简单地为你的新币创建一个“区块链浏览器”来追踪交易和余额。</p>\n<h1 id=\"二、投票合约\"><a href=\"#二、投票合约\" class=\"headerlink\" title=\"二、投票合约\"></a>二、投票合约</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下的合约有一些复杂，但展示了很多 Solidity 的语言特性。它实现了一个投票合约。 当然，电子投票的主要问题是如何将投票权分配给正确的人员以及如何防止被操纵。 我们不会在这里解决所有的问题，但至少我们会展示如何进行委托投票，同时，计票又是 自动和完全透明的 。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的想法是为每个（投票）表决创建一份合约，为每个选项提供简称。 然后作为合约的创造者——即主席，将给予每个独立的地址以投票权。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地址后面的人可以选择自己投票，或者委托给他们信任的人来投票。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在投票时间结束时，winningProposal() 将返回获得最多投票的提案。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下是代码，从代码中学习 solidity 的其它一些语法：<br><b><a><a href=\"https://github.com/chenzuoli/soliditydemos/blob/master/contracts/Ballot.sol\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">Ballot Smart Contract</font></a></a></b></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://solidity.readthedocs.io/en/v0.5.10/solidity-by-example.html#voting\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b>，我在学习的时候照着模板编写发现有下面这个错误，就将 <code>address to</code> 引用到 tempTo 就 ok 了，我觉得是变量 <code>to</code> 在循环中被修改了导致的。<br><img src=\"/2019/09/14/Solidity学习/solidity_Ballot_error.png\" alt=\"ballot_error\"></p>\n","site":{"data":{}},"excerpt":"<p>solidity 语言，作为以太坊平台智能合约语言，那必须得学一下啊。</p>\n<p><img src=\"/2019/09/14/Solidity学习/solidity.jpg\" alt=\"solidity\"></p>","more":"<h1 id=\"一、入门智能合约\"><a href=\"#一、入门智能合约\" class=\"headerlink\" title=\"一、入门智能合约\"></a>一、入门智能合约</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;让我们先看一下最基本的例子。现在就算你都不理解也不要紧，后面我们会有更深入的讲解。</p>\n<h2 id=\"1-1-存储合约（把一个数据保存到链上）\"><a href=\"#1-1-存储合约（把一个数据保存到链上）\" class=\"headerlink\" title=\"1.1 存储合约（把一个数据保存到链上）\"></a>1.1 存储合约（把一个数据保存到链上）</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity &gt;=0.4.0 &lt;0.7.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract SimpleStorage &#123;</span><br><span class=\"line\">    uint storedData;</span><br><span class=\"line\"></span><br><span class=\"line\">    function set(uint x) public &#123;</span><br><span class=\"line\">        storedData = x;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function get() public view returns (uint) &#123;</span><br><span class=\"line\">        return storedData;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第一行就是告诉编译器源代码所适用的 Solidity 版本为&gt;=0.4.0 及 &lt;0.7.0 。这是为了确保合约不会在新的编译器版本中突然行为异常。关键字 pragma 的含义是，一般来说，pragmas（编译指令）是告知编译器如何处理源代码的指令的（例如， pragma once ）。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Solidity 中合约的含义就是一组代码（它的 函数 )和数据（它的 状态 ），它们位于以太坊区块链的一个特定地址上。 代码行 uint storedData; 声明一个类型为 uint (256 位无符号整数）的状态变量，叫做 storedData 。 你可以认为它是数据库里的一个位置，可以通过调用管理数据库代码的函数进行查询和变更。对于以太坊来说，上述的合约就是拥有合约（owning contract）。在这种情况下，函数 set 和 get 可以用来变更或取出变量的值。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;要访问一个状态变量，并不需要像 this. 这样的前缀，虽然这是其他语言常见的做法。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该合约能完成的事情并不多（由于以太坊构建的基础架构的原因）：它能允许任何人在合约中存储一个单独的数字，并且这个数字可以被世界上任何人访问，且没有可行的办法阻止你发布这个数字。当然，任何人都可以再次调用 set ，传入不同的值，覆盖你的数字，但是这个数字仍会被存储在区块链的历史记录中。随后，我们会看到怎样施加访问限制，以确保只有你才能改变这个数字。</p>\n<blockquote>\n<p>注解</p>\n<blockquote>\n<p>所有的标识符（合约名称，函数名称和变量名称）都只能使用 ASCII 字符集。UTF-8 编码的数据可以用字符串变量的形式存储。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>警告</p>\n<blockquote>\n<p>小心使用 Unicode 文本，因为有些字符虽然长得相像（甚至一样），但其字符码是不同的，其编码后的字符数组也会不一样。</p>\n</blockquote>\n</blockquote>\n<h2 id=\"1-2-子货币合约（Subcurrency）示例\"><a href=\"#1-2-子货币合约（Subcurrency）示例\" class=\"headerlink\" title=\"1.2 子货币合约（Subcurrency）示例\"></a>1.2 子货币合约（Subcurrency）示例</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面的合约实现了一个最简单的加密货币。这里，币确实可以无中生有地产生，但是只有创建合约的人才能做到（实现一个不同的发行计划也不难）。而且，任何人都可以给其他人转币，不需要注册用户名和密码 —— 所需要的只是以太坊密钥对。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pragma solidity &gt;=0.5.0 &lt;0.7.0;</span><br><span class=\"line\"></span><br><span class=\"line\">contract Coin &#123;</span><br><span class=\"line\">// 关键字“public”让这些变量可以从外部读取</span><br><span class=\"line\">address public minter;</span><br><span class=\"line\">mapping (address =&gt; uint) public balances;</span><br><span class=\"line\"></span><br><span class=\"line\">    // 轻客户端可以通过事件针对变化作出高效的反应</span><br><span class=\"line\">    event Sent(address from, address to, uint amount);</span><br><span class=\"line\"></span><br><span class=\"line\">    // 这是构造函数，只有当合约创建时运行</span><br><span class=\"line\">    constructor() public &#123;</span><br><span class=\"line\">        minter = msg.sender;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function mint(address receiver, uint amount) public &#123;</span><br><span class=\"line\">        require(msg.sender == minter);</span><br><span class=\"line\">        equire(amount &lt; 1e60);</span><br><span class=\"line\">        balances[receiver] += amount;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    function send(address receiver, uint amount) public &#123;</span><br><span class=\"line\">        require(amount &lt;= balances[msg.sender], &quot;Insufficient balance.&quot;);</span><br><span class=\"line\">        balances[msg.sender] -= amount;</span><br><span class=\"line\">        balances[receiver] += amount;</span><br><span class=\"line\">        emit Sent(msg.sender, receiver, amount);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个合约引入了一些新的概念，让我们逐一解读。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;address public minter; 这一行声明了一个可以被公开访问的 address 类型的状态变量。 address 类型是一个 160 位的值，且不允许任何算数操作。这种类型适合存储合约地址或外部人员的密钥对。关键字 public 自动生成一个函数，允许你在这个合约之外访问这个状态变量的当前值。如果没有这个关键字，其他的合约没有办法访问这个变量。由编译器生成的函数的代码大致如下所示（暂时忽略 external 和 view）：</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;function minter() external view returns (address) { return minter; }<br>当然，加一个和上面完全一样的函数是行不通的，因为我们会有同名的一个函数和一个变量，这里，主要是希望你能明白——编译器已经帮你实现了。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下一行， mapping (address =&gt; uint) public balances; 也创建一个公共状态变量，但它是一个更复杂的数据类型。 该类型将 address 映射为无符号整数。 Mappings 可以看作是一个 哈希表 它会执行虚拟初始化，以使所有可能存在的键都映射到一个字节表示为全零的值。 但是，这种类比并不太恰当，因为它既不能获得映射的所有键的列表，也不能获得所有值的列表。 因此，要么记住你添加到 mapping 中的数据（使用列表或更高级的数据类型会更好），要么在不需要键列表或值列表的上下文中使用它，就如本例。 而由 public 关键字创建的 getter 函数 getter function 则是更复杂一些的情况， 它大致如下所示：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function balances(address _account) external view returns (uint) &#123;</span><br><span class=\"line\">    return balances[_account];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;正如你所看到的，你可以通过该函数轻松地查询到账户的余额。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;event Sent(address from, address to, uint amount); 这行声明了一个所谓的“事件（event）”，它会在 send 函数的最后一行被发出。用户界面（当然也包括服务器应用程序）可以监听区块链上正在发送的事件，而不会花费太多成本。一旦它被发出，监听该事件的 listener 都将收到通知。而所有的事件都包含了 from ， to 和 amount 三个参数，可方便追踪交易。 为了监听这个事件，你可以使用如下 JavaScript 代码（假设 Coin 是已经通过 web3.js 创建好的合约对象 ）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Coin.Sent().watch(&#123;&#125;, &apos;&apos;, function(error, result) &#123;</span><br><span class=\"line\">    if (!error) &#123;</span><br><span class=\"line\">        console.log(&quot;Coin transfer: &quot; + result.args.amount +</span><br><span class=\"line\">            &quot; coins were sent from &quot; + result.args.from +</span><br><span class=\"line\">            &quot; to &quot; + result.args.to + &quot;.&quot;);</span><br><span class=\"line\">        console.log(&quot;Balances now:\\n&quot; +</span><br><span class=\"line\">            &quot;Sender: &quot; + Coin.balances.call(result.args.from) +</span><br><span class=\"line\">            &quot;Receiver: &quot; + Coin.balances.call(result.args.to));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这里请注意自动生成的 balances 函数是如何从用户界面调用的。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;特殊函数 constructor 是在创建合约期间运行的构造函数，不能在事后调用。 它永久存储创建合约的人的地址: msg (以及 tx 和 block ) 是一个特殊的全局变量，其中包含一些允许访问区块链的属性。 msg.sender 始终是当前（外部）函数调用的来源地址。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最后，真正被用户或其他合约所调用的，以完成本合约功能的方法是 mint 和 send。 如果 mint 被合约创建者外的其他人调用则什么也不会发生。 另一方面， send 函数可被任何人用于向他人发送币 (当然，前提是发送者拥有这些币)。记住，如果你使用合约发送币给一个地址，当你在区块链浏览器上查看该地址时是看不到任何相关信息的。因为，实际上你发送币和更改余额的信息仅仅存储在特定合约的数据存储器中。通过使用事件，你可以非常简单地为你的新币创建一个“区块链浏览器”来追踪交易和余额。</p>\n<h1 id=\"二、投票合约\"><a href=\"#二、投票合约\" class=\"headerlink\" title=\"二、投票合约\"></a>二、投票合约</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下的合约有一些复杂，但展示了很多 Solidity 的语言特性。它实现了一个投票合约。 当然，电子投票的主要问题是如何将投票权分配给正确的人员以及如何防止被操纵。 我们不会在这里解决所有的问题，但至少我们会展示如何进行委托投票，同时，计票又是 自动和完全透明的 。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;我们的想法是为每个（投票）表决创建一份合约，为每个选项提供简称。 然后作为合约的创造者——即主席，将给予每个独立的地址以投票权。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;地址后面的人可以选择自己投票，或者委托给他们信任的人来投票。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在投票时间结束时，winningProposal() 将返回获得最多投票的提案。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以下是代码，从代码中学习 solidity 的其它一些语法：<br><b><a><a href=\"https://github.com/chenzuoli/soliditydemos/blob/master/contracts/Ballot.sol\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">Ballot Smart Contract</font></a></a></b></p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;源代码在<b><a><a href=\"https://solidity.readthedocs.io/en/v0.5.10/solidity-by-example.html#voting\" target=\"_blank\" rel=\"noopener\"><font color=\"#0099ff\">这里</font></a></a></b>，我在学习的时候照着模板编写发现有下面这个错误，就将 <code>address to</code> 引用到 tempTo 就 ok 了，我觉得是变量 <code>to</code> 在循环中被修改了导致的。<br><img src=\"/2019/09/14/Solidity学习/solidity_Ballot_error.png\" alt=\"ballot_error\"></p>"},{"title":"kafka集群搭建","date":"2019-08-31T02:57:17.000Z","_content":"\nkafka，领英开源消息队列框架，在大数据实时、批处理过程中，充当缓冲、中间存储、解耦的组件，深得工程师的喜爱，下面看下如何搭建。\n![kafka-logo](kafka集群搭建/kafka-logo.png)\n<!-- more -->\n\n# 1、软件环境\n搭建好的zookeeper集群\n下载kafka安装包\n# 2、安装、修改配置文件\n```\ntar -zxvf kafka_*.tgz -C /usr/local/\ncd /usr/local/kafka/config\n```\n## 2.1修改配置文件\n```\nvim server.properties\nbroker.id=1\n/* 这是这台虚拟机上的值，在另外两台虚拟机上应该是2或者3，这个值是唯一的，每台虚拟机或者叫服务器不能相同。 /\n/ 设置本机IP和端口。 我这里设置的是listeners，也可以直接设置host.name=192.168.172.10,port=9092,这个IP地址也是与本机相关的，每台服务器上设置为自己的IP地址。 /\nlisteners=PLAINTEXT://192.168.172.10:9092\nadvertised.listeners=PLAINTEXT://x.x.x.x:9092 //外部访问\n// 该端口默认是9092\n// 在og.retention.hours=168下面新增下面三项 #默认消息的最大持久化时间，168小时，7天\nmessage.max.byte=5242880    #消息保存的最大值5M\n    default.replication.factor=2 #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务\nreplica.fetch.max.bytes=5242880 #取消息的最大直接数\n/ 设置zookeeper的连接端口，新版本的kafka不再使用zookeeper而是通过brokerlist的配置让producer直接连接broker，这个brokerlist可以配置多个，只要有一个能连接上，就可以让producer获取道集群中的其他broker的信息，绕过了zookeeper。因此这个zookeeper.connect可以设置多个值 */\nzookeeper.connect=192.168.172.12:2181,192.168.172.11:2181,192.168.172.10:2181\n```\n# 3、启动kafka\n首先要启动kafka集群，并且是三台都要手动去启动。\n// 进入kafka的bin目录\ncd /opt/kafka/kafka_2.11-1.0.0/bin/\n// 启动kafka\n./kafka-server-start.sh -daemon ../config/server.properties &      //-daemon代表着以后台模式运行kafka集群，这样kafka的启动就不会影响我们继续在控制台输入命令。\n//查看服务是否正常\njps\n\n# 4、创建topic，测试\n## 4.1创建topic\n### 创建Topic\n```\n./kafka-topics.sh --create --zookeeper 10.0.0.60:2181 --replication-factor 2 --partitions 1 --topic shuaige\n```\n// 解释\n```\n--replication-factor 2   #复制两份\n--partitions 1 #创建1个分区\n--topic #主题为shuaige\n```\n'''在一台服务器上创建一个发布者'''\n\n### 创建一个broker，发布者\n```\n./kafka-console-producer.sh --broker-list 10.0.0.60:9092 --topic shuaige\n'''在一台服务器上创建一个订阅者'''\n./kafka-console-consumer.sh --zookeeper localhost:2181 --topic shuaige --from-beginning\n```\n\n## 4.2 查看topic\n```\n./kafka-topics.sh --list --zookeeper localhost:2181\n```\n\n## 4.3 查看topic状态\n```\n/kafka-topics.sh --describe --zookeeper localhost:12181 --topic shuaige\n```\n下面是显示信息\nTopic:ssports    PartitionCount:1    ReplicationFactor:2    Configs:\n    Topic: shuaige    Partition: 0    Leader: 1    Replicas: 0,1    Isr: 1\n//分区为为1  复制因子为2   他的  shuaige的分区为0\n//Replicas: 0,1   复制的为0，1\n\n\n## 4.4 创建kafka topic\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --create --topic t_cdr --partitions 30 --replication-factor 2\n```\n注： partitions指定topic分区数，replication-factor指定topic每个分区的副本数\n* partitions分区数:\n    * partitions ：分区数，控制topic将分片成多少个log。可以显示指定，如果不指定则会使用broker(server.properties)中的num.partitions配置的数量\n    * 虽然增加分区数可以提供kafka集群的吞吐量、但是过多的分区数或者或是单台服务器上的分区数过多，会增加不可用及延迟的风险。因为多的分区数，意味着需要打开更多的文件句柄、增加点到点的延时、增加客户端的内存消耗。\n    * 分区数也限制了consumer的并行度，即限制了并行consumer消息的线程数不能大于分区数\n    * 分区数也限制了producer发送消息是指定的分区。如创建topic时分区设置为1，producer发送消息时通过自定义的分区方法指定分区为2或以上的数都会出错的；这种情况可以通过alter –partitions 来增加分区数。\n* replication-factor副本\n    * replication factor 控制消息保存在几个broker(服务器)上，一般情况下等于broker的个数。\n    * 如果没有在创建时显示指定或通过API向一个不存在的topic生产消息时会使用broker(server.properties)中的default.replication.factor配置的数量\n查看所有topic列表\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --list\n```\n查看指定topic信息\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --describe --topic t_cdr\n```\n控制台向topic生产数据\n```\nbin/kafka-console-producer.sh --broker-list node86:9092 --topic t_cdr\n```\n控制台消费topic的数据\n```\nbin/kafka-console-consumer.sh --zookeeper node01:2181 --topic t_cdr --from-beginning\n```\n查看topic某分区偏移量最大（小）值\n```\nbin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic hive-mdatabase-hostsltable --time -1 --broker-list node86:9092 --partitions 0\n```\n注： time为-1时表示最大值，time为-2时表示最小值\n增加topic分区数, 为topic t_cdr 增加10个分区\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --alter --topic t_cdr --partitions 10\n```\n删除topic，慎用，只会删除zookeeper中的元数据，消息文件须手动删除\n```\nbin/kafka-run-class.sh kafka.admin.DeleteTopicCommand --zookeeper node01:2181 --topic t_cdr\n```\n查看topic消费进度\n这个会显示出consumer group的offset情况， 必须参数为--group， 不指定--topic，默认为所有topic\n```\nDisplays the: Consumer Group, Topic, Partitions, Offset, logSize, Lag, Owner for the specified set of Topics and Consumer Group\nbin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker\nrequired argument: [group]\nOption Description\n------ -----------\n--broker-info Print broker info\n--group Consumer group.\n--help Print this message.\n--topic Comma-separated list of consumer\ntopics (all topics if absent).\n--zkconnect ZooKeeper connect string. (default: localhost:2181)\nExample,\nbin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --group pv\nGroup Topic Pid Offset logSize Lag Owner\npv page_visits 0 21 21 0 none\npv page_visits 1 19 19 0 none\npv page_visits 2 20 20 0 none\n```\n以上图中参数含义解释如下：\n```\ntopic：创建时topic名称\npid：分区编号\noffset：表示该parition已经消费了多少条message\nlogSize：表示该partition已经写了多少条message\nLag：表示有多少条message没有被消费。\nOwner：表示消费者\n```\n细看kafka-run-class.sh脚本，它是调用 了ConsumerOffsetChecker的main方法，所以，我们也可以通过java代码来访问scala的ConsumerOffsetChecker类，代码如下：\n```\nimport kafka.tools.ConsumerOffsetChecker;\n/**\n  * kafka自带很多工具类，其中ConsumerOffsetChecker能查看到消费者消费的情况,\n  * ConsumerOffsetChecker只是将信息打印到标准的输出流中\n  *\n  */\npublic class RunClass {\n    public static void main(String[] args) {\n    //group-1是消费者的group名称,可以在zk中\n    String[] arr = new String[]{\"--zookeeper=192.168.199.129:2181,192.168.199.130:2181,192.168.199.131:2181/kafka\",\"--group=group-1\"};\n    ConsumerOffsetChecker.main(arr);\n    }\n}\n```\n\n\n# 5、日志说明\n默认kafka的日志是保存在/opt/kafka/kafka_2.10-0.9.0.0/logs目录下的，这里说几个需要注意的日志\nserver.log #kafka的运行日志\nstate-change.log #kafka他是用zookeeper来保存状态，所以他可能会进行切换，切换的日志就保存在这里\ncontroller.log #kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.\n\n# 6、 Kafka-manager（v2.0.0.2）（Kafka集群可视化管理）\n## 6.1 sbt编译\n```\ncurl https://bintray.com/sbt/rpm/rpm > bintray-sbt-rpm.repo\nmv bintray-sbt-rpm.repo /etc/yum.repos.d/\nyum install sbt\n```\n检查sbt是否安装成功\n```\nsbt version\n```\n## 6.2 安装部署kafka-manager\n```\nwget https://github.com/yahoo/kafka-manager/releases/kafka-manager-2.0.0.2.tar.gz\ntar zxvf kafka-manager-2.0.0.2.tar.gz -C /usr/local\n```\n编译kafka-manager\n```\ncd /usr/local/kafka-manager-2.0.0.2\n./sbt clean dist     //需要一段时间\n```\n编译结果查看\n```\nls /usr/local/kafka-manager-2.0.0.2/target/universal/   //存在kafka-manager-2.0.0.2.zip\n```\n# 创建目录kafka-manager\n```\nmkdir -p /usr/local/kafka-manager\ncp /usr/local/kafka-manager-2.0.0.2/target/universal/kafka-manager-2.0.0.2.zip /usr/local/kafka-manager\n```\n解压文件\n```\nunzip kafka-manager-2.0.0.2.zip\n```\n修改配置文件\n```\nvim /usr/local/kafka-manager/kafka-manager-2.0.0.2/conf/application.conf\n```\n修改信息\n```\n单机：\nkafka-manager.zkhosts=\"localhost:2181\"\n集群：\nkafka-manager.zkhosts=\"node3.cn:2181,node4.cn:2181,node5.cn:2181\"\n```\n## 6.3启动kafka-manager\n控制台启动\n```\nbin/kafka-manager\n```\n后台守护启动\n```\nnohup bin/kafka-manager &\n```\n后台启动通过 -Dhttp.port，指定端口; -Dconfig.file=conf/application.conf指定配置文件\n```\nnohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080 &\n```\n\n\n\n","source":"_posts/kafka集群搭建.md","raw":"---\ntitle: kafka集群搭建\ndate: 2019-08-31 10:57:17\ntags: kafka\ncategories: 环境搭建\n---\n\nkafka，领英开源消息队列框架，在大数据实时、批处理过程中，充当缓冲、中间存储、解耦的组件，深得工程师的喜爱，下面看下如何搭建。\n![kafka-logo](kafka集群搭建/kafka-logo.png)\n<!-- more -->\n\n# 1、软件环境\n搭建好的zookeeper集群\n下载kafka安装包\n# 2、安装、修改配置文件\n```\ntar -zxvf kafka_*.tgz -C /usr/local/\ncd /usr/local/kafka/config\n```\n## 2.1修改配置文件\n```\nvim server.properties\nbroker.id=1\n/* 这是这台虚拟机上的值，在另外两台虚拟机上应该是2或者3，这个值是唯一的，每台虚拟机或者叫服务器不能相同。 /\n/ 设置本机IP和端口。 我这里设置的是listeners，也可以直接设置host.name=192.168.172.10,port=9092,这个IP地址也是与本机相关的，每台服务器上设置为自己的IP地址。 /\nlisteners=PLAINTEXT://192.168.172.10:9092\nadvertised.listeners=PLAINTEXT://x.x.x.x:9092 //外部访问\n// 该端口默认是9092\n// 在og.retention.hours=168下面新增下面三项 #默认消息的最大持久化时间，168小时，7天\nmessage.max.byte=5242880    #消息保存的最大值5M\n    default.replication.factor=2 #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务\nreplica.fetch.max.bytes=5242880 #取消息的最大直接数\n/ 设置zookeeper的连接端口，新版本的kafka不再使用zookeeper而是通过brokerlist的配置让producer直接连接broker，这个brokerlist可以配置多个，只要有一个能连接上，就可以让producer获取道集群中的其他broker的信息，绕过了zookeeper。因此这个zookeeper.connect可以设置多个值 */\nzookeeper.connect=192.168.172.12:2181,192.168.172.11:2181,192.168.172.10:2181\n```\n# 3、启动kafka\n首先要启动kafka集群，并且是三台都要手动去启动。\n// 进入kafka的bin目录\ncd /opt/kafka/kafka_2.11-1.0.0/bin/\n// 启动kafka\n./kafka-server-start.sh -daemon ../config/server.properties &      //-daemon代表着以后台模式运行kafka集群，这样kafka的启动就不会影响我们继续在控制台输入命令。\n//查看服务是否正常\njps\n\n# 4、创建topic，测试\n## 4.1创建topic\n### 创建Topic\n```\n./kafka-topics.sh --create --zookeeper 10.0.0.60:2181 --replication-factor 2 --partitions 1 --topic shuaige\n```\n// 解释\n```\n--replication-factor 2   #复制两份\n--partitions 1 #创建1个分区\n--topic #主题为shuaige\n```\n'''在一台服务器上创建一个发布者'''\n\n### 创建一个broker，发布者\n```\n./kafka-console-producer.sh --broker-list 10.0.0.60:9092 --topic shuaige\n'''在一台服务器上创建一个订阅者'''\n./kafka-console-consumer.sh --zookeeper localhost:2181 --topic shuaige --from-beginning\n```\n\n## 4.2 查看topic\n```\n./kafka-topics.sh --list --zookeeper localhost:2181\n```\n\n## 4.3 查看topic状态\n```\n/kafka-topics.sh --describe --zookeeper localhost:12181 --topic shuaige\n```\n下面是显示信息\nTopic:ssports    PartitionCount:1    ReplicationFactor:2    Configs:\n    Topic: shuaige    Partition: 0    Leader: 1    Replicas: 0,1    Isr: 1\n//分区为为1  复制因子为2   他的  shuaige的分区为0\n//Replicas: 0,1   复制的为0，1\n\n\n## 4.4 创建kafka topic\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --create --topic t_cdr --partitions 30 --replication-factor 2\n```\n注： partitions指定topic分区数，replication-factor指定topic每个分区的副本数\n* partitions分区数:\n    * partitions ：分区数，控制topic将分片成多少个log。可以显示指定，如果不指定则会使用broker(server.properties)中的num.partitions配置的数量\n    * 虽然增加分区数可以提供kafka集群的吞吐量、但是过多的分区数或者或是单台服务器上的分区数过多，会增加不可用及延迟的风险。因为多的分区数，意味着需要打开更多的文件句柄、增加点到点的延时、增加客户端的内存消耗。\n    * 分区数也限制了consumer的并行度，即限制了并行consumer消息的线程数不能大于分区数\n    * 分区数也限制了producer发送消息是指定的分区。如创建topic时分区设置为1，producer发送消息时通过自定义的分区方法指定分区为2或以上的数都会出错的；这种情况可以通过alter –partitions 来增加分区数。\n* replication-factor副本\n    * replication factor 控制消息保存在几个broker(服务器)上，一般情况下等于broker的个数。\n    * 如果没有在创建时显示指定或通过API向一个不存在的topic生产消息时会使用broker(server.properties)中的default.replication.factor配置的数量\n查看所有topic列表\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --list\n```\n查看指定topic信息\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --describe --topic t_cdr\n```\n控制台向topic生产数据\n```\nbin/kafka-console-producer.sh --broker-list node86:9092 --topic t_cdr\n```\n控制台消费topic的数据\n```\nbin/kafka-console-consumer.sh --zookeeper node01:2181 --topic t_cdr --from-beginning\n```\n查看topic某分区偏移量最大（小）值\n```\nbin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic hive-mdatabase-hostsltable --time -1 --broker-list node86:9092 --partitions 0\n```\n注： time为-1时表示最大值，time为-2时表示最小值\n增加topic分区数, 为topic t_cdr 增加10个分区\n```\nbin/kafka-topics.sh --zookeeper node01:2181 --alter --topic t_cdr --partitions 10\n```\n删除topic，慎用，只会删除zookeeper中的元数据，消息文件须手动删除\n```\nbin/kafka-run-class.sh kafka.admin.DeleteTopicCommand --zookeeper node01:2181 --topic t_cdr\n```\n查看topic消费进度\n这个会显示出consumer group的offset情况， 必须参数为--group， 不指定--topic，默认为所有topic\n```\nDisplays the: Consumer Group, Topic, Partitions, Offset, logSize, Lag, Owner for the specified set of Topics and Consumer Group\nbin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker\nrequired argument: [group]\nOption Description\n------ -----------\n--broker-info Print broker info\n--group Consumer group.\n--help Print this message.\n--topic Comma-separated list of consumer\ntopics (all topics if absent).\n--zkconnect ZooKeeper connect string. (default: localhost:2181)\nExample,\nbin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --group pv\nGroup Topic Pid Offset logSize Lag Owner\npv page_visits 0 21 21 0 none\npv page_visits 1 19 19 0 none\npv page_visits 2 20 20 0 none\n```\n以上图中参数含义解释如下：\n```\ntopic：创建时topic名称\npid：分区编号\noffset：表示该parition已经消费了多少条message\nlogSize：表示该partition已经写了多少条message\nLag：表示有多少条message没有被消费。\nOwner：表示消费者\n```\n细看kafka-run-class.sh脚本，它是调用 了ConsumerOffsetChecker的main方法，所以，我们也可以通过java代码来访问scala的ConsumerOffsetChecker类，代码如下：\n```\nimport kafka.tools.ConsumerOffsetChecker;\n/**\n  * kafka自带很多工具类，其中ConsumerOffsetChecker能查看到消费者消费的情况,\n  * ConsumerOffsetChecker只是将信息打印到标准的输出流中\n  *\n  */\npublic class RunClass {\n    public static void main(String[] args) {\n    //group-1是消费者的group名称,可以在zk中\n    String[] arr = new String[]{\"--zookeeper=192.168.199.129:2181,192.168.199.130:2181,192.168.199.131:2181/kafka\",\"--group=group-1\"};\n    ConsumerOffsetChecker.main(arr);\n    }\n}\n```\n\n\n# 5、日志说明\n默认kafka的日志是保存在/opt/kafka/kafka_2.10-0.9.0.0/logs目录下的，这里说几个需要注意的日志\nserver.log #kafka的运行日志\nstate-change.log #kafka他是用zookeeper来保存状态，所以他可能会进行切换，切换的日志就保存在这里\ncontroller.log #kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.\n\n# 6、 Kafka-manager（v2.0.0.2）（Kafka集群可视化管理）\n## 6.1 sbt编译\n```\ncurl https://bintray.com/sbt/rpm/rpm > bintray-sbt-rpm.repo\nmv bintray-sbt-rpm.repo /etc/yum.repos.d/\nyum install sbt\n```\n检查sbt是否安装成功\n```\nsbt version\n```\n## 6.2 安装部署kafka-manager\n```\nwget https://github.com/yahoo/kafka-manager/releases/kafka-manager-2.0.0.2.tar.gz\ntar zxvf kafka-manager-2.0.0.2.tar.gz -C /usr/local\n```\n编译kafka-manager\n```\ncd /usr/local/kafka-manager-2.0.0.2\n./sbt clean dist     //需要一段时间\n```\n编译结果查看\n```\nls /usr/local/kafka-manager-2.0.0.2/target/universal/   //存在kafka-manager-2.0.0.2.zip\n```\n# 创建目录kafka-manager\n```\nmkdir -p /usr/local/kafka-manager\ncp /usr/local/kafka-manager-2.0.0.2/target/universal/kafka-manager-2.0.0.2.zip /usr/local/kafka-manager\n```\n解压文件\n```\nunzip kafka-manager-2.0.0.2.zip\n```\n修改配置文件\n```\nvim /usr/local/kafka-manager/kafka-manager-2.0.0.2/conf/application.conf\n```\n修改信息\n```\n单机：\nkafka-manager.zkhosts=\"localhost:2181\"\n集群：\nkafka-manager.zkhosts=\"node3.cn:2181,node4.cn:2181,node5.cn:2181\"\n```\n## 6.3启动kafka-manager\n控制台启动\n```\nbin/kafka-manager\n```\n后台守护启动\n```\nnohup bin/kafka-manager &\n```\n后台启动通过 -Dhttp.port，指定端口; -Dconfig.file=conf/application.conf指定配置文件\n```\nnohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080 &\n```\n\n\n\n","slug":"kafka集群搭建","published":1,"updated":"2019-08-31T03:21:37.299Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0se002gfbs6burrmkow","content":"<p>kafka，领英开源消息队列框架，在大数据实时、批处理过程中，充当缓冲、中间存储、解耦的组件，深得工程师的喜爱，下面看下如何搭建。<br><img src=\"/2019/08/31/kafka集群搭建/kafka-logo.png\" alt=\"kafka-logo\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"1、软件环境\"><a href=\"#1、软件环境\" class=\"headerlink\" title=\"1、软件环境\"></a>1、软件环境</h1><p>搭建好的zookeeper集群<br>下载kafka安装包</p>\n<h1 id=\"2、安装、修改配置文件\"><a href=\"#2、安装、修改配置文件\" class=\"headerlink\" title=\"2、安装、修改配置文件\"></a>2、安装、修改配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_*.tgz -C /usr/local/</span><br><span class=\"line\">cd /usr/local/kafka/config</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1修改配置文件\"><a href=\"#2-1修改配置文件\" class=\"headerlink\" title=\"2.1修改配置文件\"></a>2.1修改配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim server.properties</span><br><span class=\"line\">broker.id=1</span><br><span class=\"line\">/* 这是这台虚拟机上的值，在另外两台虚拟机上应该是2或者3，这个值是唯一的，每台虚拟机或者叫服务器不能相同。 /</span><br><span class=\"line\">/ 设置本机IP和端口。 我这里设置的是listeners，也可以直接设置host.name=192.168.172.10,port=9092,这个IP地址也是与本机相关的，每台服务器上设置为自己的IP地址。 /</span><br><span class=\"line\">listeners=PLAINTEXT://192.168.172.10:9092</span><br><span class=\"line\">advertised.listeners=PLAINTEXT://x.x.x.x:9092 //外部访问</span><br><span class=\"line\">// 该端口默认是9092</span><br><span class=\"line\">// 在og.retention.hours=168下面新增下面三项 #默认消息的最大持久化时间，168小时，7天</span><br><span class=\"line\">message.max.byte=5242880    #消息保存的最大值5M</span><br><span class=\"line\">    default.replication.factor=2 #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务</span><br><span class=\"line\">replica.fetch.max.bytes=5242880 #取消息的最大直接数</span><br><span class=\"line\">/ 设置zookeeper的连接端口，新版本的kafka不再使用zookeeper而是通过brokerlist的配置让producer直接连接broker，这个brokerlist可以配置多个，只要有一个能连接上，就可以让producer获取道集群中的其他broker的信息，绕过了zookeeper。因此这个zookeeper.connect可以设置多个值 */</span><br><span class=\"line\">zookeeper.connect=192.168.172.12:2181,192.168.172.11:2181,192.168.172.10:2181</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、启动kafka\"><a href=\"#3、启动kafka\" class=\"headerlink\" title=\"3、启动kafka\"></a>3、启动kafka</h1><p>首先要启动kafka集群，并且是三台都要手动去启动。<br>// 进入kafka的bin目录<br>cd /opt/kafka/kafka_2.11-1.0.0/bin/<br>// 启动kafka<br>./kafka-server-start.sh -daemon ../config/server.properties &amp;      //-daemon代表着以后台模式运行kafka集群，这样kafka的启动就不会影响我们继续在控制台输入命令。<br>//查看服务是否正常<br>jps</p>\n<h1 id=\"4、创建topic，测试\"><a href=\"#4、创建topic，测试\" class=\"headerlink\" title=\"4、创建topic，测试\"></a>4、创建topic，测试</h1><h2 id=\"4-1创建topic\"><a href=\"#4-1创建topic\" class=\"headerlink\" title=\"4.1创建topic\"></a>4.1创建topic</h2><h3 id=\"创建Topic\"><a href=\"#创建Topic\" class=\"headerlink\" title=\"创建Topic\"></a>创建Topic</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --create --zookeeper 10.0.0.60:2181 --replication-factor 2 --partitions 1 --topic shuaige</span><br></pre></td></tr></table></figure>\n\n<p>// 解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--replication-factor 2   #复制两份</span><br><span class=\"line\">--partitions 1 #创建1个分区</span><br><span class=\"line\">--topic #主题为shuaige</span><br></pre></td></tr></table></figure>\n\n<p>‘’’在一台服务器上创建一个发布者’’’</p>\n<h3 id=\"创建一个broker，发布者\"><a href=\"#创建一个broker，发布者\" class=\"headerlink\" title=\"创建一个broker，发布者\"></a>创建一个broker，发布者</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-console-producer.sh --broker-list 10.0.0.60:9092 --topic shuaige</span><br><span class=\"line\">&apos;&apos;&apos;在一台服务器上创建一个订阅者&apos;&apos;&apos;</span><br><span class=\"line\">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic shuaige --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-查看topic\"><a href=\"#4-2-查看topic\" class=\"headerlink\" title=\"4.2 查看topic\"></a>4.2 查看topic</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-查看topic状态\"><a href=\"#4-3-查看topic状态\" class=\"headerlink\" title=\"4.3 查看topic状态\"></a>4.3 查看topic状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/kafka-topics.sh --describe --zookeeper localhost:12181 --topic shuaige</span><br></pre></td></tr></table></figure>\n\n<p>下面是显示信息<br>Topic:ssports    PartitionCount:1    ReplicationFactor:2    Configs:<br>    Topic: shuaige    Partition: 0    Leader: 1    Replicas: 0,1    Isr: 1<br>//分区为为1  复制因子为2   他的  shuaige的分区为0<br>//Replicas: 0,1   复制的为0，1</p>\n<h2 id=\"4-4-创建kafka-topic\"><a href=\"#4-4-创建kafka-topic\" class=\"headerlink\" title=\"4.4 创建kafka topic\"></a>4.4 创建kafka topic</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --create --topic t_cdr --partitions 30 --replication-factor 2</span><br></pre></td></tr></table></figure>\n\n<p>注： partitions指定topic分区数，replication-factor指定topic每个分区的副本数</p>\n<ul>\n<li>partitions分区数:<ul>\n<li>partitions ：分区数，控制topic将分片成多少个log。可以显示指定，如果不指定则会使用broker(server.properties)中的num.partitions配置的数量</li>\n<li>虽然增加分区数可以提供kafka集群的吞吐量、但是过多的分区数或者或是单台服务器上的分区数过多，会增加不可用及延迟的风险。因为多的分区数，意味着需要打开更多的文件句柄、增加点到点的延时、增加客户端的内存消耗。</li>\n<li>分区数也限制了consumer的并行度，即限制了并行consumer消息的线程数不能大于分区数</li>\n<li>分区数也限制了producer发送消息是指定的分区。如创建topic时分区设置为1，producer发送消息时通过自定义的分区方法指定分区为2或以上的数都会出错的；这种情况可以通过alter –partitions 来增加分区数。</li>\n</ul>\n</li>\n<li>replication-factor副本<ul>\n<li>replication factor 控制消息保存在几个broker(服务器)上，一般情况下等于broker的个数。</li>\n<li>如果没有在创建时显示指定或通过API向一个不存在的topic生产消息时会使用broker(server.properties)中的default.replication.factor配置的数量<br>查看所有topic列表<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --list</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p>查看指定topic信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --describe --topic t_cdr</span><br></pre></td></tr></table></figure>\n\n<p>控制台向topic生产数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list node86:9092 --topic t_cdr</span><br></pre></td></tr></table></figure>\n\n<p>控制台消费topic的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper node01:2181 --topic t_cdr --from-beginning</span><br></pre></td></tr></table></figure>\n\n<p>查看topic某分区偏移量最大（小）值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic hive-mdatabase-hostsltable --time -1 --broker-list node86:9092 --partitions 0</span><br></pre></td></tr></table></figure>\n\n<p>注： time为-1时表示最大值，time为-2时表示最小值<br>增加topic分区数, 为topic t_cdr 增加10个分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --alter --topic t_cdr --partitions 10</span><br></pre></td></tr></table></figure>\n\n<p>删除topic，慎用，只会删除zookeeper中的元数据，消息文件须手动删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-run-class.sh kafka.admin.DeleteTopicCommand --zookeeper node01:2181 --topic t_cdr</span><br></pre></td></tr></table></figure>\n\n<p>查看topic消费进度<br>这个会显示出consumer group的offset情况， 必须参数为–group， 不指定–topic，默认为所有topic</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Displays the: Consumer Group, Topic, Partitions, Offset, logSize, Lag, Owner for the specified set of Topics and Consumer Group</span><br><span class=\"line\">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker</span><br><span class=\"line\">required argument: [group]</span><br><span class=\"line\">Option Description</span><br><span class=\"line\">------ -----------</span><br><span class=\"line\">--broker-info Print broker info</span><br><span class=\"line\">--group Consumer group.</span><br><span class=\"line\">--help Print this message.</span><br><span class=\"line\">--topic Comma-separated list of consumer</span><br><span class=\"line\">topics (all topics if absent).</span><br><span class=\"line\">--zkconnect ZooKeeper connect string. (default: localhost:2181)</span><br><span class=\"line\">Example,</span><br><span class=\"line\">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --group pv</span><br><span class=\"line\">Group Topic Pid Offset logSize Lag Owner</span><br><span class=\"line\">pv page_visits 0 21 21 0 none</span><br><span class=\"line\">pv page_visits 1 19 19 0 none</span><br><span class=\"line\">pv page_visits 2 20 20 0 none</span><br></pre></td></tr></table></figure>\n\n<p>以上图中参数含义解释如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topic：创建时topic名称</span><br><span class=\"line\">pid：分区编号</span><br><span class=\"line\">offset：表示该parition已经消费了多少条message</span><br><span class=\"line\">logSize：表示该partition已经写了多少条message</span><br><span class=\"line\">Lag：表示有多少条message没有被消费。</span><br><span class=\"line\">Owner：表示消费者</span><br></pre></td></tr></table></figure>\n\n<p>细看kafka-run-class.sh脚本，它是调用 了ConsumerOffsetChecker的main方法，所以，我们也可以通过java代码来访问scala的ConsumerOffsetChecker类，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import kafka.tools.ConsumerOffsetChecker;</span><br><span class=\"line\">/**</span><br><span class=\"line\">  * kafka自带很多工具类，其中ConsumerOffsetChecker能查看到消费者消费的情况,</span><br><span class=\"line\">  * ConsumerOffsetChecker只是将信息打印到标准的输出流中</span><br><span class=\"line\">  *</span><br><span class=\"line\">  */</span><br><span class=\"line\">public class RunClass &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">    //group-1是消费者的group名称,可以在zk中</span><br><span class=\"line\">    String[] arr = new String[]&#123;&quot;--zookeeper=192.168.199.129:2181,192.168.199.130:2181,192.168.199.131:2181/kafka&quot;,&quot;--group=group-1&quot;&#125;;</span><br><span class=\"line\">    ConsumerOffsetChecker.main(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5、日志说明\"><a href=\"#5、日志说明\" class=\"headerlink\" title=\"5、日志说明\"></a>5、日志说明</h1><p>默认kafka的日志是保存在/opt/kafka/kafka_2.10-0.9.0.0/logs目录下的，这里说几个需要注意的日志<br>server.log #kafka的运行日志<br>state-change.log #kafka他是用zookeeper来保存状态，所以他可能会进行切换，切换的日志就保存在这里<br>controller.log #kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.</p>\n<h1 id=\"6、-Kafka-manager（v2-0-0-2）（Kafka集群可视化管理）\"><a href=\"#6、-Kafka-manager（v2-0-0-2）（Kafka集群可视化管理）\" class=\"headerlink\" title=\"6、 Kafka-manager（v2.0.0.2）（Kafka集群可视化管理）\"></a>6、 Kafka-manager（v2.0.0.2）（Kafka集群可视化管理）</h1><h2 id=\"6-1-sbt编译\"><a href=\"#6-1-sbt编译\" class=\"headerlink\" title=\"6.1 sbt编译\"></a>6.1 sbt编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://bintray.com/sbt/rpm/rpm &gt; bintray-sbt-rpm.repo</span><br><span class=\"line\">mv bintray-sbt-rpm.repo /etc/yum.repos.d/</span><br><span class=\"line\">yum install sbt</span><br></pre></td></tr></table></figure>\n\n<p>检查sbt是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbt version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-安装部署kafka-manager\"><a href=\"#6-2-安装部署kafka-manager\" class=\"headerlink\" title=\"6.2 安装部署kafka-manager\"></a>6.2 安装部署kafka-manager</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/yahoo/kafka-manager/releases/kafka-manager-2.0.0.2.tar.gz</span><br><span class=\"line\">tar zxvf kafka-manager-2.0.0.2.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n\n<p>编译kafka-manager</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/kafka-manager-2.0.0.2</span><br><span class=\"line\">./sbt clean dist     //需要一段时间</span><br></pre></td></tr></table></figure>\n\n<p>编译结果查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/local/kafka-manager-2.0.0.2/target/universal/   //存在kafka-manager-2.0.0.2.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建目录kafka-manager\"><a href=\"#创建目录kafka-manager\" class=\"headerlink\" title=\"创建目录kafka-manager\"></a>创建目录kafka-manager</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/local/kafka-manager</span><br><span class=\"line\">cp /usr/local/kafka-manager-2.0.0.2/target/universal/kafka-manager-2.0.0.2.zip /usr/local/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>解压文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip kafka-manager-2.0.0.2.zip</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/kafka-manager/kafka-manager-2.0.0.2/conf/application.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单机：</span><br><span class=\"line\">kafka-manager.zkhosts=&quot;localhost:2181&quot;</span><br><span class=\"line\">集群：</span><br><span class=\"line\">kafka-manager.zkhosts=&quot;node3.cn:2181,node4.cn:2181,node5.cn:2181&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-3启动kafka-manager\"><a href=\"#6-3启动kafka-manager\" class=\"headerlink\" title=\"6.3启动kafka-manager\"></a>6.3启动kafka-manager</h2><p>控制台启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>后台守护启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup bin/kafka-manager &amp;</span><br></pre></td></tr></table></figure>\n\n<p>后台启动通过 -Dhttp.port，指定端口; -Dconfig.file=conf/application.conf指定配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080 &amp;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"<p>kafka，领英开源消息队列框架，在大数据实时、批处理过程中，充当缓冲、中间存储、解耦的组件，深得工程师的喜爱，下面看下如何搭建。<br><img src=\"/2019/08/31/kafka集群搭建/kafka-logo.png\" alt=\"kafka-logo\"></p>","more":"<h1 id=\"1、软件环境\"><a href=\"#1、软件环境\" class=\"headerlink\" title=\"1、软件环境\"></a>1、软件环境</h1><p>搭建好的zookeeper集群<br>下载kafka安装包</p>\n<h1 id=\"2、安装、修改配置文件\"><a href=\"#2、安装、修改配置文件\" class=\"headerlink\" title=\"2、安装、修改配置文件\"></a>2、安装、修改配置文件</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -zxvf kafka_*.tgz -C /usr/local/</span><br><span class=\"line\">cd /usr/local/kafka/config</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-1修改配置文件\"><a href=\"#2-1修改配置文件\" class=\"headerlink\" title=\"2.1修改配置文件\"></a>2.1修改配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim server.properties</span><br><span class=\"line\">broker.id=1</span><br><span class=\"line\">/* 这是这台虚拟机上的值，在另外两台虚拟机上应该是2或者3，这个值是唯一的，每台虚拟机或者叫服务器不能相同。 /</span><br><span class=\"line\">/ 设置本机IP和端口。 我这里设置的是listeners，也可以直接设置host.name=192.168.172.10,port=9092,这个IP地址也是与本机相关的，每台服务器上设置为自己的IP地址。 /</span><br><span class=\"line\">listeners=PLAINTEXT://192.168.172.10:9092</span><br><span class=\"line\">advertised.listeners=PLAINTEXT://x.x.x.x:9092 //外部访问</span><br><span class=\"line\">// 该端口默认是9092</span><br><span class=\"line\">// 在og.retention.hours=168下面新增下面三项 #默认消息的最大持久化时间，168小时，7天</span><br><span class=\"line\">message.max.byte=5242880    #消息保存的最大值5M</span><br><span class=\"line\">    default.replication.factor=2 #kafka保存消息的副本数，如果一个副本失效了，另一个还可以继续提供服务</span><br><span class=\"line\">replica.fetch.max.bytes=5242880 #取消息的最大直接数</span><br><span class=\"line\">/ 设置zookeeper的连接端口，新版本的kafka不再使用zookeeper而是通过brokerlist的配置让producer直接连接broker，这个brokerlist可以配置多个，只要有一个能连接上，就可以让producer获取道集群中的其他broker的信息，绕过了zookeeper。因此这个zookeeper.connect可以设置多个值 */</span><br><span class=\"line\">zookeeper.connect=192.168.172.12:2181,192.168.172.11:2181,192.168.172.10:2181</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"3、启动kafka\"><a href=\"#3、启动kafka\" class=\"headerlink\" title=\"3、启动kafka\"></a>3、启动kafka</h1><p>首先要启动kafka集群，并且是三台都要手动去启动。<br>// 进入kafka的bin目录<br>cd /opt/kafka/kafka_2.11-1.0.0/bin/<br>// 启动kafka<br>./kafka-server-start.sh -daemon ../config/server.properties &amp;      //-daemon代表着以后台模式运行kafka集群，这样kafka的启动就不会影响我们继续在控制台输入命令。<br>//查看服务是否正常<br>jps</p>\n<h1 id=\"4、创建topic，测试\"><a href=\"#4、创建topic，测试\" class=\"headerlink\" title=\"4、创建topic，测试\"></a>4、创建topic，测试</h1><h2 id=\"4-1创建topic\"><a href=\"#4-1创建topic\" class=\"headerlink\" title=\"4.1创建topic\"></a>4.1创建topic</h2><h3 id=\"创建Topic\"><a href=\"#创建Topic\" class=\"headerlink\" title=\"创建Topic\"></a>创建Topic</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --create --zookeeper 10.0.0.60:2181 --replication-factor 2 --partitions 1 --topic shuaige</span><br></pre></td></tr></table></figure>\n\n<p>// 解释</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">--replication-factor 2   #复制两份</span><br><span class=\"line\">--partitions 1 #创建1个分区</span><br><span class=\"line\">--topic #主题为shuaige</span><br></pre></td></tr></table></figure>\n\n<p>‘’’在一台服务器上创建一个发布者’’’</p>\n<h3 id=\"创建一个broker，发布者\"><a href=\"#创建一个broker，发布者\" class=\"headerlink\" title=\"创建一个broker，发布者\"></a>创建一个broker，发布者</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-console-producer.sh --broker-list 10.0.0.60:9092 --topic shuaige</span><br><span class=\"line\">&apos;&apos;&apos;在一台服务器上创建一个订阅者&apos;&apos;&apos;</span><br><span class=\"line\">./kafka-console-consumer.sh --zookeeper localhost:2181 --topic shuaige --from-beginning</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-2-查看topic\"><a href=\"#4-2-查看topic\" class=\"headerlink\" title=\"4.2 查看topic\"></a>4.2 查看topic</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./kafka-topics.sh --list --zookeeper localhost:2181</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-3-查看topic状态\"><a href=\"#4-3-查看topic状态\" class=\"headerlink\" title=\"4.3 查看topic状态\"></a>4.3 查看topic状态</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/kafka-topics.sh --describe --zookeeper localhost:12181 --topic shuaige</span><br></pre></td></tr></table></figure>\n\n<p>下面是显示信息<br>Topic:ssports    PartitionCount:1    ReplicationFactor:2    Configs:<br>    Topic: shuaige    Partition: 0    Leader: 1    Replicas: 0,1    Isr: 1<br>//分区为为1  复制因子为2   他的  shuaige的分区为0<br>//Replicas: 0,1   复制的为0，1</p>\n<h2 id=\"4-4-创建kafka-topic\"><a href=\"#4-4-创建kafka-topic\" class=\"headerlink\" title=\"4.4 创建kafka topic\"></a>4.4 创建kafka topic</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --create --topic t_cdr --partitions 30 --replication-factor 2</span><br></pre></td></tr></table></figure>\n\n<p>注： partitions指定topic分区数，replication-factor指定topic每个分区的副本数</p>\n<ul>\n<li>partitions分区数:<ul>\n<li>partitions ：分区数，控制topic将分片成多少个log。可以显示指定，如果不指定则会使用broker(server.properties)中的num.partitions配置的数量</li>\n<li>虽然增加分区数可以提供kafka集群的吞吐量、但是过多的分区数或者或是单台服务器上的分区数过多，会增加不可用及延迟的风险。因为多的分区数，意味着需要打开更多的文件句柄、增加点到点的延时、增加客户端的内存消耗。</li>\n<li>分区数也限制了consumer的并行度，即限制了并行consumer消息的线程数不能大于分区数</li>\n<li>分区数也限制了producer发送消息是指定的分区。如创建topic时分区设置为1，producer发送消息时通过自定义的分区方法指定分区为2或以上的数都会出错的；这种情况可以通过alter –partitions 来增加分区数。</li>\n</ul>\n</li>\n<li>replication-factor副本<ul>\n<li>replication factor 控制消息保存在几个broker(服务器)上，一般情况下等于broker的个数。</li>\n<li>如果没有在创建时显示指定或通过API向一个不存在的topic生产消息时会使用broker(server.properties)中的default.replication.factor配置的数量<br>查看所有topic列表<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --list</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ul>\n<p>查看指定topic信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --describe --topic t_cdr</span><br></pre></td></tr></table></figure>\n\n<p>控制台向topic生产数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list node86:9092 --topic t_cdr</span><br></pre></td></tr></table></figure>\n\n<p>控制台消费topic的数据</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper node01:2181 --topic t_cdr --from-beginning</span><br></pre></td></tr></table></figure>\n\n<p>查看topic某分区偏移量最大（小）值</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-run-class.sh kafka.tools.GetOffsetShell --topic hive-mdatabase-hostsltable --time -1 --broker-list node86:9092 --partitions 0</span><br></pre></td></tr></table></figure>\n\n<p>注： time为-1时表示最大值，time为-2时表示最小值<br>增加topic分区数, 为topic t_cdr 增加10个分区</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --zookeeper node01:2181 --alter --topic t_cdr --partitions 10</span><br></pre></td></tr></table></figure>\n\n<p>删除topic，慎用，只会删除zookeeper中的元数据，消息文件须手动删除</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-run-class.sh kafka.admin.DeleteTopicCommand --zookeeper node01:2181 --topic t_cdr</span><br></pre></td></tr></table></figure>\n\n<p>查看topic消费进度<br>这个会显示出consumer group的offset情况， 必须参数为–group， 不指定–topic，默认为所有topic</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Displays the: Consumer Group, Topic, Partitions, Offset, logSize, Lag, Owner for the specified set of Topics and Consumer Group</span><br><span class=\"line\">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker</span><br><span class=\"line\">required argument: [group]</span><br><span class=\"line\">Option Description</span><br><span class=\"line\">------ -----------</span><br><span class=\"line\">--broker-info Print broker info</span><br><span class=\"line\">--group Consumer group.</span><br><span class=\"line\">--help Print this message.</span><br><span class=\"line\">--topic Comma-separated list of consumer</span><br><span class=\"line\">topics (all topics if absent).</span><br><span class=\"line\">--zkconnect ZooKeeper connect string. (default: localhost:2181)</span><br><span class=\"line\">Example,</span><br><span class=\"line\">bin/kafka-run-class.sh kafka.tools.ConsumerOffsetChecker --group pv</span><br><span class=\"line\">Group Topic Pid Offset logSize Lag Owner</span><br><span class=\"line\">pv page_visits 0 21 21 0 none</span><br><span class=\"line\">pv page_visits 1 19 19 0 none</span><br><span class=\"line\">pv page_visits 2 20 20 0 none</span><br></pre></td></tr></table></figure>\n\n<p>以上图中参数含义解释如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">topic：创建时topic名称</span><br><span class=\"line\">pid：分区编号</span><br><span class=\"line\">offset：表示该parition已经消费了多少条message</span><br><span class=\"line\">logSize：表示该partition已经写了多少条message</span><br><span class=\"line\">Lag：表示有多少条message没有被消费。</span><br><span class=\"line\">Owner：表示消费者</span><br></pre></td></tr></table></figure>\n\n<p>细看kafka-run-class.sh脚本，它是调用 了ConsumerOffsetChecker的main方法，所以，我们也可以通过java代码来访问scala的ConsumerOffsetChecker类，代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import kafka.tools.ConsumerOffsetChecker;</span><br><span class=\"line\">/**</span><br><span class=\"line\">  * kafka自带很多工具类，其中ConsumerOffsetChecker能查看到消费者消费的情况,</span><br><span class=\"line\">  * ConsumerOffsetChecker只是将信息打印到标准的输出流中</span><br><span class=\"line\">  *</span><br><span class=\"line\">  */</span><br><span class=\"line\">public class RunClass &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">    //group-1是消费者的group名称,可以在zk中</span><br><span class=\"line\">    String[] arr = new String[]&#123;&quot;--zookeeper=192.168.199.129:2181,192.168.199.130:2181,192.168.199.131:2181/kafka&quot;,&quot;--group=group-1&quot;&#125;;</span><br><span class=\"line\">    ConsumerOffsetChecker.main(arr);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"5、日志说明\"><a href=\"#5、日志说明\" class=\"headerlink\" title=\"5、日志说明\"></a>5、日志说明</h1><p>默认kafka的日志是保存在/opt/kafka/kafka_2.10-0.9.0.0/logs目录下的，这里说几个需要注意的日志<br>server.log #kafka的运行日志<br>state-change.log #kafka他是用zookeeper来保存状态，所以他可能会进行切换，切换的日志就保存在这里<br>controller.log #kafka选择一个节点作为“controller”,当发现有节点down掉的时候它负责在游泳分区的所有节点中选择新的leader,这使得Kafka可以批量的高效的管理所有分区节点的主从关系。如果controller down掉了，活着的节点中的一个会备切换为新的controller.</p>\n<h1 id=\"6、-Kafka-manager（v2-0-0-2）（Kafka集群可视化管理）\"><a href=\"#6、-Kafka-manager（v2-0-0-2）（Kafka集群可视化管理）\" class=\"headerlink\" title=\"6、 Kafka-manager（v2.0.0.2）（Kafka集群可视化管理）\"></a>6、 Kafka-manager（v2.0.0.2）（Kafka集群可视化管理）</h1><h2 id=\"6-1-sbt编译\"><a href=\"#6-1-sbt编译\" class=\"headerlink\" title=\"6.1 sbt编译\"></a>6.1 sbt编译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl https://bintray.com/sbt/rpm/rpm &gt; bintray-sbt-rpm.repo</span><br><span class=\"line\">mv bintray-sbt-rpm.repo /etc/yum.repos.d/</span><br><span class=\"line\">yum install sbt</span><br></pre></td></tr></table></figure>\n\n<p>检查sbt是否安装成功</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sbt version</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-2-安装部署kafka-manager\"><a href=\"#6-2-安装部署kafka-manager\" class=\"headerlink\" title=\"6.2 安装部署kafka-manager\"></a>6.2 安装部署kafka-manager</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/yahoo/kafka-manager/releases/kafka-manager-2.0.0.2.tar.gz</span><br><span class=\"line\">tar zxvf kafka-manager-2.0.0.2.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n\n<p>编译kafka-manager</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/kafka-manager-2.0.0.2</span><br><span class=\"line\">./sbt clean dist     //需要一段时间</span><br></pre></td></tr></table></figure>\n\n<p>编译结果查看</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls /usr/local/kafka-manager-2.0.0.2/target/universal/   //存在kafka-manager-2.0.0.2.zip</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"创建目录kafka-manager\"><a href=\"#创建目录kafka-manager\" class=\"headerlink\" title=\"创建目录kafka-manager\"></a>创建目录kafka-manager</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p /usr/local/kafka-manager</span><br><span class=\"line\">cp /usr/local/kafka-manager-2.0.0.2/target/universal/kafka-manager-2.0.0.2.zip /usr/local/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>解压文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">unzip kafka-manager-2.0.0.2.zip</span><br></pre></td></tr></table></figure>\n\n<p>修改配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/kafka-manager/kafka-manager-2.0.0.2/conf/application.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">单机：</span><br><span class=\"line\">kafka-manager.zkhosts=&quot;localhost:2181&quot;</span><br><span class=\"line\">集群：</span><br><span class=\"line\">kafka-manager.zkhosts=&quot;node3.cn:2181,node4.cn:2181,node5.cn:2181&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"6-3启动kafka-manager\"><a href=\"#6-3启动kafka-manager\" class=\"headerlink\" title=\"6.3启动kafka-manager\"></a>6.3启动kafka-manager</h2><p>控制台启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-manager</span><br></pre></td></tr></table></figure>\n\n<p>后台守护启动</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup bin/kafka-manager &amp;</span><br></pre></td></tr></table></figure>\n\n<p>后台启动通过 -Dhttp.port，指定端口; -Dconfig.file=conf/application.conf指定配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nohup bin/kafka-manager -Dconfig.file=conf/application.conf -Dhttp.port=8080 &amp;</span><br></pre></td></tr></table></figure>"},{"title":"以太坊","date":"2019-08-18T15:53:06.000Z","notebook":"区块链","_content":"\n以太坊 Do you like it?\n![Ethereum](以太坊/Ethereum.jpeg)\n<!-- more -->\n# 一、layer2扩展解决方案\n1. 侧链loom network\n2. plasma\n\n2019-08-25更新\n————————————\n# 二、Ethereum2.0研发计划\n## 阶段0:信标链\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要负责管理权益证明协议的运行，并协调所有独立的平行分片，他是整个开发中最复杂的部分，详情请看<font color=#0099ff><a>[信标链](https://ethfans.org/posts/two-point-oh-the-beacon-chain)</a></font>\n## 阶段1:分片链\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要实现将验证者分散在1024条分片链上，点对点网络以足够快的速度与验证者之间准确无误的进行通信。\n## 阶段2:执行层\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供巨大的设计空间和无拘无束的开发氛围，提供一些不同的执行环境，例如代币转账执行环境（匿名），智能合约语言执行环境，为处理高容量Plasma侧链而优化的执行环境，以及为企业用户量身打造的执行环境，具备许可性和隐私性。\n\n2019-09-08更新\n____________\n# 三、账户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊中有2类账户，他们共用同一个地址空间。\n## 外部账户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被公钥-私钥对（人类）控制\n## 合约账户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被存储在合约中的代码控制\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，每个账户都有一个以太币余额，单位是Wei，该账户余额可以向它发送带有金额交易的方式来改变。\n\n# 四、以太坊虚拟机\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊虚拟机EVM，是以太坊中智能合约的运行环境。它不仅被沙箱隔离起来，实际上完全隔离，也就是说运行在虚拟机中的代码，不能接触到网络、文件系统、或其他进程。甚至智能合约和其他智能合约只能有有限的接触。\n\n# 五、Gas\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊上的每笔交易都需要消耗gas，目的是限制执行交易所需的工作量，同时为执行支付费用。当EVM执行交易时，gas将按照特定规则被逐渐消耗。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gas price（gas价格，以太币计）是由交易创建者设定的，发送账户需要预付的交易费用=gas price * gas amount，如果执行结束gas还有剩余，那么这些gas将返回给发送账户。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论交易被执行到什么位置，一旦gas被耗尽（比如降为负值），将会触发一个out of gas异常，当前调用帧所做的所有状态修改都将被回滚。\n\n2019-09-13更新\n————————————————————————\n# 六、存储、内存和栈\n## 6.1 存储\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个账户有一块持久化内存区叫做<b>存储</b>。存储是将256位字映射到256位字的键值存储区，在合约中枚举存储是不可能的，且读存储的开销很高，修改存储的开销甚至更高。合约只能读写存储区内属于自己的部分。\n\n## 6.2 内存\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二个内存区称为<b>内存</b>，合约会试图为每一次消息调用获取一块被重新擦拭干净的内存示例。内存是线性的，可以按照字节寻址，但读的长度被限制在256位，而写的长度可以是8位或256位。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当访问（无论是读还是写）之前从未访问过的内存字（word）时（无论是偏移到该字内的任何位置），内存将按字进行扩展（每个字是256位）。扩容也将消耗一定的gas。 随着内存使用量的增长，其费用也会增高（以平方级别）。\n\n## 6.3 栈\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM不是基于寄存器的，而是基于栈的，因此所有的计算都在一个称为 <b>栈</b>。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈最大有1024个元素，每个元素的长度为一个字（256位），对栈的访问仅限于顶端，限制方式为允许拷贝最顶端的16个元素中的一个到栈顶，或者是栈顶元素和下面的16个元素中的一个进行交换。所有其他操作都只能取最顶的2个（或1个，或更多，取决于具体的操作）元素，运算后，把结果压入栈顶。当然可以把栈上的元素放到存储或内存中。但是无法只访问栈上指定深度的那个元素，除非先从栈顶移除其他元素。\n\n# 七、指令集\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM的指令集量应尽量少，以最大限度地避免可能导致共识问题的错误实现。所有的指令都是针对”256位的字（word）”这个基本的数据类型来进行操作。具备常用的算术、位、逻辑和比较操作。也可以做到有条件和无条件跳转。此外，合约可以访问当前区块的相关属性，比如它的编号和时间戳。\n\n# 八、消息调用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以通过消息调用的方式来调用其它合约或者发送以太币到非合约账户。消息调用和交易非常类似，它们都有一个源、目标、数据、以太币、gas和返回数据。事实上每个交易都由一个顶层消息调用组成，这个消息调用又可创建更多的消息调用。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以决定在其内部的消息调用中，对于剩余的 gas ，应发送和保留多少。如果在内部消息调用时发生了out-of-gas异常（或其他任何异常），这将由一个被压入栈顶的错误值所指明。此时，只有与该内部消息调用一起发送的gas会被消耗掉。并且，Solidity中，发起调用的合约默认会触发一个手工的异常，以便异常可以从调用栈里“冒泡出来”。 如前文所述，被调用的合约（可以和调用者是同一个合约）会获得一块刚刚清空过的内存，并可以访问调用的payload——由被称为 calldata 的独立区域所提供的数据。调用执行结束后，返回数据将被存放在调用方预先分配好的一块内存中。 调用深度被 限制 为 1024 ，因此对于更加复杂的操作，我们应使用循环而不是递归。\n\n# 九、委托调用/代码调用和库\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊类型的消息调用，被称为 <b>委托调用(delegatecall) </b>。它和一般的消息调用的区别在于，目标地址的代码将在发起调用的合约的上下文中执行，并且 <b>msg.sender</b> 和 <b>msg.value</b> 不变。 这意味着一个合约可以在运行时从另外一个地址动态加载代码。存储、当前地址和余额都指向发起调用的合约，只有代码是从被调用地址获取的。 这使得 Solidity 可以实现”库“能力：可复用的代码库可以放在一个合约的存储上，如用来实现复杂的数据结构的库。\n\n# 十、日志\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊的可索引的数据结构，其存储的数据可以一路映射直到区块层级。这个特性被称为 日志(logs) ，Solidity用它来实现 <b>事件(events)</b> 。合约创建之后就无法访问日志数据，但是这些数据可以从区块链外高效的访问。因为部分日志数据被存储在 <font color=#0099ff><b><a>[布隆过滤器(Bloom filter)](https://en.wikipedia.org/wiki/Bloom_filter)</a></b></font> 中，我们可以高效并且加密安全地搜索日志，所以那些没有下载整个区块链的网络节点（轻客户端）也可以找到这些日志。\n\n# 十一、合约创建\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约甚至可以通过一个特殊的指令来创建其他合约（不是简单的调用零地址）。创建合约的调用 create calls 和普通消息调用的唯一区别在于，负载会被执行，执行的结果被存储为合约代码，调用者/创建者在栈上得到新合约的地址。\n\n# 十二、失效和自毁\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约代码从区块链上移除的唯一方式是合约在合约地址上执行自毁操作 <b>selfdestruct</b> 。合约账户上剩余的以太币会发送给指定的目标，然后其存储和代码从状态中被移除。移除一个合约听上去不错，但其实有潜在的危险，如果有人发送以太币到移除的合约，这些以太币将永远提丢失。\n>*注释\n>>尽管一个合约的代码中没有显式地调用 <font color=#0099ff>selfdestruct</font> ，它仍然有可能通过 <font color=#0099ff>delegatecall</font> 或 <font color=#0099ff>callcode</font> 执行自毁操作。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果要使合同失效，则应通过更改内部状态来禁用合约，这样可以在使用函数无法执行从而进行 revert，从而达到返还以太的目的。\n>*注释\n>>旧合约的删减可能会，也可能不会被以太坊的各种客户端程序实现。另外，归档节点可选择无限期保留合约存储和代码。\n>>目前，<b>外部账户</b> 不能从状态中移除。\n\n\n- - -\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。","source":"_posts/以太坊.md","raw":"---\ntitle: 以太坊\ndate: 2019-08-18 23:53:06\ntags: 以太坊\ncategories: 区块链\nnotebook: 区块链\n---\n\n以太坊 Do you like it?\n![Ethereum](以太坊/Ethereum.jpeg)\n<!-- more -->\n# 一、layer2扩展解决方案\n1. 侧链loom network\n2. plasma\n\n2019-08-25更新\n————————————\n# 二、Ethereum2.0研发计划\n## 阶段0:信标链\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要负责管理权益证明协议的运行，并协调所有独立的平行分片，他是整个开发中最复杂的部分，详情请看<font color=#0099ff><a>[信标链](https://ethfans.org/posts/two-point-oh-the-beacon-chain)</a></font>\n## 阶段1:分片链\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要实现将验证者分散在1024条分片链上，点对点网络以足够快的速度与验证者之间准确无误的进行通信。\n## 阶段2:执行层\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供巨大的设计空间和无拘无束的开发氛围，提供一些不同的执行环境，例如代币转账执行环境（匿名），智能合约语言执行环境，为处理高容量Plasma侧链而优化的执行环境，以及为企业用户量身打造的执行环境，具备许可性和隐私性。\n\n2019-09-08更新\n____________\n# 三、账户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊中有2类账户，他们共用同一个地址空间。\n## 外部账户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被公钥-私钥对（人类）控制\n## 合约账户\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被存储在合约中的代码控制\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，每个账户都有一个以太币余额，单位是Wei，该账户余额可以向它发送带有金额交易的方式来改变。\n\n# 四、以太坊虚拟机\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊虚拟机EVM，是以太坊中智能合约的运行环境。它不仅被沙箱隔离起来，实际上完全隔离，也就是说运行在虚拟机中的代码，不能接触到网络、文件系统、或其他进程。甚至智能合约和其他智能合约只能有有限的接触。\n\n# 五、Gas\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊上的每笔交易都需要消耗gas，目的是限制执行交易所需的工作量，同时为执行支付费用。当EVM执行交易时，gas将按照特定规则被逐渐消耗。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gas price（gas价格，以太币计）是由交易创建者设定的，发送账户需要预付的交易费用=gas price * gas amount，如果执行结束gas还有剩余，那么这些gas将返回给发送账户。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论交易被执行到什么位置，一旦gas被耗尽（比如降为负值），将会触发一个out of gas异常，当前调用帧所做的所有状态修改都将被回滚。\n\n2019-09-13更新\n————————————————————————\n# 六、存储、内存和栈\n## 6.1 存储\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个账户有一块持久化内存区叫做<b>存储</b>。存储是将256位字映射到256位字的键值存储区，在合约中枚举存储是不可能的，且读存储的开销很高，修改存储的开销甚至更高。合约只能读写存储区内属于自己的部分。\n\n## 6.2 内存\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二个内存区称为<b>内存</b>，合约会试图为每一次消息调用获取一块被重新擦拭干净的内存示例。内存是线性的，可以按照字节寻址，但读的长度被限制在256位，而写的长度可以是8位或256位。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当访问（无论是读还是写）之前从未访问过的内存字（word）时（无论是偏移到该字内的任何位置），内存将按字进行扩展（每个字是256位）。扩容也将消耗一定的gas。 随着内存使用量的增长，其费用也会增高（以平方级别）。\n\n## 6.3 栈\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM不是基于寄存器的，而是基于栈的，因此所有的计算都在一个称为 <b>栈</b>。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈最大有1024个元素，每个元素的长度为一个字（256位），对栈的访问仅限于顶端，限制方式为允许拷贝最顶端的16个元素中的一个到栈顶，或者是栈顶元素和下面的16个元素中的一个进行交换。所有其他操作都只能取最顶的2个（或1个，或更多，取决于具体的操作）元素，运算后，把结果压入栈顶。当然可以把栈上的元素放到存储或内存中。但是无法只访问栈上指定深度的那个元素，除非先从栈顶移除其他元素。\n\n# 七、指令集\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM的指令集量应尽量少，以最大限度地避免可能导致共识问题的错误实现。所有的指令都是针对”256位的字（word）”这个基本的数据类型来进行操作。具备常用的算术、位、逻辑和比较操作。也可以做到有条件和无条件跳转。此外，合约可以访问当前区块的相关属性，比如它的编号和时间戳。\n\n# 八、消息调用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以通过消息调用的方式来调用其它合约或者发送以太币到非合约账户。消息调用和交易非常类似，它们都有一个源、目标、数据、以太币、gas和返回数据。事实上每个交易都由一个顶层消息调用组成，这个消息调用又可创建更多的消息调用。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以决定在其内部的消息调用中，对于剩余的 gas ，应发送和保留多少。如果在内部消息调用时发生了out-of-gas异常（或其他任何异常），这将由一个被压入栈顶的错误值所指明。此时，只有与该内部消息调用一起发送的gas会被消耗掉。并且，Solidity中，发起调用的合约默认会触发一个手工的异常，以便异常可以从调用栈里“冒泡出来”。 如前文所述，被调用的合约（可以和调用者是同一个合约）会获得一块刚刚清空过的内存，并可以访问调用的payload——由被称为 calldata 的独立区域所提供的数据。调用执行结束后，返回数据将被存放在调用方预先分配好的一块内存中。 调用深度被 限制 为 1024 ，因此对于更加复杂的操作，我们应使用循环而不是递归。\n\n# 九、委托调用/代码调用和库\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊类型的消息调用，被称为 <b>委托调用(delegatecall) </b>。它和一般的消息调用的区别在于，目标地址的代码将在发起调用的合约的上下文中执行，并且 <b>msg.sender</b> 和 <b>msg.value</b> 不变。 这意味着一个合约可以在运行时从另外一个地址动态加载代码。存储、当前地址和余额都指向发起调用的合约，只有代码是从被调用地址获取的。 这使得 Solidity 可以实现”库“能力：可复用的代码库可以放在一个合约的存储上，如用来实现复杂的数据结构的库。\n\n# 十、日志\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊的可索引的数据结构，其存储的数据可以一路映射直到区块层级。这个特性被称为 日志(logs) ，Solidity用它来实现 <b>事件(events)</b> 。合约创建之后就无法访问日志数据，但是这些数据可以从区块链外高效的访问。因为部分日志数据被存储在 <font color=#0099ff><b><a>[布隆过滤器(Bloom filter)](https://en.wikipedia.org/wiki/Bloom_filter)</a></b></font> 中，我们可以高效并且加密安全地搜索日志，所以那些没有下载整个区块链的网络节点（轻客户端）也可以找到这些日志。\n\n# 十一、合约创建\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约甚至可以通过一个特殊的指令来创建其他合约（不是简单的调用零地址）。创建合约的调用 create calls 和普通消息调用的唯一区别在于，负载会被执行，执行的结果被存储为合约代码，调用者/创建者在栈上得到新合约的地址。\n\n# 十二、失效和自毁\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约代码从区块链上移除的唯一方式是合约在合约地址上执行自毁操作 <b>selfdestruct</b> 。合约账户上剩余的以太币会发送给指定的目标，然后其存储和代码从状态中被移除。移除一个合约听上去不错，但其实有潜在的危险，如果有人发送以太币到移除的合约，这些以太币将永远提丢失。\n>*注释\n>>尽管一个合约的代码中没有显式地调用 <font color=#0099ff>selfdestruct</font> ，它仍然有可能通过 <font color=#0099ff>delegatecall</font> 或 <font color=#0099ff>callcode</font> 执行自毁操作。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果要使合同失效，则应通过更改内部状态来禁用合约，这样可以在使用函数无法执行从而进行 revert，从而达到返还以太的目的。\n>*注释\n>>旧合约的删减可能会，也可能不会被以太坊的各种客户端程序实现。另外，归档节点可选择无限期保留合约存储和代码。\n>>目前，<b>外部账户</b> 不能从状态中移除。\n\n\n- - -\n当你累了的时候，停下来做个梦吧。\n愿你坚持到底。","slug":"以太坊","published":1,"updated":"2019-09-14T04:18:56.919Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0sg002hfbs6p5eta6a1","content":"<p>以太坊 Do you like it?<br><img src=\"/2019/08/18/以太坊/Ethereum.jpeg\" alt=\"Ethereum\"></p>\n<a id=\"more\"></a>\n<h1 id=\"一、layer2扩展解决方案\"><a href=\"#一、layer2扩展解决方案\" class=\"headerlink\" title=\"一、layer2扩展解决方案\"></a>一、layer2扩展解决方案</h1><ol>\n<li>侧链loom network</li>\n<li>plasma</li>\n</ol>\n<p>2019-08-25更新<br>————————————</p>\n<h1 id=\"二、Ethereum2-0研发计划\"><a href=\"#二、Ethereum2-0研发计划\" class=\"headerlink\" title=\"二、Ethereum2.0研发计划\"></a>二、Ethereum2.0研发计划</h1><h2 id=\"阶段0-信标链\"><a href=\"#阶段0-信标链\" class=\"headerlink\" title=\"阶段0:信标链\"></a>阶段0:信标链</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要负责管理权益证明协议的运行，并协调所有独立的平行分片，他是整个开发中最复杂的部分，详情请看<font color=\"#0099ff\"><a><a href=\"https://ethfans.org/posts/two-point-oh-the-beacon-chain\" target=\"_blank\" rel=\"noopener\">信标链</a></a></font></p>\n<h2 id=\"阶段1-分片链\"><a href=\"#阶段1-分片链\" class=\"headerlink\" title=\"阶段1:分片链\"></a>阶段1:分片链</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要实现将验证者分散在1024条分片链上，点对点网络以足够快的速度与验证者之间准确无误的进行通信。</p>\n<h2 id=\"阶段2-执行层\"><a href=\"#阶段2-执行层\" class=\"headerlink\" title=\"阶段2:执行层\"></a>阶段2:执行层</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供巨大的设计空间和无拘无束的开发氛围，提供一些不同的执行环境，例如代币转账执行环境（匿名），智能合约语言执行环境，为处理高容量Plasma侧链而优化的执行环境，以及为企业用户量身打造的执行环境，具备许可性和隐私性。</p>\n<p>2019-09-08更新</p>\n<hr>\n<h1 id=\"三、账户\"><a href=\"#三、账户\" class=\"headerlink\" title=\"三、账户\"></a>三、账户</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊中有2类账户，他们共用同一个地址空间。</p>\n<h2 id=\"外部账户\"><a href=\"#外部账户\" class=\"headerlink\" title=\"外部账户\"></a>外部账户</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被公钥-私钥对（人类）控制</p>\n<h2 id=\"合约账户\"><a href=\"#合约账户\" class=\"headerlink\" title=\"合约账户\"></a>合约账户</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被存储在合约中的代码控制</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，每个账户都有一个以太币余额，单位是Wei，该账户余额可以向它发送带有金额交易的方式来改变。</p>\n<h1 id=\"四、以太坊虚拟机\"><a href=\"#四、以太坊虚拟机\" class=\"headerlink\" title=\"四、以太坊虚拟机\"></a>四、以太坊虚拟机</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊虚拟机EVM，是以太坊中智能合约的运行环境。它不仅被沙箱隔离起来，实际上完全隔离，也就是说运行在虚拟机中的代码，不能接触到网络、文件系统、或其他进程。甚至智能合约和其他智能合约只能有有限的接触。</p>\n<h1 id=\"五、Gas\"><a href=\"#五、Gas\" class=\"headerlink\" title=\"五、Gas\"></a>五、Gas</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊上的每笔交易都需要消耗gas，目的是限制执行交易所需的工作量，同时为执行支付费用。当EVM执行交易时，gas将按照特定规则被逐渐消耗。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gas price（gas价格，以太币计）是由交易创建者设定的，发送账户需要预付的交易费用=gas price * gas amount，如果执行结束gas还有剩余，那么这些gas将返回给发送账户。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论交易被执行到什么位置，一旦gas被耗尽（比如降为负值），将会触发一个out of gas异常，当前调用帧所做的所有状态修改都将被回滚。</p>\n<p>2019-09-13更新<br>————————————————————————</p>\n<h1 id=\"六、存储、内存和栈\"><a href=\"#六、存储、内存和栈\" class=\"headerlink\" title=\"六、存储、内存和栈\"></a>六、存储、内存和栈</h1><h2 id=\"6-1-存储\"><a href=\"#6-1-存储\" class=\"headerlink\" title=\"6.1 存储\"></a>6.1 存储</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个账户有一块持久化内存区叫做<b>存储</b>。存储是将256位字映射到256位字的键值存储区，在合约中枚举存储是不可能的，且读存储的开销很高，修改存储的开销甚至更高。合约只能读写存储区内属于自己的部分。</p>\n<h2 id=\"6-2-内存\"><a href=\"#6-2-内存\" class=\"headerlink\" title=\"6.2 内存\"></a>6.2 内存</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二个内存区称为<b>内存</b>，合约会试图为每一次消息调用获取一块被重新擦拭干净的内存示例。内存是线性的，可以按照字节寻址，但读的长度被限制在256位，而写的长度可以是8位或256位。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当访问（无论是读还是写）之前从未访问过的内存字（word）时（无论是偏移到该字内的任何位置），内存将按字进行扩展（每个字是256位）。扩容也将消耗一定的gas。 随着内存使用量的增长，其费用也会增高（以平方级别）。</p>\n<h2 id=\"6-3-栈\"><a href=\"#6-3-栈\" class=\"headerlink\" title=\"6.3 栈\"></a>6.3 栈</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM不是基于寄存器的，而是基于栈的，因此所有的计算都在一个称为 <b>栈</b>。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈最大有1024个元素，每个元素的长度为一个字（256位），对栈的访问仅限于顶端，限制方式为允许拷贝最顶端的16个元素中的一个到栈顶，或者是栈顶元素和下面的16个元素中的一个进行交换。所有其他操作都只能取最顶的2个（或1个，或更多，取决于具体的操作）元素，运算后，把结果压入栈顶。当然可以把栈上的元素放到存储或内存中。但是无法只访问栈上指定深度的那个元素，除非先从栈顶移除其他元素。</p>\n<h1 id=\"七、指令集\"><a href=\"#七、指令集\" class=\"headerlink\" title=\"七、指令集\"></a>七、指令集</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM的指令集量应尽量少，以最大限度地避免可能导致共识问题的错误实现。所有的指令都是针对”256位的字（word）”这个基本的数据类型来进行操作。具备常用的算术、位、逻辑和比较操作。也可以做到有条件和无条件跳转。此外，合约可以访问当前区块的相关属性，比如它的编号和时间戳。</p>\n<h1 id=\"八、消息调用\"><a href=\"#八、消息调用\" class=\"headerlink\" title=\"八、消息调用\"></a>八、消息调用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以通过消息调用的方式来调用其它合约或者发送以太币到非合约账户。消息调用和交易非常类似，它们都有一个源、目标、数据、以太币、gas和返回数据。事实上每个交易都由一个顶层消息调用组成，这个消息调用又可创建更多的消息调用。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以决定在其内部的消息调用中，对于剩余的 gas ，应发送和保留多少。如果在内部消息调用时发生了out-of-gas异常（或其他任何异常），这将由一个被压入栈顶的错误值所指明。此时，只有与该内部消息调用一起发送的gas会被消耗掉。并且，Solidity中，发起调用的合约默认会触发一个手工的异常，以便异常可以从调用栈里“冒泡出来”。 如前文所述，被调用的合约（可以和调用者是同一个合约）会获得一块刚刚清空过的内存，并可以访问调用的payload——由被称为 calldata 的独立区域所提供的数据。调用执行结束后，返回数据将被存放在调用方预先分配好的一块内存中。 调用深度被 限制 为 1024 ，因此对于更加复杂的操作，我们应使用循环而不是递归。</p>\n<h1 id=\"九、委托调用-代码调用和库\"><a href=\"#九、委托调用-代码调用和库\" class=\"headerlink\" title=\"九、委托调用/代码调用和库\"></a>九、委托调用/代码调用和库</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊类型的消息调用，被称为 <b>委托调用(delegatecall) </b>。它和一般的消息调用的区别在于，目标地址的代码将在发起调用的合约的上下文中执行，并且 <b>msg.sender</b> 和 <b>msg.value</b> 不变。 这意味着一个合约可以在运行时从另外一个地址动态加载代码。存储、当前地址和余额都指向发起调用的合约，只有代码是从被调用地址获取的。 这使得 Solidity 可以实现”库“能力：可复用的代码库可以放在一个合约的存储上，如用来实现复杂的数据结构的库。</p>\n<h1 id=\"十、日志\"><a href=\"#十、日志\" class=\"headerlink\" title=\"十、日志\"></a>十、日志</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊的可索引的数据结构，其存储的数据可以一路映射直到区块层级。这个特性被称为 日志(logs) ，Solidity用它来实现 <b>事件(events)</b> 。合约创建之后就无法访问日志数据，但是这些数据可以从区块链外高效的访问。因为部分日志数据被存储在 <font color=\"#0099ff\"><b><a><a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" target=\"_blank\" rel=\"noopener\">布隆过滤器(Bloom filter)</a></a></b></font> 中，我们可以高效并且加密安全地搜索日志，所以那些没有下载整个区块链的网络节点（轻客户端）也可以找到这些日志。</p>\n<h1 id=\"十一、合约创建\"><a href=\"#十一、合约创建\" class=\"headerlink\" title=\"十一、合约创建\"></a>十一、合约创建</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约甚至可以通过一个特殊的指令来创建其他合约（不是简单的调用零地址）。创建合约的调用 create calls 和普通消息调用的唯一区别在于，负载会被执行，执行的结果被存储为合约代码，调用者/创建者在栈上得到新合约的地址。</p>\n<h1 id=\"十二、失效和自毁\"><a href=\"#十二、失效和自毁\" class=\"headerlink\" title=\"十二、失效和自毁\"></a>十二、失效和自毁</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约代码从区块链上移除的唯一方式是合约在合约地址上执行自毁操作 <b>selfdestruct</b> 。合约账户上剩余的以太币会发送给指定的目标，然后其存储和代码从状态中被移除。移除一个合约听上去不错，但其实有潜在的危险，如果有人发送以太币到移除的合约，这些以太币将永远提丢失。</p>\n<blockquote>\n<p>*注释</p>\n<blockquote>\n<p>尽管一个合约的代码中没有显式地调用 <font color=\"#0099ff\">selfdestruct</font> ，它仍然有可能通过 <font color=\"#0099ff\">delegatecall</font> 或 <font color=\"#0099ff\">callcode</font> 执行自毁操作。</p>\n</blockquote>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果要使合同失效，则应通过更改内部状态来禁用合约，这样可以在使用函数无法执行从而进行 revert，从而达到返还以太的目的。</p>\n<blockquote>\n<p>*注释</p>\n<blockquote>\n<p>旧合约的删减可能会，也可能不会被以太坊的各种客户端程序实现。另外，归档节点可选择无限期保留合约存储和代码。<br>目前，<b>外部账户</b> 不能从状态中移除。</p>\n</blockquote>\n</blockquote>\n<hr>\n<p>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>\n","site":{"data":{}},"excerpt":"<p>以太坊 Do you like it?<br><img src=\"/2019/08/18/以太坊/Ethereum.jpeg\" alt=\"Ethereum\"></p>","more":"<h1 id=\"一、layer2扩展解决方案\"><a href=\"#一、layer2扩展解决方案\" class=\"headerlink\" title=\"一、layer2扩展解决方案\"></a>一、layer2扩展解决方案</h1><ol>\n<li>侧链loom network</li>\n<li>plasma</li>\n</ol>\n<p>2019-08-25更新<br>————————————</p>\n<h1 id=\"二、Ethereum2-0研发计划\"><a href=\"#二、Ethereum2-0研发计划\" class=\"headerlink\" title=\"二、Ethereum2.0研发计划\"></a>二、Ethereum2.0研发计划</h1><h2 id=\"阶段0-信标链\"><a href=\"#阶段0-信标链\" class=\"headerlink\" title=\"阶段0:信标链\"></a>阶段0:信标链</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要负责管理权益证明协议的运行，并协调所有独立的平行分片，他是整个开发中最复杂的部分，详情请看<font color=\"#0099ff\"><a><a href=\"https://ethfans.org/posts/two-point-oh-the-beacon-chain\" target=\"_blank\" rel=\"noopener\">信标链</a></a></font></p>\n<h2 id=\"阶段1-分片链\"><a href=\"#阶段1-分片链\" class=\"headerlink\" title=\"阶段1:分片链\"></a>阶段1:分片链</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;主要实现将验证者分散在1024条分片链上，点对点网络以足够快的速度与验证者之间准确无误的进行通信。</p>\n<h2 id=\"阶段2-执行层\"><a href=\"#阶段2-执行层\" class=\"headerlink\" title=\"阶段2:执行层\"></a>阶段2:执行层</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;提供巨大的设计空间和无拘无束的开发氛围，提供一些不同的执行环境，例如代币转账执行环境（匿名），智能合约语言执行环境，为处理高容量Plasma侧链而优化的执行环境，以及为企业用户量身打造的执行环境，具备许可性和隐私性。</p>\n<p>2019-09-08更新</p>\n<hr>\n<h1 id=\"三、账户\"><a href=\"#三、账户\" class=\"headerlink\" title=\"三、账户\"></a>三、账户</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊中有2类账户，他们共用同一个地址空间。</p>\n<h2 id=\"外部账户\"><a href=\"#外部账户\" class=\"headerlink\" title=\"外部账户\"></a>外部账户</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被公钥-私钥对（人类）控制</p>\n<h2 id=\"合约账户\"><a href=\"#合约账户\" class=\"headerlink\" title=\"合约账户\"></a>合约账户</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;该类账户被存储在合约中的代码控制</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，每个账户都有一个以太币余额，单位是Wei，该账户余额可以向它发送带有金额交易的方式来改变。</p>\n<h1 id=\"四、以太坊虚拟机\"><a href=\"#四、以太坊虚拟机\" class=\"headerlink\" title=\"四、以太坊虚拟机\"></a>四、以太坊虚拟机</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊虚拟机EVM，是以太坊中智能合约的运行环境。它不仅被沙箱隔离起来，实际上完全隔离，也就是说运行在虚拟机中的代码，不能接触到网络、文件系统、或其他进程。甚至智能合约和其他智能合约只能有有限的接触。</p>\n<h1 id=\"五、Gas\"><a href=\"#五、Gas\" class=\"headerlink\" title=\"五、Gas\"></a>五、Gas</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;以太坊上的每笔交易都需要消耗gas，目的是限制执行交易所需的工作量，同时为执行支付费用。当EVM执行交易时，gas将按照特定规则被逐渐消耗。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gas price（gas价格，以太币计）是由交易创建者设定的，发送账户需要预付的交易费用=gas price * gas amount，如果执行结束gas还有剩余，那么这些gas将返回给发送账户。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;无论交易被执行到什么位置，一旦gas被耗尽（比如降为负值），将会触发一个out of gas异常，当前调用帧所做的所有状态修改都将被回滚。</p>\n<p>2019-09-13更新<br>————————————————————————</p>\n<h1 id=\"六、存储、内存和栈\"><a href=\"#六、存储、内存和栈\" class=\"headerlink\" title=\"六、存储、内存和栈\"></a>六、存储、内存和栈</h1><h2 id=\"6-1-存储\"><a href=\"#6-1-存储\" class=\"headerlink\" title=\"6.1 存储\"></a>6.1 存储</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;每个账户有一块持久化内存区叫做<b>存储</b>。存储是将256位字映射到256位字的键值存储区，在合约中枚举存储是不可能的，且读存储的开销很高，修改存储的开销甚至更高。合约只能读写存储区内属于自己的部分。</p>\n<h2 id=\"6-2-内存\"><a href=\"#6-2-内存\" class=\"headerlink\" title=\"6.2 内存\"></a>6.2 内存</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;第二个内存区称为<b>内存</b>，合约会试图为每一次消息调用获取一块被重新擦拭干净的内存示例。内存是线性的，可以按照字节寻址，但读的长度被限制在256位，而写的长度可以是8位或256位。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当访问（无论是读还是写）之前从未访问过的内存字（word）时（无论是偏移到该字内的任何位置），内存将按字进行扩展（每个字是256位）。扩容也将消耗一定的gas。 随着内存使用量的增长，其费用也会增高（以平方级别）。</p>\n<h2 id=\"6-3-栈\"><a href=\"#6-3-栈\" class=\"headerlink\" title=\"6.3 栈\"></a>6.3 栈</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM不是基于寄存器的，而是基于栈的，因此所有的计算都在一个称为 <b>栈</b>。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;栈最大有1024个元素，每个元素的长度为一个字（256位），对栈的访问仅限于顶端，限制方式为允许拷贝最顶端的16个元素中的一个到栈顶，或者是栈顶元素和下面的16个元素中的一个进行交换。所有其他操作都只能取最顶的2个（或1个，或更多，取决于具体的操作）元素，运算后，把结果压入栈顶。当然可以把栈上的元素放到存储或内存中。但是无法只访问栈上指定深度的那个元素，除非先从栈顶移除其他元素。</p>\n<h1 id=\"七、指令集\"><a href=\"#七、指令集\" class=\"headerlink\" title=\"七、指令集\"></a>七、指令集</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EVM的指令集量应尽量少，以最大限度地避免可能导致共识问题的错误实现。所有的指令都是针对”256位的字（word）”这个基本的数据类型来进行操作。具备常用的算术、位、逻辑和比较操作。也可以做到有条件和无条件跳转。此外，合约可以访问当前区块的相关属性，比如它的编号和时间戳。</p>\n<h1 id=\"八、消息调用\"><a href=\"#八、消息调用\" class=\"headerlink\" title=\"八、消息调用\"></a>八、消息调用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以通过消息调用的方式来调用其它合约或者发送以太币到非合约账户。消息调用和交易非常类似，它们都有一个源、目标、数据、以太币、gas和返回数据。事实上每个交易都由一个顶层消息调用组成，这个消息调用又可创建更多的消息调用。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约可以决定在其内部的消息调用中，对于剩余的 gas ，应发送和保留多少。如果在内部消息调用时发生了out-of-gas异常（或其他任何异常），这将由一个被压入栈顶的错误值所指明。此时，只有与该内部消息调用一起发送的gas会被消耗掉。并且，Solidity中，发起调用的合约默认会触发一个手工的异常，以便异常可以从调用栈里“冒泡出来”。 如前文所述，被调用的合约（可以和调用者是同一个合约）会获得一块刚刚清空过的内存，并可以访问调用的payload——由被称为 calldata 的独立区域所提供的数据。调用执行结束后，返回数据将被存放在调用方预先分配好的一块内存中。 调用深度被 限制 为 1024 ，因此对于更加复杂的操作，我们应使用循环而不是递归。</p>\n<h1 id=\"九、委托调用-代码调用和库\"><a href=\"#九、委托调用-代码调用和库\" class=\"headerlink\" title=\"九、委托调用/代码调用和库\"></a>九、委托调用/代码调用和库</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊类型的消息调用，被称为 <b>委托调用(delegatecall) </b>。它和一般的消息调用的区别在于，目标地址的代码将在发起调用的合约的上下文中执行，并且 <b>msg.sender</b> 和 <b>msg.value</b> 不变。 这意味着一个合约可以在运行时从另外一个地址动态加载代码。存储、当前地址和余额都指向发起调用的合约，只有代码是从被调用地址获取的。 这使得 Solidity 可以实现”库“能力：可复用的代码库可以放在一个合约的存储上，如用来实现复杂的数据结构的库。</p>\n<h1 id=\"十、日志\"><a href=\"#十、日志\" class=\"headerlink\" title=\"十、日志\"></a>十、日志</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;有一种特殊的可索引的数据结构，其存储的数据可以一路映射直到区块层级。这个特性被称为 日志(logs) ，Solidity用它来实现 <b>事件(events)</b> 。合约创建之后就无法访问日志数据，但是这些数据可以从区块链外高效的访问。因为部分日志数据被存储在 <font color=\"#0099ff\"><b><a><a href=\"https://en.wikipedia.org/wiki/Bloom_filter\" target=\"_blank\" rel=\"noopener\">布隆过滤器(Bloom filter)</a></a></b></font> 中，我们可以高效并且加密安全地搜索日志，所以那些没有下载整个区块链的网络节点（轻客户端）也可以找到这些日志。</p>\n<h1 id=\"十一、合约创建\"><a href=\"#十一、合约创建\" class=\"headerlink\" title=\"十一、合约创建\"></a>十一、合约创建</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约甚至可以通过一个特殊的指令来创建其他合约（不是简单的调用零地址）。创建合约的调用 create calls 和普通消息调用的唯一区别在于，负载会被执行，执行的结果被存储为合约代码，调用者/创建者在栈上得到新合约的地址。</p>\n<h1 id=\"十二、失效和自毁\"><a href=\"#十二、失效和自毁\" class=\"headerlink\" title=\"十二、失效和自毁\"></a>十二、失效和自毁</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;合约代码从区块链上移除的唯一方式是合约在合约地址上执行自毁操作 <b>selfdestruct</b> 。合约账户上剩余的以太币会发送给指定的目标，然后其存储和代码从状态中被移除。移除一个合约听上去不错，但其实有潜在的危险，如果有人发送以太币到移除的合约，这些以太币将永远提丢失。</p>\n<blockquote>\n<p>*注释</p>\n<blockquote>\n<p>尽管一个合约的代码中没有显式地调用 <font color=\"#0099ff\">selfdestruct</font> ，它仍然有可能通过 <font color=\"#0099ff\">delegatecall</font> 或 <font color=\"#0099ff\">callcode</font> 执行自毁操作。</p>\n</blockquote>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果要使合同失效，则应通过更改内部状态来禁用合约，这样可以在使用函数无法执行从而进行 revert，从而达到返还以太的目的。</p>\n<blockquote>\n<p>*注释</p>\n<blockquote>\n<p>旧合约的删减可能会，也可能不会被以太坊的各种客户端程序实现。另外，归档节点可选择无限期保留合约存储和代码。<br>目前，<b>外部账户</b> 不能从状态中移除。</p>\n</blockquote>\n</blockquote>\n<hr>\n<p>当你累了的时候，停下来做个梦吧。<br>愿你坚持到底。</p>"},{"title":"公链如此多，而应用却寥寥无几","date":"2019-08-04T01:47:24.000Z","_content":"\n现在很多公司都在开发自己的公链，真正应用落地的很少，其中包括IBM开源，贡献给Linux基金会的HyperLedger，另一个就是以太坊了。\n\n<!-- more -->\n\n下面来看看为什么？\n![Ethereum Coin](公链如此多，而应用却寥寥无几/pexels-photo-730552.jpeg)\n\n现在很多公司都在开发自己的公链。创业团队在开发公链，一些加密数字货币交易所也在开发公链。我曾经见过一个由三个年轻人组成的创业团队，不仅开发了自己的公链，而且还提出了一个新的共识算法。但目前的公链市场却出现了一个非常尴尬的局面，一方面是公链产品无穷多，但另外一方面却是公链落地的项目寥寥无几。显然在区块链产品落地应用方面，出现了明显的脱节。当然任何一个新技术的落地应用都需要一段时间。对于区块链技术这个从根本上改变现有的以中心化技术为基础的计算模式的新技术来说，其应用落地的时间就更长。但在目前的公链产品落地应用的过程中，还是有些方面可以改进，以此来加速公链技术应用落地的。在当前的社会中，其实不缺区块链应用的落地场景。市场中的很多问题实际上都能应用区块链能得到非常好的解决。区块链技术的最强项是采用完全信息真实透明的方式杜绝欺诈，是用技术的方式保证多方的合作顺利完成。如果从这个角度看，现实中太多的问题都可以用区块链来解决了。譬如个人借贷的违约方面。违约者的一个主要动机就是因为违约成本非常低。他可以欺诈了一个出借方之后，再去欺诈另外一个欺诈方。但是如果每个人的信贷记录都真实无误地记录在公链上，任何个人和机构都能查到这个借贷记录，那么借贷者进行欺诈动机就小多了。对于一直没有被现有的金融机构服务到的客户来说，如果其在金融机构之外的各种借贷记录都真实无误的记录在区块链上，那么他个人的信用历史就是真实可信的。金融机构就可以基于这个信用向其进行贷款，因为在这个过程中，征信的成本几乎为零，而征信成本过高正是金融机构不愿意进行贷款的一个原因。在公司的层面，同样存在着大量的可以应用区块链技术的地方，譬如贸易金融和银团的联合贷款。在证券领域，区块链技术除了在交易后清算之外，另外一个最直接的应用就是投行项目的融资过程。由于上市的收获巨大，所以在这个过程中，各个参与者在各个融资阶段铤而走险进行欺诈的案例屡见不鲜。在这个过程中的一个主要欺诈方面就是信息作假。如果采用区块链技术来管理这个流程，每个参与者都需要为自己上传到链上的信息负责，那么每个参与者作假的动机就会大幅减小。即使有人铤而走险进行造假，那么此后的法律诉讼过程中的取证就非常容易，也就容易形成及时公正的判决。那么为什么现实中有这么多的需求，但于此同时基于区块的应用却为什么这么少？在这个方面既有产品通常规律中犯错的地方，也有区块链技术应用的具体问题。\n\n## 1、产品同市场的需求不匹配\n\n首先，造成这种局面的原因主要还是产品与市场需求的不匹配，也就是缺少 Product Market Fit. 一些区块链技术的开发方专注于解决区块链技术本身的问题，而忽略了解决其技术应该解决的市场中的问题。一些公链项目总是在宣扬自己的产品的性能如何好，能达到多少的 TPS。但这个卖点本身就是错误的定位。首先，一个企业级技术产品的衡量指标不只是性能，而且还有稳定性、安全性、权限控制等其他方面。其次，市场中对区块链技术的评价，首先会把它同相应的中心化解决方案相比较。在性能方面，基于区块链的解决方案绝对无法同基于中心化技术的解决方案相比的。所以一味地强调性能根本无法说服市场来接受这个产品。区块链技术最擅长的解决是多方合作中的信任问题。而在现实的场景中，很多这种场景是不需要高性能的。譬如贸易金融的合作过程，又譬如企业融资过程中的各类机构合作的过程。这些过程更注重于性能以外的其他因素，如信息的一致性、权限控制和使用的便捷性等等。如果公链一味地追求性能，那么它就同市场中的真正需求南辕北辙了。\n\n## 2、高度竞争的领域\n\n公链产品定位的另外一个主要错误是在开发一个同以太坊相竞争的普适的公链。但这样的产品定位，其成功的可能性极小。以太坊的问题很多，这是众所周知的。但它已经是经过几年的发展，已经基本上成为市场中默认的公链选择。现在希望取代以太坊的公链创业项目太多了。在这样的高度竞争的环境中，胜出的几率是非常小的。在这个方面，很多公链团队都做出了错误的选择。选择加入到了一个高度竞争的领域。这恰恰违背了一个产品开发的基本规律，就是避开竞争。记得彼得•蒂尔的建议避开竞争的观点吗？避开竞争的一个有效手段就是采用创新的方式来解决市场中的一个问题。因为创新一开始是并不为市场接受，所以并没有太多的竞争者做同样的事情。当创新的方式逐渐为市场接受时，这个创新产品在市场中已经占据稳定的地位了。别的团队就无法再做同样的产品进行竞争。在这个方面，中本聪发明的比特币就是此方面的最好的代表。中本聪的初衷是发行一个电子现金来取代市场中的货币。但是他并没有以直接同现有货币竞争的方式发行一种货币。比特币的金融属性直到多年以后才被市场发现，拥有了众多的用户，并开始对现有的金融市场形成了巨大的挑战。尽管后来也持续不断的有模仿者，但这些模仿者都已经无法对比特币的地位形成挑战了。\n\n## 3、改变群体行为的困难\n\n区块链技术本身的特点也决定它比其它的产品更难被市场接受。这是因为它需要改变的是一个群体行为，而不是一个个体行为。譬如在多方合作的过程中，如果只有一方愿意采用基于区块链的解决方案，但其他它方没有动力的情况下，这个解决方案就没法推动。特别是当其中的一些参与方本来的想法就是利用信息的不透明来为自己谋利。那么如何才能实现区块链技术的快速落地应用呢？首先我认为从技术的角度来切入市场没问题，但更应该从需求的角度来切入市场，也就是说从市场中的一个具体的问题出发，来分析如何用区块链技术来解决这个问题。鉴于目前市场中互不信任和欺诈行为的普遍存在，所以找到这样的场景并不困难。其次才是自己开发或在市场中找到合适的区块链底层来进一步开发。而这样的区块链技术底层并不一定需要各项技术指标方面都十全十美。它只要能对针对需要解决的问题能够令人满意的解决就可以了。看一看目前的国内市场，获得市场欢迎和资本支持的一些成功的区块链项目并不是基于什么技术性能特别好的公链项目，实际上这些项目是利用的只是区块链技术最基本的分布式存储和不可更改的功能。但是这些技术底层为需要解决的问题提供了足够好的技术方案，这就足以创造很好的商业价值了。其次就是不要挑战以中心化技术为基础的现有实力最强的地方。这些领域如零售支付、稳定币、证券和银行领域中的清算。在这些领域中采用区块链技术，产生的收益未必足够大，但遇到的风险和阻力却会非常大，因此在这些领域中应用区块链技术需要非常慎重。第三，一定要用创新的方式解决现有的问题。在这方面，比特币是最优秀的典范。在现有的很多问题中，由于技术、监管、经营习惯和、成本、应用落地所需的时间和风险等方面的考虑，行业中现有的参与者们并没有很强的动力去采用区块链技术、区块链技术的应用一定要找到非常创新，容易被市场接受的地方。尽管这个初始应用的市场并不大，但只要是此方面应用的商业和技术模式具有很强的可扩展性，并且是针对潜在的巨大市场，只要项目方做好商业和技术方面的顶层设计（见我的相关文章区块链时代的顶层设计）；另外，再由于这种创新方式不一定被广泛认可，因此也不会迅速地吸引竞争者，这个方式因此就有足够的时间逐步发展起来。等到市场的各方终于发现这种创新模式的价值的时候，同它的竞争和对它的打压都已经来不及了。这就是在本质上重新复制了比特币的成功模式。\n\n本文摘抄自链接：<https://www.jianshu.com/p/58f4cce02e3f>","source":"_posts/公链如此多，而应用却寥寥无几.md","raw":"---\ntitle: 公链如此多，而应用却寥寥无几\ndate: 2019-08-04 09:47:24\ntags: [区块链,公链,区块链应用]\ncategories: 区块链\n---\n\n现在很多公司都在开发自己的公链，真正应用落地的很少，其中包括IBM开源，贡献给Linux基金会的HyperLedger，另一个就是以太坊了。\n\n<!-- more -->\n\n下面来看看为什么？\n![Ethereum Coin](公链如此多，而应用却寥寥无几/pexels-photo-730552.jpeg)\n\n现在很多公司都在开发自己的公链。创业团队在开发公链，一些加密数字货币交易所也在开发公链。我曾经见过一个由三个年轻人组成的创业团队，不仅开发了自己的公链，而且还提出了一个新的共识算法。但目前的公链市场却出现了一个非常尴尬的局面，一方面是公链产品无穷多，但另外一方面却是公链落地的项目寥寥无几。显然在区块链产品落地应用方面，出现了明显的脱节。当然任何一个新技术的落地应用都需要一段时间。对于区块链技术这个从根本上改变现有的以中心化技术为基础的计算模式的新技术来说，其应用落地的时间就更长。但在目前的公链产品落地应用的过程中，还是有些方面可以改进，以此来加速公链技术应用落地的。在当前的社会中，其实不缺区块链应用的落地场景。市场中的很多问题实际上都能应用区块链能得到非常好的解决。区块链技术的最强项是采用完全信息真实透明的方式杜绝欺诈，是用技术的方式保证多方的合作顺利完成。如果从这个角度看，现实中太多的问题都可以用区块链来解决了。譬如个人借贷的违约方面。违约者的一个主要动机就是因为违约成本非常低。他可以欺诈了一个出借方之后，再去欺诈另外一个欺诈方。但是如果每个人的信贷记录都真实无误地记录在公链上，任何个人和机构都能查到这个借贷记录，那么借贷者进行欺诈动机就小多了。对于一直没有被现有的金融机构服务到的客户来说，如果其在金融机构之外的各种借贷记录都真实无误的记录在区块链上，那么他个人的信用历史就是真实可信的。金融机构就可以基于这个信用向其进行贷款，因为在这个过程中，征信的成本几乎为零，而征信成本过高正是金融机构不愿意进行贷款的一个原因。在公司的层面，同样存在着大量的可以应用区块链技术的地方，譬如贸易金融和银团的联合贷款。在证券领域，区块链技术除了在交易后清算之外，另外一个最直接的应用就是投行项目的融资过程。由于上市的收获巨大，所以在这个过程中，各个参与者在各个融资阶段铤而走险进行欺诈的案例屡见不鲜。在这个过程中的一个主要欺诈方面就是信息作假。如果采用区块链技术来管理这个流程，每个参与者都需要为自己上传到链上的信息负责，那么每个参与者作假的动机就会大幅减小。即使有人铤而走险进行造假，那么此后的法律诉讼过程中的取证就非常容易，也就容易形成及时公正的判决。那么为什么现实中有这么多的需求，但于此同时基于区块的应用却为什么这么少？在这个方面既有产品通常规律中犯错的地方，也有区块链技术应用的具体问题。\n\n## 1、产品同市场的需求不匹配\n\n首先，造成这种局面的原因主要还是产品与市场需求的不匹配，也就是缺少 Product Market Fit. 一些区块链技术的开发方专注于解决区块链技术本身的问题，而忽略了解决其技术应该解决的市场中的问题。一些公链项目总是在宣扬自己的产品的性能如何好，能达到多少的 TPS。但这个卖点本身就是错误的定位。首先，一个企业级技术产品的衡量指标不只是性能，而且还有稳定性、安全性、权限控制等其他方面。其次，市场中对区块链技术的评价，首先会把它同相应的中心化解决方案相比较。在性能方面，基于区块链的解决方案绝对无法同基于中心化技术的解决方案相比的。所以一味地强调性能根本无法说服市场来接受这个产品。区块链技术最擅长的解决是多方合作中的信任问题。而在现实的场景中，很多这种场景是不需要高性能的。譬如贸易金融的合作过程，又譬如企业融资过程中的各类机构合作的过程。这些过程更注重于性能以外的其他因素，如信息的一致性、权限控制和使用的便捷性等等。如果公链一味地追求性能，那么它就同市场中的真正需求南辕北辙了。\n\n## 2、高度竞争的领域\n\n公链产品定位的另外一个主要错误是在开发一个同以太坊相竞争的普适的公链。但这样的产品定位，其成功的可能性极小。以太坊的问题很多，这是众所周知的。但它已经是经过几年的发展，已经基本上成为市场中默认的公链选择。现在希望取代以太坊的公链创业项目太多了。在这样的高度竞争的环境中，胜出的几率是非常小的。在这个方面，很多公链团队都做出了错误的选择。选择加入到了一个高度竞争的领域。这恰恰违背了一个产品开发的基本规律，就是避开竞争。记得彼得•蒂尔的建议避开竞争的观点吗？避开竞争的一个有效手段就是采用创新的方式来解决市场中的一个问题。因为创新一开始是并不为市场接受，所以并没有太多的竞争者做同样的事情。当创新的方式逐渐为市场接受时，这个创新产品在市场中已经占据稳定的地位了。别的团队就无法再做同样的产品进行竞争。在这个方面，中本聪发明的比特币就是此方面的最好的代表。中本聪的初衷是发行一个电子现金来取代市场中的货币。但是他并没有以直接同现有货币竞争的方式发行一种货币。比特币的金融属性直到多年以后才被市场发现，拥有了众多的用户，并开始对现有的金融市场形成了巨大的挑战。尽管后来也持续不断的有模仿者，但这些模仿者都已经无法对比特币的地位形成挑战了。\n\n## 3、改变群体行为的困难\n\n区块链技术本身的特点也决定它比其它的产品更难被市场接受。这是因为它需要改变的是一个群体行为，而不是一个个体行为。譬如在多方合作的过程中，如果只有一方愿意采用基于区块链的解决方案，但其他它方没有动力的情况下，这个解决方案就没法推动。特别是当其中的一些参与方本来的想法就是利用信息的不透明来为自己谋利。那么如何才能实现区块链技术的快速落地应用呢？首先我认为从技术的角度来切入市场没问题，但更应该从需求的角度来切入市场，也就是说从市场中的一个具体的问题出发，来分析如何用区块链技术来解决这个问题。鉴于目前市场中互不信任和欺诈行为的普遍存在，所以找到这样的场景并不困难。其次才是自己开发或在市场中找到合适的区块链底层来进一步开发。而这样的区块链技术底层并不一定需要各项技术指标方面都十全十美。它只要能对针对需要解决的问题能够令人满意的解决就可以了。看一看目前的国内市场，获得市场欢迎和资本支持的一些成功的区块链项目并不是基于什么技术性能特别好的公链项目，实际上这些项目是利用的只是区块链技术最基本的分布式存储和不可更改的功能。但是这些技术底层为需要解决的问题提供了足够好的技术方案，这就足以创造很好的商业价值了。其次就是不要挑战以中心化技术为基础的现有实力最强的地方。这些领域如零售支付、稳定币、证券和银行领域中的清算。在这些领域中采用区块链技术，产生的收益未必足够大，但遇到的风险和阻力却会非常大，因此在这些领域中应用区块链技术需要非常慎重。第三，一定要用创新的方式解决现有的问题。在这方面，比特币是最优秀的典范。在现有的很多问题中，由于技术、监管、经营习惯和、成本、应用落地所需的时间和风险等方面的考虑，行业中现有的参与者们并没有很强的动力去采用区块链技术、区块链技术的应用一定要找到非常创新，容易被市场接受的地方。尽管这个初始应用的市场并不大，但只要是此方面应用的商业和技术模式具有很强的可扩展性，并且是针对潜在的巨大市场，只要项目方做好商业和技术方面的顶层设计（见我的相关文章区块链时代的顶层设计）；另外，再由于这种创新方式不一定被广泛认可，因此也不会迅速地吸引竞争者，这个方式因此就有足够的时间逐步发展起来。等到市场的各方终于发现这种创新模式的价值的时候，同它的竞争和对它的打压都已经来不及了。这就是在本质上重新复制了比特币的成功模式。\n\n本文摘抄自链接：<https://www.jianshu.com/p/58f4cce02e3f>","slug":"公链如此多，而应用却寥寥无几","published":1,"updated":"2019-08-04T02:04:48.967Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0sl002kfbs6zanhuqif","content":"<p>现在很多公司都在开发自己的公链，真正应用落地的很少，其中包括IBM开源，贡献给Linux基金会的HyperLedger，另一个就是以太坊了。</p>\n<a id=\"more\"></a>\n\n<p>下面来看看为什么？<br><img src=\"/2019/08/04/公链如此多，而应用却寥寥无几/pexels-photo-730552.jpeg\" alt=\"Ethereum Coin\"></p>\n<p>现在很多公司都在开发自己的公链。创业团队在开发公链，一些加密数字货币交易所也在开发公链。我曾经见过一个由三个年轻人组成的创业团队，不仅开发了自己的公链，而且还提出了一个新的共识算法。但目前的公链市场却出现了一个非常尴尬的局面，一方面是公链产品无穷多，但另外一方面却是公链落地的项目寥寥无几。显然在区块链产品落地应用方面，出现了明显的脱节。当然任何一个新技术的落地应用都需要一段时间。对于区块链技术这个从根本上改变现有的以中心化技术为基础的计算模式的新技术来说，其应用落地的时间就更长。但在目前的公链产品落地应用的过程中，还是有些方面可以改进，以此来加速公链技术应用落地的。在当前的社会中，其实不缺区块链应用的落地场景。市场中的很多问题实际上都能应用区块链能得到非常好的解决。区块链技术的最强项是采用完全信息真实透明的方式杜绝欺诈，是用技术的方式保证多方的合作顺利完成。如果从这个角度看，现实中太多的问题都可以用区块链来解决了。譬如个人借贷的违约方面。违约者的一个主要动机就是因为违约成本非常低。他可以欺诈了一个出借方之后，再去欺诈另外一个欺诈方。但是如果每个人的信贷记录都真实无误地记录在公链上，任何个人和机构都能查到这个借贷记录，那么借贷者进行欺诈动机就小多了。对于一直没有被现有的金融机构服务到的客户来说，如果其在金融机构之外的各种借贷记录都真实无误的记录在区块链上，那么他个人的信用历史就是真实可信的。金融机构就可以基于这个信用向其进行贷款，因为在这个过程中，征信的成本几乎为零，而征信成本过高正是金融机构不愿意进行贷款的一个原因。在公司的层面，同样存在着大量的可以应用区块链技术的地方，譬如贸易金融和银团的联合贷款。在证券领域，区块链技术除了在交易后清算之外，另外一个最直接的应用就是投行项目的融资过程。由于上市的收获巨大，所以在这个过程中，各个参与者在各个融资阶段铤而走险进行欺诈的案例屡见不鲜。在这个过程中的一个主要欺诈方面就是信息作假。如果采用区块链技术来管理这个流程，每个参与者都需要为自己上传到链上的信息负责，那么每个参与者作假的动机就会大幅减小。即使有人铤而走险进行造假，那么此后的法律诉讼过程中的取证就非常容易，也就容易形成及时公正的判决。那么为什么现实中有这么多的需求，但于此同时基于区块的应用却为什么这么少？在这个方面既有产品通常规律中犯错的地方，也有区块链技术应用的具体问题。</p>\n<h2 id=\"1、产品同市场的需求不匹配\"><a href=\"#1、产品同市场的需求不匹配\" class=\"headerlink\" title=\"1、产品同市场的需求不匹配\"></a>1、产品同市场的需求不匹配</h2><p>首先，造成这种局面的原因主要还是产品与市场需求的不匹配，也就是缺少 Product Market Fit. 一些区块链技术的开发方专注于解决区块链技术本身的问题，而忽略了解决其技术应该解决的市场中的问题。一些公链项目总是在宣扬自己的产品的性能如何好，能达到多少的 TPS。但这个卖点本身就是错误的定位。首先，一个企业级技术产品的衡量指标不只是性能，而且还有稳定性、安全性、权限控制等其他方面。其次，市场中对区块链技术的评价，首先会把它同相应的中心化解决方案相比较。在性能方面，基于区块链的解决方案绝对无法同基于中心化技术的解决方案相比的。所以一味地强调性能根本无法说服市场来接受这个产品。区块链技术最擅长的解决是多方合作中的信任问题。而在现实的场景中，很多这种场景是不需要高性能的。譬如贸易金融的合作过程，又譬如企业融资过程中的各类机构合作的过程。这些过程更注重于性能以外的其他因素，如信息的一致性、权限控制和使用的便捷性等等。如果公链一味地追求性能，那么它就同市场中的真正需求南辕北辙了。</p>\n<h2 id=\"2、高度竞争的领域\"><a href=\"#2、高度竞争的领域\" class=\"headerlink\" title=\"2、高度竞争的领域\"></a>2、高度竞争的领域</h2><p>公链产品定位的另外一个主要错误是在开发一个同以太坊相竞争的普适的公链。但这样的产品定位，其成功的可能性极小。以太坊的问题很多，这是众所周知的。但它已经是经过几年的发展，已经基本上成为市场中默认的公链选择。现在希望取代以太坊的公链创业项目太多了。在这样的高度竞争的环境中，胜出的几率是非常小的。在这个方面，很多公链团队都做出了错误的选择。选择加入到了一个高度竞争的领域。这恰恰违背了一个产品开发的基本规律，就是避开竞争。记得彼得•蒂尔的建议避开竞争的观点吗？避开竞争的一个有效手段就是采用创新的方式来解决市场中的一个问题。因为创新一开始是并不为市场接受，所以并没有太多的竞争者做同样的事情。当创新的方式逐渐为市场接受时，这个创新产品在市场中已经占据稳定的地位了。别的团队就无法再做同样的产品进行竞争。在这个方面，中本聪发明的比特币就是此方面的最好的代表。中本聪的初衷是发行一个电子现金来取代市场中的货币。但是他并没有以直接同现有货币竞争的方式发行一种货币。比特币的金融属性直到多年以后才被市场发现，拥有了众多的用户，并开始对现有的金融市场形成了巨大的挑战。尽管后来也持续不断的有模仿者，但这些模仿者都已经无法对比特币的地位形成挑战了。</p>\n<h2 id=\"3、改变群体行为的困难\"><a href=\"#3、改变群体行为的困难\" class=\"headerlink\" title=\"3、改变群体行为的困难\"></a>3、改变群体行为的困难</h2><p>区块链技术本身的特点也决定它比其它的产品更难被市场接受。这是因为它需要改变的是一个群体行为，而不是一个个体行为。譬如在多方合作的过程中，如果只有一方愿意采用基于区块链的解决方案，但其他它方没有动力的情况下，这个解决方案就没法推动。特别是当其中的一些参与方本来的想法就是利用信息的不透明来为自己谋利。那么如何才能实现区块链技术的快速落地应用呢？首先我认为从技术的角度来切入市场没问题，但更应该从需求的角度来切入市场，也就是说从市场中的一个具体的问题出发，来分析如何用区块链技术来解决这个问题。鉴于目前市场中互不信任和欺诈行为的普遍存在，所以找到这样的场景并不困难。其次才是自己开发或在市场中找到合适的区块链底层来进一步开发。而这样的区块链技术底层并不一定需要各项技术指标方面都十全十美。它只要能对针对需要解决的问题能够令人满意的解决就可以了。看一看目前的国内市场，获得市场欢迎和资本支持的一些成功的区块链项目并不是基于什么技术性能特别好的公链项目，实际上这些项目是利用的只是区块链技术最基本的分布式存储和不可更改的功能。但是这些技术底层为需要解决的问题提供了足够好的技术方案，这就足以创造很好的商业价值了。其次就是不要挑战以中心化技术为基础的现有实力最强的地方。这些领域如零售支付、稳定币、证券和银行领域中的清算。在这些领域中采用区块链技术，产生的收益未必足够大，但遇到的风险和阻力却会非常大，因此在这些领域中应用区块链技术需要非常慎重。第三，一定要用创新的方式解决现有的问题。在这方面，比特币是最优秀的典范。在现有的很多问题中，由于技术、监管、经营习惯和、成本、应用落地所需的时间和风险等方面的考虑，行业中现有的参与者们并没有很强的动力去采用区块链技术、区块链技术的应用一定要找到非常创新，容易被市场接受的地方。尽管这个初始应用的市场并不大，但只要是此方面应用的商业和技术模式具有很强的可扩展性，并且是针对潜在的巨大市场，只要项目方做好商业和技术方面的顶层设计（见我的相关文章区块链时代的顶层设计）；另外，再由于这种创新方式不一定被广泛认可，因此也不会迅速地吸引竞争者，这个方式因此就有足够的时间逐步发展起来。等到市场的各方终于发现这种创新模式的价值的时候，同它的竞争和对它的打压都已经来不及了。这就是在本质上重新复制了比特币的成功模式。</p>\n<p>本文摘抄自链接：<a href=\"https://www.jianshu.com/p/58f4cce02e3f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/58f4cce02e3f</a></p>\n","site":{"data":{}},"excerpt":"<p>现在很多公司都在开发自己的公链，真正应用落地的很少，其中包括IBM开源，贡献给Linux基金会的HyperLedger，另一个就是以太坊了。</p>","more":"<p>下面来看看为什么？<br><img src=\"/2019/08/04/公链如此多，而应用却寥寥无几/pexels-photo-730552.jpeg\" alt=\"Ethereum Coin\"></p>\n<p>现在很多公司都在开发自己的公链。创业团队在开发公链，一些加密数字货币交易所也在开发公链。我曾经见过一个由三个年轻人组成的创业团队，不仅开发了自己的公链，而且还提出了一个新的共识算法。但目前的公链市场却出现了一个非常尴尬的局面，一方面是公链产品无穷多，但另外一方面却是公链落地的项目寥寥无几。显然在区块链产品落地应用方面，出现了明显的脱节。当然任何一个新技术的落地应用都需要一段时间。对于区块链技术这个从根本上改变现有的以中心化技术为基础的计算模式的新技术来说，其应用落地的时间就更长。但在目前的公链产品落地应用的过程中，还是有些方面可以改进，以此来加速公链技术应用落地的。在当前的社会中，其实不缺区块链应用的落地场景。市场中的很多问题实际上都能应用区块链能得到非常好的解决。区块链技术的最强项是采用完全信息真实透明的方式杜绝欺诈，是用技术的方式保证多方的合作顺利完成。如果从这个角度看，现实中太多的问题都可以用区块链来解决了。譬如个人借贷的违约方面。违约者的一个主要动机就是因为违约成本非常低。他可以欺诈了一个出借方之后，再去欺诈另外一个欺诈方。但是如果每个人的信贷记录都真实无误地记录在公链上，任何个人和机构都能查到这个借贷记录，那么借贷者进行欺诈动机就小多了。对于一直没有被现有的金融机构服务到的客户来说，如果其在金融机构之外的各种借贷记录都真实无误的记录在区块链上，那么他个人的信用历史就是真实可信的。金融机构就可以基于这个信用向其进行贷款，因为在这个过程中，征信的成本几乎为零，而征信成本过高正是金融机构不愿意进行贷款的一个原因。在公司的层面，同样存在着大量的可以应用区块链技术的地方，譬如贸易金融和银团的联合贷款。在证券领域，区块链技术除了在交易后清算之外，另外一个最直接的应用就是投行项目的融资过程。由于上市的收获巨大，所以在这个过程中，各个参与者在各个融资阶段铤而走险进行欺诈的案例屡见不鲜。在这个过程中的一个主要欺诈方面就是信息作假。如果采用区块链技术来管理这个流程，每个参与者都需要为自己上传到链上的信息负责，那么每个参与者作假的动机就会大幅减小。即使有人铤而走险进行造假，那么此后的法律诉讼过程中的取证就非常容易，也就容易形成及时公正的判决。那么为什么现实中有这么多的需求，但于此同时基于区块的应用却为什么这么少？在这个方面既有产品通常规律中犯错的地方，也有区块链技术应用的具体问题。</p>\n<h2 id=\"1、产品同市场的需求不匹配\"><a href=\"#1、产品同市场的需求不匹配\" class=\"headerlink\" title=\"1、产品同市场的需求不匹配\"></a>1、产品同市场的需求不匹配</h2><p>首先，造成这种局面的原因主要还是产品与市场需求的不匹配，也就是缺少 Product Market Fit. 一些区块链技术的开发方专注于解决区块链技术本身的问题，而忽略了解决其技术应该解决的市场中的问题。一些公链项目总是在宣扬自己的产品的性能如何好，能达到多少的 TPS。但这个卖点本身就是错误的定位。首先，一个企业级技术产品的衡量指标不只是性能，而且还有稳定性、安全性、权限控制等其他方面。其次，市场中对区块链技术的评价，首先会把它同相应的中心化解决方案相比较。在性能方面，基于区块链的解决方案绝对无法同基于中心化技术的解决方案相比的。所以一味地强调性能根本无法说服市场来接受这个产品。区块链技术最擅长的解决是多方合作中的信任问题。而在现实的场景中，很多这种场景是不需要高性能的。譬如贸易金融的合作过程，又譬如企业融资过程中的各类机构合作的过程。这些过程更注重于性能以外的其他因素，如信息的一致性、权限控制和使用的便捷性等等。如果公链一味地追求性能，那么它就同市场中的真正需求南辕北辙了。</p>\n<h2 id=\"2、高度竞争的领域\"><a href=\"#2、高度竞争的领域\" class=\"headerlink\" title=\"2、高度竞争的领域\"></a>2、高度竞争的领域</h2><p>公链产品定位的另外一个主要错误是在开发一个同以太坊相竞争的普适的公链。但这样的产品定位，其成功的可能性极小。以太坊的问题很多，这是众所周知的。但它已经是经过几年的发展，已经基本上成为市场中默认的公链选择。现在希望取代以太坊的公链创业项目太多了。在这样的高度竞争的环境中，胜出的几率是非常小的。在这个方面，很多公链团队都做出了错误的选择。选择加入到了一个高度竞争的领域。这恰恰违背了一个产品开发的基本规律，就是避开竞争。记得彼得•蒂尔的建议避开竞争的观点吗？避开竞争的一个有效手段就是采用创新的方式来解决市场中的一个问题。因为创新一开始是并不为市场接受，所以并没有太多的竞争者做同样的事情。当创新的方式逐渐为市场接受时，这个创新产品在市场中已经占据稳定的地位了。别的团队就无法再做同样的产品进行竞争。在这个方面，中本聪发明的比特币就是此方面的最好的代表。中本聪的初衷是发行一个电子现金来取代市场中的货币。但是他并没有以直接同现有货币竞争的方式发行一种货币。比特币的金融属性直到多年以后才被市场发现，拥有了众多的用户，并开始对现有的金融市场形成了巨大的挑战。尽管后来也持续不断的有模仿者，但这些模仿者都已经无法对比特币的地位形成挑战了。</p>\n<h2 id=\"3、改变群体行为的困难\"><a href=\"#3、改变群体行为的困难\" class=\"headerlink\" title=\"3、改变群体行为的困难\"></a>3、改变群体行为的困难</h2><p>区块链技术本身的特点也决定它比其它的产品更难被市场接受。这是因为它需要改变的是一个群体行为，而不是一个个体行为。譬如在多方合作的过程中，如果只有一方愿意采用基于区块链的解决方案，但其他它方没有动力的情况下，这个解决方案就没法推动。特别是当其中的一些参与方本来的想法就是利用信息的不透明来为自己谋利。那么如何才能实现区块链技术的快速落地应用呢？首先我认为从技术的角度来切入市场没问题，但更应该从需求的角度来切入市场，也就是说从市场中的一个具体的问题出发，来分析如何用区块链技术来解决这个问题。鉴于目前市场中互不信任和欺诈行为的普遍存在，所以找到这样的场景并不困难。其次才是自己开发或在市场中找到合适的区块链底层来进一步开发。而这样的区块链技术底层并不一定需要各项技术指标方面都十全十美。它只要能对针对需要解决的问题能够令人满意的解决就可以了。看一看目前的国内市场，获得市场欢迎和资本支持的一些成功的区块链项目并不是基于什么技术性能特别好的公链项目，实际上这些项目是利用的只是区块链技术最基本的分布式存储和不可更改的功能。但是这些技术底层为需要解决的问题提供了足够好的技术方案，这就足以创造很好的商业价值了。其次就是不要挑战以中心化技术为基础的现有实力最强的地方。这些领域如零售支付、稳定币、证券和银行领域中的清算。在这些领域中采用区块链技术，产生的收益未必足够大，但遇到的风险和阻力却会非常大，因此在这些领域中应用区块链技术需要非常慎重。第三，一定要用创新的方式解决现有的问题。在这方面，比特币是最优秀的典范。在现有的很多问题中，由于技术、监管、经营习惯和、成本、应用落地所需的时间和风险等方面的考虑，行业中现有的参与者们并没有很强的动力去采用区块链技术、区块链技术的应用一定要找到非常创新，容易被市场接受的地方。尽管这个初始应用的市场并不大，但只要是此方面应用的商业和技术模式具有很强的可扩展性，并且是针对潜在的巨大市场，只要项目方做好商业和技术方面的顶层设计（见我的相关文章区块链时代的顶层设计）；另外，再由于这种创新方式不一定被广泛认可，因此也不会迅速地吸引竞争者，这个方式因此就有足够的时间逐步发展起来。等到市场的各方终于发现这种创新模式的价值的时候，同它的竞争和对它的打压都已经来不及了。这就是在本质上重新复制了比特币的成功模式。</p>\n<p>本文摘抄自链接：<a href=\"https://www.jianshu.com/p/58f4cce02e3f\" target=\"_blank\" rel=\"noopener\">https://www.jianshu.com/p/58f4cce02e3f</a></p>"},{"title":"区块链三大公链Dapp平台ETH、EOS、TRON对比","date":"2019-04-27T14:26:58.000Z","_content":"区块链三大公链Dapp平台ETH、EOS、TRON对比，根据创始人经历、平台共识机制、平台发展历程、目前发展现状等方面进行对比，寻找最有可能实现未来去中心化操作系统的平台。\n<!-- more -->\n\n# 一、创始人\n## 1.ETH以太坊创始人：维塔利克·布特林（Vitalik Buterin）\n* 出生日期：1994年1月31日\n* 国籍：俄罗斯裔加拿大人\n* 学历：加拿大滑铁卢大学肄业\n* 区块链经历：\n2012年17岁时从他父亲那里了解了比特币，开始研究比特币、为比特币杂志写文章转比特币稿费，当时出版社给他一篇文章5个比特币；\n2013年18岁时获得奥林匹亚资讯奖铜牌，经常去访问其他国家的比特币社区开发人员，讨论比特币的发展与问题；\n2014年19岁自加拿大滑铁卢大学休学；该年11月，公布《以太坊白皮书》初版，开始募集开发者；\n2015年20岁获得硅谷知名的亿万富翁设立的泰尔奖学金10万美元成立非营利组织以太坊基金会，全职在以太坊工作；在迈阿密的比特币会议公开发表以太坊计画，该年7月，启动以太坊计画众售募资，募得3.1万枚比特币（当时约合1840万美元）\n2016年21岁以太坊最初版本Frontier问世、以太币开始在世界各地交易所公开交易\n2017年22岁被《财星》杂志评选为2016年40岁以下的40大杰出人物\n\n## 2.EOS柚子创始人：丹尼尔·拉里默（Daniel Larimer）\n* 出生日期：未查到\n* 国籍：美国\n* 学历：2003年毕业于佛吉尼亚大学计算机系本科学士学位\n* 区块链经历：\n2009年对比特币感兴趣，开始了解；\n2013年创建BitShares去中心化交易所，是一个拥有钱包, 账本, 交易所, 货币系统，社群与一身的产品，与之对应的是BTS(比特股)虚拟货币的发行，目前市值排名51；\n2016年离开BitShares创建Steem区块链平台和利用区块链技术实现的社交app steemit，该平台可以对用户的创作予以代币奖励；\n项目完成后，2017年7月发布EOS白皮书，提供分散式应用程序托管﹑智能合约功能与分散式储存的企业方案，解决比特币和以太坊等区块链的可扩展性问题，并消除用户的交易费用。成立了Block.One公司并搭建了EOSIO平台，并发行以ERC-20方式发行1亿枚EOS代币\n\n## 3.TRON波场创始人：孙宇晨\n* 出生日期：1990年\n* 国籍：中国\n* 学历：北京大学、宾夕法尼亚大学硕士\n* 区块链经历：\n2013年以前投资比特币，获得二十倍以上收益；\n由于比特币的投资经历，孙宇晨活跃于美国比特币社区，并对加密货币，去中心化清算协议产生了极其浓厚的兴趣。经过长期调查与研究，他对于诞生于加州硅谷的全球第一个分布式清算支付网络协议——Ripple协议产生了极其浓厚的兴趣。\n2013年底加入RippleLabs，成为Ripple协议缔造者与研发者中的一员；\n2014年，他回国创立锐波并兼任CEO，锐波也成为中国首家从事去中心化清算系统产品开发的互联网科技公司；\n2017年，孙宇晨在“世界区块链峰会上”发表《From it to bit》主题演讲，讲述了互联网的发展历史，阐释了web 4.0的观点。7月，随后推出了自己所做的项目：波场TRON，发布波场白皮书，基于区块链的开源去中心化内容娱乐协议，致力于利用区块链与分布式存储技术，构建一个全球范围内的自由内容娱乐体系，这个协议可以让每个用户自由发布，存储，拥有数据，并通过去中心化的自治形式，以数字资产发行，流通，交易方式决定内容的分发、订阅、推送，赋能内容创造者，形成去中心化的内容娱乐生态。\n2018年7月，完成了对于BitTorrent及其旗下所有产品的收购，并将其并入到波场生态中。\n\n# 二、区块链共识机制\n先来介绍下三种共识机制的概念\n## POW：Proof Of Work\n工作量证明机制：通过计算机随机不停地计算得到指定hash值后获得记账权，并将区块链接到区块链上的机制，每个获得记账权的矿工会获得一定的代币，作为记账的奖励，这个过程俗称挖矿。\n\n## POS：Proof Of Stake\n权益证明机制：人们对于POW日趋中心化的算力分布(矿池)心怀忌惮之际，产生了权益证明机制，即对于验证人/节点的奖励，不是通过算力挖矿，而是通过持币而产生利息，这里就要引入一个概念叫做---币龄，币龄=币量x持有天数。这是根据你持有货币的量和时间，给你发利息的一个制度。当你获得了利息以后，你的所有币龄将被清空，你的持币时间将从0重新算起。\n\n## DPOS：Delegated Proof Of Stake\n委托权益证明机制：可以说DPOS是POS共识机制理念的一个变种。先通过选举，产生若干超级节点；后续记账权将以相同概率分配于超级节点中。它有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责(当轮到他们时，没能生成区块)，他们会被除名，网络会选出新的超级节点来取代他们。\nDPOS让每一个持有代币的人都有权利通过投票给验证人的方式行使自己的权利，利用科技的手段实现民主治理。\n\n## 1.ETH\n* 第一阶段，边境（Frontier，2015年7月）\n以太坊的第一次版本发布，允许开发人员对以太坊进行挖矿，并基于以太坊进行 DApp 与工具软件的开发。\n\n* 第二阶段，家园（Homestead，2016年3月）\n发布了第一个生产环境版本，对许多协议进行了优化改进，为之后的升级奠定了基础，并且加快了交易速度。\n\n* 第三阶段，大都会（Metropolis，2017年10月）\n第三阶段分为两次升级，分别命名为拜占庭（Byzantium，2017年10月）和君士坦丁堡（Constantinople，2019年1月），将会使得以太坊更轻量、更快速、更安全。\n\n* 第四阶段，宁静（Serenity，时间待定）\n这个版本将会使用期待已久的 PoS 共识，其中将会使用 Casper 共识算法。\n\n目前第三阶段已升级完成，所以ETH仍然使用POW共识机制。\n\n## 2.EOS\nDPOS\n目前已选出21个超级节点进行选举出块。\n\n## 3.TRON\nDPOS\n* 第一阶段：Exudos，出埃及记\n数据自由-基于点对点的分布式的内容上传、存储和分发机制。出埃及记阶段，波场（TRON）将建立在以IPFS为代表的分布式存储技术之上，为用户提供一个可以完全自由可依赖的数据发布，存储，传播平台。\n\n* 第二阶段：Odyssey，奥德赛（2019年1月-2020年6月，2019年5月发布2.0，9月发布3.0）\n内容赋能-经济激励赋能内容生态。区块链技术，将为内容产生，分发，传播建立一整套充分竞争、回报公平的经济机制，激励个体，赋能内容，从而不断拓展系统的边界。\n\n* 第三阶段：Great Voyage（2020年7月-2021年7月）\n伟大航程，人人发行数字价值。波场（TRON）基于区块链的优势，解决了收益衡量、红利发放和支持者管理三大难题，实现了从“粉丝经济”向“粉丝金融”的重大转变，波场（TRON）基于区块链以波场币（TRX）为官方代币的自治经济体系使得个人内容生产者在体系内的每一笔收入和支出都公开、透明且不可篡改，通过智能合约，支持者们可以自动参与内容生产者的数字资产购买并按照约定自动共享红利成长，不需要任何第三方进行监督即可公正地完成全部流程。\n\n* 第四阶段：Apollo，阿波罗（2021年8月-2023年3月）\n价值自由流动-去中心化的个体专属代币交易。当每一个波场（TRON）体系内的内容生产者都可以发行自己的专属代币，则系统必须拥有一整套完整的去中心化交易所解决方案，方能实现价值的自由流动。\n\n* 第五阶段：Star Trek，星际旅行（2023年4月-2025年9月）\n流量变现-去中心化的博弈与预测市场。全球博弈市场规模2014年超过4500亿美元。波场（波场（TRON））内容平台所带来的流量，为构建去中心化的线上博弈平台提供了可能。开发者可以通过波场（TRON）自由搭建线上博弈平台，提供全自治的博弈预测市场功能。\n\n* 第六阶段：Eternity，永恒之地（2025年10月-2027年9月）\n流量转化-去中心化的游戏。2016年，全球电子游戏市场规模达996亿美元，其中手机游戏市场规模461亿美元，占比42%。波场（波场（TRON））为构建去中心化的线上游戏平台提供了可能。开发者可以通过波场（TRON）自由搭建游戏平台，实现游戏开发众筹，并为普通投资者提供参与投资游戏的可能。\n\n目前第二阶段升级到1.0版本。\n\n# 平台功能\n## ETH\n1.Smart Contract：智能合约\n2.EVM：以太坊虚拟机，提供智能合约运行的分布式区块链环境\n3.ICO：发币融资（如：BNB）\n4.DAPPs\n5.转账\n\n## EOS\n1.Smart Contract：智能合约\n2.ICO：发币融资\n3.DAPPs\n4.转账\n\n## TRON\n1.内容上传、存储和分发\n2.给予内容创作者奖励\n3.ICO（未实现）\n4.去中心化的博弈与预测市场（未实现）\n5.去中心化游戏（未实现）\n6.DAPPs\n7.转账\n\n\n# 三、平台目前发展现状\n## 实时数据\n据 DAppTotal4月29日数据显示，过去一周，综合对比 ETH、 EOS、 TRON四大公链的 DApp生态情况发现：\n* 总用户量(个)\nEOS(292,337)> TRON(87,261)> ETH(31,678)；\n* 总交易次数(笔)\nEOS(26,393,841)> TRON(9,856,747)> IOST(2,360,126)> ETH(373,918)；\n* 总交易额(美元)\nEOS(144,852,700)> TRON(88,426,176)> ETH(39,182,195)；\n* 跨四条公链按用户量 TOP3 DApps\nEOS Global(EOS)、 Endless Game(EOS)、 Lore Free(EOS)；\n* 按交易次数 TOP3 DApps\nHash Baby(EOS)、 TRONbet(TRON)、 Dice(EOS)；\n* 按交易额 TOP3 DApps\nTRONbet(TRON)、 EOS Global(EOS)、 TronWoW(TRON)。\n\n## 统计数据\n![平台至今2019年4月29日情况](区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_state.png)\n尴尬，这个网站：[State of Dapps](https://www.stateofthedapps.com/stats#new) 没有统计TRON平台的数据。\n\n# 转账交易速度TPS\n由于平台共识机制不同，导致去中心化程度、运行速度也不同，下面是几大平台交易速度：\n![三大平台转账交易速度对比](区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_tps.png)\n其中EOS，TPS可达3500.比其他几大平台都快。\n\n这些是目前公共区块链平台的一些基本信息，希望对大家有用，如有错误的地方还请指正，联系方式：chenzuoli709@163.com，一起交流学习。","source":"_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比.md","raw":"---\ntitle: 区块链三大公链Dapp平台ETH、EOS、TRON对比\ndate: 2019-04-27 22:26:58\ntags: [区块链,公链,Dapp]\ncategories: 数字货币\n---\n区块链三大公链Dapp平台ETH、EOS、TRON对比，根据创始人经历、平台共识机制、平台发展历程、目前发展现状等方面进行对比，寻找最有可能实现未来去中心化操作系统的平台。\n<!-- more -->\n\n# 一、创始人\n## 1.ETH以太坊创始人：维塔利克·布特林（Vitalik Buterin）\n* 出生日期：1994年1月31日\n* 国籍：俄罗斯裔加拿大人\n* 学历：加拿大滑铁卢大学肄业\n* 区块链经历：\n2012年17岁时从他父亲那里了解了比特币，开始研究比特币、为比特币杂志写文章转比特币稿费，当时出版社给他一篇文章5个比特币；\n2013年18岁时获得奥林匹亚资讯奖铜牌，经常去访问其他国家的比特币社区开发人员，讨论比特币的发展与问题；\n2014年19岁自加拿大滑铁卢大学休学；该年11月，公布《以太坊白皮书》初版，开始募集开发者；\n2015年20岁获得硅谷知名的亿万富翁设立的泰尔奖学金10万美元成立非营利组织以太坊基金会，全职在以太坊工作；在迈阿密的比特币会议公开发表以太坊计画，该年7月，启动以太坊计画众售募资，募得3.1万枚比特币（当时约合1840万美元）\n2016年21岁以太坊最初版本Frontier问世、以太币开始在世界各地交易所公开交易\n2017年22岁被《财星》杂志评选为2016年40岁以下的40大杰出人物\n\n## 2.EOS柚子创始人：丹尼尔·拉里默（Daniel Larimer）\n* 出生日期：未查到\n* 国籍：美国\n* 学历：2003年毕业于佛吉尼亚大学计算机系本科学士学位\n* 区块链经历：\n2009年对比特币感兴趣，开始了解；\n2013年创建BitShares去中心化交易所，是一个拥有钱包, 账本, 交易所, 货币系统，社群与一身的产品，与之对应的是BTS(比特股)虚拟货币的发行，目前市值排名51；\n2016年离开BitShares创建Steem区块链平台和利用区块链技术实现的社交app steemit，该平台可以对用户的创作予以代币奖励；\n项目完成后，2017年7月发布EOS白皮书，提供分散式应用程序托管﹑智能合约功能与分散式储存的企业方案，解决比特币和以太坊等区块链的可扩展性问题，并消除用户的交易费用。成立了Block.One公司并搭建了EOSIO平台，并发行以ERC-20方式发行1亿枚EOS代币\n\n## 3.TRON波场创始人：孙宇晨\n* 出生日期：1990年\n* 国籍：中国\n* 学历：北京大学、宾夕法尼亚大学硕士\n* 区块链经历：\n2013年以前投资比特币，获得二十倍以上收益；\n由于比特币的投资经历，孙宇晨活跃于美国比特币社区，并对加密货币，去中心化清算协议产生了极其浓厚的兴趣。经过长期调查与研究，他对于诞生于加州硅谷的全球第一个分布式清算支付网络协议——Ripple协议产生了极其浓厚的兴趣。\n2013年底加入RippleLabs，成为Ripple协议缔造者与研发者中的一员；\n2014年，他回国创立锐波并兼任CEO，锐波也成为中国首家从事去中心化清算系统产品开发的互联网科技公司；\n2017年，孙宇晨在“世界区块链峰会上”发表《From it to bit》主题演讲，讲述了互联网的发展历史，阐释了web 4.0的观点。7月，随后推出了自己所做的项目：波场TRON，发布波场白皮书，基于区块链的开源去中心化内容娱乐协议，致力于利用区块链与分布式存储技术，构建一个全球范围内的自由内容娱乐体系，这个协议可以让每个用户自由发布，存储，拥有数据，并通过去中心化的自治形式，以数字资产发行，流通，交易方式决定内容的分发、订阅、推送，赋能内容创造者，形成去中心化的内容娱乐生态。\n2018年7月，完成了对于BitTorrent及其旗下所有产品的收购，并将其并入到波场生态中。\n\n# 二、区块链共识机制\n先来介绍下三种共识机制的概念\n## POW：Proof Of Work\n工作量证明机制：通过计算机随机不停地计算得到指定hash值后获得记账权，并将区块链接到区块链上的机制，每个获得记账权的矿工会获得一定的代币，作为记账的奖励，这个过程俗称挖矿。\n\n## POS：Proof Of Stake\n权益证明机制：人们对于POW日趋中心化的算力分布(矿池)心怀忌惮之际，产生了权益证明机制，即对于验证人/节点的奖励，不是通过算力挖矿，而是通过持币而产生利息，这里就要引入一个概念叫做---币龄，币龄=币量x持有天数。这是根据你持有货币的量和时间，给你发利息的一个制度。当你获得了利息以后，你的所有币龄将被清空，你的持币时间将从0重新算起。\n\n## DPOS：Delegated Proof Of Stake\n委托权益证明机制：可以说DPOS是POS共识机制理念的一个变种。先通过选举，产生若干超级节点；后续记账权将以相同概率分配于超级节点中。它有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责(当轮到他们时，没能生成区块)，他们会被除名，网络会选出新的超级节点来取代他们。\nDPOS让每一个持有代币的人都有权利通过投票给验证人的方式行使自己的权利，利用科技的手段实现民主治理。\n\n## 1.ETH\n* 第一阶段，边境（Frontier，2015年7月）\n以太坊的第一次版本发布，允许开发人员对以太坊进行挖矿，并基于以太坊进行 DApp 与工具软件的开发。\n\n* 第二阶段，家园（Homestead，2016年3月）\n发布了第一个生产环境版本，对许多协议进行了优化改进，为之后的升级奠定了基础，并且加快了交易速度。\n\n* 第三阶段，大都会（Metropolis，2017年10月）\n第三阶段分为两次升级，分别命名为拜占庭（Byzantium，2017年10月）和君士坦丁堡（Constantinople，2019年1月），将会使得以太坊更轻量、更快速、更安全。\n\n* 第四阶段，宁静（Serenity，时间待定）\n这个版本将会使用期待已久的 PoS 共识，其中将会使用 Casper 共识算法。\n\n目前第三阶段已升级完成，所以ETH仍然使用POW共识机制。\n\n## 2.EOS\nDPOS\n目前已选出21个超级节点进行选举出块。\n\n## 3.TRON\nDPOS\n* 第一阶段：Exudos，出埃及记\n数据自由-基于点对点的分布式的内容上传、存储和分发机制。出埃及记阶段，波场（TRON）将建立在以IPFS为代表的分布式存储技术之上，为用户提供一个可以完全自由可依赖的数据发布，存储，传播平台。\n\n* 第二阶段：Odyssey，奥德赛（2019年1月-2020年6月，2019年5月发布2.0，9月发布3.0）\n内容赋能-经济激励赋能内容生态。区块链技术，将为内容产生，分发，传播建立一整套充分竞争、回报公平的经济机制，激励个体，赋能内容，从而不断拓展系统的边界。\n\n* 第三阶段：Great Voyage（2020年7月-2021年7月）\n伟大航程，人人发行数字价值。波场（TRON）基于区块链的优势，解决了收益衡量、红利发放和支持者管理三大难题，实现了从“粉丝经济”向“粉丝金融”的重大转变，波场（TRON）基于区块链以波场币（TRX）为官方代币的自治经济体系使得个人内容生产者在体系内的每一笔收入和支出都公开、透明且不可篡改，通过智能合约，支持者们可以自动参与内容生产者的数字资产购买并按照约定自动共享红利成长，不需要任何第三方进行监督即可公正地完成全部流程。\n\n* 第四阶段：Apollo，阿波罗（2021年8月-2023年3月）\n价值自由流动-去中心化的个体专属代币交易。当每一个波场（TRON）体系内的内容生产者都可以发行自己的专属代币，则系统必须拥有一整套完整的去中心化交易所解决方案，方能实现价值的自由流动。\n\n* 第五阶段：Star Trek，星际旅行（2023年4月-2025年9月）\n流量变现-去中心化的博弈与预测市场。全球博弈市场规模2014年超过4500亿美元。波场（波场（TRON））内容平台所带来的流量，为构建去中心化的线上博弈平台提供了可能。开发者可以通过波场（TRON）自由搭建线上博弈平台，提供全自治的博弈预测市场功能。\n\n* 第六阶段：Eternity，永恒之地（2025年10月-2027年9月）\n流量转化-去中心化的游戏。2016年，全球电子游戏市场规模达996亿美元，其中手机游戏市场规模461亿美元，占比42%。波场（波场（TRON））为构建去中心化的线上游戏平台提供了可能。开发者可以通过波场（TRON）自由搭建游戏平台，实现游戏开发众筹，并为普通投资者提供参与投资游戏的可能。\n\n目前第二阶段升级到1.0版本。\n\n# 平台功能\n## ETH\n1.Smart Contract：智能合约\n2.EVM：以太坊虚拟机，提供智能合约运行的分布式区块链环境\n3.ICO：发币融资（如：BNB）\n4.DAPPs\n5.转账\n\n## EOS\n1.Smart Contract：智能合约\n2.ICO：发币融资\n3.DAPPs\n4.转账\n\n## TRON\n1.内容上传、存储和分发\n2.给予内容创作者奖励\n3.ICO（未实现）\n4.去中心化的博弈与预测市场（未实现）\n5.去中心化游戏（未实现）\n6.DAPPs\n7.转账\n\n\n# 三、平台目前发展现状\n## 实时数据\n据 DAppTotal4月29日数据显示，过去一周，综合对比 ETH、 EOS、 TRON四大公链的 DApp生态情况发现：\n* 总用户量(个)\nEOS(292,337)> TRON(87,261)> ETH(31,678)；\n* 总交易次数(笔)\nEOS(26,393,841)> TRON(9,856,747)> IOST(2,360,126)> ETH(373,918)；\n* 总交易额(美元)\nEOS(144,852,700)> TRON(88,426,176)> ETH(39,182,195)；\n* 跨四条公链按用户量 TOP3 DApps\nEOS Global(EOS)、 Endless Game(EOS)、 Lore Free(EOS)；\n* 按交易次数 TOP3 DApps\nHash Baby(EOS)、 TRONbet(TRON)、 Dice(EOS)；\n* 按交易额 TOP3 DApps\nTRONbet(TRON)、 EOS Global(EOS)、 TronWoW(TRON)。\n\n## 统计数据\n![平台至今2019年4月29日情况](区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_state.png)\n尴尬，这个网站：[State of Dapps](https://www.stateofthedapps.com/stats#new) 没有统计TRON平台的数据。\n\n# 转账交易速度TPS\n由于平台共识机制不同，导致去中心化程度、运行速度也不同，下面是几大平台交易速度：\n![三大平台转账交易速度对比](区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_tps.png)\n其中EOS，TPS可达3500.比其他几大平台都快。\n\n这些是目前公共区块链平台的一些基本信息，希望对大家有用，如有错误的地方还请指正，联系方式：chenzuoli709@163.com，一起交流学习。","slug":"区块链三大公链Dapp平台ETH、EOS、TRON对比","published":1,"updated":"2019-04-29T15:37:18.646Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0so002lfbs6s0g78pec","content":"<p>区块链三大公链Dapp平台ETH、EOS、TRON对比，根据创始人经历、平台共识机制、平台发展历程、目前发展现状等方面进行对比，寻找最有可能实现未来去中心化操作系统的平台。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"一、创始人\"><a href=\"#一、创始人\" class=\"headerlink\" title=\"一、创始人\"></a>一、创始人</h1><h2 id=\"1-ETH以太坊创始人：维塔利克·布特林（Vitalik-Buterin）\"><a href=\"#1-ETH以太坊创始人：维塔利克·布特林（Vitalik-Buterin）\" class=\"headerlink\" title=\"1.ETH以太坊创始人：维塔利克·布特林（Vitalik Buterin）\"></a>1.ETH以太坊创始人：维塔利克·布特林（Vitalik Buterin）</h2><ul>\n<li>出生日期：1994年1月31日</li>\n<li>国籍：俄罗斯裔加拿大人</li>\n<li>学历：加拿大滑铁卢大学肄业</li>\n<li>区块链经历：<br>2012年17岁时从他父亲那里了解了比特币，开始研究比特币、为比特币杂志写文章转比特币稿费，当时出版社给他一篇文章5个比特币；<br>2013年18岁时获得奥林匹亚资讯奖铜牌，经常去访问其他国家的比特币社区开发人员，讨论比特币的发展与问题；<br>2014年19岁自加拿大滑铁卢大学休学；该年11月，公布《以太坊白皮书》初版，开始募集开发者；<br>2015年20岁获得硅谷知名的亿万富翁设立的泰尔奖学金10万美元成立非营利组织以太坊基金会，全职在以太坊工作；在迈阿密的比特币会议公开发表以太坊计画，该年7月，启动以太坊计画众售募资，募得3.1万枚比特币（当时约合1840万美元）<br>2016年21岁以太坊最初版本Frontier问世、以太币开始在世界各地交易所公开交易<br>2017年22岁被《财星》杂志评选为2016年40岁以下的40大杰出人物</li>\n</ul>\n<h2 id=\"2-EOS柚子创始人：丹尼尔·拉里默（Daniel-Larimer）\"><a href=\"#2-EOS柚子创始人：丹尼尔·拉里默（Daniel-Larimer）\" class=\"headerlink\" title=\"2.EOS柚子创始人：丹尼尔·拉里默（Daniel Larimer）\"></a>2.EOS柚子创始人：丹尼尔·拉里默（Daniel Larimer）</h2><ul>\n<li>出生日期：未查到</li>\n<li>国籍：美国</li>\n<li>学历：2003年毕业于佛吉尼亚大学计算机系本科学士学位</li>\n<li>区块链经历：<br>2009年对比特币感兴趣，开始了解；<br>2013年创建BitShares去中心化交易所，是一个拥有钱包, 账本, 交易所, 货币系统，社群与一身的产品，与之对应的是BTS(比特股)虚拟货币的发行，目前市值排名51；<br>2016年离开BitShares创建Steem区块链平台和利用区块链技术实现的社交app steemit，该平台可以对用户的创作予以代币奖励；<br>项目完成后，2017年7月发布EOS白皮书，提供分散式应用程序托管﹑智能合约功能与分散式储存的企业方案，解决比特币和以太坊等区块链的可扩展性问题，并消除用户的交易费用。成立了Block.One公司并搭建了EOSIO平台，并发行以ERC-20方式发行1亿枚EOS代币</li>\n</ul>\n<h2 id=\"3-TRON波场创始人：孙宇晨\"><a href=\"#3-TRON波场创始人：孙宇晨\" class=\"headerlink\" title=\"3.TRON波场创始人：孙宇晨\"></a>3.TRON波场创始人：孙宇晨</h2><ul>\n<li>出生日期：1990年</li>\n<li>国籍：中国</li>\n<li>学历：北京大学、宾夕法尼亚大学硕士</li>\n<li>区块链经历：<br>2013年以前投资比特币，获得二十倍以上收益；<br>由于比特币的投资经历，孙宇晨活跃于美国比特币社区，并对加密货币，去中心化清算协议产生了极其浓厚的兴趣。经过长期调查与研究，他对于诞生于加州硅谷的全球第一个分布式清算支付网络协议——Ripple协议产生了极其浓厚的兴趣。<br>2013年底加入RippleLabs，成为Ripple协议缔造者与研发者中的一员；<br>2014年，他回国创立锐波并兼任CEO，锐波也成为中国首家从事去中心化清算系统产品开发的互联网科技公司；<br>2017年，孙宇晨在“世界区块链峰会上”发表《From it to bit》主题演讲，讲述了互联网的发展历史，阐释了web 4.0的观点。7月，随后推出了自己所做的项目：波场TRON，发布波场白皮书，基于区块链的开源去中心化内容娱乐协议，致力于利用区块链与分布式存储技术，构建一个全球范围内的自由内容娱乐体系，这个协议可以让每个用户自由发布，存储，拥有数据，并通过去中心化的自治形式，以数字资产发行，流通，交易方式决定内容的分发、订阅、推送，赋能内容创造者，形成去中心化的内容娱乐生态。<br>2018年7月，完成了对于BitTorrent及其旗下所有产品的收购，并将其并入到波场生态中。</li>\n</ul>\n<h1 id=\"二、区块链共识机制\"><a href=\"#二、区块链共识机制\" class=\"headerlink\" title=\"二、区块链共识机制\"></a>二、区块链共识机制</h1><p>先来介绍下三种共识机制的概念</p>\n<h2 id=\"POW：Proof-Of-Work\"><a href=\"#POW：Proof-Of-Work\" class=\"headerlink\" title=\"POW：Proof Of Work\"></a>POW：Proof Of Work</h2><p>工作量证明机制：通过计算机随机不停地计算得到指定hash值后获得记账权，并将区块链接到区块链上的机制，每个获得记账权的矿工会获得一定的代币，作为记账的奖励，这个过程俗称挖矿。</p>\n<h2 id=\"POS：Proof-Of-Stake\"><a href=\"#POS：Proof-Of-Stake\" class=\"headerlink\" title=\"POS：Proof Of Stake\"></a>POS：Proof Of Stake</h2><p>权益证明机制：人们对于POW日趋中心化的算力分布(矿池)心怀忌惮之际，产生了权益证明机制，即对于验证人/节点的奖励，不是通过算力挖矿，而是通过持币而产生利息，这里就要引入一个概念叫做—币龄，币龄=币量x持有天数。这是根据你持有货币的量和时间，给你发利息的一个制度。当你获得了利息以后，你的所有币龄将被清空，你的持币时间将从0重新算起。</p>\n<h2 id=\"DPOS：Delegated-Proof-Of-Stake\"><a href=\"#DPOS：Delegated-Proof-Of-Stake\" class=\"headerlink\" title=\"DPOS：Delegated Proof Of Stake\"></a>DPOS：Delegated Proof Of Stake</h2><p>委托权益证明机制：可以说DPOS是POS共识机制理念的一个变种。先通过选举，产生若干超级节点；后续记账权将以相同概率分配于超级节点中。它有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责(当轮到他们时，没能生成区块)，他们会被除名，网络会选出新的超级节点来取代他们。<br>DPOS让每一个持有代币的人都有权利通过投票给验证人的方式行使自己的权利，利用科技的手段实现民主治理。</p>\n<h2 id=\"1-ETH\"><a href=\"#1-ETH\" class=\"headerlink\" title=\"1.ETH\"></a>1.ETH</h2><ul>\n<li><p>第一阶段，边境（Frontier，2015年7月）<br>以太坊的第一次版本发布，允许开发人员对以太坊进行挖矿，并基于以太坊进行 DApp 与工具软件的开发。</p>\n</li>\n<li><p>第二阶段，家园（Homestead，2016年3月）<br>发布了第一个生产环境版本，对许多协议进行了优化改进，为之后的升级奠定了基础，并且加快了交易速度。</p>\n</li>\n<li><p>第三阶段，大都会（Metropolis，2017年10月）<br>第三阶段分为两次升级，分别命名为拜占庭（Byzantium，2017年10月）和君士坦丁堡（Constantinople，2019年1月），将会使得以太坊更轻量、更快速、更安全。</p>\n</li>\n<li><p>第四阶段，宁静（Serenity，时间待定）<br>这个版本将会使用期待已久的 PoS 共识，其中将会使用 Casper 共识算法。</p>\n</li>\n</ul>\n<p>目前第三阶段已升级完成，所以ETH仍然使用POW共识机制。</p>\n<h2 id=\"2-EOS\"><a href=\"#2-EOS\" class=\"headerlink\" title=\"2.EOS\"></a>2.EOS</h2><p>DPOS<br>目前已选出21个超级节点进行选举出块。</p>\n<h2 id=\"3-TRON\"><a href=\"#3-TRON\" class=\"headerlink\" title=\"3.TRON\"></a>3.TRON</h2><p>DPOS</p>\n<ul>\n<li><p>第一阶段：Exudos，出埃及记<br>数据自由-基于点对点的分布式的内容上传、存储和分发机制。出埃及记阶段，波场（TRON）将建立在以IPFS为代表的分布式存储技术之上，为用户提供一个可以完全自由可依赖的数据发布，存储，传播平台。</p>\n</li>\n<li><p>第二阶段：Odyssey，奥德赛（2019年1月-2020年6月，2019年5月发布2.0，9月发布3.0）<br>内容赋能-经济激励赋能内容生态。区块链技术，将为内容产生，分发，传播建立一整套充分竞争、回报公平的经济机制，激励个体，赋能内容，从而不断拓展系统的边界。</p>\n</li>\n<li><p>第三阶段：Great Voyage（2020年7月-2021年7月）<br>伟大航程，人人发行数字价值。波场（TRON）基于区块链的优势，解决了收益衡量、红利发放和支持者管理三大难题，实现了从“粉丝经济”向“粉丝金融”的重大转变，波场（TRON）基于区块链以波场币（TRX）为官方代币的自治经济体系使得个人内容生产者在体系内的每一笔收入和支出都公开、透明且不可篡改，通过智能合约，支持者们可以自动参与内容生产者的数字资产购买并按照约定自动共享红利成长，不需要任何第三方进行监督即可公正地完成全部流程。</p>\n</li>\n<li><p>第四阶段：Apollo，阿波罗（2021年8月-2023年3月）<br>价值自由流动-去中心化的个体专属代币交易。当每一个波场（TRON）体系内的内容生产者都可以发行自己的专属代币，则系统必须拥有一整套完整的去中心化交易所解决方案，方能实现价值的自由流动。</p>\n</li>\n<li><p>第五阶段：Star Trek，星际旅行（2023年4月-2025年9月）<br>流量变现-去中心化的博弈与预测市场。全球博弈市场规模2014年超过4500亿美元。波场（波场（TRON））内容平台所带来的流量，为构建去中心化的线上博弈平台提供了可能。开发者可以通过波场（TRON）自由搭建线上博弈平台，提供全自治的博弈预测市场功能。</p>\n</li>\n<li><p>第六阶段：Eternity，永恒之地（2025年10月-2027年9月）<br>流量转化-去中心化的游戏。2016年，全球电子游戏市场规模达996亿美元，其中手机游戏市场规模461亿美元，占比42%。波场（波场（TRON））为构建去中心化的线上游戏平台提供了可能。开发者可以通过波场（TRON）自由搭建游戏平台，实现游戏开发众筹，并为普通投资者提供参与投资游戏的可能。</p>\n</li>\n</ul>\n<p>目前第二阶段升级到1.0版本。</p>\n<h1 id=\"平台功能\"><a href=\"#平台功能\" class=\"headerlink\" title=\"平台功能\"></a>平台功能</h1><h2 id=\"ETH\"><a href=\"#ETH\" class=\"headerlink\" title=\"ETH\"></a>ETH</h2><p>1.Smart Contract：智能合约<br>2.EVM：以太坊虚拟机，提供智能合约运行的分布式区块链环境<br>3.ICO：发币融资（如：BNB）<br>4.DAPPs<br>5.转账</p>\n<h2 id=\"EOS\"><a href=\"#EOS\" class=\"headerlink\" title=\"EOS\"></a>EOS</h2><p>1.Smart Contract：智能合约<br>2.ICO：发币融资<br>3.DAPPs<br>4.转账</p>\n<h2 id=\"TRON\"><a href=\"#TRON\" class=\"headerlink\" title=\"TRON\"></a>TRON</h2><p>1.内容上传、存储和分发<br>2.给予内容创作者奖励<br>3.ICO（未实现）<br>4.去中心化的博弈与预测市场（未实现）<br>5.去中心化游戏（未实现）<br>6.DAPPs<br>7.转账</p>\n<h1 id=\"三、平台目前发展现状\"><a href=\"#三、平台目前发展现状\" class=\"headerlink\" title=\"三、平台目前发展现状\"></a>三、平台目前发展现状</h1><h2 id=\"实时数据\"><a href=\"#实时数据\" class=\"headerlink\" title=\"实时数据\"></a>实时数据</h2><p>据 DAppTotal4月29日数据显示，过去一周，综合对比 ETH、 EOS、 TRON四大公链的 DApp生态情况发现：</p>\n<ul>\n<li>总用户量(个)<br>EOS(292,337)&gt; TRON(87,261)&gt; ETH(31,678)；</li>\n<li>总交易次数(笔)<br>EOS(26,393,841)&gt; TRON(9,856,747)&gt; IOST(2,360,126)&gt; ETH(373,918)；</li>\n<li>总交易额(美元)<br>EOS(144,852,700)&gt; TRON(88,426,176)&gt; ETH(39,182,195)；</li>\n<li>跨四条公链按用户量 TOP3 DApps<br>EOS Global(EOS)、 Endless Game(EOS)、 Lore Free(EOS)；</li>\n<li>按交易次数 TOP3 DApps<br>Hash Baby(EOS)、 TRONbet(TRON)、 Dice(EOS)；</li>\n<li>按交易额 TOP3 DApps<br>TRONbet(TRON)、 EOS Global(EOS)、 TronWoW(TRON)。</li>\n</ul>\n<h2 id=\"统计数据\"><a href=\"#统计数据\" class=\"headerlink\" title=\"统计数据\"></a>统计数据</h2><p><img src=\"/2019/04/27/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_state.png\" alt=\"平台至今2019年4月29日情况\"><br>尴尬，这个网站：<a href=\"https://www.stateofthedapps.com/stats#new\" target=\"_blank\" rel=\"noopener\">State of Dapps</a> 没有统计TRON平台的数据。</p>\n<h1 id=\"转账交易速度TPS\"><a href=\"#转账交易速度TPS\" class=\"headerlink\" title=\"转账交易速度TPS\"></a>转账交易速度TPS</h1><p>由于平台共识机制不同，导致去中心化程度、运行速度也不同，下面是几大平台交易速度：<br><img src=\"/2019/04/27/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_tps.png\" alt=\"三大平台转账交易速度对比\"><br>其中EOS，TPS可达3500.比其他几大平台都快。</p>\n<p>这些是目前公共区块链平台的一些基本信息，希望对大家有用，如有错误的地方还请指正，联系方式：<a href=\"mailto:chenzuoli709@163.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@163.com</a>，一起交流学习。</p>\n","site":{"data":{}},"excerpt":"<p>区块链三大公链Dapp平台ETH、EOS、TRON对比，根据创始人经历、平台共识机制、平台发展历程、目前发展现状等方面进行对比，寻找最有可能实现未来去中心化操作系统的平台。</p>","more":"<h1 id=\"一、创始人\"><a href=\"#一、创始人\" class=\"headerlink\" title=\"一、创始人\"></a>一、创始人</h1><h2 id=\"1-ETH以太坊创始人：维塔利克·布特林（Vitalik-Buterin）\"><a href=\"#1-ETH以太坊创始人：维塔利克·布特林（Vitalik-Buterin）\" class=\"headerlink\" title=\"1.ETH以太坊创始人：维塔利克·布特林（Vitalik Buterin）\"></a>1.ETH以太坊创始人：维塔利克·布特林（Vitalik Buterin）</h2><ul>\n<li>出生日期：1994年1月31日</li>\n<li>国籍：俄罗斯裔加拿大人</li>\n<li>学历：加拿大滑铁卢大学肄业</li>\n<li>区块链经历：<br>2012年17岁时从他父亲那里了解了比特币，开始研究比特币、为比特币杂志写文章转比特币稿费，当时出版社给他一篇文章5个比特币；<br>2013年18岁时获得奥林匹亚资讯奖铜牌，经常去访问其他国家的比特币社区开发人员，讨论比特币的发展与问题；<br>2014年19岁自加拿大滑铁卢大学休学；该年11月，公布《以太坊白皮书》初版，开始募集开发者；<br>2015年20岁获得硅谷知名的亿万富翁设立的泰尔奖学金10万美元成立非营利组织以太坊基金会，全职在以太坊工作；在迈阿密的比特币会议公开发表以太坊计画，该年7月，启动以太坊计画众售募资，募得3.1万枚比特币（当时约合1840万美元）<br>2016年21岁以太坊最初版本Frontier问世、以太币开始在世界各地交易所公开交易<br>2017年22岁被《财星》杂志评选为2016年40岁以下的40大杰出人物</li>\n</ul>\n<h2 id=\"2-EOS柚子创始人：丹尼尔·拉里默（Daniel-Larimer）\"><a href=\"#2-EOS柚子创始人：丹尼尔·拉里默（Daniel-Larimer）\" class=\"headerlink\" title=\"2.EOS柚子创始人：丹尼尔·拉里默（Daniel Larimer）\"></a>2.EOS柚子创始人：丹尼尔·拉里默（Daniel Larimer）</h2><ul>\n<li>出生日期：未查到</li>\n<li>国籍：美国</li>\n<li>学历：2003年毕业于佛吉尼亚大学计算机系本科学士学位</li>\n<li>区块链经历：<br>2009年对比特币感兴趣，开始了解；<br>2013年创建BitShares去中心化交易所，是一个拥有钱包, 账本, 交易所, 货币系统，社群与一身的产品，与之对应的是BTS(比特股)虚拟货币的发行，目前市值排名51；<br>2016年离开BitShares创建Steem区块链平台和利用区块链技术实现的社交app steemit，该平台可以对用户的创作予以代币奖励；<br>项目完成后，2017年7月发布EOS白皮书，提供分散式应用程序托管﹑智能合约功能与分散式储存的企业方案，解决比特币和以太坊等区块链的可扩展性问题，并消除用户的交易费用。成立了Block.One公司并搭建了EOSIO平台，并发行以ERC-20方式发行1亿枚EOS代币</li>\n</ul>\n<h2 id=\"3-TRON波场创始人：孙宇晨\"><a href=\"#3-TRON波场创始人：孙宇晨\" class=\"headerlink\" title=\"3.TRON波场创始人：孙宇晨\"></a>3.TRON波场创始人：孙宇晨</h2><ul>\n<li>出生日期：1990年</li>\n<li>国籍：中国</li>\n<li>学历：北京大学、宾夕法尼亚大学硕士</li>\n<li>区块链经历：<br>2013年以前投资比特币，获得二十倍以上收益；<br>由于比特币的投资经历，孙宇晨活跃于美国比特币社区，并对加密货币，去中心化清算协议产生了极其浓厚的兴趣。经过长期调查与研究，他对于诞生于加州硅谷的全球第一个分布式清算支付网络协议——Ripple协议产生了极其浓厚的兴趣。<br>2013年底加入RippleLabs，成为Ripple协议缔造者与研发者中的一员；<br>2014年，他回国创立锐波并兼任CEO，锐波也成为中国首家从事去中心化清算系统产品开发的互联网科技公司；<br>2017年，孙宇晨在“世界区块链峰会上”发表《From it to bit》主题演讲，讲述了互联网的发展历史，阐释了web 4.0的观点。7月，随后推出了自己所做的项目：波场TRON，发布波场白皮书，基于区块链的开源去中心化内容娱乐协议，致力于利用区块链与分布式存储技术，构建一个全球范围内的自由内容娱乐体系，这个协议可以让每个用户自由发布，存储，拥有数据，并通过去中心化的自治形式，以数字资产发行，流通，交易方式决定内容的分发、订阅、推送，赋能内容创造者，形成去中心化的内容娱乐生态。<br>2018年7月，完成了对于BitTorrent及其旗下所有产品的收购，并将其并入到波场生态中。</li>\n</ul>\n<h1 id=\"二、区块链共识机制\"><a href=\"#二、区块链共识机制\" class=\"headerlink\" title=\"二、区块链共识机制\"></a>二、区块链共识机制</h1><p>先来介绍下三种共识机制的概念</p>\n<h2 id=\"POW：Proof-Of-Work\"><a href=\"#POW：Proof-Of-Work\" class=\"headerlink\" title=\"POW：Proof Of Work\"></a>POW：Proof Of Work</h2><p>工作量证明机制：通过计算机随机不停地计算得到指定hash值后获得记账权，并将区块链接到区块链上的机制，每个获得记账权的矿工会获得一定的代币，作为记账的奖励，这个过程俗称挖矿。</p>\n<h2 id=\"POS：Proof-Of-Stake\"><a href=\"#POS：Proof-Of-Stake\" class=\"headerlink\" title=\"POS：Proof Of Stake\"></a>POS：Proof Of Stake</h2><p>权益证明机制：人们对于POW日趋中心化的算力分布(矿池)心怀忌惮之际，产生了权益证明机制，即对于验证人/节点的奖励，不是通过算力挖矿，而是通过持币而产生利息，这里就要引入一个概念叫做—币龄，币龄=币量x持有天数。这是根据你持有货币的量和时间，给你发利息的一个制度。当你获得了利息以后，你的所有币龄将被清空，你的持币时间将从0重新算起。</p>\n<h2 id=\"DPOS：Delegated-Proof-Of-Stake\"><a href=\"#DPOS：Delegated-Proof-Of-Stake\" class=\"headerlink\" title=\"DPOS：Delegated Proof Of Stake\"></a>DPOS：Delegated Proof Of Stake</h2><p>委托权益证明机制：可以说DPOS是POS共识机制理念的一个变种。先通过选举，产生若干超级节点；后续记账权将以相同概率分配于超级节点中。它有点像是议会制度或人民代表大会制度。如果代表不能履行他们的职责(当轮到他们时，没能生成区块)，他们会被除名，网络会选出新的超级节点来取代他们。<br>DPOS让每一个持有代币的人都有权利通过投票给验证人的方式行使自己的权利，利用科技的手段实现民主治理。</p>\n<h2 id=\"1-ETH\"><a href=\"#1-ETH\" class=\"headerlink\" title=\"1.ETH\"></a>1.ETH</h2><ul>\n<li><p>第一阶段，边境（Frontier，2015年7月）<br>以太坊的第一次版本发布，允许开发人员对以太坊进行挖矿，并基于以太坊进行 DApp 与工具软件的开发。</p>\n</li>\n<li><p>第二阶段，家园（Homestead，2016年3月）<br>发布了第一个生产环境版本，对许多协议进行了优化改进，为之后的升级奠定了基础，并且加快了交易速度。</p>\n</li>\n<li><p>第三阶段，大都会（Metropolis，2017年10月）<br>第三阶段分为两次升级，分别命名为拜占庭（Byzantium，2017年10月）和君士坦丁堡（Constantinople，2019年1月），将会使得以太坊更轻量、更快速、更安全。</p>\n</li>\n<li><p>第四阶段，宁静（Serenity，时间待定）<br>这个版本将会使用期待已久的 PoS 共识，其中将会使用 Casper 共识算法。</p>\n</li>\n</ul>\n<p>目前第三阶段已升级完成，所以ETH仍然使用POW共识机制。</p>\n<h2 id=\"2-EOS\"><a href=\"#2-EOS\" class=\"headerlink\" title=\"2.EOS\"></a>2.EOS</h2><p>DPOS<br>目前已选出21个超级节点进行选举出块。</p>\n<h2 id=\"3-TRON\"><a href=\"#3-TRON\" class=\"headerlink\" title=\"3.TRON\"></a>3.TRON</h2><p>DPOS</p>\n<ul>\n<li><p>第一阶段：Exudos，出埃及记<br>数据自由-基于点对点的分布式的内容上传、存储和分发机制。出埃及记阶段，波场（TRON）将建立在以IPFS为代表的分布式存储技术之上，为用户提供一个可以完全自由可依赖的数据发布，存储，传播平台。</p>\n</li>\n<li><p>第二阶段：Odyssey，奥德赛（2019年1月-2020年6月，2019年5月发布2.0，9月发布3.0）<br>内容赋能-经济激励赋能内容生态。区块链技术，将为内容产生，分发，传播建立一整套充分竞争、回报公平的经济机制，激励个体，赋能内容，从而不断拓展系统的边界。</p>\n</li>\n<li><p>第三阶段：Great Voyage（2020年7月-2021年7月）<br>伟大航程，人人发行数字价值。波场（TRON）基于区块链的优势，解决了收益衡量、红利发放和支持者管理三大难题，实现了从“粉丝经济”向“粉丝金融”的重大转变，波场（TRON）基于区块链以波场币（TRX）为官方代币的自治经济体系使得个人内容生产者在体系内的每一笔收入和支出都公开、透明且不可篡改，通过智能合约，支持者们可以自动参与内容生产者的数字资产购买并按照约定自动共享红利成长，不需要任何第三方进行监督即可公正地完成全部流程。</p>\n</li>\n<li><p>第四阶段：Apollo，阿波罗（2021年8月-2023年3月）<br>价值自由流动-去中心化的个体专属代币交易。当每一个波场（TRON）体系内的内容生产者都可以发行自己的专属代币，则系统必须拥有一整套完整的去中心化交易所解决方案，方能实现价值的自由流动。</p>\n</li>\n<li><p>第五阶段：Star Trek，星际旅行（2023年4月-2025年9月）<br>流量变现-去中心化的博弈与预测市场。全球博弈市场规模2014年超过4500亿美元。波场（波场（TRON））内容平台所带来的流量，为构建去中心化的线上博弈平台提供了可能。开发者可以通过波场（TRON）自由搭建线上博弈平台，提供全自治的博弈预测市场功能。</p>\n</li>\n<li><p>第六阶段：Eternity，永恒之地（2025年10月-2027年9月）<br>流量转化-去中心化的游戏。2016年，全球电子游戏市场规模达996亿美元，其中手机游戏市场规模461亿美元，占比42%。波场（波场（TRON））为构建去中心化的线上游戏平台提供了可能。开发者可以通过波场（TRON）自由搭建游戏平台，实现游戏开发众筹，并为普通投资者提供参与投资游戏的可能。</p>\n</li>\n</ul>\n<p>目前第二阶段升级到1.0版本。</p>\n<h1 id=\"平台功能\"><a href=\"#平台功能\" class=\"headerlink\" title=\"平台功能\"></a>平台功能</h1><h2 id=\"ETH\"><a href=\"#ETH\" class=\"headerlink\" title=\"ETH\"></a>ETH</h2><p>1.Smart Contract：智能合约<br>2.EVM：以太坊虚拟机，提供智能合约运行的分布式区块链环境<br>3.ICO：发币融资（如：BNB）<br>4.DAPPs<br>5.转账</p>\n<h2 id=\"EOS\"><a href=\"#EOS\" class=\"headerlink\" title=\"EOS\"></a>EOS</h2><p>1.Smart Contract：智能合约<br>2.ICO：发币融资<br>3.DAPPs<br>4.转账</p>\n<h2 id=\"TRON\"><a href=\"#TRON\" class=\"headerlink\" title=\"TRON\"></a>TRON</h2><p>1.内容上传、存储和分发<br>2.给予内容创作者奖励<br>3.ICO（未实现）<br>4.去中心化的博弈与预测市场（未实现）<br>5.去中心化游戏（未实现）<br>6.DAPPs<br>7.转账</p>\n<h1 id=\"三、平台目前发展现状\"><a href=\"#三、平台目前发展现状\" class=\"headerlink\" title=\"三、平台目前发展现状\"></a>三、平台目前发展现状</h1><h2 id=\"实时数据\"><a href=\"#实时数据\" class=\"headerlink\" title=\"实时数据\"></a>实时数据</h2><p>据 DAppTotal4月29日数据显示，过去一周，综合对比 ETH、 EOS、 TRON四大公链的 DApp生态情况发现：</p>\n<ul>\n<li>总用户量(个)<br>EOS(292,337)&gt; TRON(87,261)&gt; ETH(31,678)；</li>\n<li>总交易次数(笔)<br>EOS(26,393,841)&gt; TRON(9,856,747)&gt; IOST(2,360,126)&gt; ETH(373,918)；</li>\n<li>总交易额(美元)<br>EOS(144,852,700)&gt; TRON(88,426,176)&gt; ETH(39,182,195)；</li>\n<li>跨四条公链按用户量 TOP3 DApps<br>EOS Global(EOS)、 Endless Game(EOS)、 Lore Free(EOS)；</li>\n<li>按交易次数 TOP3 DApps<br>Hash Baby(EOS)、 TRONbet(TRON)、 Dice(EOS)；</li>\n<li>按交易额 TOP3 DApps<br>TRONbet(TRON)、 EOS Global(EOS)、 TronWoW(TRON)。</li>\n</ul>\n<h2 id=\"统计数据\"><a href=\"#统计数据\" class=\"headerlink\" title=\"统计数据\"></a>统计数据</h2><p><img src=\"/2019/04/27/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_state.png\" alt=\"平台至今2019年4月29日情况\"><br>尴尬，这个网站：<a href=\"https://www.stateofthedapps.com/stats#new\" target=\"_blank\" rel=\"noopener\">State of Dapps</a> 没有统计TRON平台的数据。</p>\n<h1 id=\"转账交易速度TPS\"><a href=\"#转账交易速度TPS\" class=\"headerlink\" title=\"转账交易速度TPS\"></a>转账交易速度TPS</h1><p>由于平台共识机制不同，导致去中心化程度、运行速度也不同，下面是几大平台交易速度：<br><img src=\"/2019/04/27/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_tps.png\" alt=\"三大平台转账交易速度对比\"><br>其中EOS，TPS可达3500.比其他几大平台都快。</p>\n<p>这些是目前公共区块链平台的一些基本信息，希望对大家有用，如有错误的地方还请指正，联系方式：<a href=\"mailto:chenzuoli709@163.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@163.com</a>，一起交流学习。</p>"},{"title":"区块链三大共识机制","date":"2019-09-03T15:43:57.000Z","notebook":"区块链","_content":"\n区块链中三大共识机制POW、POS、DPOS的区别，进来看看：\n![共识机制](区块链三大共识机制/blockchain.jpeg)\n<!-- more -->\n<a>[三大共识机制POW、POS、DPOS的区别](https://bitfalls.com/2018/04/24/whats-the-difference-between-proof-of-work-pow-proof-of-stake-pos-and-delegated-pos/)</a>\n\n2019-09-08更新\n____________\n\n# 1.PoW算法\n## 1.1 PoW历史\n工作量证明源于经济学，是一个经济学的概念，是指为了达成某种目标而设定一个度量的方法。可以和平时工作中的绩效考核做类比：为了考核达到5星，你必须要完成leader指派给你的KPI，这些KPI就是工作量证明，完成它可能需要加班加点干很久，但是考评的时候leader验证起来却很容易。\n\n1993年，Cynthia Dwork和Moni Naor在学术论文中首次提出工作量证明的的概念。\n\n1997年，Adam Back在学术论文Hashcash中提出了Hahscash的概念，用于抵抗Dos攻击和垃圾邮件网关的滥用。Hahscash和比特币区块链的PoW如出一辙，在比特币之前，Hashcash的最常见应用场景就是反垃圾邮件。\n\n1999年，Markus Jakobsson和Ari Juels发表的论文中首次提出了Proof of Work这个名词。\n\nPoW需要两个角色：工作者和验证者，并且具备以下特点：\n>(1) 工作只能由验证者发布；\n>(2) 工作者必须要完成一定量的工作，具体的工作量有验证者给出；\n>(3) 工作者没有办法快速完成工作，要完成工作必须消耗一定代价，但是验证者验证起来很容易；\n\n## 1.2 Hashcash\nHashcash是Adam Back与1997年发明的一种抵抗邮件服务DoS攻击的算法。理解了Hashcash，就能够轻而易举的理解比特币中的PoW。\n\nHashcash是基于SHA1散列算法，它抵抗垃圾邮件的原理如下：\n\n假设S给R发送邮件，要想发送成功，则：\n>(1) S的邮件头中需要带一个称之为hashcash stamp的戳记；\n>(2) 对hashcash stamp进行SHA1后的值必须满足接收方R设定的条件：生成的hash值的前20位必须为0；\n>(3) hashcash stamp可能由多个域组成，比如生成邮件的时间，收件人地址等不变量，还包含可变量counter；\n>(4) 由于Hash的特点，导致发送方S没有办法快速找到满足条件的hashcash stamp，只能通过不断递增counter的值来穷举；\n>(5) 发送方S通过暴力破解的方式计算出满足接收方条件的值，这个过程发送方消耗了一定量的CPU。而验证方只需要对收到的hashcash stamp进行SHA1，检查结果是否满足；\n\n由于发送方计算满足邮件接收方条件的值需要消耗一定时间，对于垃圾邮件系统来说，这样的成本基本上是不可接受的，从而有效避免了垃圾邮件。\n\n## 1.3 PoW如何解决分布式系统的共识问题\n可以把比特币区块链看成一个分布式的账本，然后定义几个名词：\n>(1) 分布式账本：比特币区块链是一个分布式账本，这个账本人人可以随时查阅，但是由谁来记账需要通过共识算法来决定；\n>(2) 记账：将区块写入区块链；\n>(3) 记账者：就是平常所说的矿工，比特币系统中的每个矿工节点都是潜在的记账者；\n>(4) 选举：就是大家所熟知的挖矿，用某种算法从一批候选矿工（记账者）中选出一个来记账（写入账本）；\n记账者中大部分都是正常的，但是也有少数不怀好意的记账者，因此系统需要通过共识算法选出一个正常的记账者来记账，这其实就是一个拜占庭将军问题：在可能存在恶意节点时，如何保证账本的正确性。\n\n既然是拜占庭问题，那么像PBFT，PoW等算法都可以解决，比特币使用PoW，其达成共识的过程如下：\n>(1) 系统指定一个目标hash值，各个矿工节点竞争，构造出候选区块，并不断计算区块头hash，直到得到满足条件的hash为止；\n>(2) 与hashcash一样，矿工节点除了暴力破解，没有快速找到答案的办法；\n>(3) 率先计算出解的矿工节点将区块广播给全网，其他节点验证区块（工作量是否满足，交易是否合法），没有问题就将区块加入到区块链中；\n>(4) 计算出解的矿工得到一笔奖励费；\n很明显，这是一个凭算力取胜的游戏，简单分析一下：\n假设系统有4个矿工节点A，B，C，D，则：\n>(1) 如果4个矿工节点的算力都相同，其中存在一个恶意节点，那么最终能正确写入账本的概率是3/4，而被恶意矿工写入的概率是1/4；\n>(2) 假如B是恶意节点，他买了一台奇快的专用矿机，使得他的算力大增，达到了全部矿工节点算力的51%，那么系统基本上就被这个恶意矿工控制；\n因此，系统最坏的情况下能容忍的问题节点的数量是：占据整个系统51%算力的问题节点的数量，当然要掌控这么高的算力还是很困难的。\n关于具体的源码，后续会单独用一篇文章来分析比特币挖矿的过程，本文先理解PoW算法就好。\n\n# 2.PoS算法\n## 2.1 PoS的提出\nPoW算法存在两个问题：\n>(1) 太浪费资源，因为需要巨量的计算，会浪费资源（电力）；\n>(2) 存在51%攻击问题：一旦能掌握系统51%的算力基本上就能控制整个系统。\n>(3) 系统的吞吐量降低，比如比特币，平均每10分钟才产生一个区块；\n为了克服PoW算法的问题，2012年Sunny King提出了PoS权益证明算法，并发布了点点币（PPCoin），点点币中采用了PoS作为共识算法。\nPoS与PoW原理上很相似，都是一种基于概率的解决共识问题的算法。只不过PoW是拼算力，算力越强的抢到记账权的概率越大，而PoS则是拼财力，谁的财力越高，抢到记账权的概率就越大。\n\n## 2.2 PoS算法的原理\nPoS一个重要的概念是币龄，币龄 = 持有的币数 * 持有币的天数，例如钱包里有90个点点币，都持有了10天，则币龄=900；\n与PoW一样，为了抢到将区块写入区块链的权利，节点同样要进行hash计算，只不过最终的解和币龄有关，计算公式：\nproofHash < coinAge * target；\ncoinAge是币龄，target是一个目标值，用于调整难度。coinAge * target的值越大，难度就越小，抢到区块的概率就越高。\n假如你的钱包里是0个币，那么你的币龄就是0, 计算一个小于0的hash值的概率基本上也0，因此基本上抢不到区块；\nPoS可以解决PoW的问题：\n>(1) 首先，不需要PoW那么大的算力，可以减少资源浪费；\n>(2) 不容易遭受51%攻击，相比起掌握系统一半以上的算力，拥有整个系统51%的财力会更加困难。\n但是PoS也存在明显的缺陷：\n>(1) 容易被垄断：因为持币越多，持有的越久，币龄就越高，越容易挖到区块并得到激励，持币少的人基本上没有机会，这样整个系统的安全性实际上会被持币数量较大的一部分人（大股东们）掌握；而比特币则不存在这个问题，因为理论上任何人都可以购买矿机获得提高自己的算力（甚至可以联合起来），提升自己挖矿成功的概率；\n>(2) 很难应对分叉的情况：当出现分叉时，PoS可以在两条链上同时挖矿并获得收益。而PoW则不存在这个问题，因为当出现分叉以后，PoW总是选择工作量大的链做为主链。\n\n# 3.DPoS算法\nPoS算法中记账权很容易被持币较多的人垄断，从而容易趋于中心化（永远是持币多的那些人获得写入区块并获得奖励），于是又有了DPoS（委托权益证明）算法。与PoS算法相比，DPoS中多了受托人的概念。DPoS算法是在2014年由Bitshares的首席开发者Dan Larimer提出，此人现为EOS的CTO。DPoS算法的原理如下：\n>(1) 区块由受托人产生并写入区块链；\n>(2) 受托人由持币人选举产生；\n>(3) 根据受托人所得的票数排名，选取排名最靠前的若干（一般为101位）作为记账节点，来生成区块并写入区块链；\n>(4) 被选中的受托人会隔一定的周期进行一次调整；\n首先，为了利益最大化，股东会选择将票投给那些信誉好，可靠性高的节点；\n其次，受托人每隔一定的周期就会重新投票进行调整，更加民主和公平。这就好比公司选举领导层干部，为了公司利益最大化，股东一般会选择能力强的人进入管理层。而一旦管理层出了问题领导，股东可以把他撸下去，重新投票选择更胜任的人。\n\n# 4.总结\n本文介绍了PoW、PoS两类基于概率的共识算法，任何一个区块链都必须要解决区块何时产生，由谁将区块写入区块链的问题，PoW和PoS解决的思路总结起来就是：\n>(1) PoW：比拼算力，算力越强越容易拿到写区块链的权利；\n>(2) PoS：比拼财力，占的股份越大（币龄越高），越容易拿到记账权；\n>(3) DPoS：引入了受托人，由投票选举出的若干信誉度更高的受托人记账，受托人每隔一定周期调整。\n这些算法在许多的区块链中被广泛使用，这些算法是区块链安全的基石，学习中需要结合项目源码加以理解，弄清楚区块链到底在共识什么，为什么需要共识，共识算法是如何解决这些问题的。\n以太坊将在比特币创世块挖出的那一天2020年1月3日升级ETH1.0为ETH2.0，由POW共识改为POS共识，期待他的表现。\n\n\n你需要做的就是坚持。","source":"_posts/区块链三大共识机制.md","raw":"---\ntitle: 区块链三大共识机制\ndate: 2019-09-03 23:43:57\ntags: 共识机制\ncategories: 区块链\nnotebook: 区块链\n---\n\n区块链中三大共识机制POW、POS、DPOS的区别，进来看看：\n![共识机制](区块链三大共识机制/blockchain.jpeg)\n<!-- more -->\n<a>[三大共识机制POW、POS、DPOS的区别](https://bitfalls.com/2018/04/24/whats-the-difference-between-proof-of-work-pow-proof-of-stake-pos-and-delegated-pos/)</a>\n\n2019-09-08更新\n____________\n\n# 1.PoW算法\n## 1.1 PoW历史\n工作量证明源于经济学，是一个经济学的概念，是指为了达成某种目标而设定一个度量的方法。可以和平时工作中的绩效考核做类比：为了考核达到5星，你必须要完成leader指派给你的KPI，这些KPI就是工作量证明，完成它可能需要加班加点干很久，但是考评的时候leader验证起来却很容易。\n\n1993年，Cynthia Dwork和Moni Naor在学术论文中首次提出工作量证明的的概念。\n\n1997年，Adam Back在学术论文Hashcash中提出了Hahscash的概念，用于抵抗Dos攻击和垃圾邮件网关的滥用。Hahscash和比特币区块链的PoW如出一辙，在比特币之前，Hashcash的最常见应用场景就是反垃圾邮件。\n\n1999年，Markus Jakobsson和Ari Juels发表的论文中首次提出了Proof of Work这个名词。\n\nPoW需要两个角色：工作者和验证者，并且具备以下特点：\n>(1) 工作只能由验证者发布；\n>(2) 工作者必须要完成一定量的工作，具体的工作量有验证者给出；\n>(3) 工作者没有办法快速完成工作，要完成工作必须消耗一定代价，但是验证者验证起来很容易；\n\n## 1.2 Hashcash\nHashcash是Adam Back与1997年发明的一种抵抗邮件服务DoS攻击的算法。理解了Hashcash，就能够轻而易举的理解比特币中的PoW。\n\nHashcash是基于SHA1散列算法，它抵抗垃圾邮件的原理如下：\n\n假设S给R发送邮件，要想发送成功，则：\n>(1) S的邮件头中需要带一个称之为hashcash stamp的戳记；\n>(2) 对hashcash stamp进行SHA1后的值必须满足接收方R设定的条件：生成的hash值的前20位必须为0；\n>(3) hashcash stamp可能由多个域组成，比如生成邮件的时间，收件人地址等不变量，还包含可变量counter；\n>(4) 由于Hash的特点，导致发送方S没有办法快速找到满足条件的hashcash stamp，只能通过不断递增counter的值来穷举；\n>(5) 发送方S通过暴力破解的方式计算出满足接收方条件的值，这个过程发送方消耗了一定量的CPU。而验证方只需要对收到的hashcash stamp进行SHA1，检查结果是否满足；\n\n由于发送方计算满足邮件接收方条件的值需要消耗一定时间，对于垃圾邮件系统来说，这样的成本基本上是不可接受的，从而有效避免了垃圾邮件。\n\n## 1.3 PoW如何解决分布式系统的共识问题\n可以把比特币区块链看成一个分布式的账本，然后定义几个名词：\n>(1) 分布式账本：比特币区块链是一个分布式账本，这个账本人人可以随时查阅，但是由谁来记账需要通过共识算法来决定；\n>(2) 记账：将区块写入区块链；\n>(3) 记账者：就是平常所说的矿工，比特币系统中的每个矿工节点都是潜在的记账者；\n>(4) 选举：就是大家所熟知的挖矿，用某种算法从一批候选矿工（记账者）中选出一个来记账（写入账本）；\n记账者中大部分都是正常的，但是也有少数不怀好意的记账者，因此系统需要通过共识算法选出一个正常的记账者来记账，这其实就是一个拜占庭将军问题：在可能存在恶意节点时，如何保证账本的正确性。\n\n既然是拜占庭问题，那么像PBFT，PoW等算法都可以解决，比特币使用PoW，其达成共识的过程如下：\n>(1) 系统指定一个目标hash值，各个矿工节点竞争，构造出候选区块，并不断计算区块头hash，直到得到满足条件的hash为止；\n>(2) 与hashcash一样，矿工节点除了暴力破解，没有快速找到答案的办法；\n>(3) 率先计算出解的矿工节点将区块广播给全网，其他节点验证区块（工作量是否满足，交易是否合法），没有问题就将区块加入到区块链中；\n>(4) 计算出解的矿工得到一笔奖励费；\n很明显，这是一个凭算力取胜的游戏，简单分析一下：\n假设系统有4个矿工节点A，B，C，D，则：\n>(1) 如果4个矿工节点的算力都相同，其中存在一个恶意节点，那么最终能正确写入账本的概率是3/4，而被恶意矿工写入的概率是1/4；\n>(2) 假如B是恶意节点，他买了一台奇快的专用矿机，使得他的算力大增，达到了全部矿工节点算力的51%，那么系统基本上就被这个恶意矿工控制；\n因此，系统最坏的情况下能容忍的问题节点的数量是：占据整个系统51%算力的问题节点的数量，当然要掌控这么高的算力还是很困难的。\n关于具体的源码，后续会单独用一篇文章来分析比特币挖矿的过程，本文先理解PoW算法就好。\n\n# 2.PoS算法\n## 2.1 PoS的提出\nPoW算法存在两个问题：\n>(1) 太浪费资源，因为需要巨量的计算，会浪费资源（电力）；\n>(2) 存在51%攻击问题：一旦能掌握系统51%的算力基本上就能控制整个系统。\n>(3) 系统的吞吐量降低，比如比特币，平均每10分钟才产生一个区块；\n为了克服PoW算法的问题，2012年Sunny King提出了PoS权益证明算法，并发布了点点币（PPCoin），点点币中采用了PoS作为共识算法。\nPoS与PoW原理上很相似，都是一种基于概率的解决共识问题的算法。只不过PoW是拼算力，算力越强的抢到记账权的概率越大，而PoS则是拼财力，谁的财力越高，抢到记账权的概率就越大。\n\n## 2.2 PoS算法的原理\nPoS一个重要的概念是币龄，币龄 = 持有的币数 * 持有币的天数，例如钱包里有90个点点币，都持有了10天，则币龄=900；\n与PoW一样，为了抢到将区块写入区块链的权利，节点同样要进行hash计算，只不过最终的解和币龄有关，计算公式：\nproofHash < coinAge * target；\ncoinAge是币龄，target是一个目标值，用于调整难度。coinAge * target的值越大，难度就越小，抢到区块的概率就越高。\n假如你的钱包里是0个币，那么你的币龄就是0, 计算一个小于0的hash值的概率基本上也0，因此基本上抢不到区块；\nPoS可以解决PoW的问题：\n>(1) 首先，不需要PoW那么大的算力，可以减少资源浪费；\n>(2) 不容易遭受51%攻击，相比起掌握系统一半以上的算力，拥有整个系统51%的财力会更加困难。\n但是PoS也存在明显的缺陷：\n>(1) 容易被垄断：因为持币越多，持有的越久，币龄就越高，越容易挖到区块并得到激励，持币少的人基本上没有机会，这样整个系统的安全性实际上会被持币数量较大的一部分人（大股东们）掌握；而比特币则不存在这个问题，因为理论上任何人都可以购买矿机获得提高自己的算力（甚至可以联合起来），提升自己挖矿成功的概率；\n>(2) 很难应对分叉的情况：当出现分叉时，PoS可以在两条链上同时挖矿并获得收益。而PoW则不存在这个问题，因为当出现分叉以后，PoW总是选择工作量大的链做为主链。\n\n# 3.DPoS算法\nPoS算法中记账权很容易被持币较多的人垄断，从而容易趋于中心化（永远是持币多的那些人获得写入区块并获得奖励），于是又有了DPoS（委托权益证明）算法。与PoS算法相比，DPoS中多了受托人的概念。DPoS算法是在2014年由Bitshares的首席开发者Dan Larimer提出，此人现为EOS的CTO。DPoS算法的原理如下：\n>(1) 区块由受托人产生并写入区块链；\n>(2) 受托人由持币人选举产生；\n>(3) 根据受托人所得的票数排名，选取排名最靠前的若干（一般为101位）作为记账节点，来生成区块并写入区块链；\n>(4) 被选中的受托人会隔一定的周期进行一次调整；\n首先，为了利益最大化，股东会选择将票投给那些信誉好，可靠性高的节点；\n其次，受托人每隔一定的周期就会重新投票进行调整，更加民主和公平。这就好比公司选举领导层干部，为了公司利益最大化，股东一般会选择能力强的人进入管理层。而一旦管理层出了问题领导，股东可以把他撸下去，重新投票选择更胜任的人。\n\n# 4.总结\n本文介绍了PoW、PoS两类基于概率的共识算法，任何一个区块链都必须要解决区块何时产生，由谁将区块写入区块链的问题，PoW和PoS解决的思路总结起来就是：\n>(1) PoW：比拼算力，算力越强越容易拿到写区块链的权利；\n>(2) PoS：比拼财力，占的股份越大（币龄越高），越容易拿到记账权；\n>(3) DPoS：引入了受托人，由投票选举出的若干信誉度更高的受托人记账，受托人每隔一定周期调整。\n这些算法在许多的区块链中被广泛使用，这些算法是区块链安全的基石，学习中需要结合项目源码加以理解，弄清楚区块链到底在共识什么，为什么需要共识，共识算法是如何解决这些问题的。\n以太坊将在比特币创世块挖出的那一天2020年1月3日升级ETH1.0为ETH2.0，由POW共识改为POS共识，期待他的表现。\n\n\n你需要做的就是坚持。","slug":"区块链三大共识机制","published":1,"updated":"2019-09-08T07:28:31.065Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0sr002ofbs61q8xby1z","content":"<p>区块链中三大共识机制POW、POS、DPOS的区别，进来看看：<br><img src=\"/2019/09/03/区块链三大共识机制/blockchain.jpeg\" alt=\"共识机制\"></p>\n<a id=\"more\"></a>\n<p><a><a href=\"https://bitfalls.com/2018/04/24/whats-the-difference-between-proof-of-work-pow-proof-of-stake-pos-and-delegated-pos/\" target=\"_blank\" rel=\"noopener\">三大共识机制POW、POS、DPOS的区别</a></a></p>\n<p>2019-09-08更新</p>\n<hr>\n<h1 id=\"1-PoW算法\"><a href=\"#1-PoW算法\" class=\"headerlink\" title=\"1.PoW算法\"></a>1.PoW算法</h1><h2 id=\"1-1-PoW历史\"><a href=\"#1-1-PoW历史\" class=\"headerlink\" title=\"1.1 PoW历史\"></a>1.1 PoW历史</h2><p>工作量证明源于经济学，是一个经济学的概念，是指为了达成某种目标而设定一个度量的方法。可以和平时工作中的绩效考核做类比：为了考核达到5星，你必须要完成leader指派给你的KPI，这些KPI就是工作量证明，完成它可能需要加班加点干很久，但是考评的时候leader验证起来却很容易。</p>\n<p>1993年，Cynthia Dwork和Moni Naor在学术论文中首次提出工作量证明的的概念。</p>\n<p>1997年，Adam Back在学术论文Hashcash中提出了Hahscash的概念，用于抵抗Dos攻击和垃圾邮件网关的滥用。Hahscash和比特币区块链的PoW如出一辙，在比特币之前，Hashcash的最常见应用场景就是反垃圾邮件。</p>\n<p>1999年，Markus Jakobsson和Ari Juels发表的论文中首次提出了Proof of Work这个名词。</p>\n<p>PoW需要两个角色：工作者和验证者，并且具备以下特点：</p>\n<blockquote>\n<p>(1) 工作只能由验证者发布；<br>(2) 工作者必须要完成一定量的工作，具体的工作量有验证者给出；<br>(3) 工作者没有办法快速完成工作，要完成工作必须消耗一定代价，但是验证者验证起来很容易；</p>\n</blockquote>\n<h2 id=\"1-2-Hashcash\"><a href=\"#1-2-Hashcash\" class=\"headerlink\" title=\"1.2 Hashcash\"></a>1.2 Hashcash</h2><p>Hashcash是Adam Back与1997年发明的一种抵抗邮件服务DoS攻击的算法。理解了Hashcash，就能够轻而易举的理解比特币中的PoW。</p>\n<p>Hashcash是基于SHA1散列算法，它抵抗垃圾邮件的原理如下：</p>\n<p>假设S给R发送邮件，要想发送成功，则：</p>\n<blockquote>\n<p>(1) S的邮件头中需要带一个称之为hashcash stamp的戳记；<br>(2) 对hashcash stamp进行SHA1后的值必须满足接收方R设定的条件：生成的hash值的前20位必须为0；<br>(3) hashcash stamp可能由多个域组成，比如生成邮件的时间，收件人地址等不变量，还包含可变量counter；<br>(4) 由于Hash的特点，导致发送方S没有办法快速找到满足条件的hashcash stamp，只能通过不断递增counter的值来穷举；<br>(5) 发送方S通过暴力破解的方式计算出满足接收方条件的值，这个过程发送方消耗了一定量的CPU。而验证方只需要对收到的hashcash stamp进行SHA1，检查结果是否满足；</p>\n</blockquote>\n<p>由于发送方计算满足邮件接收方条件的值需要消耗一定时间，对于垃圾邮件系统来说，这样的成本基本上是不可接受的，从而有效避免了垃圾邮件。</p>\n<h2 id=\"1-3-PoW如何解决分布式系统的共识问题\"><a href=\"#1-3-PoW如何解决分布式系统的共识问题\" class=\"headerlink\" title=\"1.3 PoW如何解决分布式系统的共识问题\"></a>1.3 PoW如何解决分布式系统的共识问题</h2><p>可以把比特币区块链看成一个分布式的账本，然后定义几个名词：</p>\n<blockquote>\n<p>(1) 分布式账本：比特币区块链是一个分布式账本，这个账本人人可以随时查阅，但是由谁来记账需要通过共识算法来决定；<br>(2) 记账：将区块写入区块链；<br>(3) 记账者：就是平常所说的矿工，比特币系统中的每个矿工节点都是潜在的记账者；<br>(4) 选举：就是大家所熟知的挖矿，用某种算法从一批候选矿工（记账者）中选出一个来记账（写入账本）；<br>记账者中大部分都是正常的，但是也有少数不怀好意的记账者，因此系统需要通过共识算法选出一个正常的记账者来记账，这其实就是一个拜占庭将军问题：在可能存在恶意节点时，如何保证账本的正确性。</p>\n</blockquote>\n<p>既然是拜占庭问题，那么像PBFT，PoW等算法都可以解决，比特币使用PoW，其达成共识的过程如下：</p>\n<blockquote>\n<p>(1) 系统指定一个目标hash值，各个矿工节点竞争，构造出候选区块，并不断计算区块头hash，直到得到满足条件的hash为止；<br>(2) 与hashcash一样，矿工节点除了暴力破解，没有快速找到答案的办法；<br>(3) 率先计算出解的矿工节点将区块广播给全网，其他节点验证区块（工作量是否满足，交易是否合法），没有问题就将区块加入到区块链中；<br>(4) 计算出解的矿工得到一笔奖励费；<br>很明显，这是一个凭算力取胜的游戏，简单分析一下：<br>假设系统有4个矿工节点A，B，C，D，则：<br>(1) 如果4个矿工节点的算力都相同，其中存在一个恶意节点，那么最终能正确写入账本的概率是3/4，而被恶意矿工写入的概率是1/4；<br>(2) 假如B是恶意节点，他买了一台奇快的专用矿机，使得他的算力大增，达到了全部矿工节点算力的51%，那么系统基本上就被这个恶意矿工控制；<br>因此，系统最坏的情况下能容忍的问题节点的数量是：占据整个系统51%算力的问题节点的数量，当然要掌控这么高的算力还是很困难的。<br>关于具体的源码，后续会单独用一篇文章来分析比特币挖矿的过程，本文先理解PoW算法就好。</p>\n</blockquote>\n<h1 id=\"2-PoS算法\"><a href=\"#2-PoS算法\" class=\"headerlink\" title=\"2.PoS算法\"></a>2.PoS算法</h1><h2 id=\"2-1-PoS的提出\"><a href=\"#2-1-PoS的提出\" class=\"headerlink\" title=\"2.1 PoS的提出\"></a>2.1 PoS的提出</h2><p>PoW算法存在两个问题：</p>\n<blockquote>\n<p>(1) 太浪费资源，因为需要巨量的计算，会浪费资源（电力）；<br>(2) 存在51%攻击问题：一旦能掌握系统51%的算力基本上就能控制整个系统。<br>(3) 系统的吞吐量降低，比如比特币，平均每10分钟才产生一个区块；<br>为了克服PoW算法的问题，2012年Sunny King提出了PoS权益证明算法，并发布了点点币（PPCoin），点点币中采用了PoS作为共识算法。<br>PoS与PoW原理上很相似，都是一种基于概率的解决共识问题的算法。只不过PoW是拼算力，算力越强的抢到记账权的概率越大，而PoS则是拼财力，谁的财力越高，抢到记账权的概率就越大。</p>\n</blockquote>\n<h2 id=\"2-2-PoS算法的原理\"><a href=\"#2-2-PoS算法的原理\" class=\"headerlink\" title=\"2.2 PoS算法的原理\"></a>2.2 PoS算法的原理</h2><p>PoS一个重要的概念是币龄，币龄 = 持有的币数 * 持有币的天数，例如钱包里有90个点点币，都持有了10天，则币龄=900；<br>与PoW一样，为了抢到将区块写入区块链的权利，节点同样要进行hash计算，只不过最终的解和币龄有关，计算公式：<br>proofHash &lt; coinAge * target；<br>coinAge是币龄，target是一个目标值，用于调整难度。coinAge * target的值越大，难度就越小，抢到区块的概率就越高。<br>假如你的钱包里是0个币，那么你的币龄就是0, 计算一个小于0的hash值的概率基本上也0，因此基本上抢不到区块；<br>PoS可以解决PoW的问题：</p>\n<blockquote>\n<p>(1) 首先，不需要PoW那么大的算力，可以减少资源浪费；<br>(2) 不容易遭受51%攻击，相比起掌握系统一半以上的算力，拥有整个系统51%的财力会更加困难。<br>但是PoS也存在明显的缺陷：<br>(1) 容易被垄断：因为持币越多，持有的越久，币龄就越高，越容易挖到区块并得到激励，持币少的人基本上没有机会，这样整个系统的安全性实际上会被持币数量较大的一部分人（大股东们）掌握；而比特币则不存在这个问题，因为理论上任何人都可以购买矿机获得提高自己的算力（甚至可以联合起来），提升自己挖矿成功的概率；<br>(2) 很难应对分叉的情况：当出现分叉时，PoS可以在两条链上同时挖矿并获得收益。而PoW则不存在这个问题，因为当出现分叉以后，PoW总是选择工作量大的链做为主链。</p>\n</blockquote>\n<h1 id=\"3-DPoS算法\"><a href=\"#3-DPoS算法\" class=\"headerlink\" title=\"3.DPoS算法\"></a>3.DPoS算法</h1><p>PoS算法中记账权很容易被持币较多的人垄断，从而容易趋于中心化（永远是持币多的那些人获得写入区块并获得奖励），于是又有了DPoS（委托权益证明）算法。与PoS算法相比，DPoS中多了受托人的概念。DPoS算法是在2014年由Bitshares的首席开发者Dan Larimer提出，此人现为EOS的CTO。DPoS算法的原理如下：</p>\n<blockquote>\n<p>(1) 区块由受托人产生并写入区块链；<br>(2) 受托人由持币人选举产生；<br>(3) 根据受托人所得的票数排名，选取排名最靠前的若干（一般为101位）作为记账节点，来生成区块并写入区块链；<br>(4) 被选中的受托人会隔一定的周期进行一次调整；<br>首先，为了利益最大化，股东会选择将票投给那些信誉好，可靠性高的节点；<br>其次，受托人每隔一定的周期就会重新投票进行调整，更加民主和公平。这就好比公司选举领导层干部，为了公司利益最大化，股东一般会选择能力强的人进入管理层。而一旦管理层出了问题领导，股东可以把他撸下去，重新投票选择更胜任的人。</p>\n</blockquote>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h1><p>本文介绍了PoW、PoS两类基于概率的共识算法，任何一个区块链都必须要解决区块何时产生，由谁将区块写入区块链的问题，PoW和PoS解决的思路总结起来就是：</p>\n<blockquote>\n<p>(1) PoW：比拼算力，算力越强越容易拿到写区块链的权利；<br>(2) PoS：比拼财力，占的股份越大（币龄越高），越容易拿到记账权；<br>(3) DPoS：引入了受托人，由投票选举出的若干信誉度更高的受托人记账，受托人每隔一定周期调整。<br>这些算法在许多的区块链中被广泛使用，这些算法是区块链安全的基石，学习中需要结合项目源码加以理解，弄清楚区块链到底在共识什么，为什么需要共识，共识算法是如何解决这些问题的。<br>以太坊将在比特币创世块挖出的那一天2020年1月3日升级ETH1.0为ETH2.0，由POW共识改为POS共识，期待他的表现。</p>\n</blockquote>\n<p>你需要做的就是坚持。</p>\n","site":{"data":{}},"excerpt":"<p>区块链中三大共识机制POW、POS、DPOS的区别，进来看看：<br><img src=\"/2019/09/03/区块链三大共识机制/blockchain.jpeg\" alt=\"共识机制\"></p>","more":"<p><a><a href=\"https://bitfalls.com/2018/04/24/whats-the-difference-between-proof-of-work-pow-proof-of-stake-pos-and-delegated-pos/\" target=\"_blank\" rel=\"noopener\">三大共识机制POW、POS、DPOS的区别</a></a></p>\n<p>2019-09-08更新</p>\n<hr>\n<h1 id=\"1-PoW算法\"><a href=\"#1-PoW算法\" class=\"headerlink\" title=\"1.PoW算法\"></a>1.PoW算法</h1><h2 id=\"1-1-PoW历史\"><a href=\"#1-1-PoW历史\" class=\"headerlink\" title=\"1.1 PoW历史\"></a>1.1 PoW历史</h2><p>工作量证明源于经济学，是一个经济学的概念，是指为了达成某种目标而设定一个度量的方法。可以和平时工作中的绩效考核做类比：为了考核达到5星，你必须要完成leader指派给你的KPI，这些KPI就是工作量证明，完成它可能需要加班加点干很久，但是考评的时候leader验证起来却很容易。</p>\n<p>1993年，Cynthia Dwork和Moni Naor在学术论文中首次提出工作量证明的的概念。</p>\n<p>1997年，Adam Back在学术论文Hashcash中提出了Hahscash的概念，用于抵抗Dos攻击和垃圾邮件网关的滥用。Hahscash和比特币区块链的PoW如出一辙，在比特币之前，Hashcash的最常见应用场景就是反垃圾邮件。</p>\n<p>1999年，Markus Jakobsson和Ari Juels发表的论文中首次提出了Proof of Work这个名词。</p>\n<p>PoW需要两个角色：工作者和验证者，并且具备以下特点：</p>\n<blockquote>\n<p>(1) 工作只能由验证者发布；<br>(2) 工作者必须要完成一定量的工作，具体的工作量有验证者给出；<br>(3) 工作者没有办法快速完成工作，要完成工作必须消耗一定代价，但是验证者验证起来很容易；</p>\n</blockquote>\n<h2 id=\"1-2-Hashcash\"><a href=\"#1-2-Hashcash\" class=\"headerlink\" title=\"1.2 Hashcash\"></a>1.2 Hashcash</h2><p>Hashcash是Adam Back与1997年发明的一种抵抗邮件服务DoS攻击的算法。理解了Hashcash，就能够轻而易举的理解比特币中的PoW。</p>\n<p>Hashcash是基于SHA1散列算法，它抵抗垃圾邮件的原理如下：</p>\n<p>假设S给R发送邮件，要想发送成功，则：</p>\n<blockquote>\n<p>(1) S的邮件头中需要带一个称之为hashcash stamp的戳记；<br>(2) 对hashcash stamp进行SHA1后的值必须满足接收方R设定的条件：生成的hash值的前20位必须为0；<br>(3) hashcash stamp可能由多个域组成，比如生成邮件的时间，收件人地址等不变量，还包含可变量counter；<br>(4) 由于Hash的特点，导致发送方S没有办法快速找到满足条件的hashcash stamp，只能通过不断递增counter的值来穷举；<br>(5) 发送方S通过暴力破解的方式计算出满足接收方条件的值，这个过程发送方消耗了一定量的CPU。而验证方只需要对收到的hashcash stamp进行SHA1，检查结果是否满足；</p>\n</blockquote>\n<p>由于发送方计算满足邮件接收方条件的值需要消耗一定时间，对于垃圾邮件系统来说，这样的成本基本上是不可接受的，从而有效避免了垃圾邮件。</p>\n<h2 id=\"1-3-PoW如何解决分布式系统的共识问题\"><a href=\"#1-3-PoW如何解决分布式系统的共识问题\" class=\"headerlink\" title=\"1.3 PoW如何解决分布式系统的共识问题\"></a>1.3 PoW如何解决分布式系统的共识问题</h2><p>可以把比特币区块链看成一个分布式的账本，然后定义几个名词：</p>\n<blockquote>\n<p>(1) 分布式账本：比特币区块链是一个分布式账本，这个账本人人可以随时查阅，但是由谁来记账需要通过共识算法来决定；<br>(2) 记账：将区块写入区块链；<br>(3) 记账者：就是平常所说的矿工，比特币系统中的每个矿工节点都是潜在的记账者；<br>(4) 选举：就是大家所熟知的挖矿，用某种算法从一批候选矿工（记账者）中选出一个来记账（写入账本）；<br>记账者中大部分都是正常的，但是也有少数不怀好意的记账者，因此系统需要通过共识算法选出一个正常的记账者来记账，这其实就是一个拜占庭将军问题：在可能存在恶意节点时，如何保证账本的正确性。</p>\n</blockquote>\n<p>既然是拜占庭问题，那么像PBFT，PoW等算法都可以解决，比特币使用PoW，其达成共识的过程如下：</p>\n<blockquote>\n<p>(1) 系统指定一个目标hash值，各个矿工节点竞争，构造出候选区块，并不断计算区块头hash，直到得到满足条件的hash为止；<br>(2) 与hashcash一样，矿工节点除了暴力破解，没有快速找到答案的办法；<br>(3) 率先计算出解的矿工节点将区块广播给全网，其他节点验证区块（工作量是否满足，交易是否合法），没有问题就将区块加入到区块链中；<br>(4) 计算出解的矿工得到一笔奖励费；<br>很明显，这是一个凭算力取胜的游戏，简单分析一下：<br>假设系统有4个矿工节点A，B，C，D，则：<br>(1) 如果4个矿工节点的算力都相同，其中存在一个恶意节点，那么最终能正确写入账本的概率是3/4，而被恶意矿工写入的概率是1/4；<br>(2) 假如B是恶意节点，他买了一台奇快的专用矿机，使得他的算力大增，达到了全部矿工节点算力的51%，那么系统基本上就被这个恶意矿工控制；<br>因此，系统最坏的情况下能容忍的问题节点的数量是：占据整个系统51%算力的问题节点的数量，当然要掌控这么高的算力还是很困难的。<br>关于具体的源码，后续会单独用一篇文章来分析比特币挖矿的过程，本文先理解PoW算法就好。</p>\n</blockquote>\n<h1 id=\"2-PoS算法\"><a href=\"#2-PoS算法\" class=\"headerlink\" title=\"2.PoS算法\"></a>2.PoS算法</h1><h2 id=\"2-1-PoS的提出\"><a href=\"#2-1-PoS的提出\" class=\"headerlink\" title=\"2.1 PoS的提出\"></a>2.1 PoS的提出</h2><p>PoW算法存在两个问题：</p>\n<blockquote>\n<p>(1) 太浪费资源，因为需要巨量的计算，会浪费资源（电力）；<br>(2) 存在51%攻击问题：一旦能掌握系统51%的算力基本上就能控制整个系统。<br>(3) 系统的吞吐量降低，比如比特币，平均每10分钟才产生一个区块；<br>为了克服PoW算法的问题，2012年Sunny King提出了PoS权益证明算法，并发布了点点币（PPCoin），点点币中采用了PoS作为共识算法。<br>PoS与PoW原理上很相似，都是一种基于概率的解决共识问题的算法。只不过PoW是拼算力，算力越强的抢到记账权的概率越大，而PoS则是拼财力，谁的财力越高，抢到记账权的概率就越大。</p>\n</blockquote>\n<h2 id=\"2-2-PoS算法的原理\"><a href=\"#2-2-PoS算法的原理\" class=\"headerlink\" title=\"2.2 PoS算法的原理\"></a>2.2 PoS算法的原理</h2><p>PoS一个重要的概念是币龄，币龄 = 持有的币数 * 持有币的天数，例如钱包里有90个点点币，都持有了10天，则币龄=900；<br>与PoW一样，为了抢到将区块写入区块链的权利，节点同样要进行hash计算，只不过最终的解和币龄有关，计算公式：<br>proofHash &lt; coinAge * target；<br>coinAge是币龄，target是一个目标值，用于调整难度。coinAge * target的值越大，难度就越小，抢到区块的概率就越高。<br>假如你的钱包里是0个币，那么你的币龄就是0, 计算一个小于0的hash值的概率基本上也0，因此基本上抢不到区块；<br>PoS可以解决PoW的问题：</p>\n<blockquote>\n<p>(1) 首先，不需要PoW那么大的算力，可以减少资源浪费；<br>(2) 不容易遭受51%攻击，相比起掌握系统一半以上的算力，拥有整个系统51%的财力会更加困难。<br>但是PoS也存在明显的缺陷：<br>(1) 容易被垄断：因为持币越多，持有的越久，币龄就越高，越容易挖到区块并得到激励，持币少的人基本上没有机会，这样整个系统的安全性实际上会被持币数量较大的一部分人（大股东们）掌握；而比特币则不存在这个问题，因为理论上任何人都可以购买矿机获得提高自己的算力（甚至可以联合起来），提升自己挖矿成功的概率；<br>(2) 很难应对分叉的情况：当出现分叉时，PoS可以在两条链上同时挖矿并获得收益。而PoW则不存在这个问题，因为当出现分叉以后，PoW总是选择工作量大的链做为主链。</p>\n</blockquote>\n<h1 id=\"3-DPoS算法\"><a href=\"#3-DPoS算法\" class=\"headerlink\" title=\"3.DPoS算法\"></a>3.DPoS算法</h1><p>PoS算法中记账权很容易被持币较多的人垄断，从而容易趋于中心化（永远是持币多的那些人获得写入区块并获得奖励），于是又有了DPoS（委托权益证明）算法。与PoS算法相比，DPoS中多了受托人的概念。DPoS算法是在2014年由Bitshares的首席开发者Dan Larimer提出，此人现为EOS的CTO。DPoS算法的原理如下：</p>\n<blockquote>\n<p>(1) 区块由受托人产生并写入区块链；<br>(2) 受托人由持币人选举产生；<br>(3) 根据受托人所得的票数排名，选取排名最靠前的若干（一般为101位）作为记账节点，来生成区块并写入区块链；<br>(4) 被选中的受托人会隔一定的周期进行一次调整；<br>首先，为了利益最大化，股东会选择将票投给那些信誉好，可靠性高的节点；<br>其次，受托人每隔一定的周期就会重新投票进行调整，更加民主和公平。这就好比公司选举领导层干部，为了公司利益最大化，股东一般会选择能力强的人进入管理层。而一旦管理层出了问题领导，股东可以把他撸下去，重新投票选择更胜任的人。</p>\n</blockquote>\n<h1 id=\"4-总结\"><a href=\"#4-总结\" class=\"headerlink\" title=\"4.总结\"></a>4.总结</h1><p>本文介绍了PoW、PoS两类基于概率的共识算法，任何一个区块链都必须要解决区块何时产生，由谁将区块写入区块链的问题，PoW和PoS解决的思路总结起来就是：</p>\n<blockquote>\n<p>(1) PoW：比拼算力，算力越强越容易拿到写区块链的权利；<br>(2) PoS：比拼财力，占的股份越大（币龄越高），越容易拿到记账权；<br>(3) DPoS：引入了受托人，由投票选举出的若干信誉度更高的受托人记账，受托人每隔一定周期调整。<br>这些算法在许多的区块链中被广泛使用，这些算法是区块链安全的基石，学习中需要结合项目源码加以理解，弄清楚区块链到底在共识什么，为什么需要共识，共识算法是如何解决这些问题的。<br>以太坊将在比特币创世块挖出的那一天2020年1月3日升级ETH1.0为ETH2.0，由POW共识改为POS共识，期待他的表现。</p>\n</blockquote>\n<p>你需要做的就是坚持。</p>"},{"title":"操作mysql工具类","date":"2018-04-02T12:02:20.000Z","_content":"下面介绍的是操作mysql的工具类，集成增删改查等功能方法，使用dbcp数据库连接池，让你的程序更高效。具体请看详情。\n<!-- more -->\n备注：代码环境jdk8（jdk7也可以）\n# maven项目依赖\n```\n<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n\t<version>5.1.41</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-dbcp2</artifactId>\n\t<version>2.1.1</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-pool2</artifactId>\n\t<version>2.4.2</version>\n</dependency>\n```\n# 数据库连接配置文件\n配置文件jdbc.properties放置在项目resources目录下，配置如下：\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/zs1?useSSL=false\nusername=root\npassword=root\ninitialSize=10\nmaxIdle=5\nminIdle=2\nautoReconnect=true\nautoReconnectForPools=true\n```\n# 具体代码\n```\nimport com.payegis.czl.model.QueryLogHistory;\nimport org.apache.commons.dbcp2.BasicDataSourceFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.sql.DataSource;\nimport java.io.IOException;\nimport java.sql.*;\nimport java.util.*;\n\n/**\n * User: 陈作立\n * Date: 2018/2/2\n * Time: 13:39\n * Description: 操作mysql数据库工具类\n * Ps: mysql\n */\npublic class DBCPUtil {\n    private static Logger loger = LoggerFactory.getLogger(DBCPUtil.class);\n    private static DataSource dataSource = null;\n\n    static {\n        loger.info(\"---------开始初始化数据库连接池---------\");\n        Properties prop = new Properties();\n        try {\n            prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(\"jdbc.properties\"));\n            dataSource = BasicDataSourceFactory.createDataSource(prop);\n        } catch (IOException e) {\n            loger.error(\"---------加载[jdbc.properties]失败---------\", e);\n        } catch (Exception e) {\n            loger.error(\"----------初始化数据库连接池异常失败---------\", e);\n        }\n        loger.info(\"---------数据库连接池初始化完成---------\");\n    }\n\n    /**\n     * 获取数据库连接\n     *\n     * @return\n     */\n    public static Connection getConnection() {\n        Connection conn = null;\n        if (conn != null) {\n            return conn;\n        }\n        try {\n            conn = dataSource.getConnection();\n        } catch (SQLException e) {\n            loger.error(\"---------数据库连接池获取连接异常---------\", e);\n        }\n        return conn;\n    }\n\n    /**\n     * 关闭数据库连接\n     *\n     * @param connection 数据库连接\n     */\n    public static void close(Connection connection) {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                loger.error(\"---------关闭Connection异常---------\", e);\n            }\n        }\n    }\n\n    /**\n     * 关闭数据库连接\n     *\n     * @param conn 数据库连接\n     * @param stat 预编译\n     */\n    public static void close(Connection conn, Statement stat) {\n        try {\n            if (stat != null) {\n                stat.close();\n            }\n        } catch (SQLException e) {\n            loger.error(\"---------关闭Connection、PreparedStatement异常---------\", e);\n        } finally {\n            close(conn);\n        }\n    }\n\n    /**\n     * 关闭数据库连接\n     *\n     * @param conn 数据库连接\n     * @param stat 预编译\n     * @param rs   结果集\n     */\n    public static void close(Connection conn, Statement stat, ResultSet rs) {\n        try {\n            if (rs != null) {\n                rs.close();\n            }\n        } catch (SQLException e) {\n            loger.error(\"---------关闭ResultSet异常---------\", e);\n        } finally {\n            close(conn, stat);\n        }\n    }\n\n    /**\n     * 执行查询\n     *\n     * @param sql\n     * @param params\n     * @return\n     */\n    public static List<Map<String, Object>> executeQuery(String sql, Object... params) {\n        List<Map<String, Object>> rowDataList = new ArrayList<Map<String, Object>>();\n        Connection conn = null;\n        PreparedStatement stat = null;\n        ResultSet resultSet = null;\n        try {\n            conn = getConnection();\n            stat = conn.prepareStatement(sql);\n            stat.setFetchSize(10000);\n            setStatParams(stat, params);\n            resultSet = stat.executeQuery();\n            rowDataList = getResultList(resultSet);\n        } catch (SQLException e) {\n            loger.error(\"---------数据查询异常[\" + sql + \"]---------\", e);\n        } finally {\n            close(conn, stat, resultSet);\n        }\n        return rowDataList;\n    }\n\n    /**\n     * 更新数据\n     *\n     * @param sql    sql语句\n     * @param params 参数\n     * @return 更新成功:true 更新失败:false\n     */\n    public static boolean executeUpdate(String sql, Object... params) {\n        boolean isUpdated = false;\n        Connection conn = null;\n        PreparedStatement stat = null;\n        try {\n            conn = getConnection();\n            conn.setAutoCommit(false);\n            stat = conn.prepareStatement(sql);\n            setStatParams(stat, params);\n            int updatedNum = stat.executeUpdate();\n            isUpdated = updatedNum == 1;\n            conn.commit();\n        } catch (SQLException e) {\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            loger.error(\"---------更新失败! sql:[\" + sql + \"], params:[\" + Arrays.toString(params) + \"]---------\", e);\n        } finally {\n            close(conn, stat);\n        }\n        return isUpdated;\n    }\n\n    /**\n     * 执行批处理\n     *\n     * @param sqlList sql语句集合\n     * @return\n     */\n    public static boolean executeBatch(List<String> sqlList) {\n        if (sqlList == null || sqlList.isEmpty()) {\n            return true;\n        }\n        Connection conn = null;\n        Statement stat = null;\n        try {\n            conn = getConnection();\n            conn.setAutoCommit(false);\n            stat = conn.createStatement();\n            for (String sql : sqlList) {\n                stat.addBatch(sql);\n            }\n            stat.executeBatch();\n            conn.commit();\n            return true;\n        } catch (SQLException e) {\n            try {\n                conn.rollback();\n                loger.error(\"---------批处理异常，执行回滚---------\");\n            } catch (SQLException e1) {\n                loger.error(\"---------回滚异常---------\", e1);\n            }\n            loger.error(\"---------执行批处理异常---------\");\n            loger.error(\"---------批处理异常sql：\" + Arrays.toString(sqlList.toArray()));\n        } finally {\n            try {\n                if (conn != null) {\n                    conn.setAutoCommit(true);\n                }\n            } catch (SQLException e) {\n                loger.error(\"---------设置自动提交异常---------\", e);\n            }\n            close(conn, stat);\n        }\n        return false;\n    }\n\n    /**\n     * 获取列名及数据\n     *\n     * @param rs 数据集\n     * @return\n     */\n    private static List<Map<String, Object>> getResultList(ResultSet rs) throws SQLException {\n        List<Map<String, Object>> rowDataList = new ArrayList<Map<String, Object>>();\n        List<String> colNameList = getColumnName(rs);\n        while (rs.next()) {\n            Map<String, Object> rowData = new HashMap<String, Object>();\n            for (String colName : colNameList) {\n                rowData.put(colName, rs.getObject(colName));\n            }\n            if (!rowData.isEmpty()) {\n                rowDataList.add(rowData);\n            }\n        }\n        return rowDataList;\n    }\n\n    /**\n     * 获取列名\n     *\n     * @param rs 数据集\n     * @return\n     */\n    private static List<String> getColumnName(ResultSet rs) throws SQLException {\n        List<String> columnList = new ArrayList<String>();\n        try {\n            ResultSetMetaData metaData = rs.getMetaData();\n            int columnCount = metaData.getColumnCount();\n            for (int i = 1; i <= columnCount; i++) {\n                columnList.add(metaData.getColumnName(i));\n            }\n        } catch (SQLException e) {\n            loger.info(\"------获取表列表异常------\", e);\n            throw e;\n        }\n        return columnList;\n    }\n\n    /**\n     * 设置参数\n     *\n     * @param stat   预编译\n     * @param params 参数\n     */\n    private static void setStatParams(PreparedStatement stat, Object... params) throws SQLException {\n        if (stat != null && params != null) {\n            try {\n                for (int len = params.length, i = 1; i <= len; i++) {\n                    stat.setObject(i, params[i - 1]);\n                }\n            } catch (SQLException e) {\n                loger.error(\"------设置sql参数异常---------\");\n                throw e;\n            }\n        }\n    }\n\n}\n```\n好了，到这里就结束了，这个类基本可以满足操作mysql的需求了，大家放心使用吧，如果有什么问题，或者可以优化的地方，欢迎大家email我chenzuoli709@gmail.com","source":"_posts/操作mysql工具类.md","raw":"---\ntitle: 操作mysql工具类\ndate: 2018-04-02 20:02:20\ntags: [mysql,utils]\ncategories: 工具类\n---\n下面介绍的是操作mysql的工具类，集成增删改查等功能方法，使用dbcp数据库连接池，让你的程序更高效。具体请看详情。\n<!-- more -->\n备注：代码环境jdk8（jdk7也可以）\n# maven项目依赖\n```\n<!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->\n<dependency>\n\t<groupId>mysql</groupId>\n\t<artifactId>mysql-connector-java</artifactId>\n\t<version>5.1.41</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-dbcp2</artifactId>\n\t<version>2.1.1</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.commons</groupId>\n\t<artifactId>commons-pool2</artifactId>\n\t<version>2.4.2</version>\n</dependency>\n```\n# 数据库连接配置文件\n配置文件jdbc.properties放置在项目resources目录下，配置如下：\n```\ndriverClassName=com.mysql.jdbc.Driver\nurl=jdbc:mysql://localhost:3306/zs1?useSSL=false\nusername=root\npassword=root\ninitialSize=10\nmaxIdle=5\nminIdle=2\nautoReconnect=true\nautoReconnectForPools=true\n```\n# 具体代码\n```\nimport com.payegis.czl.model.QueryLogHistory;\nimport org.apache.commons.dbcp2.BasicDataSourceFactory;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\n\nimport javax.sql.DataSource;\nimport java.io.IOException;\nimport java.sql.*;\nimport java.util.*;\n\n/**\n * User: 陈作立\n * Date: 2018/2/2\n * Time: 13:39\n * Description: 操作mysql数据库工具类\n * Ps: mysql\n */\npublic class DBCPUtil {\n    private static Logger loger = LoggerFactory.getLogger(DBCPUtil.class);\n    private static DataSource dataSource = null;\n\n    static {\n        loger.info(\"---------开始初始化数据库连接池---------\");\n        Properties prop = new Properties();\n        try {\n            prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(\"jdbc.properties\"));\n            dataSource = BasicDataSourceFactory.createDataSource(prop);\n        } catch (IOException e) {\n            loger.error(\"---------加载[jdbc.properties]失败---------\", e);\n        } catch (Exception e) {\n            loger.error(\"----------初始化数据库连接池异常失败---------\", e);\n        }\n        loger.info(\"---------数据库连接池初始化完成---------\");\n    }\n\n    /**\n     * 获取数据库连接\n     *\n     * @return\n     */\n    public static Connection getConnection() {\n        Connection conn = null;\n        if (conn != null) {\n            return conn;\n        }\n        try {\n            conn = dataSource.getConnection();\n        } catch (SQLException e) {\n            loger.error(\"---------数据库连接池获取连接异常---------\", e);\n        }\n        return conn;\n    }\n\n    /**\n     * 关闭数据库连接\n     *\n     * @param connection 数据库连接\n     */\n    public static void close(Connection connection) {\n        if (connection != null) {\n            try {\n                connection.close();\n            } catch (SQLException e) {\n                loger.error(\"---------关闭Connection异常---------\", e);\n            }\n        }\n    }\n\n    /**\n     * 关闭数据库连接\n     *\n     * @param conn 数据库连接\n     * @param stat 预编译\n     */\n    public static void close(Connection conn, Statement stat) {\n        try {\n            if (stat != null) {\n                stat.close();\n            }\n        } catch (SQLException e) {\n            loger.error(\"---------关闭Connection、PreparedStatement异常---------\", e);\n        } finally {\n            close(conn);\n        }\n    }\n\n    /**\n     * 关闭数据库连接\n     *\n     * @param conn 数据库连接\n     * @param stat 预编译\n     * @param rs   结果集\n     */\n    public static void close(Connection conn, Statement stat, ResultSet rs) {\n        try {\n            if (rs != null) {\n                rs.close();\n            }\n        } catch (SQLException e) {\n            loger.error(\"---------关闭ResultSet异常---------\", e);\n        } finally {\n            close(conn, stat);\n        }\n    }\n\n    /**\n     * 执行查询\n     *\n     * @param sql\n     * @param params\n     * @return\n     */\n    public static List<Map<String, Object>> executeQuery(String sql, Object... params) {\n        List<Map<String, Object>> rowDataList = new ArrayList<Map<String, Object>>();\n        Connection conn = null;\n        PreparedStatement stat = null;\n        ResultSet resultSet = null;\n        try {\n            conn = getConnection();\n            stat = conn.prepareStatement(sql);\n            stat.setFetchSize(10000);\n            setStatParams(stat, params);\n            resultSet = stat.executeQuery();\n            rowDataList = getResultList(resultSet);\n        } catch (SQLException e) {\n            loger.error(\"---------数据查询异常[\" + sql + \"]---------\", e);\n        } finally {\n            close(conn, stat, resultSet);\n        }\n        return rowDataList;\n    }\n\n    /**\n     * 更新数据\n     *\n     * @param sql    sql语句\n     * @param params 参数\n     * @return 更新成功:true 更新失败:false\n     */\n    public static boolean executeUpdate(String sql, Object... params) {\n        boolean isUpdated = false;\n        Connection conn = null;\n        PreparedStatement stat = null;\n        try {\n            conn = getConnection();\n            conn.setAutoCommit(false);\n            stat = conn.prepareStatement(sql);\n            setStatParams(stat, params);\n            int updatedNum = stat.executeUpdate();\n            isUpdated = updatedNum == 1;\n            conn.commit();\n        } catch (SQLException e) {\n            try {\n                conn.rollback();\n            } catch (SQLException e1) {\n                e1.printStackTrace();\n            }\n            loger.error(\"---------更新失败! sql:[\" + sql + \"], params:[\" + Arrays.toString(params) + \"]---------\", e);\n        } finally {\n            close(conn, stat);\n        }\n        return isUpdated;\n    }\n\n    /**\n     * 执行批处理\n     *\n     * @param sqlList sql语句集合\n     * @return\n     */\n    public static boolean executeBatch(List<String> sqlList) {\n        if (sqlList == null || sqlList.isEmpty()) {\n            return true;\n        }\n        Connection conn = null;\n        Statement stat = null;\n        try {\n            conn = getConnection();\n            conn.setAutoCommit(false);\n            stat = conn.createStatement();\n            for (String sql : sqlList) {\n                stat.addBatch(sql);\n            }\n            stat.executeBatch();\n            conn.commit();\n            return true;\n        } catch (SQLException e) {\n            try {\n                conn.rollback();\n                loger.error(\"---------批处理异常，执行回滚---------\");\n            } catch (SQLException e1) {\n                loger.error(\"---------回滚异常---------\", e1);\n            }\n            loger.error(\"---------执行批处理异常---------\");\n            loger.error(\"---------批处理异常sql：\" + Arrays.toString(sqlList.toArray()));\n        } finally {\n            try {\n                if (conn != null) {\n                    conn.setAutoCommit(true);\n                }\n            } catch (SQLException e) {\n                loger.error(\"---------设置自动提交异常---------\", e);\n            }\n            close(conn, stat);\n        }\n        return false;\n    }\n\n    /**\n     * 获取列名及数据\n     *\n     * @param rs 数据集\n     * @return\n     */\n    private static List<Map<String, Object>> getResultList(ResultSet rs) throws SQLException {\n        List<Map<String, Object>> rowDataList = new ArrayList<Map<String, Object>>();\n        List<String> colNameList = getColumnName(rs);\n        while (rs.next()) {\n            Map<String, Object> rowData = new HashMap<String, Object>();\n            for (String colName : colNameList) {\n                rowData.put(colName, rs.getObject(colName));\n            }\n            if (!rowData.isEmpty()) {\n                rowDataList.add(rowData);\n            }\n        }\n        return rowDataList;\n    }\n\n    /**\n     * 获取列名\n     *\n     * @param rs 数据集\n     * @return\n     */\n    private static List<String> getColumnName(ResultSet rs) throws SQLException {\n        List<String> columnList = new ArrayList<String>();\n        try {\n            ResultSetMetaData metaData = rs.getMetaData();\n            int columnCount = metaData.getColumnCount();\n            for (int i = 1; i <= columnCount; i++) {\n                columnList.add(metaData.getColumnName(i));\n            }\n        } catch (SQLException e) {\n            loger.info(\"------获取表列表异常------\", e);\n            throw e;\n        }\n        return columnList;\n    }\n\n    /**\n     * 设置参数\n     *\n     * @param stat   预编译\n     * @param params 参数\n     */\n    private static void setStatParams(PreparedStatement stat, Object... params) throws SQLException {\n        if (stat != null && params != null) {\n            try {\n                for (int len = params.length, i = 1; i <= len; i++) {\n                    stat.setObject(i, params[i - 1]);\n                }\n            } catch (SQLException e) {\n                loger.error(\"------设置sql参数异常---------\");\n                throw e;\n            }\n        }\n    }\n\n}\n```\n好了，到这里就结束了，这个类基本可以满足操作mysql的需求了，大家放心使用吧，如果有什么问题，或者可以优化的地方，欢迎大家email我chenzuoli709@gmail.com","slug":"操作mysql工具类","published":1,"updated":"2018-12-11T13:57:13.094Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0ss002pfbs6xjkycen1","content":"<p>下面介绍的是操作mysql的工具类，集成增删改查等功能方法，使用dbcp数据库连接池，让你的程序更高效。具体请看详情。</p>\n<a id=\"more\"></a>\n<p>备注：代码环境jdk8（jdk7也可以）</p>\n<h1 id=\"maven项目依赖\"><a href=\"#maven项目依赖\" class=\"headerlink\" title=\"maven项目依赖\"></a>maven项目依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-dbcp2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据库连接配置文件\"><a href=\"#数据库连接配置文件\" class=\"headerlink\" title=\"数据库连接配置文件\"></a>数据库连接配置文件</h1><p>配置文件jdbc.properties放置在项目resources目录下，配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql://localhost:3306/zs1?useSSL=false</span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=root</span><br><span class=\"line\">initialSize=10</span><br><span class=\"line\">maxIdle=5</span><br><span class=\"line\">minIdle=2</span><br><span class=\"line\">autoReconnect=true</span><br><span class=\"line\">autoReconnectForPools=true</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.payegis.czl.model.QueryLogHistory;</span><br><span class=\"line\">import org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.sql.*;</span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * User: 陈作立</span><br><span class=\"line\"> * Date: 2018/2/2</span><br><span class=\"line\"> * Time: 13:39</span><br><span class=\"line\"> * Description: 操作mysql数据库工具类</span><br><span class=\"line\"> * Ps: mysql</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DBCPUtil &#123;</span><br><span class=\"line\">    private static Logger loger = LoggerFactory.getLogger(DBCPUtil.class);</span><br><span class=\"line\">    private static DataSource dataSource = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        loger.info(&quot;---------开始初始化数据库连接池---------&quot;);</span><br><span class=\"line\">        Properties prop = new Properties();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;));</span><br><span class=\"line\">            dataSource = BasicDataSourceFactory.createDataSource(prop);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------加载[jdbc.properties]失败---------&quot;, e);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            loger.error(&quot;----------初始化数据库连接池异常失败---------&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        loger.info(&quot;---------数据库连接池初始化完成---------&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Connection getConnection() &#123;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        if (conn != null) &#123;</span><br><span class=\"line\">            return conn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = dataSource.getConnection();</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------数据库连接池获取连接异常---------&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 关闭数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param connection 数据库连接</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void close(Connection connection) &#123;</span><br><span class=\"line\">        if (connection != null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                loger.error(&quot;---------关闭Connection异常---------&quot;, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 关闭数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param conn 数据库连接</span><br><span class=\"line\">     * @param stat 预编译</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void close(Connection conn, Statement stat) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (stat != null) &#123;</span><br><span class=\"line\">                stat.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------关闭Connection、PreparedStatement异常---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 关闭数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param conn 数据库连接</span><br><span class=\"line\">     * @param stat 预编译</span><br><span class=\"line\">     * @param rs   结果集</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void close(Connection conn, Statement stat, ResultSet rs) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (rs != null) &#123;</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------关闭ResultSet异常---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn, stat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 执行查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sql</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;Map&lt;String, Object&gt;&gt; executeQuery(String sql, Object... params) &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; rowDataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        PreparedStatement stat = null;</span><br><span class=\"line\">        ResultSet resultSet = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = getConnection();</span><br><span class=\"line\">            stat = conn.prepareStatement(sql);</span><br><span class=\"line\">            stat.setFetchSize(10000);</span><br><span class=\"line\">            setStatParams(stat, params);</span><br><span class=\"line\">            resultSet = stat.executeQuery();</span><br><span class=\"line\">            rowDataList = getResultList(resultSet);</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------数据查询异常[&quot; + sql + &quot;]---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn, stat, resultSet);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowDataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新数据</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sql    sql语句</span><br><span class=\"line\">     * @param params 参数</span><br><span class=\"line\">     * @return 更新成功:true 更新失败:false</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean executeUpdate(String sql, Object... params) &#123;</span><br><span class=\"line\">        boolean isUpdated = false;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        PreparedStatement stat = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = getConnection();</span><br><span class=\"line\">            conn.setAutoCommit(false);</span><br><span class=\"line\">            stat = conn.prepareStatement(sql);</span><br><span class=\"line\">            setStatParams(stat, params);</span><br><span class=\"line\">            int updatedNum = stat.executeUpdate();</span><br><span class=\"line\">            isUpdated = updatedNum == 1;</span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                conn.rollback();</span><br><span class=\"line\">            &#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">                e1.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            loger.error(&quot;---------更新失败! sql:[&quot; + sql + &quot;], params:[&quot; + Arrays.toString(params) + &quot;]---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn, stat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return isUpdated;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 执行批处理</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sqlList sql语句集合</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean executeBatch(List&lt;String&gt; sqlList) &#123;</span><br><span class=\"line\">        if (sqlList == null || sqlList.isEmpty()) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        Statement stat = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = getConnection();</span><br><span class=\"line\">            conn.setAutoCommit(false);</span><br><span class=\"line\">            stat = conn.createStatement();</span><br><span class=\"line\">            for (String sql : sqlList) &#123;</span><br><span class=\"line\">                stat.addBatch(sql);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stat.executeBatch();</span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                conn.rollback();</span><br><span class=\"line\">                loger.error(&quot;---------批处理异常，执行回滚---------&quot;);</span><br><span class=\"line\">            &#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">                loger.error(&quot;---------回滚异常---------&quot;, e1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            loger.error(&quot;---------执行批处理异常---------&quot;);</span><br><span class=\"line\">            loger.error(&quot;---------批处理异常sql：&quot; + Arrays.toString(sqlList.toArray()));</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (conn != null) &#123;</span><br><span class=\"line\">                    conn.setAutoCommit(true);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                loger.error(&quot;---------设置自动提交异常---------&quot;, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            close(conn, stat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取列名及数据</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param rs 数据集</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static List&lt;Map&lt;String, Object&gt;&gt; getResultList(ResultSet rs) throws SQLException &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; rowDataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; colNameList = getColumnName(rs);</span><br><span class=\"line\">        while (rs.next()) &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; rowData = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">            for (String colName : colNameList) &#123;</span><br><span class=\"line\">                rowData.put(colName, rs.getObject(colName));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (!rowData.isEmpty()) &#123;</span><br><span class=\"line\">                rowDataList.add(rowData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowDataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取列名</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param rs 数据集</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static List&lt;String&gt; getColumnName(ResultSet rs) throws SQLException &#123;</span><br><span class=\"line\">        List&lt;String&gt; columnList = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ResultSetMetaData metaData = rs.getMetaData();</span><br><span class=\"line\">            int columnCount = metaData.getColumnCount();</span><br><span class=\"line\">            for (int i = 1; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                columnList.add(metaData.getColumnName(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.info(&quot;------获取表列表异常------&quot;, e);</span><br><span class=\"line\">            throw e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return columnList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param stat   预编译</span><br><span class=\"line\">     * @param params 参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void setStatParams(PreparedStatement stat, Object... params) throws SQLException &#123;</span><br><span class=\"line\">        if (stat != null &amp;&amp; params != null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                for (int len = params.length, i = 1; i &lt;= len; i++) &#123;</span><br><span class=\"line\">                    stat.setObject(i, params[i - 1]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                loger.error(&quot;------设置sql参数异常---------&quot;);</span><br><span class=\"line\">                throw e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，到这里就结束了，这个类基本可以满足操作mysql的需求了，大家放心使用吧，如果有什么问题，或者可以优化的地方，欢迎大家email我<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a></p>\n","site":{"data":{}},"excerpt":"<p>下面介绍的是操作mysql的工具类，集成增删改查等功能方法，使用dbcp数据库连接池，让你的程序更高效。具体请看详情。</p>","more":"<p>备注：代码环境jdk8（jdk7也可以）</p>\n<h1 id=\"maven项目依赖\"><a href=\"#maven项目依赖\" class=\"headerlink\" title=\"maven项目依赖\"></a>maven项目依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;5.1.41&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-dbcp2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;commons-pool2&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;2.4.2&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"数据库连接配置文件\"><a href=\"#数据库连接配置文件\" class=\"headerlink\" title=\"数据库连接配置文件\"></a>数据库连接配置文件</h1><p>配置文件jdbc.properties放置在项目resources目录下，配置如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">driverClassName=com.mysql.jdbc.Driver</span><br><span class=\"line\">url=jdbc:mysql://localhost:3306/zs1?useSSL=false</span><br><span class=\"line\">username=root</span><br><span class=\"line\">password=root</span><br><span class=\"line\">initialSize=10</span><br><span class=\"line\">maxIdle=5</span><br><span class=\"line\">minIdle=2</span><br><span class=\"line\">autoReconnect=true</span><br><span class=\"line\">autoReconnectForPools=true</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"具体代码\"><a href=\"#具体代码\" class=\"headerlink\" title=\"具体代码\"></a>具体代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import com.payegis.czl.model.QueryLogHistory;</span><br><span class=\"line\">import org.apache.commons.dbcp2.BasicDataSourceFactory;</span><br><span class=\"line\">import org.slf4j.Logger;</span><br><span class=\"line\">import org.slf4j.LoggerFactory;</span><br><span class=\"line\"></span><br><span class=\"line\">import javax.sql.DataSource;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.sql.*;</span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * User: 陈作立</span><br><span class=\"line\"> * Date: 2018/2/2</span><br><span class=\"line\"> * Time: 13:39</span><br><span class=\"line\"> * Description: 操作mysql数据库工具类</span><br><span class=\"line\"> * Ps: mysql</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class DBCPUtil &#123;</span><br><span class=\"line\">    private static Logger loger = LoggerFactory.getLogger(DBCPUtil.class);</span><br><span class=\"line\">    private static DataSource dataSource = null;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        loger.info(&quot;---------开始初始化数据库连接池---------&quot;);</span><br><span class=\"line\">        Properties prop = new Properties();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            prop.load(DBCPUtil.class.getClassLoader().getResourceAsStream(&quot;jdbc.properties&quot;));</span><br><span class=\"line\">            dataSource = BasicDataSourceFactory.createDataSource(prop);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------加载[jdbc.properties]失败---------&quot;, e);</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            loger.error(&quot;----------初始化数据库连接池异常失败---------&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        loger.info(&quot;---------数据库连接池初始化完成---------&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static Connection getConnection() &#123;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        if (conn != null) &#123;</span><br><span class=\"line\">            return conn;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = dataSource.getConnection();</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------数据库连接池获取连接异常---------&quot;, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return conn;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 关闭数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param connection 数据库连接</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void close(Connection connection) &#123;</span><br><span class=\"line\">        if (connection != null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                connection.close();</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                loger.error(&quot;---------关闭Connection异常---------&quot;, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 关闭数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param conn 数据库连接</span><br><span class=\"line\">     * @param stat 预编译</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void close(Connection conn, Statement stat) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (stat != null) &#123;</span><br><span class=\"line\">                stat.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------关闭Connection、PreparedStatement异常---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 关闭数据库连接</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param conn 数据库连接</span><br><span class=\"line\">     * @param stat 预编译</span><br><span class=\"line\">     * @param rs   结果集</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void close(Connection conn, Statement stat, ResultSet rs) &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (rs != null) &#123;</span><br><span class=\"line\">                rs.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------关闭ResultSet异常---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn, stat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 执行查询</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sql</span><br><span class=\"line\">     * @param params</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;Map&lt;String, Object&gt;&gt; executeQuery(String sql, Object... params) &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; rowDataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        PreparedStatement stat = null;</span><br><span class=\"line\">        ResultSet resultSet = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = getConnection();</span><br><span class=\"line\">            stat = conn.prepareStatement(sql);</span><br><span class=\"line\">            stat.setFetchSize(10000);</span><br><span class=\"line\">            setStatParams(stat, params);</span><br><span class=\"line\">            resultSet = stat.executeQuery();</span><br><span class=\"line\">            rowDataList = getResultList(resultSet);</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.error(&quot;---------数据查询异常[&quot; + sql + &quot;]---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn, stat, resultSet);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowDataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 更新数据</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sql    sql语句</span><br><span class=\"line\">     * @param params 参数</span><br><span class=\"line\">     * @return 更新成功:true 更新失败:false</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean executeUpdate(String sql, Object... params) &#123;</span><br><span class=\"line\">        boolean isUpdated = false;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        PreparedStatement stat = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = getConnection();</span><br><span class=\"line\">            conn.setAutoCommit(false);</span><br><span class=\"line\">            stat = conn.prepareStatement(sql);</span><br><span class=\"line\">            setStatParams(stat, params);</span><br><span class=\"line\">            int updatedNum = stat.executeUpdate();</span><br><span class=\"line\">            isUpdated = updatedNum == 1;</span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                conn.rollback();</span><br><span class=\"line\">            &#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">                e1.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            loger.error(&quot;---------更新失败! sql:[&quot; + sql + &quot;], params:[&quot; + Arrays.toString(params) + &quot;]---------&quot;, e);</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            close(conn, stat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return isUpdated;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 执行批处理</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param sqlList sql语句集合</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean executeBatch(List&lt;String&gt; sqlList) &#123;</span><br><span class=\"line\">        if (sqlList == null || sqlList.isEmpty()) &#123;</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Connection conn = null;</span><br><span class=\"line\">        Statement stat = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conn = getConnection();</span><br><span class=\"line\">            conn.setAutoCommit(false);</span><br><span class=\"line\">            stat = conn.createStatement();</span><br><span class=\"line\">            for (String sql : sqlList) &#123;</span><br><span class=\"line\">                stat.addBatch(sql);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            stat.executeBatch();</span><br><span class=\"line\">            conn.commit();</span><br><span class=\"line\">            return true;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                conn.rollback();</span><br><span class=\"line\">                loger.error(&quot;---------批处理异常，执行回滚---------&quot;);</span><br><span class=\"line\">            &#125; catch (SQLException e1) &#123;</span><br><span class=\"line\">                loger.error(&quot;---------回滚异常---------&quot;, e1);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            loger.error(&quot;---------执行批处理异常---------&quot;);</span><br><span class=\"line\">            loger.error(&quot;---------批处理异常sql：&quot; + Arrays.toString(sqlList.toArray()));</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (conn != null) &#123;</span><br><span class=\"line\">                    conn.setAutoCommit(true);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                loger.error(&quot;---------设置自动提交异常---------&quot;, e);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            close(conn, stat);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取列名及数据</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param rs 数据集</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static List&lt;Map&lt;String, Object&gt;&gt; getResultList(ResultSet rs) throws SQLException &#123;</span><br><span class=\"line\">        List&lt;Map&lt;String, Object&gt;&gt; rowDataList = new ArrayList&lt;Map&lt;String, Object&gt;&gt;();</span><br><span class=\"line\">        List&lt;String&gt; colNameList = getColumnName(rs);</span><br><span class=\"line\">        while (rs.next()) &#123;</span><br><span class=\"line\">            Map&lt;String, Object&gt; rowData = new HashMap&lt;String, Object&gt;();</span><br><span class=\"line\">            for (String colName : colNameList) &#123;</span><br><span class=\"line\">                rowData.put(colName, rs.getObject(colName));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (!rowData.isEmpty()) &#123;</span><br><span class=\"line\">                rowDataList.add(rowData);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowDataList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 获取列名</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param rs 数据集</span><br><span class=\"line\">     * @return</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static List&lt;String&gt; getColumnName(ResultSet rs) throws SQLException &#123;</span><br><span class=\"line\">        List&lt;String&gt; columnList = new ArrayList&lt;String&gt;();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            ResultSetMetaData metaData = rs.getMetaData();</span><br><span class=\"line\">            int columnCount = metaData.getColumnCount();</span><br><span class=\"line\">            for (int i = 1; i &lt;= columnCount; i++) &#123;</span><br><span class=\"line\">                columnList.add(metaData.getColumnName(i));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">            loger.info(&quot;------获取表列表异常------&quot;, e);</span><br><span class=\"line\">            throw e;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return columnList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 设置参数</span><br><span class=\"line\">     *</span><br><span class=\"line\">     * @param stat   预编译</span><br><span class=\"line\">     * @param params 参数</span><br><span class=\"line\">     */</span><br><span class=\"line\">    private static void setStatParams(PreparedStatement stat, Object... params) throws SQLException &#123;</span><br><span class=\"line\">        if (stat != null &amp;&amp; params != null) &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                for (int len = params.length, i = 1; i &lt;= len; i++) &#123;</span><br><span class=\"line\">                    stat.setObject(i, params[i - 1]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125; catch (SQLException e) &#123;</span><br><span class=\"line\">                loger.error(&quot;------设置sql参数异常---------&quot;);</span><br><span class=\"line\">                throw e;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，到这里就结束了，这个类基本可以满足操作mysql的需求了，大家放心使用吧，如果有什么问题，或者可以优化的地方，欢迎大家email我<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a></p>"},{"title":"数据仓库元数据管理系统","date":"2019-09-21T15:07:45.000Z","notebook":"笔记","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信很多朋友都是第一次听说元数据管理系统这个名词，当然，从事非数据仓库工作的人，很少会接触到这个系统，即使是正在从事这方面工作的朋友，可能仍然对它不是很了解，那么今天我来聊一聊元数据管理系统。本文大部分观点与图片汇总字网络，如有不同观点，欢迎留言交流～～ .\n\n![data warehouse](数据仓库元数据管理系统/warehouse.jpeg)\n\n<!-- more -->\n\n# 一、元数据的定义\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照传统的定义，元数据（Metadata）是关于数据的数据。在数据仓库系统中，元数据可以帮助数据仓库管理员和数据仓库的开发人员非常方便地找到他们所关心的数据；元数据是描述数据仓库内数据的结构和建立方法的数据，可将其按用途的不同分为两类：技术元数据（Technical Metadata）和业务元数据（Business Metadata）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;技术元数据是存储关于数据仓库系统技术细节的数据，是用于开发和管理数据仓库使用的数据，它主要包括以下信息：\n\n- 数据仓库结构的描述，包括仓库模式、视图、维、层次结构和导出数据的定义，以及数据集市的位置和内容；\n- 业务系统、数据仓库和数据集市的体系结构和模式；\n- 汇总用的算法，包括度量和维定义算法，数据粒度、主题领域、聚集、汇总、预定义的查询与报告；\n- 由操作环境到数据仓库环境的映射，包括源数据和它们的内容、数据分割、数据提取、清理、转换规则和数据刷新规则、安全（用户授权和存取控制）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;业务元数据从业务角度描述了数据仓库中的数据，它提供了介于使用者和实际系统之间的语义层，使得不懂计算机技术的业务人员也能够“读懂”数据仓库中的数据。业务元数据主要包括以下信息：使用者的业务术语所表达的数据模型、对象名和属性名；访问数据的原则和数据的来源；系统所提供的分析方法以及公式和报表的信息；具体包括以下信息：\n\n- 企业概念模型：这是业务元数据所应提供的重要的信息，它表示企业数据模型的高层信息、整个企业的业务概念和相互关系。以这个企业模型为基础，不懂数据库技术和SQL语句的业务人员对数据仓库中的数据也能做到心中有数。\n- 多维数据模型：这是企业概念模型的重要组成部分，它告诉业务分析人员在数据集市当中有哪些维、维的类别、数据立方体以及数据集市中的聚合规则。这里的数据立方体表示某主题领域业务事实表和维表的多维组织形式。\n- 业务概念模型和物理数据之间的依赖：以上提到的业务元数据只是表示出了数据的业务视图，这些业务视图与实际的数据仓库或数据库、多维数据库中的表、字段、维、层次等之间的对应关系也应该在元数据知识库中有所体现。\n\n\n# 二、元数据的作用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与其说数据仓库是软件开发项目，还不如说是系统集成项目，因为它的主要工作是把所需的数据仓库工具集成在一起，完成数据的抽取、转换和加载，OLAP分析和数据挖掘等。如下图所示，它的典型结构由操作环境层、数据仓库层和业务层等组成。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中，第一层（操作环境层）是指整个企业内有关业务的OLTP系统和一些外部数据源；第二层是通过把第一层的相关数据抽取到一个中心区而组成的数据仓库层；第三层是为了完成对业务数据的分析而由各种工具组成的业务层。图中左边的部分是元数据管理，它起到了承上启下的作用，具体体现在以下几个方面：\n\n## 1.元数据是进行数据集成所必需的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库最大的特点就是它的集成性。这一特点不仅体现在它所包含的数据上，还体现在实施数据仓库项目的过程当中。一方面，从各个数据源中抽取的数据要按照一定的模式存入数据仓库中，这些数据源与数据仓库中数据的对应关系及转换规则都要存储在元数据知识库中；另一方面，在数据仓库项目实施过程中，直接建立数据仓库往往费时、费力，因此在实践当中，人们可能会按照统一的数据模型，首先建设数据集市，然后在各个数据集市的基础上再建设数据仓库。不过，当数据集市数量增多时很容易形成“蜘蛛网”现象，而元数据管理是解决“蜘蛛网”的关键。如果在建立数据集市的过程中，注意了元数据管理，在集成到数据仓库中时就会比较顺利；相反，如果在建设数据集市的过程中忽视了元数据管理，那么最后的集成过程就会很困难，甚至不可能实现。\n\n## 2.元数据定义的语义层可以帮助用户理解数据仓库中的数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终用户不可能象数据仓库系统管理员或开发人员那样熟悉数据库技术，因此迫切需要有一个“翻译”，能够使他们清晰地理解数据仓库中数据的含意。元数据可以实现业务模型与数据模型之间的映射，因而可以把数据以用户需要的方式“翻译”出来，从而帮助最终用户理解和使用数据。\n\n## 3.元数据是保证数据质量的关键\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库或数据集市建立好以后，使用者在使用的时候，常常会产生对数据的怀疑。这些怀疑往往是由于底层的数据对于用户来说是不“透明”的，使用者很自然地对结果产生怀疑。而借助元数据管理系统，最终的使用者对各个数据的来龙去脉以及数据抽取和转换的规则都会很方便地得到，这样他们自然会对数据具有信心；当然也可便捷地发现数据所存在的质量问题。甚至国外有学者还在元数据模型的基础上引入质量维，从更高的角度上来解决这一问题。\n\n## 4.元数据可以支持需求变化\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着信息技术的发展和企业职能的变化，企业的需求也在不断地改变。如何构造一个随着需求改变而平滑变化的软件系统，是软件工程领域中的一个重要问题。传统的信息系统往往是通过文档来适应需求变化，但是仅仅依靠文档还是远远不够的。成功的元数据管理系统可以把整个业务的工作流、数据流和信息流有效地管理起来，使得系统不依赖特定的开发人员，从而提高系统的可扩展性。\n\n# 三、元数据管理功能　\n## 1.数据地图\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据地图展现是以拓扑图的形式对数据系统的各类数据实体、数据处理过程元数据进行分层次的图形化展现，并通过不同层次的图形展现粒度控制，满足开发、运维或者业务上不同应用场景的图形查询和辅助分析需要。\n\n\n## 2.元数据分析\n### 2.1 血缘分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;血缘分析（也称血统分析）是指从某一实体出发，往回追溯其处理过程，直到数据系统的数据源接口。对于不同类型的实体，其涉及的转换过程可能有不同类型，如：对于底层仓库实体，涉及的是ETL处理过程；而对于仓库汇总表，可能既涉及ETL处理过程，又涉及仓库汇总处理过程；而对于指标，则除了上面的处理过程，还涉及指标生成的处理过程。数据源接口实体由源系统提供，作为数据系统的数据输入，其它的数据实体都经过了一个或多个不同类型的处理过程。血缘分析正是提供了这样一种功能，可以让使用者根据需要了解不同的处理过程，每个处理过程具体做什么，需要什么样的输入，又产生什么样的输出。\n\n### 2.2 影响分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影响分析是指从某一实体出发，寻找依赖该实体的处理过程实体或其他实体。如果需要可以采用递归方式寻找所有的依赖过程实体或其他实体。该功能支持当某些实体发生变化或者需要修改时，评估实体影响范围。\n\n## 2.3 实体关联分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体关联分析是从某一实体关联的其它实体和其参与的处理过程两个角度来查看具体数据的使用情况，形成一张实体和所参与处理过程的网络，从而进一步了解该实体的重要程度。本功能可以用来支撑需求变更影响评估的应用。\n\n## 2.4 实体差异分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体差异分析是对元数据的不同实体进行检查，用图形和表格的形式展现它们之间的差异，包括名字、属性及数据血缘和对系统其他部分影响的差异等,在数据系统中存在许多类似的实体。这些实体（如数据表）可能只有名字上或者是在属性中存在微小的差异，甚至有部分属性名字都相同，但处于不同的应用中。由于各种原因，这些微小的差异直接影响了数据统计结果，数据系统需要清楚了解这些差异。本功能有助于进一步统一统计口径，评估近似实体的差异\n\n## 2.5 指标一致性分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指标一致性分析是指用图形化的方式来分析比较两个指标的数据流图是否一致，从而了解指标计算过程是否一致。该功能是指标血缘分析的一种具体应用。指标一致性分析可以帮助用户清楚地了解到将要比较的两个指标在经营分析数据流图中各阶段所涉及的数据对象和转换关系是否一致，帮助用户更好地了解指标的来龙去脉，清楚理解分布在不同部门且名称相同的指标之间的差异，从而提高用户对指标值的信任。\n\n## 3.辅助应用优化\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;元数据对数据系统的数据、数据加工过程以及数据间的关系提供了准确的描述，利用血缘分析、影响分析和实体关联分析等元数据分析功能，可以识别与系统应用相关的技术资源，结合应用生命周期管理过程，辅助进行数据系统的应用优化.\n\n## 4.辅助安全管理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;企业数据平台所存储的数据和提供的各类分析应用，涉及到公司经营方面的各类敏感信息。因此在数据系统建设过程中，须采用全面的安全管理机制和措施来保障系统的数据安全。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统安全管理模块负责数据系统的数据敏感度、客户隐私信息和各环节审计日志记录管理，对数据系统的数据访问和功能使用进行有效监控。为实现数据系统对敏感数据和客户隐私信息的访问控制，进一步实现权限细化，安全管理模块应以元数据为依据，由元数据管理模块提供敏感数据定义和客户隐私信息定义，辅助安全管理模块完成相关安全管控操作。\n\n## 5.基于元数据的开发管理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统项目开发的主要环节包括：需求分析、设计、开发、测试和上线。开发管理应用可以提供相应的功能，对以上各环节的工作流程、相关资源、规则约束、输入输出信息等提供管理和支持。\n\nEnd～\n\n- - -\nI will be your side till the day i die.","source":"_posts/数据仓库元数据管理系统.md","raw":"---\ntitle: 数据仓库元数据管理系统\ndate: 2019-09-21 23:07:45\ntags: [数据仓库,元数据管理系统]\ncategories: 数据仓库\nnotebook: 笔记\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信很多朋友都是第一次听说元数据管理系统这个名词，当然，从事非数据仓库工作的人，很少会接触到这个系统，即使是正在从事这方面工作的朋友，可能仍然对它不是很了解，那么今天我来聊一聊元数据管理系统。本文大部分观点与图片汇总字网络，如有不同观点，欢迎留言交流～～ .\n\n![data warehouse](数据仓库元数据管理系统/warehouse.jpeg)\n\n<!-- more -->\n\n# 一、元数据的定义\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照传统的定义，元数据（Metadata）是关于数据的数据。在数据仓库系统中，元数据可以帮助数据仓库管理员和数据仓库的开发人员非常方便地找到他们所关心的数据；元数据是描述数据仓库内数据的结构和建立方法的数据，可将其按用途的不同分为两类：技术元数据（Technical Metadata）和业务元数据（Business Metadata）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;技术元数据是存储关于数据仓库系统技术细节的数据，是用于开发和管理数据仓库使用的数据，它主要包括以下信息：\n\n- 数据仓库结构的描述，包括仓库模式、视图、维、层次结构和导出数据的定义，以及数据集市的位置和内容；\n- 业务系统、数据仓库和数据集市的体系结构和模式；\n- 汇总用的算法，包括度量和维定义算法，数据粒度、主题领域、聚集、汇总、预定义的查询与报告；\n- 由操作环境到数据仓库环境的映射，包括源数据和它们的内容、数据分割、数据提取、清理、转换规则和数据刷新规则、安全（用户授权和存取控制）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;业务元数据从业务角度描述了数据仓库中的数据，它提供了介于使用者和实际系统之间的语义层，使得不懂计算机技术的业务人员也能够“读懂”数据仓库中的数据。业务元数据主要包括以下信息：使用者的业务术语所表达的数据模型、对象名和属性名；访问数据的原则和数据的来源；系统所提供的分析方法以及公式和报表的信息；具体包括以下信息：\n\n- 企业概念模型：这是业务元数据所应提供的重要的信息，它表示企业数据模型的高层信息、整个企业的业务概念和相互关系。以这个企业模型为基础，不懂数据库技术和SQL语句的业务人员对数据仓库中的数据也能做到心中有数。\n- 多维数据模型：这是企业概念模型的重要组成部分，它告诉业务分析人员在数据集市当中有哪些维、维的类别、数据立方体以及数据集市中的聚合规则。这里的数据立方体表示某主题领域业务事实表和维表的多维组织形式。\n- 业务概念模型和物理数据之间的依赖：以上提到的业务元数据只是表示出了数据的业务视图，这些业务视图与实际的数据仓库或数据库、多维数据库中的表、字段、维、层次等之间的对应关系也应该在元数据知识库中有所体现。\n\n\n# 二、元数据的作用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与其说数据仓库是软件开发项目，还不如说是系统集成项目，因为它的主要工作是把所需的数据仓库工具集成在一起，完成数据的抽取、转换和加载，OLAP分析和数据挖掘等。如下图所示，它的典型结构由操作环境层、数据仓库层和业务层等组成。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中，第一层（操作环境层）是指整个企业内有关业务的OLTP系统和一些外部数据源；第二层是通过把第一层的相关数据抽取到一个中心区而组成的数据仓库层；第三层是为了完成对业务数据的分析而由各种工具组成的业务层。图中左边的部分是元数据管理，它起到了承上启下的作用，具体体现在以下几个方面：\n\n## 1.元数据是进行数据集成所必需的\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库最大的特点就是它的集成性。这一特点不仅体现在它所包含的数据上，还体现在实施数据仓库项目的过程当中。一方面，从各个数据源中抽取的数据要按照一定的模式存入数据仓库中，这些数据源与数据仓库中数据的对应关系及转换规则都要存储在元数据知识库中；另一方面，在数据仓库项目实施过程中，直接建立数据仓库往往费时、费力，因此在实践当中，人们可能会按照统一的数据模型，首先建设数据集市，然后在各个数据集市的基础上再建设数据仓库。不过，当数据集市数量增多时很容易形成“蜘蛛网”现象，而元数据管理是解决“蜘蛛网”的关键。如果在建立数据集市的过程中，注意了元数据管理，在集成到数据仓库中时就会比较顺利；相反，如果在建设数据集市的过程中忽视了元数据管理，那么最后的集成过程就会很困难，甚至不可能实现。\n\n## 2.元数据定义的语义层可以帮助用户理解数据仓库中的数据\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终用户不可能象数据仓库系统管理员或开发人员那样熟悉数据库技术，因此迫切需要有一个“翻译”，能够使他们清晰地理解数据仓库中数据的含意。元数据可以实现业务模型与数据模型之间的映射，因而可以把数据以用户需要的方式“翻译”出来，从而帮助最终用户理解和使用数据。\n\n## 3.元数据是保证数据质量的关键\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库或数据集市建立好以后，使用者在使用的时候，常常会产生对数据的怀疑。这些怀疑往往是由于底层的数据对于用户来说是不“透明”的，使用者很自然地对结果产生怀疑。而借助元数据管理系统，最终的使用者对各个数据的来龙去脉以及数据抽取和转换的规则都会很方便地得到，这样他们自然会对数据具有信心；当然也可便捷地发现数据所存在的质量问题。甚至国外有学者还在元数据模型的基础上引入质量维，从更高的角度上来解决这一问题。\n\n## 4.元数据可以支持需求变化\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着信息技术的发展和企业职能的变化，企业的需求也在不断地改变。如何构造一个随着需求改变而平滑变化的软件系统，是软件工程领域中的一个重要问题。传统的信息系统往往是通过文档来适应需求变化，但是仅仅依靠文档还是远远不够的。成功的元数据管理系统可以把整个业务的工作流、数据流和信息流有效地管理起来，使得系统不依赖特定的开发人员，从而提高系统的可扩展性。\n\n# 三、元数据管理功能　\n## 1.数据地图\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据地图展现是以拓扑图的形式对数据系统的各类数据实体、数据处理过程元数据进行分层次的图形化展现，并通过不同层次的图形展现粒度控制，满足开发、运维或者业务上不同应用场景的图形查询和辅助分析需要。\n\n\n## 2.元数据分析\n### 2.1 血缘分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;血缘分析（也称血统分析）是指从某一实体出发，往回追溯其处理过程，直到数据系统的数据源接口。对于不同类型的实体，其涉及的转换过程可能有不同类型，如：对于底层仓库实体，涉及的是ETL处理过程；而对于仓库汇总表，可能既涉及ETL处理过程，又涉及仓库汇总处理过程；而对于指标，则除了上面的处理过程，还涉及指标生成的处理过程。数据源接口实体由源系统提供，作为数据系统的数据输入，其它的数据实体都经过了一个或多个不同类型的处理过程。血缘分析正是提供了这样一种功能，可以让使用者根据需要了解不同的处理过程，每个处理过程具体做什么，需要什么样的输入，又产生什么样的输出。\n\n### 2.2 影响分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影响分析是指从某一实体出发，寻找依赖该实体的处理过程实体或其他实体。如果需要可以采用递归方式寻找所有的依赖过程实体或其他实体。该功能支持当某些实体发生变化或者需要修改时，评估实体影响范围。\n\n## 2.3 实体关联分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体关联分析是从某一实体关联的其它实体和其参与的处理过程两个角度来查看具体数据的使用情况，形成一张实体和所参与处理过程的网络，从而进一步了解该实体的重要程度。本功能可以用来支撑需求变更影响评估的应用。\n\n## 2.4 实体差异分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体差异分析是对元数据的不同实体进行检查，用图形和表格的形式展现它们之间的差异，包括名字、属性及数据血缘和对系统其他部分影响的差异等,在数据系统中存在许多类似的实体。这些实体（如数据表）可能只有名字上或者是在属性中存在微小的差异，甚至有部分属性名字都相同，但处于不同的应用中。由于各种原因，这些微小的差异直接影响了数据统计结果，数据系统需要清楚了解这些差异。本功能有助于进一步统一统计口径，评估近似实体的差异\n\n## 2.5 指标一致性分析\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指标一致性分析是指用图形化的方式来分析比较两个指标的数据流图是否一致，从而了解指标计算过程是否一致。该功能是指标血缘分析的一种具体应用。指标一致性分析可以帮助用户清楚地了解到将要比较的两个指标在经营分析数据流图中各阶段所涉及的数据对象和转换关系是否一致，帮助用户更好地了解指标的来龙去脉，清楚理解分布在不同部门且名称相同的指标之间的差异，从而提高用户对指标值的信任。\n\n## 3.辅助应用优化\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;元数据对数据系统的数据、数据加工过程以及数据间的关系提供了准确的描述，利用血缘分析、影响分析和实体关联分析等元数据分析功能，可以识别与系统应用相关的技术资源，结合应用生命周期管理过程，辅助进行数据系统的应用优化.\n\n## 4.辅助安全管理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;企业数据平台所存储的数据和提供的各类分析应用，涉及到公司经营方面的各类敏感信息。因此在数据系统建设过程中，须采用全面的安全管理机制和措施来保障系统的数据安全。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统安全管理模块负责数据系统的数据敏感度、客户隐私信息和各环节审计日志记录管理，对数据系统的数据访问和功能使用进行有效监控。为实现数据系统对敏感数据和客户隐私信息的访问控制，进一步实现权限细化，安全管理模块应以元数据为依据，由元数据管理模块提供敏感数据定义和客户隐私信息定义，辅助安全管理模块完成相关安全管控操作。\n\n## 5.基于元数据的开发管理\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统项目开发的主要环节包括：需求分析、设计、开发、测试和上线。开发管理应用可以提供相应的功能，对以上各环节的工作流程、相关资源、规则约束、输入输出信息等提供管理和支持。\n\nEnd～\n\n- - -\nI will be your side till the day i die.","slug":"数据仓库元数据管理系统","published":1,"updated":"2019-09-21T15:26:25.733Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0st002sfbs6f1qd9e1j","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信很多朋友都是第一次听说元数据管理系统这个名词，当然，从事非数据仓库工作的人，很少会接触到这个系统，即使是正在从事这方面工作的朋友，可能仍然对它不是很了解，那么今天我来聊一聊元数据管理系统。本文大部分观点与图片汇总字网络，如有不同观点，欢迎留言交流～～ .</p>\n<p><img src=\"/2019/09/21/数据仓库元数据管理系统/warehouse.jpeg\" alt=\"data warehouse\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"一、元数据的定义\"><a href=\"#一、元数据的定义\" class=\"headerlink\" title=\"一、元数据的定义\"></a>一、元数据的定义</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照传统的定义，元数据（Metadata）是关于数据的数据。在数据仓库系统中，元数据可以帮助数据仓库管理员和数据仓库的开发人员非常方便地找到他们所关心的数据；元数据是描述数据仓库内数据的结构和建立方法的数据，可将其按用途的不同分为两类：技术元数据（Technical Metadata）和业务元数据（Business Metadata）。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;技术元数据是存储关于数据仓库系统技术细节的数据，是用于开发和管理数据仓库使用的数据，它主要包括以下信息：</p>\n<ul>\n<li>数据仓库结构的描述，包括仓库模式、视图、维、层次结构和导出数据的定义，以及数据集市的位置和内容；</li>\n<li>业务系统、数据仓库和数据集市的体系结构和模式；</li>\n<li>汇总用的算法，包括度量和维定义算法，数据粒度、主题领域、聚集、汇总、预定义的查询与报告；</li>\n<li>由操作环境到数据仓库环境的映射，包括源数据和它们的内容、数据分割、数据提取、清理、转换规则和数据刷新规则、安全（用户授权和存取控制）。</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;业务元数据从业务角度描述了数据仓库中的数据，它提供了介于使用者和实际系统之间的语义层，使得不懂计算机技术的业务人员也能够“读懂”数据仓库中的数据。业务元数据主要包括以下信息：使用者的业务术语所表达的数据模型、对象名和属性名；访问数据的原则和数据的来源；系统所提供的分析方法以及公式和报表的信息；具体包括以下信息：</p>\n<ul>\n<li>企业概念模型：这是业务元数据所应提供的重要的信息，它表示企业数据模型的高层信息、整个企业的业务概念和相互关系。以这个企业模型为基础，不懂数据库技术和SQL语句的业务人员对数据仓库中的数据也能做到心中有数。</li>\n<li>多维数据模型：这是企业概念模型的重要组成部分，它告诉业务分析人员在数据集市当中有哪些维、维的类别、数据立方体以及数据集市中的聚合规则。这里的数据立方体表示某主题领域业务事实表和维表的多维组织形式。</li>\n<li>业务概念模型和物理数据之间的依赖：以上提到的业务元数据只是表示出了数据的业务视图，这些业务视图与实际的数据仓库或数据库、多维数据库中的表、字段、维、层次等之间的对应关系也应该在元数据知识库中有所体现。</li>\n</ul>\n<h1 id=\"二、元数据的作用\"><a href=\"#二、元数据的作用\" class=\"headerlink\" title=\"二、元数据的作用\"></a>二、元数据的作用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与其说数据仓库是软件开发项目，还不如说是系统集成项目，因为它的主要工作是把所需的数据仓库工具集成在一起，完成数据的抽取、转换和加载，OLAP分析和数据挖掘等。如下图所示，它的典型结构由操作环境层、数据仓库层和业务层等组成。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中，第一层（操作环境层）是指整个企业内有关业务的OLTP系统和一些外部数据源；第二层是通过把第一层的相关数据抽取到一个中心区而组成的数据仓库层；第三层是为了完成对业务数据的分析而由各种工具组成的业务层。图中左边的部分是元数据管理，它起到了承上启下的作用，具体体现在以下几个方面：</p>\n<h2 id=\"1-元数据是进行数据集成所必需的\"><a href=\"#1-元数据是进行数据集成所必需的\" class=\"headerlink\" title=\"1.元数据是进行数据集成所必需的\"></a>1.元数据是进行数据集成所必需的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库最大的特点就是它的集成性。这一特点不仅体现在它所包含的数据上，还体现在实施数据仓库项目的过程当中。一方面，从各个数据源中抽取的数据要按照一定的模式存入数据仓库中，这些数据源与数据仓库中数据的对应关系及转换规则都要存储在元数据知识库中；另一方面，在数据仓库项目实施过程中，直接建立数据仓库往往费时、费力，因此在实践当中，人们可能会按照统一的数据模型，首先建设数据集市，然后在各个数据集市的基础上再建设数据仓库。不过，当数据集市数量增多时很容易形成“蜘蛛网”现象，而元数据管理是解决“蜘蛛网”的关键。如果在建立数据集市的过程中，注意了元数据管理，在集成到数据仓库中时就会比较顺利；相反，如果在建设数据集市的过程中忽视了元数据管理，那么最后的集成过程就会很困难，甚至不可能实现。</p>\n<h2 id=\"2-元数据定义的语义层可以帮助用户理解数据仓库中的数据\"><a href=\"#2-元数据定义的语义层可以帮助用户理解数据仓库中的数据\" class=\"headerlink\" title=\"2.元数据定义的语义层可以帮助用户理解数据仓库中的数据\"></a>2.元数据定义的语义层可以帮助用户理解数据仓库中的数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终用户不可能象数据仓库系统管理员或开发人员那样熟悉数据库技术，因此迫切需要有一个“翻译”，能够使他们清晰地理解数据仓库中数据的含意。元数据可以实现业务模型与数据模型之间的映射，因而可以把数据以用户需要的方式“翻译”出来，从而帮助最终用户理解和使用数据。</p>\n<h2 id=\"3-元数据是保证数据质量的关键\"><a href=\"#3-元数据是保证数据质量的关键\" class=\"headerlink\" title=\"3.元数据是保证数据质量的关键\"></a>3.元数据是保证数据质量的关键</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库或数据集市建立好以后，使用者在使用的时候，常常会产生对数据的怀疑。这些怀疑往往是由于底层的数据对于用户来说是不“透明”的，使用者很自然地对结果产生怀疑。而借助元数据管理系统，最终的使用者对各个数据的来龙去脉以及数据抽取和转换的规则都会很方便地得到，这样他们自然会对数据具有信心；当然也可便捷地发现数据所存在的质量问题。甚至国外有学者还在元数据模型的基础上引入质量维，从更高的角度上来解决这一问题。</p>\n<h2 id=\"4-元数据可以支持需求变化\"><a href=\"#4-元数据可以支持需求变化\" class=\"headerlink\" title=\"4.元数据可以支持需求变化\"></a>4.元数据可以支持需求变化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着信息技术的发展和企业职能的变化，企业的需求也在不断地改变。如何构造一个随着需求改变而平滑变化的软件系统，是软件工程领域中的一个重要问题。传统的信息系统往往是通过文档来适应需求变化，但是仅仅依靠文档还是远远不够的。成功的元数据管理系统可以把整个业务的工作流、数据流和信息流有效地管理起来，使得系统不依赖特定的开发人员，从而提高系统的可扩展性。</p>\n<h1 id=\"三、元数据管理功能\"><a href=\"#三、元数据管理功能\" class=\"headerlink\" title=\"三、元数据管理功能　\"></a>三、元数据管理功能　</h1><h2 id=\"1-数据地图\"><a href=\"#1-数据地图\" class=\"headerlink\" title=\"1.数据地图\"></a>1.数据地图</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据地图展现是以拓扑图的形式对数据系统的各类数据实体、数据处理过程元数据进行分层次的图形化展现，并通过不同层次的图形展现粒度控制，满足开发、运维或者业务上不同应用场景的图形查询和辅助分析需要。</p>\n<h2 id=\"2-元数据分析\"><a href=\"#2-元数据分析\" class=\"headerlink\" title=\"2.元数据分析\"></a>2.元数据分析</h2><h3 id=\"2-1-血缘分析\"><a href=\"#2-1-血缘分析\" class=\"headerlink\" title=\"2.1 血缘分析\"></a>2.1 血缘分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;血缘分析（也称血统分析）是指从某一实体出发，往回追溯其处理过程，直到数据系统的数据源接口。对于不同类型的实体，其涉及的转换过程可能有不同类型，如：对于底层仓库实体，涉及的是ETL处理过程；而对于仓库汇总表，可能既涉及ETL处理过程，又涉及仓库汇总处理过程；而对于指标，则除了上面的处理过程，还涉及指标生成的处理过程。数据源接口实体由源系统提供，作为数据系统的数据输入，其它的数据实体都经过了一个或多个不同类型的处理过程。血缘分析正是提供了这样一种功能，可以让使用者根据需要了解不同的处理过程，每个处理过程具体做什么，需要什么样的输入，又产生什么样的输出。</p>\n<h3 id=\"2-2-影响分析\"><a href=\"#2-2-影响分析\" class=\"headerlink\" title=\"2.2 影响分析\"></a>2.2 影响分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影响分析是指从某一实体出发，寻找依赖该实体的处理过程实体或其他实体。如果需要可以采用递归方式寻找所有的依赖过程实体或其他实体。该功能支持当某些实体发生变化或者需要修改时，评估实体影响范围。</p>\n<h2 id=\"2-3-实体关联分析\"><a href=\"#2-3-实体关联分析\" class=\"headerlink\" title=\"2.3 实体关联分析\"></a>2.3 实体关联分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体关联分析是从某一实体关联的其它实体和其参与的处理过程两个角度来查看具体数据的使用情况，形成一张实体和所参与处理过程的网络，从而进一步了解该实体的重要程度。本功能可以用来支撑需求变更影响评估的应用。</p>\n<h2 id=\"2-4-实体差异分析\"><a href=\"#2-4-实体差异分析\" class=\"headerlink\" title=\"2.4 实体差异分析\"></a>2.4 实体差异分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体差异分析是对元数据的不同实体进行检查，用图形和表格的形式展现它们之间的差异，包括名字、属性及数据血缘和对系统其他部分影响的差异等,在数据系统中存在许多类似的实体。这些实体（如数据表）可能只有名字上或者是在属性中存在微小的差异，甚至有部分属性名字都相同，但处于不同的应用中。由于各种原因，这些微小的差异直接影响了数据统计结果，数据系统需要清楚了解这些差异。本功能有助于进一步统一统计口径，评估近似实体的差异</p>\n<h2 id=\"2-5-指标一致性分析\"><a href=\"#2-5-指标一致性分析\" class=\"headerlink\" title=\"2.5 指标一致性分析\"></a>2.5 指标一致性分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指标一致性分析是指用图形化的方式来分析比较两个指标的数据流图是否一致，从而了解指标计算过程是否一致。该功能是指标血缘分析的一种具体应用。指标一致性分析可以帮助用户清楚地了解到将要比较的两个指标在经营分析数据流图中各阶段所涉及的数据对象和转换关系是否一致，帮助用户更好地了解指标的来龙去脉，清楚理解分布在不同部门且名称相同的指标之间的差异，从而提高用户对指标值的信任。</p>\n<h2 id=\"3-辅助应用优化\"><a href=\"#3-辅助应用优化\" class=\"headerlink\" title=\"3.辅助应用优化\"></a>3.辅助应用优化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;元数据对数据系统的数据、数据加工过程以及数据间的关系提供了准确的描述，利用血缘分析、影响分析和实体关联分析等元数据分析功能，可以识别与系统应用相关的技术资源，结合应用生命周期管理过程，辅助进行数据系统的应用优化.</p>\n<h2 id=\"4-辅助安全管理\"><a href=\"#4-辅助安全管理\" class=\"headerlink\" title=\"4.辅助安全管理\"></a>4.辅助安全管理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;企业数据平台所存储的数据和提供的各类分析应用，涉及到公司经营方面的各类敏感信息。因此在数据系统建设过程中，须采用全面的安全管理机制和措施来保障系统的数据安全。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统安全管理模块负责数据系统的数据敏感度、客户隐私信息和各环节审计日志记录管理，对数据系统的数据访问和功能使用进行有效监控。为实现数据系统对敏感数据和客户隐私信息的访问控制，进一步实现权限细化，安全管理模块应以元数据为依据，由元数据管理模块提供敏感数据定义和客户隐私信息定义，辅助安全管理模块完成相关安全管控操作。</p>\n<h2 id=\"5-基于元数据的开发管理\"><a href=\"#5-基于元数据的开发管理\" class=\"headerlink\" title=\"5.基于元数据的开发管理\"></a>5.基于元数据的开发管理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统项目开发的主要环节包括：需求分析、设计、开发、测试和上线。开发管理应用可以提供相应的功能，对以上各环节的工作流程、相关资源、规则约束、输入输出信息等提供管理和支持。</p>\n<p>End～</p>\n<hr>\n<p>I will be your side till the day i die.</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;相信很多朋友都是第一次听说元数据管理系统这个名词，当然，从事非数据仓库工作的人，很少会接触到这个系统，即使是正在从事这方面工作的朋友，可能仍然对它不是很了解，那么今天我来聊一聊元数据管理系统。本文大部分观点与图片汇总字网络，如有不同观点，欢迎留言交流～～ .</p>\n<p><img src=\"/2019/09/21/数据仓库元数据管理系统/warehouse.jpeg\" alt=\"data warehouse\"></p>","more":"<h1 id=\"一、元数据的定义\"><a href=\"#一、元数据的定义\" class=\"headerlink\" title=\"一、元数据的定义\"></a>一、元数据的定义</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;按照传统的定义，元数据（Metadata）是关于数据的数据。在数据仓库系统中，元数据可以帮助数据仓库管理员和数据仓库的开发人员非常方便地找到他们所关心的数据；元数据是描述数据仓库内数据的结构和建立方法的数据，可将其按用途的不同分为两类：技术元数据（Technical Metadata）和业务元数据（Business Metadata）。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;技术元数据是存储关于数据仓库系统技术细节的数据，是用于开发和管理数据仓库使用的数据，它主要包括以下信息：</p>\n<ul>\n<li>数据仓库结构的描述，包括仓库模式、视图、维、层次结构和导出数据的定义，以及数据集市的位置和内容；</li>\n<li>业务系统、数据仓库和数据集市的体系结构和模式；</li>\n<li>汇总用的算法，包括度量和维定义算法，数据粒度、主题领域、聚集、汇总、预定义的查询与报告；</li>\n<li>由操作环境到数据仓库环境的映射，包括源数据和它们的内容、数据分割、数据提取、清理、转换规则和数据刷新规则、安全（用户授权和存取控制）。</li>\n</ul>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;业务元数据从业务角度描述了数据仓库中的数据，它提供了介于使用者和实际系统之间的语义层，使得不懂计算机技术的业务人员也能够“读懂”数据仓库中的数据。业务元数据主要包括以下信息：使用者的业务术语所表达的数据模型、对象名和属性名；访问数据的原则和数据的来源；系统所提供的分析方法以及公式和报表的信息；具体包括以下信息：</p>\n<ul>\n<li>企业概念模型：这是业务元数据所应提供的重要的信息，它表示企业数据模型的高层信息、整个企业的业务概念和相互关系。以这个企业模型为基础，不懂数据库技术和SQL语句的业务人员对数据仓库中的数据也能做到心中有数。</li>\n<li>多维数据模型：这是企业概念模型的重要组成部分，它告诉业务分析人员在数据集市当中有哪些维、维的类别、数据立方体以及数据集市中的聚合规则。这里的数据立方体表示某主题领域业务事实表和维表的多维组织形式。</li>\n<li>业务概念模型和物理数据之间的依赖：以上提到的业务元数据只是表示出了数据的业务视图，这些业务视图与实际的数据仓库或数据库、多维数据库中的表、字段、维、层次等之间的对应关系也应该在元数据知识库中有所体现。</li>\n</ul>\n<h1 id=\"二、元数据的作用\"><a href=\"#二、元数据的作用\" class=\"headerlink\" title=\"二、元数据的作用\"></a>二、元数据的作用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;与其说数据仓库是软件开发项目，还不如说是系统集成项目，因为它的主要工作是把所需的数据仓库工具集成在一起，完成数据的抽取、转换和加载，OLAP分析和数据挖掘等。如下图所示，它的典型结构由操作环境层、数据仓库层和业务层等组成。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;其中，第一层（操作环境层）是指整个企业内有关业务的OLTP系统和一些外部数据源；第二层是通过把第一层的相关数据抽取到一个中心区而组成的数据仓库层；第三层是为了完成对业务数据的分析而由各种工具组成的业务层。图中左边的部分是元数据管理，它起到了承上启下的作用，具体体现在以下几个方面：</p>\n<h2 id=\"1-元数据是进行数据集成所必需的\"><a href=\"#1-元数据是进行数据集成所必需的\" class=\"headerlink\" title=\"1.元数据是进行数据集成所必需的\"></a>1.元数据是进行数据集成所必需的</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库最大的特点就是它的集成性。这一特点不仅体现在它所包含的数据上，还体现在实施数据仓库项目的过程当中。一方面，从各个数据源中抽取的数据要按照一定的模式存入数据仓库中，这些数据源与数据仓库中数据的对应关系及转换规则都要存储在元数据知识库中；另一方面，在数据仓库项目实施过程中，直接建立数据仓库往往费时、费力，因此在实践当中，人们可能会按照统一的数据模型，首先建设数据集市，然后在各个数据集市的基础上再建设数据仓库。不过，当数据集市数量增多时很容易形成“蜘蛛网”现象，而元数据管理是解决“蜘蛛网”的关键。如果在建立数据集市的过程中，注意了元数据管理，在集成到数据仓库中时就会比较顺利；相反，如果在建设数据集市的过程中忽视了元数据管理，那么最后的集成过程就会很困难，甚至不可能实现。</p>\n<h2 id=\"2-元数据定义的语义层可以帮助用户理解数据仓库中的数据\"><a href=\"#2-元数据定义的语义层可以帮助用户理解数据仓库中的数据\" class=\"headerlink\" title=\"2.元数据定义的语义层可以帮助用户理解数据仓库中的数据\"></a>2.元数据定义的语义层可以帮助用户理解数据仓库中的数据</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最终用户不可能象数据仓库系统管理员或开发人员那样熟悉数据库技术，因此迫切需要有一个“翻译”，能够使他们清晰地理解数据仓库中数据的含意。元数据可以实现业务模型与数据模型之间的映射，因而可以把数据以用户需要的方式“翻译”出来，从而帮助最终用户理解和使用数据。</p>\n<h2 id=\"3-元数据是保证数据质量的关键\"><a href=\"#3-元数据是保证数据质量的关键\" class=\"headerlink\" title=\"3.元数据是保证数据质量的关键\"></a>3.元数据是保证数据质量的关键</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库或数据集市建立好以后，使用者在使用的时候，常常会产生对数据的怀疑。这些怀疑往往是由于底层的数据对于用户来说是不“透明”的，使用者很自然地对结果产生怀疑。而借助元数据管理系统，最终的使用者对各个数据的来龙去脉以及数据抽取和转换的规则都会很方便地得到，这样他们自然会对数据具有信心；当然也可便捷地发现数据所存在的质量问题。甚至国外有学者还在元数据模型的基础上引入质量维，从更高的角度上来解决这一问题。</p>\n<h2 id=\"4-元数据可以支持需求变化\"><a href=\"#4-元数据可以支持需求变化\" class=\"headerlink\" title=\"4.元数据可以支持需求变化\"></a>4.元数据可以支持需求变化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;随着信息技术的发展和企业职能的变化，企业的需求也在不断地改变。如何构造一个随着需求改变而平滑变化的软件系统，是软件工程领域中的一个重要问题。传统的信息系统往往是通过文档来适应需求变化，但是仅仅依靠文档还是远远不够的。成功的元数据管理系统可以把整个业务的工作流、数据流和信息流有效地管理起来，使得系统不依赖特定的开发人员，从而提高系统的可扩展性。</p>\n<h1 id=\"三、元数据管理功能\"><a href=\"#三、元数据管理功能\" class=\"headerlink\" title=\"三、元数据管理功能　\"></a>三、元数据管理功能　</h1><h2 id=\"1-数据地图\"><a href=\"#1-数据地图\" class=\"headerlink\" title=\"1.数据地图\"></a>1.数据地图</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据地图展现是以拓扑图的形式对数据系统的各类数据实体、数据处理过程元数据进行分层次的图形化展现，并通过不同层次的图形展现粒度控制，满足开发、运维或者业务上不同应用场景的图形查询和辅助分析需要。</p>\n<h2 id=\"2-元数据分析\"><a href=\"#2-元数据分析\" class=\"headerlink\" title=\"2.元数据分析\"></a>2.元数据分析</h2><h3 id=\"2-1-血缘分析\"><a href=\"#2-1-血缘分析\" class=\"headerlink\" title=\"2.1 血缘分析\"></a>2.1 血缘分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;血缘分析（也称血统分析）是指从某一实体出发，往回追溯其处理过程，直到数据系统的数据源接口。对于不同类型的实体，其涉及的转换过程可能有不同类型，如：对于底层仓库实体，涉及的是ETL处理过程；而对于仓库汇总表，可能既涉及ETL处理过程，又涉及仓库汇总处理过程；而对于指标，则除了上面的处理过程，还涉及指标生成的处理过程。数据源接口实体由源系统提供，作为数据系统的数据输入，其它的数据实体都经过了一个或多个不同类型的处理过程。血缘分析正是提供了这样一种功能，可以让使用者根据需要了解不同的处理过程，每个处理过程具体做什么，需要什么样的输入，又产生什么样的输出。</p>\n<h3 id=\"2-2-影响分析\"><a href=\"#2-2-影响分析\" class=\"headerlink\" title=\"2.2 影响分析\"></a>2.2 影响分析</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;影响分析是指从某一实体出发，寻找依赖该实体的处理过程实体或其他实体。如果需要可以采用递归方式寻找所有的依赖过程实体或其他实体。该功能支持当某些实体发生变化或者需要修改时，评估实体影响范围。</p>\n<h2 id=\"2-3-实体关联分析\"><a href=\"#2-3-实体关联分析\" class=\"headerlink\" title=\"2.3 实体关联分析\"></a>2.3 实体关联分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体关联分析是从某一实体关联的其它实体和其参与的处理过程两个角度来查看具体数据的使用情况，形成一张实体和所参与处理过程的网络，从而进一步了解该实体的重要程度。本功能可以用来支撑需求变更影响评估的应用。</p>\n<h2 id=\"2-4-实体差异分析\"><a href=\"#2-4-实体差异分析\" class=\"headerlink\" title=\"2.4 实体差异分析\"></a>2.4 实体差异分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体差异分析是对元数据的不同实体进行检查，用图形和表格的形式展现它们之间的差异，包括名字、属性及数据血缘和对系统其他部分影响的差异等,在数据系统中存在许多类似的实体。这些实体（如数据表）可能只有名字上或者是在属性中存在微小的差异，甚至有部分属性名字都相同，但处于不同的应用中。由于各种原因，这些微小的差异直接影响了数据统计结果，数据系统需要清楚了解这些差异。本功能有助于进一步统一统计口径，评估近似实体的差异</p>\n<h2 id=\"2-5-指标一致性分析\"><a href=\"#2-5-指标一致性分析\" class=\"headerlink\" title=\"2.5 指标一致性分析\"></a>2.5 指标一致性分析</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;指标一致性分析是指用图形化的方式来分析比较两个指标的数据流图是否一致，从而了解指标计算过程是否一致。该功能是指标血缘分析的一种具体应用。指标一致性分析可以帮助用户清楚地了解到将要比较的两个指标在经营分析数据流图中各阶段所涉及的数据对象和转换关系是否一致，帮助用户更好地了解指标的来龙去脉，清楚理解分布在不同部门且名称相同的指标之间的差异，从而提高用户对指标值的信任。</p>\n<h2 id=\"3-辅助应用优化\"><a href=\"#3-辅助应用优化\" class=\"headerlink\" title=\"3.辅助应用优化\"></a>3.辅助应用优化</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;元数据对数据系统的数据、数据加工过程以及数据间的关系提供了准确的描述，利用血缘分析、影响分析和实体关联分析等元数据分析功能，可以识别与系统应用相关的技术资源，结合应用生命周期管理过程，辅助进行数据系统的应用优化.</p>\n<h2 id=\"4-辅助安全管理\"><a href=\"#4-辅助安全管理\" class=\"headerlink\" title=\"4.辅助安全管理\"></a>4.辅助安全管理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;企业数据平台所存储的数据和提供的各类分析应用，涉及到公司经营方面的各类敏感信息。因此在数据系统建设过程中，须采用全面的安全管理机制和措施来保障系统的数据安全。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统安全管理模块负责数据系统的数据敏感度、客户隐私信息和各环节审计日志记录管理，对数据系统的数据访问和功能使用进行有效监控。为实现数据系统对敏感数据和客户隐私信息的访问控制，进一步实现权限细化，安全管理模块应以元数据为依据，由元数据管理模块提供敏感数据定义和客户隐私信息定义，辅助安全管理模块完成相关安全管控操作。</p>\n<h2 id=\"5-基于元数据的开发管理\"><a href=\"#5-基于元数据的开发管理\" class=\"headerlink\" title=\"5.基于元数据的开发管理\"></a>5.基于元数据的开发管理</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据系统项目开发的主要环节包括：需求分析、设计、开发、测试和上线。开发管理应用可以提供相应的功能，对以上各环节的工作流程、相关资源、规则约束、输入输出信息等提供管理和支持。</p>\n<p>End～</p>\n<hr>\n<p>I will be your side till the day i die.</p>"},{"title":"数据仓库模型设计","date":"2019-09-17T15:30:43.000Z","notebook":"笔记","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大千世界，万物都有其遵循的自有法则，数据仓库也不例外，根据业务场景，选择不同的设计模式，解决不同的业务问题。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面来看看数据仓库的三种设计模式。\n\n![star-model](数据仓库模型设计/star-model.jpg)\n\n<!-- more -->\n\n# 一、范式建模法（Third Normal Form，3NF）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式建模法其实是我们在构建数据模型常用的一个方法，该方法的主要由 Inmon 所提倡，主要解决关系型数据库得数据存储，利用的一种技术层面上的方法。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前，我们在关系型数据库中的建模方法，大部分采用的是三范式建模法。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式是数据库逻辑模型设计的基本理论，一个关系模型可以从第一范式到第五范式进行无损分解，这个过程也可称为规范化。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在数据仓库的模型设计中目前一般采用第三范式，它有着严格的数学定义。从其表达的含义来看，一个符合第三范式的关系必须具有以下三个条件 :\n>1.每个属性值唯一，不具有多义性 ;\n>2.每个非主属性必须完全依赖于整个主键，而非主键的一部分 ;\n>3.每个非主属性不能依赖于其他关系中的属性，因为这样的话，这种属性应该归到其他关系中去。\n\n>优点：\n>>从关系型数据库的角度出发，结合了业务系统的数据模型，能够比较方便的实现数据仓库的建模。\n\n>缺点：\n>>由于建模方法限定在关系型数据库之上，在某些时候反而限制了整个数据仓库模型的灵活性，性能等，特别是考虑到数据仓库的底层数据向数据集市的数据进行汇总时，需要进行一定的变通才能满足相应的需求。\n\n\n# 二、维度建模法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模法，Kimball 最先提出这一概念。其最简单的描述就是，按照事实表，维表来构建数据仓库，数据集市。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实表是用来记录具体事件的，包含了每个事件的具体要素，以及具体发生的事情；维表则是对事实表中事件的要素的描述信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如一个事件会包含时间、地点、人物、事件，事实表记录了整个事件的信息，但对时间、地点和人物等要素只记录了一些关键标记，比如事件的主角叫“Michael”，那么Michael到底“长什么样”，就需要到相应的维表里面去查询“Michael”的具体描述信息了。\n\n>优点:\n>>1.维度建模非常直观，紧紧围绕着业务模型，可以直观的反映出业务模型中的业务问题。\n>>2.不需要经过特别的抽象处理，即可以完成维度建模。这一点也是维度建模的优势。\n\n>缺点:\n>>1.由于在构建星型模式之前需要进行大量的数据预处理，因此会导致大量的数据处理工作。\n>>2.而且，当业务发生变化，需要重新进行维度的定义时，往往需要重新进行维度数据的预处理。而在这些与处理过程中，往往会导致大量的数据冗余。\n>>3.如果只是依靠单纯的维度建模，不能保证数据来源的一致性和准确性，而且在数据仓库的底层，不是特别适用于维度建模的方法。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此以笔者的观点看，维度建模的领域主要适用与数据集市层，它的最大的作用其实是为了解决数据仓库建模中的性能问题。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模很难能够提供一个完整地描述真实业务实体之间的复杂关系的抽象方法。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于事实表和维表就可以构建出多种多维模型，包括星形模型、雪花模型和星座模型。\n## 1.星型模式（Star-schema）。\n星型模式的核心是一个大的中心表（事实表），一组小的附属表（维表）。星型模式示例如下所示：\n\n![star_schema](数据仓库模型设计/star_schema.jpg)\n\n\n![star_schema_example](数据仓库模型设计/star_schema_example.jpg)\n\n可以看出，星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：\n>a. 维表只和事实表关联，维表之间没有关联；\n>b. 每个维表的主码为单列，且该主码放置在事实表中，作为两边连接的外码；\n>c. 以事实表为核心，维表围绕核心呈星形分布；\n\n## 2.雪花模型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;雪花模式是星型模式的扩展，其中某些维表被规范化，进一步分解到附加表（维表）中。雪花模式示例如下图所示：\n![snowflake_schema](数据仓库模型设计/snowflake_schema.jpg)\n\n![snowflake_schema_example](数据仓库模型设计/snowflake_schema_example.jpg)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从图中我们可以看到地址表被进一步细分出了城市（city）维。supplier_type表被进一步细分出来supplier维。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;星形模式中的维表相对雪花模式来说要大，而且不满足规范化设计。雪花模型相当于将星形模式的大维表拆分成小维表，满足了规范化设计。然而这种模式在实际应用中很少见，因为这样做会导致开发难度增大，而数据冗余问题在数据仓库里并不严重。\n\n## 3.星座模型\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库由多个主题构成，包含多个事实表，而维表是公共的，可以共享，这种模式可以看做星型模式的汇集，因而称作星系模式或者事实星座模式。本模式示例如下图所示：\n\n![galaxy_schema](数据仓库模型设计/galaxy_schema.jpg)\n\n![galaxy_schema_example](数据仓库模型设计/galaxy_schema_example.jpg)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，事实星座模式包含两个事实表：sales和shipping，二者共享维表。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实星座模式是数据仓库最常使用的数据模式，尤其是企业级数据仓库（EDW）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这也是数据仓库区别于数据集市的一个典型的特征，从根本上而言，数据仓库数据模型的模式更多是为了避免冗余和数据复用，套用现成的模式，是设计数据仓库最合理的选择。\n\n## 4.三种模式对比\n![model_difference](数据仓库模型设计/schema_difference.jpg)\n\n\n# 三、实体建模法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体建模法并不是数据仓库建模中常见的一个方法，它来源于哲学的一个流派。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么我们在数据仓库的建模过程中完全可以引入这个抽象的方法，将整个业务也可以划分成一个个的实体，而每个实体之间的关系，以及针对这些关系的说明就是我们数据建模需要做的工作。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即我们可以将任何一个业务过程划分成 3 个部分，实体，事件和说明。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如我们描述一个简单的事实：“小明开车去学校上学”。以这个业务事实为例，我们可以把“小明”，“学校”看成是一个实体，“上学”描述的是一个业务过程，我们在这里可以抽象为一个具体“事件”，而“开车去”则可以看成是事件“上学”的一个说明。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的举例我们可以了解，我们使用的抽象归纳方法其实很简单，任何业务可以看成 3 个部分：\n>1.实体，主要指领域模型中特定的概念主体，指发生业务关系的对象。\n>2.事件，主要指概念主体之间完成一次业务流程的过程，特指特定的业务过程。\n>3.说明，主要是针对实体和事件的特殊说明。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于实体建模法，能够很轻松的实现业务模型的划分，因此，在业务建模阶段和领域概念建模阶段，实体建模法有着广泛的应用。从笔者的经验来看，再没有现成的行业模型的情况下，我们可以采用实体建模的方法，和客户一起理清整个业务的模型，进行领域概念模型的划分，抽象出具体的业务概念，结合客户的使用特点，完全可以创建出一个符合自己需要的数据仓库模型来。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，实体建模法也有着自己先天的缺陷，由于实体说明法只是一种抽象客观世界的方法，因此，注定了该建模方法只能局限在业务建模和领域概念建模阶段。因此，到了逻辑建模阶段和物理建模阶段，则是范式建模和维度建模发挥长处的阶段。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，笔者建议读者在创建自己的数据仓库模型的时候，可以参考使用上述的三种数据仓库得建模方法，在各个不同阶段采用不同的方法，从而能够保证整个数据仓库建模的质量。\n\n\n\n- - -\n实践才是检验真理的唯一标准","source":"_posts/数据仓库模型设计.md","raw":"---\ntitle: 数据仓库模型设计\ndate: 2019-09-17 23:30:43\ntags: [数据仓库模型]\ncategories: 数据仓库\nnotebook: 笔记\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大千世界，万物都有其遵循的自有法则，数据仓库也不例外，根据业务场景，选择不同的设计模式，解决不同的业务问题。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面来看看数据仓库的三种设计模式。\n\n![star-model](数据仓库模型设计/star-model.jpg)\n\n<!-- more -->\n\n# 一、范式建模法（Third Normal Form，3NF）\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式建模法其实是我们在构建数据模型常用的一个方法，该方法的主要由 Inmon 所提倡，主要解决关系型数据库得数据存储，利用的一种技术层面上的方法。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前，我们在关系型数据库中的建模方法，大部分采用的是三范式建模法。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式是数据库逻辑模型设计的基本理论，一个关系模型可以从第一范式到第五范式进行无损分解，这个过程也可称为规范化。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在数据仓库的模型设计中目前一般采用第三范式，它有着严格的数学定义。从其表达的含义来看，一个符合第三范式的关系必须具有以下三个条件 :\n>1.每个属性值唯一，不具有多义性 ;\n>2.每个非主属性必须完全依赖于整个主键，而非主键的一部分 ;\n>3.每个非主属性不能依赖于其他关系中的属性，因为这样的话，这种属性应该归到其他关系中去。\n\n>优点：\n>>从关系型数据库的角度出发，结合了业务系统的数据模型，能够比较方便的实现数据仓库的建模。\n\n>缺点：\n>>由于建模方法限定在关系型数据库之上，在某些时候反而限制了整个数据仓库模型的灵活性，性能等，特别是考虑到数据仓库的底层数据向数据集市的数据进行汇总时，需要进行一定的变通才能满足相应的需求。\n\n\n# 二、维度建模法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模法，Kimball 最先提出这一概念。其最简单的描述就是，按照事实表，维表来构建数据仓库，数据集市。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实表是用来记录具体事件的，包含了每个事件的具体要素，以及具体发生的事情；维表则是对事实表中事件的要素的描述信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如一个事件会包含时间、地点、人物、事件，事实表记录了整个事件的信息，但对时间、地点和人物等要素只记录了一些关键标记，比如事件的主角叫“Michael”，那么Michael到底“长什么样”，就需要到相应的维表里面去查询“Michael”的具体描述信息了。\n\n>优点:\n>>1.维度建模非常直观，紧紧围绕着业务模型，可以直观的反映出业务模型中的业务问题。\n>>2.不需要经过特别的抽象处理，即可以完成维度建模。这一点也是维度建模的优势。\n\n>缺点:\n>>1.由于在构建星型模式之前需要进行大量的数据预处理，因此会导致大量的数据处理工作。\n>>2.而且，当业务发生变化，需要重新进行维度的定义时，往往需要重新进行维度数据的预处理。而在这些与处理过程中，往往会导致大量的数据冗余。\n>>3.如果只是依靠单纯的维度建模，不能保证数据来源的一致性和准确性，而且在数据仓库的底层，不是特别适用于维度建模的方法。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此以笔者的观点看，维度建模的领域主要适用与数据集市层，它的最大的作用其实是为了解决数据仓库建模中的性能问题。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模很难能够提供一个完整地描述真实业务实体之间的复杂关系的抽象方法。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于事实表和维表就可以构建出多种多维模型，包括星形模型、雪花模型和星座模型。\n## 1.星型模式（Star-schema）。\n星型模式的核心是一个大的中心表（事实表），一组小的附属表（维表）。星型模式示例如下所示：\n\n![star_schema](数据仓库模型设计/star_schema.jpg)\n\n\n![star_schema_example](数据仓库模型设计/star_schema_example.jpg)\n\n可以看出，星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：\n>a. 维表只和事实表关联，维表之间没有关联；\n>b. 每个维表的主码为单列，且该主码放置在事实表中，作为两边连接的外码；\n>c. 以事实表为核心，维表围绕核心呈星形分布；\n\n## 2.雪花模型\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;雪花模式是星型模式的扩展，其中某些维表被规范化，进一步分解到附加表（维表）中。雪花模式示例如下图所示：\n![snowflake_schema](数据仓库模型设计/snowflake_schema.jpg)\n\n![snowflake_schema_example](数据仓库模型设计/snowflake_schema_example.jpg)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从图中我们可以看到地址表被进一步细分出了城市（city）维。supplier_type表被进一步细分出来supplier维。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;星形模式中的维表相对雪花模式来说要大，而且不满足规范化设计。雪花模型相当于将星形模式的大维表拆分成小维表，满足了规范化设计。然而这种模式在实际应用中很少见，因为这样做会导致开发难度增大，而数据冗余问题在数据仓库里并不严重。\n\n## 3.星座模型\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库由多个主题构成，包含多个事实表，而维表是公共的，可以共享，这种模式可以看做星型模式的汇集，因而称作星系模式或者事实星座模式。本模式示例如下图所示：\n\n![galaxy_schema](数据仓库模型设计/galaxy_schema.jpg)\n\n![galaxy_schema_example](数据仓库模型设计/galaxy_schema_example.jpg)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，事实星座模式包含两个事实表：sales和shipping，二者共享维表。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实星座模式是数据仓库最常使用的数据模式，尤其是企业级数据仓库（EDW）。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这也是数据仓库区别于数据集市的一个典型的特征，从根本上而言，数据仓库数据模型的模式更多是为了避免冗余和数据复用，套用现成的模式，是设计数据仓库最合理的选择。\n\n## 4.三种模式对比\n![model_difference](数据仓库模型设计/schema_difference.jpg)\n\n\n# 三、实体建模法\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体建模法并不是数据仓库建模中常见的一个方法，它来源于哲学的一个流派。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么我们在数据仓库的建模过程中完全可以引入这个抽象的方法，将整个业务也可以划分成一个个的实体，而每个实体之间的关系，以及针对这些关系的说明就是我们数据建模需要做的工作。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即我们可以将任何一个业务过程划分成 3 个部分，实体，事件和说明。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如我们描述一个简单的事实：“小明开车去学校上学”。以这个业务事实为例，我们可以把“小明”，“学校”看成是一个实体，“上学”描述的是一个业务过程，我们在这里可以抽象为一个具体“事件”，而“开车去”则可以看成是事件“上学”的一个说明。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的举例我们可以了解，我们使用的抽象归纳方法其实很简单，任何业务可以看成 3 个部分：\n>1.实体，主要指领域模型中特定的概念主体，指发生业务关系的对象。\n>2.事件，主要指概念主体之间完成一次业务流程的过程，特指特定的业务过程。\n>3.说明，主要是针对实体和事件的特殊说明。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于实体建模法，能够很轻松的实现业务模型的划分，因此，在业务建模阶段和领域概念建模阶段，实体建模法有着广泛的应用。从笔者的经验来看，再没有现成的行业模型的情况下，我们可以采用实体建模的方法，和客户一起理清整个业务的模型，进行领域概念模型的划分，抽象出具体的业务概念，结合客户的使用特点，完全可以创建出一个符合自己需要的数据仓库模型来。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，实体建模法也有着自己先天的缺陷，由于实体说明法只是一种抽象客观世界的方法，因此，注定了该建模方法只能局限在业务建模和领域概念建模阶段。因此，到了逻辑建模阶段和物理建模阶段，则是范式建模和维度建模发挥长处的阶段。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，笔者建议读者在创建自己的数据仓库模型的时候，可以参考使用上述的三种数据仓库得建模方法，在各个不同阶段采用不同的方法，从而能够保证整个数据仓库建模的质量。\n\n\n\n- - -\n实践才是检验真理的唯一标准","slug":"数据仓库模型设计","published":1,"updated":"2019-09-19T14:29:30.644Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0sx002tfbs65qh5osaz","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大千世界，万物都有其遵循的自有法则，数据仓库也不例外，根据业务场景，选择不同的设计模式，解决不同的业务问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面来看看数据仓库的三种设计模式。</p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/star-model.jpg\" alt=\"star-model\"></p>\n<a id=\"more\"></a>\n\n<h1 id=\"一、范式建模法（Third-Normal-Form，3NF）\"><a href=\"#一、范式建模法（Third-Normal-Form，3NF）\" class=\"headerlink\" title=\"一、范式建模法（Third Normal Form，3NF）\"></a>一、范式建模法（Third Normal Form，3NF）</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式建模法其实是我们在构建数据模型常用的一个方法，该方法的主要由 Inmon 所提倡，主要解决关系型数据库得数据存储，利用的一种技术层面上的方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前，我们在关系型数据库中的建模方法，大部分采用的是三范式建模法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式是数据库逻辑模型设计的基本理论，一个关系模型可以从第一范式到第五范式进行无损分解，这个过程也可称为规范化。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在数据仓库的模型设计中目前一般采用第三范式，它有着严格的数学定义。从其表达的含义来看，一个符合第三范式的关系必须具有以下三个条件 :</p>\n<blockquote>\n<p>1.每个属性值唯一，不具有多义性 ;<br>2.每个非主属性必须完全依赖于整个主键，而非主键的一部分 ;<br>3.每个非主属性不能依赖于其他关系中的属性，因为这样的话，这种属性应该归到其他关系中去。</p>\n</blockquote>\n<blockquote>\n<p>优点：</p>\n<blockquote>\n<p>从关系型数据库的角度出发，结合了业务系统的数据模型，能够比较方便的实现数据仓库的建模。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>缺点：</p>\n<blockquote>\n<p>由于建模方法限定在关系型数据库之上，在某些时候反而限制了整个数据仓库模型的灵活性，性能等，特别是考虑到数据仓库的底层数据向数据集市的数据进行汇总时，需要进行一定的变通才能满足相应的需求。</p>\n</blockquote>\n</blockquote>\n<h1 id=\"二、维度建模法\"><a href=\"#二、维度建模法\" class=\"headerlink\" title=\"二、维度建模法\"></a>二、维度建模法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模法，Kimball 最先提出这一概念。其最简单的描述就是，按照事实表，维表来构建数据仓库，数据集市。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实表是用来记录具体事件的，包含了每个事件的具体要素，以及具体发生的事情；维表则是对事实表中事件的要素的描述信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如一个事件会包含时间、地点、人物、事件，事实表记录了整个事件的信息，但对时间、地点和人物等要素只记录了一些关键标记，比如事件的主角叫“Michael”，那么Michael到底“长什么样”，就需要到相应的维表里面去查询“Michael”的具体描述信息了。</p>\n<blockquote>\n<p>优点:</p>\n<blockquote>\n<p>1.维度建模非常直观，紧紧围绕着业务模型，可以直观的反映出业务模型中的业务问题。<br>2.不需要经过特别的抽象处理，即可以完成维度建模。这一点也是维度建模的优势。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>缺点:</p>\n<blockquote>\n<p>1.由于在构建星型模式之前需要进行大量的数据预处理，因此会导致大量的数据处理工作。<br>2.而且，当业务发生变化，需要重新进行维度的定义时，往往需要重新进行维度数据的预处理。而在这些与处理过程中，往往会导致大量的数据冗余。<br>3.如果只是依靠单纯的维度建模，不能保证数据来源的一致性和准确性，而且在数据仓库的底层，不是特别适用于维度建模的方法。</p>\n</blockquote>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此以笔者的观点看，维度建模的领域主要适用与数据集市层，它的最大的作用其实是为了解决数据仓库建模中的性能问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模很难能够提供一个完整地描述真实业务实体之间的复杂关系的抽象方法。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于事实表和维表就可以构建出多种多维模型，包括星形模型、雪花模型和星座模型。</p>\n<h2 id=\"1-星型模式（Star-schema）。\"><a href=\"#1-星型模式（Star-schema）。\" class=\"headerlink\" title=\"1.星型模式（Star-schema）。\"></a>1.星型模式（Star-schema）。</h2><p>星型模式的核心是一个大的中心表（事实表），一组小的附属表（维表）。星型模式示例如下所示：</p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/star_schema.jpg\" alt=\"star_schema\"></p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/star_schema_example.jpg\" alt=\"star_schema_example\"></p>\n<p>可以看出，星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：</p>\n<blockquote>\n<p>a. 维表只和事实表关联，维表之间没有关联；<br>b. 每个维表的主码为单列，且该主码放置在事实表中，作为两边连接的外码；<br>c. 以事实表为核心，维表围绕核心呈星形分布；</p>\n</blockquote>\n<h2 id=\"2-雪花模型\"><a href=\"#2-雪花模型\" class=\"headerlink\" title=\"2.雪花模型\"></a>2.雪花模型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;雪花模式是星型模式的扩展，其中某些维表被规范化，进一步分解到附加表（维表）中。雪花模式示例如下图所示：<br><img src=\"/2019/09/17/数据仓库模型设计/snowflake_schema.jpg\" alt=\"snowflake_schema\"></p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/snowflake_schema_example.jpg\" alt=\"snowflake_schema_example\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从图中我们可以看到地址表被进一步细分出了城市（city）维。supplier_type表被进一步细分出来supplier维。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;星形模式中的维表相对雪花模式来说要大，而且不满足规范化设计。雪花模型相当于将星形模式的大维表拆分成小维表，满足了规范化设计。然而这种模式在实际应用中很少见，因为这样做会导致开发难度增大，而数据冗余问题在数据仓库里并不严重。</p>\n<h2 id=\"3-星座模型\"><a href=\"#3-星座模型\" class=\"headerlink\" title=\"3.星座模型\"></a>3.星座模型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库由多个主题构成，包含多个事实表，而维表是公共的，可以共享，这种模式可以看做星型模式的汇集，因而称作星系模式或者事实星座模式。本模式示例如下图所示：</p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/galaxy_schema.jpg\" alt=\"galaxy_schema\"></p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/galaxy_schema_example.jpg\" alt=\"galaxy_schema_example\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，事实星座模式包含两个事实表：sales和shipping，二者共享维表。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实星座模式是数据仓库最常使用的数据模式，尤其是企业级数据仓库（EDW）。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这也是数据仓库区别于数据集市的一个典型的特征，从根本上而言，数据仓库数据模型的模式更多是为了避免冗余和数据复用，套用现成的模式，是设计数据仓库最合理的选择。</p>\n<h2 id=\"4-三种模式对比\"><a href=\"#4-三种模式对比\" class=\"headerlink\" title=\"4.三种模式对比\"></a>4.三种模式对比</h2><p><img src=\"/2019/09/17/数据仓库模型设计/schema_difference.jpg\" alt=\"model_difference\"></p>\n<h1 id=\"三、实体建模法\"><a href=\"#三、实体建模法\" class=\"headerlink\" title=\"三、实体建模法\"></a>三、实体建模法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体建模法并不是数据仓库建模中常见的一个方法，它来源于哲学的一个流派。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么我们在数据仓库的建模过程中完全可以引入这个抽象的方法，将整个业务也可以划分成一个个的实体，而每个实体之间的关系，以及针对这些关系的说明就是我们数据建模需要做的工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即我们可以将任何一个业务过程划分成 3 个部分，实体，事件和说明。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如我们描述一个简单的事实：“小明开车去学校上学”。以这个业务事实为例，我们可以把“小明”，“学校”看成是一个实体，“上学”描述的是一个业务过程，我们在这里可以抽象为一个具体“事件”，而“开车去”则可以看成是事件“上学”的一个说明。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的举例我们可以了解，我们使用的抽象归纳方法其实很简单，任何业务可以看成 3 个部分：</p>\n<blockquote>\n<p>1.实体，主要指领域模型中特定的概念主体，指发生业务关系的对象。<br>2.事件，主要指概念主体之间完成一次业务流程的过程，特指特定的业务过程。<br>3.说明，主要是针对实体和事件的特殊说明。</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于实体建模法，能够很轻松的实现业务模型的划分，因此，在业务建模阶段和领域概念建模阶段，实体建模法有着广泛的应用。从笔者的经验来看，再没有现成的行业模型的情况下，我们可以采用实体建模的方法，和客户一起理清整个业务的模型，进行领域概念模型的划分，抽象出具体的业务概念，结合客户的使用特点，完全可以创建出一个符合自己需要的数据仓库模型来。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，实体建模法也有着自己先天的缺陷，由于实体说明法只是一种抽象客观世界的方法，因此，注定了该建模方法只能局限在业务建模和领域概念建模阶段。因此，到了逻辑建模阶段和物理建模阶段，则是范式建模和维度建模发挥长处的阶段。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，笔者建议读者在创建自己的数据仓库模型的时候，可以参考使用上述的三种数据仓库得建模方法，在各个不同阶段采用不同的方法，从而能够保证整个数据仓库建模的质量。</p>\n<hr>\n<p>实践才是检验真理的唯一标准</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大千世界，万物都有其遵循的自有法则，数据仓库也不例外，根据业务场景，选择不同的设计模式，解决不同的业务问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;下面来看看数据仓库的三种设计模式。</p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/star-model.jpg\" alt=\"star-model\"></p>","more":"<h1 id=\"一、范式建模法（Third-Normal-Form，3NF）\"><a href=\"#一、范式建模法（Third-Normal-Form，3NF）\" class=\"headerlink\" title=\"一、范式建模法（Third Normal Form，3NF）\"></a>一、范式建模法（Third Normal Form，3NF）</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式建模法其实是我们在构建数据模型常用的一个方法，该方法的主要由 Inmon 所提倡，主要解决关系型数据库得数据存储，利用的一种技术层面上的方法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;目前，我们在关系型数据库中的建模方法，大部分采用的是三范式建模法。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;范式是数据库逻辑模型设计的基本理论，一个关系模型可以从第一范式到第五范式进行无损分解，这个过程也可称为规范化。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在数据仓库的模型设计中目前一般采用第三范式，它有着严格的数学定义。从其表达的含义来看，一个符合第三范式的关系必须具有以下三个条件 :</p>\n<blockquote>\n<p>1.每个属性值唯一，不具有多义性 ;<br>2.每个非主属性必须完全依赖于整个主键，而非主键的一部分 ;<br>3.每个非主属性不能依赖于其他关系中的属性，因为这样的话，这种属性应该归到其他关系中去。</p>\n</blockquote>\n<blockquote>\n<p>优点：</p>\n<blockquote>\n<p>从关系型数据库的角度出发，结合了业务系统的数据模型，能够比较方便的实现数据仓库的建模。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>缺点：</p>\n<blockquote>\n<p>由于建模方法限定在关系型数据库之上，在某些时候反而限制了整个数据仓库模型的灵活性，性能等，特别是考虑到数据仓库的底层数据向数据集市的数据进行汇总时，需要进行一定的变通才能满足相应的需求。</p>\n</blockquote>\n</blockquote>\n<h1 id=\"二、维度建模法\"><a href=\"#二、维度建模法\" class=\"headerlink\" title=\"二、维度建模法\"></a>二、维度建模法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模法，Kimball 最先提出这一概念。其最简单的描述就是，按照事实表，维表来构建数据仓库，数据集市。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实表是用来记录具体事件的，包含了每个事件的具体要素，以及具体发生的事情；维表则是对事实表中事件的要素的描述信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比如一个事件会包含时间、地点、人物、事件，事实表记录了整个事件的信息，但对时间、地点和人物等要素只记录了一些关键标记，比如事件的主角叫“Michael”，那么Michael到底“长什么样”，就需要到相应的维表里面去查询“Michael”的具体描述信息了。</p>\n<blockquote>\n<p>优点:</p>\n<blockquote>\n<p>1.维度建模非常直观，紧紧围绕着业务模型，可以直观的反映出业务模型中的业务问题。<br>2.不需要经过特别的抽象处理，即可以完成维度建模。这一点也是维度建模的优势。</p>\n</blockquote>\n</blockquote>\n<blockquote>\n<p>缺点:</p>\n<blockquote>\n<p>1.由于在构建星型模式之前需要进行大量的数据预处理，因此会导致大量的数据处理工作。<br>2.而且，当业务发生变化，需要重新进行维度的定义时，往往需要重新进行维度数据的预处理。而在这些与处理过程中，往往会导致大量的数据冗余。<br>3.如果只是依靠单纯的维度建模，不能保证数据来源的一致性和准确性，而且在数据仓库的底层，不是特别适用于维度建模的方法。</p>\n</blockquote>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此以笔者的观点看，维度建模的领域主要适用与数据集市层，它的最大的作用其实是为了解决数据仓库建模中的性能问题。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;维度建模很难能够提供一个完整地描述真实业务实体之间的复杂关系的抽象方法。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;基于事实表和维表就可以构建出多种多维模型，包括星形模型、雪花模型和星座模型。</p>\n<h2 id=\"1-星型模式（Star-schema）。\"><a href=\"#1-星型模式（Star-schema）。\" class=\"headerlink\" title=\"1.星型模式（Star-schema）。\"></a>1.星型模式（Star-schema）。</h2><p>星型模式的核心是一个大的中心表（事实表），一组小的附属表（维表）。星型模式示例如下所示：</p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/star_schema.jpg\" alt=\"star_schema\"></p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/star_schema_example.jpg\" alt=\"star_schema_example\"></p>\n<p>可以看出，星形模式的维度建模由一个事实表和一组维表成，且具有以下特点：</p>\n<blockquote>\n<p>a. 维表只和事实表关联，维表之间没有关联；<br>b. 每个维表的主码为单列，且该主码放置在事实表中，作为两边连接的外码；<br>c. 以事实表为核心，维表围绕核心呈星形分布；</p>\n</blockquote>\n<h2 id=\"2-雪花模型\"><a href=\"#2-雪花模型\" class=\"headerlink\" title=\"2.雪花模型\"></a>2.雪花模型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;雪花模式是星型模式的扩展，其中某些维表被规范化，进一步分解到附加表（维表）中。雪花模式示例如下图所示：<br><img src=\"/2019/09/17/数据仓库模型设计/snowflake_schema.jpg\" alt=\"snowflake_schema\"></p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/snowflake_schema_example.jpg\" alt=\"snowflake_schema_example\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从图中我们可以看到地址表被进一步细分出了城市（city）维。supplier_type表被进一步细分出来supplier维。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;星形模式中的维表相对雪花模式来说要大，而且不满足规范化设计。雪花模型相当于将星形模式的大维表拆分成小维表，满足了规范化设计。然而这种模式在实际应用中很少见，因为这样做会导致开发难度增大，而数据冗余问题在数据仓库里并不严重。</p>\n<h2 id=\"3-星座模型\"><a href=\"#3-星座模型\" class=\"headerlink\" title=\"3.星座模型\"></a>3.星座模型</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据仓库由多个主题构成，包含多个事实表，而维表是公共的，可以共享，这种模式可以看做星型模式的汇集，因而称作星系模式或者事实星座模式。本模式示例如下图所示：</p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/galaxy_schema.jpg\" alt=\"galaxy_schema\"></p>\n<p><img src=\"/2019/09/17/数据仓库模型设计/galaxy_schema_example.jpg\" alt=\"galaxy_schema_example\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如上图所示，事实星座模式包含两个事实表：sales和shipping，二者共享维表。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;事实星座模式是数据仓库最常使用的数据模式，尤其是企业级数据仓库（EDW）。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;前面介绍的两种维度建模方法都是多维表对应单事实表，但在很多时候维度空间内的事实表不止一个，而一个维表也可能被多个事实表用到。在业务发展后期，绝大部分维度建模都采用的是星座模式。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这也是数据仓库区别于数据集市的一个典型的特征，从根本上而言，数据仓库数据模型的模式更多是为了避免冗余和数据复用，套用现成的模式，是设计数据仓库最合理的选择。</p>\n<h2 id=\"4-三种模式对比\"><a href=\"#4-三种模式对比\" class=\"headerlink\" title=\"4.三种模式对比\"></a>4.三种模式对比</h2><p><img src=\"/2019/09/17/数据仓库模型设计/schema_difference.jpg\" alt=\"model_difference\"></p>\n<h1 id=\"三、实体建模法\"><a href=\"#三、实体建模法\" class=\"headerlink\" title=\"三、实体建模法\"></a>三、实体建模法</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;实体建模法并不是数据仓库建模中常见的一个方法，它来源于哲学的一个流派。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;那么我们在数据仓库的建模过程中完全可以引入这个抽象的方法，将整个业务也可以划分成一个个的实体，而每个实体之间的关系，以及针对这些关系的说明就是我们数据建模需要做的工作。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;即我们可以将任何一个业务过程划分成 3 个部分，实体，事件和说明。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如我们描述一个简单的事实：“小明开车去学校上学”。以这个业务事实为例，我们可以把“小明”，“学校”看成是一个实体，“上学”描述的是一个业务过程，我们在这里可以抽象为一个具体“事件”，而“开车去”则可以看成是事件“上学”的一个说明。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从上面的举例我们可以了解，我们使用的抽象归纳方法其实很简单，任何业务可以看成 3 个部分：</p>\n<blockquote>\n<p>1.实体，主要指领域模型中特定的概念主体，指发生业务关系的对象。<br>2.事件，主要指概念主体之间完成一次业务流程的过程，特指特定的业务过程。<br>3.说明，主要是针对实体和事件的特殊说明。</p>\n</blockquote>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;由于实体建模法，能够很轻松的实现业务模型的划分，因此，在业务建模阶段和领域概念建模阶段，实体建模法有着广泛的应用。从笔者的经验来看，再没有现成的行业模型的情况下，我们可以采用实体建模的方法，和客户一起理清整个业务的模型，进行领域概念模型的划分，抽象出具体的业务概念，结合客户的使用特点，完全可以创建出一个符合自己需要的数据仓库模型来。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;但是，实体建模法也有着自己先天的缺陷，由于实体说明法只是一种抽象客观世界的方法，因此，注定了该建模方法只能局限在业务建模和领域概念建模阶段。因此，到了逻辑建模阶段和物理建模阶段，则是范式建模和维度建模发挥长处的阶段。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;因此，笔者建议读者在创建自己的数据仓库模型的时候，可以参考使用上述的三种数据仓库得建模方法，在各个不同阶段采用不同的方法，从而能够保证整个数据仓库建模的质量。</p>\n<hr>\n<p>实践才是检验真理的唯一标准</p>"},{"title":"比特币原理","date":"2018-07-05T08:20:31.000Z","notebook":"区块链","_content":"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家好，今天来说说18年很火的比特币，由于现代社会的全球化进程加快，各个国家之间的信息交换，信息共享出现了许许多多的问题，比如你出国旅游，还得更换货币，还得办个护照来证明你是个人，还有就是各个银行或金融机构对货币的监督和管理，一旦这些机构出现问题，那么我们的钱就这样没了，这是不是很亏呢，今天将的区块链技术，就可以解决这个问题，下面来详细讲解它的运行原理和应用场景。\n<!-- more -->\n# 一、去中心化\n## 1.如何确认付款方是否有足够的比特币进行支付？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;去中心化网络，舍去银行等金融机构（他们通过用户账户余额来解决这个问题）的依赖，比特币的解决方案是每笔交易都必须把以前的交易记录作为基础。\n## 2.转账记录的存储和维护\n### 2.1如何进行同步，互联网上的计算机交易记录同步；\n### 2.2如何防止黑客篡改记录；\n### 2.3如何防止同一笔比特币收入被重复使用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个时候就需要用到区块链技术，区块链仅仅维护一个交易链，每个人将自己的转账记录发布到网络上，矿工收集这些转账记录，生成一个区块，世界上有许多矿工，那么到底哪一个矿工生成的区块才能链接到区块链的末尾呢？这时，就出现了一个机制，每个矿工在生成了这个区块后，需要对前一个区块链上前一个区块的sha256函数值+这个新区块的基本信息+这个新区块所包含的所有交易记录+随机数进行sha256函数计算，得到一个hash值前72位均为0，那么找到符合要求的随机数需要进行2的72次方sha256函数运算，计算机大概平均需要10分钟左右算出来，然后发布到区块链网络上，在这10分钟之内，一般只有一个矿工能够计算出符合要求的随机数，所以就避免了多个矿工同时生成区块而无法判断到底将哪一个区块链接到区块链的尾端的问题了。矿工得到符合要求的随机数后，发布到网络上，网络上的其他计算机会进行校验：随机数校验，交易记录校验。一切都没有问题后，就讲该区块添加到自己电脑上区块链的末尾，完成交易记录的同步\n# 二、不可篡改：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对转账交易来进行说明，利用非对称加密算法，达到不可篡改的目的，具体如下,如，小红转账给小白50元，这条记录\n## 1.原始记录进行SHA256加密得到hash值1；\n## 2.小红利用她的私钥对hash值1进行加密得到hash值2；\n## 3.其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果hash值3等于hash值1，那么说明这个签名是针对这条记录的，并且这条记录是小红发出的，接受到的记录与原始记录相同，未被篡改。\n# 三、记录可回溯\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币的每条交易记录都记录在区块链上，当小红转账给小白时，会先计算所有转账给小红的比特币数量，来确认小红有足够的比特币进行交易，所以记录可回溯。\n# 四、比特币问答\n## 1.比特币是如何发行的？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新比特币作为对矿工的奖励，进入比特币网络进行流通，每生成21万个区块，奖励减半，从第0个区块到第21万个区块，每生成一个区块，奖励给矿工50个比特币，从第21万个区块开始的21万个区块，每生成一个区块，奖励给矿工25个比特币，从第42万个区块开始的21万个区块，每生成一个区块，奖励给矿工12.5个区块，以此类推。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从第693个区块开始，对矿工的奖励为0，也就是不再有新的比特币流入比特币网络，到时，累计有2100万个比特币流入到比特币网络，矿工的收入将完全来自于每笔比特币转账交易的交易费，交易费只是比特币在账户之间转移，不是新产生的比特币。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是说，比特币网络上的比特币总量永远不会超过2100万个。\n## 2.比特币存在什么地方？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币一般存在比特币客户端软件的数据文件里\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果把数据文件弄丢了，比如计算机硬盘坏了，就永远地失去了里面的比特币，而且比特币网络里流通的比特币总量也会减少。\n## 3.比特币转账和支付宝转账有啥区别？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币不是任何银行和金融机构发行的，使用比特币不需要绑定银行卡，不需要任何身份证明，不需要手机短信认证，只要能上网，只要安装了比特币客户端软件，就可以转账或收款，所有的账户不受任何机构监督和管理，转错了人，没有后悔药，完全没有挽回的余地。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在中国大陆，支付宝转账转的一般是人民币，人民币是中国人民银行发行的，人民币的发行量由中国人民银行根据社会发展需要决定。使用支付宝，需要绑定银行卡，转账或收款受支付宝和银行管理。转错了人，可以找支付宝和银行协调，有可能挽回损失。\n## 4.比特币转账的手续费怎么算？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币软件会给一个推荐值和最低值，但具体多少由付款方自己定。既然手续费自己定，那么付款方将手续费设为最低值会怎么样呢？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下面这张图片：\n![支付详情](比特币原理/exchange.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币网络中，支付最少交易费是可以的。但是请注意，当交易量大到超出网络可处理时，矿工会选择手续费更高的交易记录到账本，而您的交易可能永远被搁置，无法确认。\n## 5.比特币所使用的主要技术和特点：\n### 5.1利用sha256和非对称加密算法制作签名；\n### 5.2利用区块链中的区块存储比特币交易记录；\n### 5.3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\n### 5.4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\n### 5.5比特币转账不依赖任何银行或其他金融机构；\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了，到这里基本上就讲完了，这是我最近从youtube网站上看过很多次讲解的各种比特币、区块链的视频才了解的，国内的资源还很少，天朝也不看好比特币，但是区块链技术是在积极推动的，希望大家看完了总结之后，对比特币的原理有一定的了解，如果有什么不对的地方，请留言指正，或者发送到邮箱chenzuoli709@gmail.com.\n附上资源：\n<font color=#0099ff><a href=\"https://www.youtube.com/watch?v=obRzfcvMshM&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\"><b>比特币原理</b>https://www.youtube.com/watch?v=obRzfcvMshM&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw</a></font>\n<font color=#0099ff><a href=\"https://www.youtube.com/watch?v=8YY8yuKqziw&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\"><b>区块链开放前景及学习平台</b>https://www.youtube.com/watch?v=8YY8yuKqziw&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw</a></font>\n<font color=#0099ff><a href=\"https://www.youtube.com/watch?v=pV2DxjxpKu4&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\"><b>许知远对话搜狗CEO王小川将区块链</b>https://www.youtube.com/watch?v=pV2DxjxpKu4&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw</a></font>\n\n# 五、数字货币投资\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鄙人还是非常非常看好比特币、区块链技术的，也在火币平台上购买了一些比特币，期待它在以后的日子里带我实现财务自由，想参与的伙伴们，点击链接注册<a href=\"https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3\">https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3</a>\n确认邀请码：2i9d3\n","source":"_posts/比特币原理.md","raw":"---\ntitle: 比特币原理\ndate: 2018-07-05 16:20:31\ntags: bitcoin\ncategories: 区块链\nnotebook: 区块链\n---\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家好，今天来说说18年很火的比特币，由于现代社会的全球化进程加快，各个国家之间的信息交换，信息共享出现了许许多多的问题，比如你出国旅游，还得更换货币，还得办个护照来证明你是个人，还有就是各个银行或金融机构对货币的监督和管理，一旦这些机构出现问题，那么我们的钱就这样没了，这是不是很亏呢，今天将的区块链技术，就可以解决这个问题，下面来详细讲解它的运行原理和应用场景。\n<!-- more -->\n# 一、去中心化\n## 1.如何确认付款方是否有足够的比特币进行支付？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;去中心化网络，舍去银行等金融机构（他们通过用户账户余额来解决这个问题）的依赖，比特币的解决方案是每笔交易都必须把以前的交易记录作为基础。\n## 2.转账记录的存储和维护\n### 2.1如何进行同步，互联网上的计算机交易记录同步；\n### 2.2如何防止黑客篡改记录；\n### 2.3如何防止同一笔比特币收入被重复使用\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个时候就需要用到区块链技术，区块链仅仅维护一个交易链，每个人将自己的转账记录发布到网络上，矿工收集这些转账记录，生成一个区块，世界上有许多矿工，那么到底哪一个矿工生成的区块才能链接到区块链的末尾呢？这时，就出现了一个机制，每个矿工在生成了这个区块后，需要对前一个区块链上前一个区块的sha256函数值+这个新区块的基本信息+这个新区块所包含的所有交易记录+随机数进行sha256函数计算，得到一个hash值前72位均为0，那么找到符合要求的随机数需要进行2的72次方sha256函数运算，计算机大概平均需要10分钟左右算出来，然后发布到区块链网络上，在这10分钟之内，一般只有一个矿工能够计算出符合要求的随机数，所以就避免了多个矿工同时生成区块而无法判断到底将哪一个区块链接到区块链的尾端的问题了。矿工得到符合要求的随机数后，发布到网络上，网络上的其他计算机会进行校验：随机数校验，交易记录校验。一切都没有问题后，就讲该区块添加到自己电脑上区块链的末尾，完成交易记录的同步\n# 二、不可篡改：\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对转账交易来进行说明，利用非对称加密算法，达到不可篡改的目的，具体如下,如，小红转账给小白50元，这条记录\n## 1.原始记录进行SHA256加密得到hash值1；\n## 2.小红利用她的私钥对hash值1进行加密得到hash值2；\n## 3.其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果hash值3等于hash值1，那么说明这个签名是针对这条记录的，并且这条记录是小红发出的，接受到的记录与原始记录相同，未被篡改。\n# 三、记录可回溯\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币的每条交易记录都记录在区块链上，当小红转账给小白时，会先计算所有转账给小红的比特币数量，来确认小红有足够的比特币进行交易，所以记录可回溯。\n# 四、比特币问答\n## 1.比特币是如何发行的？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新比特币作为对矿工的奖励，进入比特币网络进行流通，每生成21万个区块，奖励减半，从第0个区块到第21万个区块，每生成一个区块，奖励给矿工50个比特币，从第21万个区块开始的21万个区块，每生成一个区块，奖励给矿工25个比特币，从第42万个区块开始的21万个区块，每生成一个区块，奖励给矿工12.5个区块，以此类推。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从第693个区块开始，对矿工的奖励为0，也就是不再有新的比特币流入比特币网络，到时，累计有2100万个比特币流入到比特币网络，矿工的收入将完全来自于每笔比特币转账交易的交易费，交易费只是比特币在账户之间转移，不是新产生的比特币。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是说，比特币网络上的比特币总量永远不会超过2100万个。\n## 2.比特币存在什么地方？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币一般存在比特币客户端软件的数据文件里\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果把数据文件弄丢了，比如计算机硬盘坏了，就永远地失去了里面的比特币，而且比特币网络里流通的比特币总量也会减少。\n## 3.比特币转账和支付宝转账有啥区别？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币不是任何银行和金融机构发行的，使用比特币不需要绑定银行卡，不需要任何身份证明，不需要手机短信认证，只要能上网，只要安装了比特币客户端软件，就可以转账或收款，所有的账户不受任何机构监督和管理，转错了人，没有后悔药，完全没有挽回的余地。\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在中国大陆，支付宝转账转的一般是人民币，人民币是中国人民银行发行的，人民币的发行量由中国人民银行根据社会发展需要决定。使用支付宝，需要绑定银行卡，转账或收款受支付宝和银行管理。转错了人，可以找支付宝和银行协调，有可能挽回损失。\n## 4.比特币转账的手续费怎么算？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币软件会给一个推荐值和最低值，但具体多少由付款方自己定。既然手续费自己定，那么付款方将手续费设为最低值会怎么样呢？\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下面这张图片：\n![支付详情](比特币原理/exchange.png)\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币网络中，支付最少交易费是可以的。但是请注意，当交易量大到超出网络可处理时，矿工会选择手续费更高的交易记录到账本，而您的交易可能永远被搁置，无法确认。\n## 5.比特币所使用的主要技术和特点：\n### 5.1利用sha256和非对称加密算法制作签名；\n### 5.2利用区块链中的区块存储比特币交易记录；\n### 5.3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\n### 5.4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\n### 5.5比特币转账不依赖任何银行或其他金融机构；\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了，到这里基本上就讲完了，这是我最近从youtube网站上看过很多次讲解的各种比特币、区块链的视频才了解的，国内的资源还很少，天朝也不看好比特币，但是区块链技术是在积极推动的，希望大家看完了总结之后，对比特币的原理有一定的了解，如果有什么不对的地方，请留言指正，或者发送到邮箱chenzuoli709@gmail.com.\n附上资源：\n<font color=#0099ff><a href=\"https://www.youtube.com/watch?v=obRzfcvMshM&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\"><b>比特币原理</b>https://www.youtube.com/watch?v=obRzfcvMshM&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw</a></font>\n<font color=#0099ff><a href=\"https://www.youtube.com/watch?v=8YY8yuKqziw&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\"><b>区块链开放前景及学习平台</b>https://www.youtube.com/watch?v=8YY8yuKqziw&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw</a></font>\n<font color=#0099ff><a href=\"https://www.youtube.com/watch?v=pV2DxjxpKu4&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\"><b>许知远对话搜狗CEO王小川将区块链</b>https://www.youtube.com/watch?v=pV2DxjxpKu4&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw</a></font>\n\n# 五、数字货币投资\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鄙人还是非常非常看好比特币、区块链技术的，也在火币平台上购买了一些比特币，期待它在以后的日子里带我实现财务自由，想参与的伙伴们，点击链接注册<a href=\"https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3\">https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3</a>\n确认邀请码：2i9d3\n","slug":"比特币原理","published":1,"updated":"2019-09-13T12:37:28.025Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0sz002vfbs69l4elbva","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家好，今天来说说18年很火的比特币，由于现代社会的全球化进程加快，各个国家之间的信息交换，信息共享出现了许许多多的问题，比如你出国旅游，还得更换货币，还得办个护照来证明你是个人，还有就是各个银行或金融机构对货币的监督和管理，一旦这些机构出现问题，那么我们的钱就这样没了，这是不是很亏呢，今天将的区块链技术，就可以解决这个问题，下面来详细讲解它的运行原理和应用场景。</p>\n<a id=\"more\"></a>\n<h1 id=\"一、去中心化\"><a href=\"#一、去中心化\" class=\"headerlink\" title=\"一、去中心化\"></a>一、去中心化</h1><h2 id=\"1-如何确认付款方是否有足够的比特币进行支付？\"><a href=\"#1-如何确认付款方是否有足够的比特币进行支付？\" class=\"headerlink\" title=\"1.如何确认付款方是否有足够的比特币进行支付？\"></a>1.如何确认付款方是否有足够的比特币进行支付？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;去中心化网络，舍去银行等金融机构（他们通过用户账户余额来解决这个问题）的依赖，比特币的解决方案是每笔交易都必须把以前的交易记录作为基础。</p>\n<h2 id=\"2-转账记录的存储和维护\"><a href=\"#2-转账记录的存储和维护\" class=\"headerlink\" title=\"2.转账记录的存储和维护\"></a>2.转账记录的存储和维护</h2><h3 id=\"2-1如何进行同步，互联网上的计算机交易记录同步；\"><a href=\"#2-1如何进行同步，互联网上的计算机交易记录同步；\" class=\"headerlink\" title=\"2.1如何进行同步，互联网上的计算机交易记录同步；\"></a>2.1如何进行同步，互联网上的计算机交易记录同步；</h3><h3 id=\"2-2如何防止黑客篡改记录；\"><a href=\"#2-2如何防止黑客篡改记录；\" class=\"headerlink\" title=\"2.2如何防止黑客篡改记录；\"></a>2.2如何防止黑客篡改记录；</h3><h3 id=\"2-3如何防止同一笔比特币收入被重复使用\"><a href=\"#2-3如何防止同一笔比特币收入被重复使用\" class=\"headerlink\" title=\"2.3如何防止同一笔比特币收入被重复使用\"></a>2.3如何防止同一笔比特币收入被重复使用</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个时候就需要用到区块链技术，区块链仅仅维护一个交易链，每个人将自己的转账记录发布到网络上，矿工收集这些转账记录，生成一个区块，世界上有许多矿工，那么到底哪一个矿工生成的区块才能链接到区块链的末尾呢？这时，就出现了一个机制，每个矿工在生成了这个区块后，需要对前一个区块链上前一个区块的sha256函数值+这个新区块的基本信息+这个新区块所包含的所有交易记录+随机数进行sha256函数计算，得到一个hash值前72位均为0，那么找到符合要求的随机数需要进行2的72次方sha256函数运算，计算机大概平均需要10分钟左右算出来，然后发布到区块链网络上，在这10分钟之内，一般只有一个矿工能够计算出符合要求的随机数，所以就避免了多个矿工同时生成区块而无法判断到底将哪一个区块链接到区块链的尾端的问题了。矿工得到符合要求的随机数后，发布到网络上，网络上的其他计算机会进行校验：随机数校验，交易记录校验。一切都没有问题后，就讲该区块添加到自己电脑上区块链的末尾，完成交易记录的同步</p>\n<h1 id=\"二、不可篡改：\"><a href=\"#二、不可篡改：\" class=\"headerlink\" title=\"二、不可篡改：\"></a>二、不可篡改：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对转账交易来进行说明，利用非对称加密算法，达到不可篡改的目的，具体如下,如，小红转账给小白50元，这条记录</p>\n<h2 id=\"1-原始记录进行SHA256加密得到hash值1；\"><a href=\"#1-原始记录进行SHA256加密得到hash值1；\" class=\"headerlink\" title=\"1.原始记录进行SHA256加密得到hash值1；\"></a>1.原始记录进行SHA256加密得到hash值1；</h2><h2 id=\"2-小红利用她的私钥对hash值1进行加密得到hash值2；\"><a href=\"#2-小红利用她的私钥对hash值1进行加密得到hash值2；\" class=\"headerlink\" title=\"2.小红利用她的私钥对hash值1进行加密得到hash值2；\"></a>2.小红利用她的私钥对hash值1进行加密得到hash值2；</h2><h2 id=\"3-其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\"><a href=\"#3-其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\" class=\"headerlink\" title=\"3.其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\"></a>3.其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果hash值3等于hash值1，那么说明这个签名是针对这条记录的，并且这条记录是小红发出的，接受到的记录与原始记录相同，未被篡改。</p>\n<h1 id=\"三、记录可回溯\"><a href=\"#三、记录可回溯\" class=\"headerlink\" title=\"三、记录可回溯\"></a>三、记录可回溯</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币的每条交易记录都记录在区块链上，当小红转账给小白时，会先计算所有转账给小红的比特币数量，来确认小红有足够的比特币进行交易，所以记录可回溯。</p>\n<h1 id=\"四、比特币问答\"><a href=\"#四、比特币问答\" class=\"headerlink\" title=\"四、比特币问答\"></a>四、比特币问答</h1><h2 id=\"1-比特币是如何发行的？\"><a href=\"#1-比特币是如何发行的？\" class=\"headerlink\" title=\"1.比特币是如何发行的？\"></a>1.比特币是如何发行的？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新比特币作为对矿工的奖励，进入比特币网络进行流通，每生成21万个区块，奖励减半，从第0个区块到第21万个区块，每生成一个区块，奖励给矿工50个比特币，从第21万个区块开始的21万个区块，每生成一个区块，奖励给矿工25个比特币，从第42万个区块开始的21万个区块，每生成一个区块，奖励给矿工12.5个区块，以此类推。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从第693个区块开始，对矿工的奖励为0，也就是不再有新的比特币流入比特币网络，到时，累计有2100万个比特币流入到比特币网络，矿工的收入将完全来自于每笔比特币转账交易的交易费，交易费只是比特币在账户之间转移，不是新产生的比特币。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是说，比特币网络上的比特币总量永远不会超过2100万个。</p>\n<h2 id=\"2-比特币存在什么地方？\"><a href=\"#2-比特币存在什么地方？\" class=\"headerlink\" title=\"2.比特币存在什么地方？\"></a>2.比特币存在什么地方？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币一般存在比特币客户端软件的数据文件里<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果把数据文件弄丢了，比如计算机硬盘坏了，就永远地失去了里面的比特币，而且比特币网络里流通的比特币总量也会减少。</p>\n<h2 id=\"3-比特币转账和支付宝转账有啥区别？\"><a href=\"#3-比特币转账和支付宝转账有啥区别？\" class=\"headerlink\" title=\"3.比特币转账和支付宝转账有啥区别？\"></a>3.比特币转账和支付宝转账有啥区别？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币不是任何银行和金融机构发行的，使用比特币不需要绑定银行卡，不需要任何身份证明，不需要手机短信认证，只要能上网，只要安装了比特币客户端软件，就可以转账或收款，所有的账户不受任何机构监督和管理，转错了人，没有后悔药，完全没有挽回的余地。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在中国大陆，支付宝转账转的一般是人民币，人民币是中国人民银行发行的，人民币的发行量由中国人民银行根据社会发展需要决定。使用支付宝，需要绑定银行卡，转账或收款受支付宝和银行管理。转错了人，可以找支付宝和银行协调，有可能挽回损失。</p>\n<h2 id=\"4-比特币转账的手续费怎么算？\"><a href=\"#4-比特币转账的手续费怎么算？\" class=\"headerlink\" title=\"4.比特币转账的手续费怎么算？\"></a>4.比特币转账的手续费怎么算？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币软件会给一个推荐值和最低值，但具体多少由付款方自己定。既然手续费自己定，那么付款方将手续费设为最低值会怎么样呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下面这张图片：<br><img src=\"/2018/07/05/比特币原理/exchange.png\" alt=\"支付详情\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币网络中，支付最少交易费是可以的。但是请注意，当交易量大到超出网络可处理时，矿工会选择手续费更高的交易记录到账本，而您的交易可能永远被搁置，无法确认。</p>\n<h2 id=\"5-比特币所使用的主要技术和特点：\"><a href=\"#5-比特币所使用的主要技术和特点：\" class=\"headerlink\" title=\"5.比特币所使用的主要技术和特点：\"></a>5.比特币所使用的主要技术和特点：</h2><h3 id=\"5-1利用sha256和非对称加密算法制作签名；\"><a href=\"#5-1利用sha256和非对称加密算法制作签名；\" class=\"headerlink\" title=\"5.1利用sha256和非对称加密算法制作签名；\"></a>5.1利用sha256和非对称加密算法制作签名；</h3><h3 id=\"5-2利用区块链中的区块存储比特币交易记录；\"><a href=\"#5-2利用区块链中的区块存储比特币交易记录；\" class=\"headerlink\" title=\"5.2利用区块链中的区块存储比特币交易记录；\"></a>5.2利用区块链中的区块存储比特币交易记录；</h3><h3 id=\"5-3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\"><a href=\"#5-3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\" class=\"headerlink\" title=\"5.3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\"></a>5.3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；</h3><h3 id=\"5-4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\"><a href=\"#5-4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\" class=\"headerlink\" title=\"5.4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\"></a>5.4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；</h3><h3 id=\"5-5比特币转账不依赖任何银行或其他金融机构；\"><a href=\"#5-5比特币转账不依赖任何银行或其他金融机构；\" class=\"headerlink\" title=\"5.5比特币转账不依赖任何银行或其他金融机构；\"></a>5.5比特币转账不依赖任何银行或其他金融机构；</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了，到这里基本上就讲完了，这是我最近从youtube网站上看过很多次讲解的各种比特币、区块链的视频才了解的，国内的资源还很少，天朝也不看好比特币，但是区块链技术是在积极推动的，希望大家看完了总结之后，对比特币的原理有一定的了解，如果有什么不对的地方，请留言指正，或者发送到邮箱<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>.\n附上资源：<br><font color=\"#0099ff\"><a href=\"https://www.youtube.com/watch?v=obRzfcvMshM&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\" target=\"_blank\" rel=\"noopener\"><b>比特币原理</b>https://www.youtube.com/watch?v=obRzfcvMshM&amp;t=0s&amp;list=LL6p-2jKOMljSPte26mVy3Vw</a></font><br><font color=\"#0099ff\"><a href=\"https://www.youtube.com/watch?v=8YY8yuKqziw&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\" target=\"_blank\" rel=\"noopener\"><b>区块链开放前景及学习平台</b>https://www.youtube.com/watch?v=8YY8yuKqziw&amp;t=0s&amp;list=LL6p-2jKOMljSPte26mVy3Vw</a></font><br><font color=\"#0099ff\"><a href=\"https://www.youtube.com/watch?v=pV2DxjxpKu4&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\" target=\"_blank\" rel=\"noopener\"><b>许知远对话搜狗CEO王小川将区块链</b>https://www.youtube.com/watch?v=pV2DxjxpKu4&amp;t=0s&amp;list=LL6p-2jKOMljSPte26mVy3Vw</a></font></p>\n<h1 id=\"五、数字货币投资\"><a href=\"#五、数字货币投资\" class=\"headerlink\" title=\"五、数字货币投资\"></a>五、数字货币投资</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鄙人还是非常非常看好比特币、区块链技术的，也在火币平台上购买了一些比特币，期待它在以后的日子里带我实现财务自由，想参与的伙伴们，点击链接注册<a href=\"https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3</a><br>确认邀请码：2i9d3</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;大家好，今天来说说18年很火的比特币，由于现代社会的全球化进程加快，各个国家之间的信息交换，信息共享出现了许许多多的问题，比如你出国旅游，还得更换货币，还得办个护照来证明你是个人，还有就是各个银行或金融机构对货币的监督和管理，一旦这些机构出现问题，那么我们的钱就这样没了，这是不是很亏呢，今天将的区块链技术，就可以解决这个问题，下面来详细讲解它的运行原理和应用场景。</p>","more":"<h1 id=\"一、去中心化\"><a href=\"#一、去中心化\" class=\"headerlink\" title=\"一、去中心化\"></a>一、去中心化</h1><h2 id=\"1-如何确认付款方是否有足够的比特币进行支付？\"><a href=\"#1-如何确认付款方是否有足够的比特币进行支付？\" class=\"headerlink\" title=\"1.如何确认付款方是否有足够的比特币进行支付？\"></a>1.如何确认付款方是否有足够的比特币进行支付？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;去中心化网络，舍去银行等金融机构（他们通过用户账户余额来解决这个问题）的依赖，比特币的解决方案是每笔交易都必须把以前的交易记录作为基础。</p>\n<h2 id=\"2-转账记录的存储和维护\"><a href=\"#2-转账记录的存储和维护\" class=\"headerlink\" title=\"2.转账记录的存储和维护\"></a>2.转账记录的存储和维护</h2><h3 id=\"2-1如何进行同步，互联网上的计算机交易记录同步；\"><a href=\"#2-1如何进行同步，互联网上的计算机交易记录同步；\" class=\"headerlink\" title=\"2.1如何进行同步，互联网上的计算机交易记录同步；\"></a>2.1如何进行同步，互联网上的计算机交易记录同步；</h3><h3 id=\"2-2如何防止黑客篡改记录；\"><a href=\"#2-2如何防止黑客篡改记录；\" class=\"headerlink\" title=\"2.2如何防止黑客篡改记录；\"></a>2.2如何防止黑客篡改记录；</h3><h3 id=\"2-3如何防止同一笔比特币收入被重复使用\"><a href=\"#2-3如何防止同一笔比特币收入被重复使用\" class=\"headerlink\" title=\"2.3如何防止同一笔比特币收入被重复使用\"></a>2.3如何防止同一笔比特币收入被重复使用</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;这个时候就需要用到区块链技术，区块链仅仅维护一个交易链，每个人将自己的转账记录发布到网络上，矿工收集这些转账记录，生成一个区块，世界上有许多矿工，那么到底哪一个矿工生成的区块才能链接到区块链的末尾呢？这时，就出现了一个机制，每个矿工在生成了这个区块后，需要对前一个区块链上前一个区块的sha256函数值+这个新区块的基本信息+这个新区块所包含的所有交易记录+随机数进行sha256函数计算，得到一个hash值前72位均为0，那么找到符合要求的随机数需要进行2的72次方sha256函数运算，计算机大概平均需要10分钟左右算出来，然后发布到区块链网络上，在这10分钟之内，一般只有一个矿工能够计算出符合要求的随机数，所以就避免了多个矿工同时生成区块而无法判断到底将哪一个区块链接到区块链的尾端的问题了。矿工得到符合要求的随机数后，发布到网络上，网络上的其他计算机会进行校验：随机数校验，交易记录校验。一切都没有问题后，就讲该区块添加到自己电脑上区块链的末尾，完成交易记录的同步</p>\n<h1 id=\"二、不可篡改：\"><a href=\"#二、不可篡改：\" class=\"headerlink\" title=\"二、不可篡改：\"></a>二、不可篡改：</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;针对转账交易来进行说明，利用非对称加密算法，达到不可篡改的目的，具体如下,如，小红转账给小白50元，这条记录</p>\n<h2 id=\"1-原始记录进行SHA256加密得到hash值1；\"><a href=\"#1-原始记录进行SHA256加密得到hash值1；\" class=\"headerlink\" title=\"1.原始记录进行SHA256加密得到hash值1；\"></a>1.原始记录进行SHA256加密得到hash值1；</h2><h2 id=\"2-小红利用她的私钥对hash值1进行加密得到hash值2；\"><a href=\"#2-小红利用她的私钥对hash值1进行加密得到hash值2；\" class=\"headerlink\" title=\"2.小红利用她的私钥对hash值1进行加密得到hash值2；\"></a>2.小红利用她的私钥对hash值1进行加密得到hash值2；</h2><h2 id=\"3-其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\"><a href=\"#3-其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\" class=\"headerlink\" title=\"3.其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；\"></a>3.其他人利用小红的公钥（公钥是公开的），对hash值2进行解密得到hash值3；</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果hash值3等于hash值1，那么说明这个签名是针对这条记录的，并且这条记录是小红发出的，接受到的记录与原始记录相同，未被篡改。</p>\n<h1 id=\"三、记录可回溯\"><a href=\"#三、记录可回溯\" class=\"headerlink\" title=\"三、记录可回溯\"></a>三、记录可回溯</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币的每条交易记录都记录在区块链上，当小红转账给小白时，会先计算所有转账给小红的比特币数量，来确认小红有足够的比特币进行交易，所以记录可回溯。</p>\n<h1 id=\"四、比特币问答\"><a href=\"#四、比特币问答\" class=\"headerlink\" title=\"四、比特币问答\"></a>四、比特币问答</h1><h2 id=\"1-比特币是如何发行的？\"><a href=\"#1-比特币是如何发行的？\" class=\"headerlink\" title=\"1.比特币是如何发行的？\"></a>1.比特币是如何发行的？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;新比特币作为对矿工的奖励，进入比特币网络进行流通，每生成21万个区块，奖励减半，从第0个区块到第21万个区块，每生成一个区块，奖励给矿工50个比特币，从第21万个区块开始的21万个区块，每生成一个区块，奖励给矿工25个比特币，从第42万个区块开始的21万个区块，每生成一个区块，奖励给矿工12.5个区块，以此类推。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;从第693个区块开始，对矿工的奖励为0，也就是不再有新的比特币流入比特币网络，到时，累计有2100万个比特币流入到比特币网络，矿工的收入将完全来自于每笔比特币转账交易的交易费，交易费只是比特币在账户之间转移，不是新产生的比特币。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;也就是说，比特币网络上的比特币总量永远不会超过2100万个。</p>\n<h2 id=\"2-比特币存在什么地方？\"><a href=\"#2-比特币存在什么地方？\" class=\"headerlink\" title=\"2.比特币存在什么地方？\"></a>2.比特币存在什么地方？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币一般存在比特币客户端软件的数据文件里<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;如果把数据文件弄丢了，比如计算机硬盘坏了，就永远地失去了里面的比特币，而且比特币网络里流通的比特币总量也会减少。</p>\n<h2 id=\"3-比特币转账和支付宝转账有啥区别？\"><a href=\"#3-比特币转账和支付宝转账有啥区别？\" class=\"headerlink\" title=\"3.比特币转账和支付宝转账有啥区别？\"></a>3.比特币转账和支付宝转账有啥区别？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币不是任何银行和金融机构发行的，使用比特币不需要绑定银行卡，不需要任何身份证明，不需要手机短信认证，只要能上网，只要安装了比特币客户端软件，就可以转账或收款，所有的账户不受任何机构监督和管理，转错了人，没有后悔药，完全没有挽回的余地。<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在中国大陆，支付宝转账转的一般是人民币，人民币是中国人民银行发行的，人民币的发行量由中国人民银行根据社会发展需要决定。使用支付宝，需要绑定银行卡，转账或收款受支付宝和银行管理。转错了人，可以找支付宝和银行协调，有可能挽回损失。</p>\n<h2 id=\"4-比特币转账的手续费怎么算？\"><a href=\"#4-比特币转账的手续费怎么算？\" class=\"headerlink\" title=\"4.比特币转账的手续费怎么算？\"></a>4.比特币转账的手续费怎么算？</h2><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币软件会给一个推荐值和最低值，但具体多少由付款方自己定。既然手续费自己定，那么付款方将手续费设为最低值会怎么样呢？<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;请看下面这张图片：<br><img src=\"/2018/07/05/比特币原理/exchange.png\" alt=\"支付详情\"><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币网络中，支付最少交易费是可以的。但是请注意，当交易量大到超出网络可处理时，矿工会选择手续费更高的交易记录到账本，而您的交易可能永远被搁置，无法确认。</p>\n<h2 id=\"5-比特币所使用的主要技术和特点：\"><a href=\"#5-比特币所使用的主要技术和特点：\" class=\"headerlink\" title=\"5.比特币所使用的主要技术和特点：\"></a>5.比特币所使用的主要技术和特点：</h2><h3 id=\"5-1利用sha256和非对称加密算法制作签名；\"><a href=\"#5-1利用sha256和非对称加密算法制作签名；\" class=\"headerlink\" title=\"5.1利用sha256和非对称加密算法制作签名；\"></a>5.1利用sha256和非对称加密算法制作签名；</h3><h3 id=\"5-2利用区块链中的区块存储比特币交易记录；\"><a href=\"#5-2利用区块链中的区块存储比特币交易记录；\" class=\"headerlink\" title=\"5.2利用区块链中的区块存储比特币交易记录；\"></a>5.2利用区块链中的区块存储比特币交易记录；</h3><h3 id=\"5-3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\"><a href=\"#5-3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\" class=\"headerlink\" title=\"5.3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；\"></a>5.3设置额外的工作，从而控制单位时间内生成区块的个数，同时保护比特币网络；</h3><h3 id=\"5-4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\"><a href=\"#5-4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\" class=\"headerlink\" title=\"5.4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；\"></a>5.4将一定数额的比特币和区块内的所有交易费奖励给成功生成该区块的矿工激励更多矿工加入比特币网络，促进比特币网络的茁壮成长；</h3><h3 id=\"5-5比特币转账不依赖任何银行或其他金融机构；\"><a href=\"#5-5比特币转账不依赖任何银行或其他金融机构；\" class=\"headerlink\" title=\"5.5比特币转账不依赖任何银行或其他金融机构；\"></a>5.5比特币转账不依赖任何银行或其他金融机构；</h3><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;好了，到这里基本上就讲完了，这是我最近从youtube网站上看过很多次讲解的各种比特币、区块链的视频才了解的，国内的资源还很少，天朝也不看好比特币，但是区块链技术是在积极推动的，希望大家看完了总结之后，对比特币的原理有一定的了解，如果有什么不对的地方，请留言指正，或者发送到邮箱<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>.\n附上资源：<br><font color=\"#0099ff\"><a href=\"https://www.youtube.com/watch?v=obRzfcvMshM&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\" target=\"_blank\" rel=\"noopener\"><b>比特币原理</b>https://www.youtube.com/watch?v=obRzfcvMshM&amp;t=0s&amp;list=LL6p-2jKOMljSPte26mVy3Vw</a></font><br><font color=\"#0099ff\"><a href=\"https://www.youtube.com/watch?v=8YY8yuKqziw&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\" target=\"_blank\" rel=\"noopener\"><b>区块链开放前景及学习平台</b>https://www.youtube.com/watch?v=8YY8yuKqziw&amp;t=0s&amp;list=LL6p-2jKOMljSPte26mVy3Vw</a></font><br><font color=\"#0099ff\"><a href=\"https://www.youtube.com/watch?v=pV2DxjxpKu4&t=0s&list=LL6p-2jKOMljSPte26mVy3Vw\" target=\"_blank\" rel=\"noopener\"><b>许知远对话搜狗CEO王小川将区块链</b>https://www.youtube.com/watch?v=pV2DxjxpKu4&amp;t=0s&amp;list=LL6p-2jKOMljSPte26mVy3Vw</a></font></p>\n<h1 id=\"五、数字货币投资\"><a href=\"#五、数字货币投资\" class=\"headerlink\" title=\"五、数字货币投资\"></a>五、数字货币投资</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;鄙人还是非常非常看好比特币、区块链技术的，也在火币平台上购买了一些比特币，期待它在以后的日子里带我实现财务自由，想参与的伙伴们，点击链接注册<a href=\"https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3\" target=\"_blank\" rel=\"noopener\">https://www.huobi.br.com/zh-cn/topic/invited/?invite_code=2i9d3</a><br>确认邀请码：2i9d3</p>"},{"title":"零知识证明","date":"2019-09-16T15:39:38.000Z","notebook":"区块链","_content":"\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明（Zero-Knowledge Proof）或零知识协议是一种基于概率的验证方法，包括两部分：宣称某一命题为真的证明者（prover）和确认该命题确实为真的验证者（verifier）。\n\n![zero_knowledge_proof](零知识证明/zero-knowledge-proof.jpg)\n\n<!--  more -->\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的，在密码学中非常有用。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;顾名思义，零知识证明就是既能充分证明自己是某种权益的合法拥有者，又不把有关的信息泄漏出去，即给外界的 “知识” 为“零”。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“能够在不知道用户是谁，或者他们有多少钱的情况下判断‘一个用户是否有足够的钱发送给另一个用户’的问题，是零知识证明在区块链中的主要应用之一。”——Demiro Massessi\n\n# 1.为何零知识证明如此重要？\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据隐私是当今社会最重要的课题之一。保护与个人身份有关的个人资料 (出生日期、银行月结单、交易记录、学历) 极为重要，并会不断增加其重要性。在科技时代，我们正在生成前所未有的海量数据，而我们不断创造的关于我们自己的数据也在不断被获取。像谷歌和 Facebook 这样的大公司已经利用我们的数据成为了今天主宰世界的科技巨头。然而，最近密码学的突破和区块链的兴起使一种新的方法能够帮助保护我们的数据和身份，甚至保护我们与之交互的组织。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可能就是如何保护数据隐私的答案。\n\n# 2.零知识证明的原则\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明是麻省理工学院研究人员在 20 世纪 80 年代提出的一种加密方案。零知识证明协议是一方 (证明者) 向另一方证明 (验证者) 某件事情是真实的一种方法。除了该特定声明是真实的以外，没有披露任何其他信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，当前网站将用户密码的哈希值存储在其 web 服务器中。为了验证客户端是否真的知道密码，大多数网站目前使用的方法是对客户端输入的密码进行哈希值计算，并将其与存储的结果进行比较。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可以保护用户的帐号信息不被泄露。如果零知识证明可以实现，那么在客户的密码是未知的情况下，仍然可以在客户端登录进行身份验证。当服务器受到攻击时，用户的帐户仍然是安全的，因为客户的密码没有存储在 web 服务器中。\n\n# 3.交互式零知识证明\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明协议的基础是交互式的。它要求验证者不断地提出一系列关于证明者所知道的 “知识” 的问题。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，如果有人声称知道九宫格谜题的答案，零知识证明就是验证者随机指定按列、行或九个正方形进行验证。每个测试不需要知道具体的答案，只需要检测数字 “1” 到“9”是否包含在其内。只要验证的次数足够多，就有可能判断证明者是否知道九宫格谜题的答案。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，这种简单的验证方式并不能使人们相信证明者和验证者都未做伪证。在九宫格游戏中，两者可能会事先串通，以便证明者在不知道答案的情况下通过验证。如果他们想说服第三方相信这个结果，验证者还必须证明验证过程是随机的，并且它不会将答案泄露给证明者。因此，第三方很难验证交互零知识证明的结果，需要第三方的参与，等额外的努力和成本才能向多人证明某件事是真实的。\n\n# 4.非交互式零知识证明\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非交互式零知识证明，顾名思义，不需要交互式过程，避免了验证者和证明者串通的可能性，但可能需要第三方机器和程序来确定验证的顺序。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，在九宫格游戏中，由第三方程序决定要验证哪一列或哪一行。验证序列必须保密，否则验证者可能在不知道真实 “知识” 的情况下通过验证序列。\n\n# 5.零知识证明在区块链中的应用\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币和以太坊网络都使用公共地址来代替验证者和证明者的真实身份，使得交易部分匿名; 只有发送和接收地址，以及交易数量是公众知道的。但是，通过区块链上提供的各种信息，如交互记录等，可以发现地址的真实身份，存在隐私暴露的隐患。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用了零知识证明之后，发送方、接收方和第三方的细节信息可以保持匿名，同时保证交易有效。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最早使用零知识证明技巧的区块链叫做 Zcash，实际的作法叫做 Zk-Snarks，这是许多零知识证明的做法之一，也是最有名的一个。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 是 “零知识简洁无交互知识认证” 的简称，是一种在无需泄露数据本身情况下证明某些数据运算的一种零知识证明。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 技术缩减了证明所需的时间和验证它们所需的计算量。它能够证明有效交易的条件已经满足，而不需要透露交易所涉及的地址或交易量的任何关键信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zcash 可以将交易纪录上的汇款者、收款者和金额都经过加密隐藏起来，因此矿工无从得知这些交易上的细节，但仍然可以验证交易。不过，目前多数使用者在 Zcash 上的交易，还是选择未经加密的作法，因为花费的成本比较高。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，以太坊（Ethereum）上的智能合约目前也已经可以运用 Zk-Snarks 这套零知识证明的作法。但以太坊不完全是从隐私的角度切入，而是从节省运算成本的角度应用零知识证明。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;透过 Zk-Snarks，以太坊矿工可以不用再重新执行交易的运算，而是只要对方提得出证明即可。大概就像我不需要真的知道你会高一到高三的数学，而只要看到高中毕业证就能确定你懂高中数学。不过，这只有在制作证明的成本，远低于实际运算成本的情况下才划算。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 将需要验证的交易内容转化为两个多项式乘积相等的证明，并结合同态加密等高级技术，在执行事务验证的同时保护隐藏的事务量。其过程可简单描述为:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将代码分解为可验证的逻辑验证步骤，然后将这些步骤分解为由加减乘除组成的计算流程。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行一系列变换，将待验证代码转换为多项式方程，如 t(x)h(x)= w(x)v(x)。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了使证明更加简洁，验证者事先随机选择几个检查点 s，检查这些点上的方程是否为真。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过同态编码或加密，验证者在计算方程时不知道实际输入值，但仍然可以验证。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在等式的左右两边，乘以一个不等于 0 的密值 k。当验证 (t(s)h(s)k) = (w(s)v(s)k) 时，具体的 t(s)、h(s)、w(s)、v(s)是不可知的，可以对信息进行保护。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前履行 Zk-Snarks 算法的一个缺陷是需要在 advanced 中内置参数。如果这些参数泄露，整个网络将面临毁灭性的破坏。因此，用户必须信任在使用这些网络时不会泄露的信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能的解决方案包括使用现代的“可信执行环境”，如 Intel SGX 和 ARM TrustZone。对于 Intel 的 SGX 技术，即使应用程序、操作系统、BIOS 或 VMM 受到威胁，私钥也是安全的。此外，最近的一份白皮书揭示了它在零知识密码学中的创新：Zk-Snarkss(零知识可伸缩透明知识参数)。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据 Zk-Snarks 白皮书，Zk-Snarks 是第一个不依赖任何信任设置实现区块链验证的系统，而随着计算数据数量的增加，计算速度呈指数增长。它不依赖于公钥加密系统，而且更简单的假设使它在理论上更安全，因为它唯一的加密假设是哈希函数 (如 SHA2) 是不可预测的。零知识证明和 Zk-S(T|N)ARK 等技术的测试和采用需要时间。\n\n\n- - -\n知道一点东西，并不能说明你会写应用，完整的应用是需要经验积累的。","source":"_posts/零知识证明.md","raw":"---\ntitle: 零知识证明\ndate: 2019-09-16 23:39:38\ntags: 零知识证明\ncategories: 区块链\nnotebook: 区块链\n---\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明（Zero-Knowledge Proof）或零知识协议是一种基于概率的验证方法，包括两部分：宣称某一命题为真的证明者（prover）和确认该命题确实为真的验证者（verifier）。\n\n![zero_knowledge_proof](零知识证明/zero-knowledge-proof.jpg)\n\n<!--  more -->\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的，在密码学中非常有用。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;顾名思义，零知识证明就是既能充分证明自己是某种权益的合法拥有者，又不把有关的信息泄漏出去，即给外界的 “知识” 为“零”。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“能够在不知道用户是谁，或者他们有多少钱的情况下判断‘一个用户是否有足够的钱发送给另一个用户’的问题，是零知识证明在区块链中的主要应用之一。”——Demiro Massessi\n\n# 1.为何零知识证明如此重要？\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据隐私是当今社会最重要的课题之一。保护与个人身份有关的个人资料 (出生日期、银行月结单、交易记录、学历) 极为重要，并会不断增加其重要性。在科技时代，我们正在生成前所未有的海量数据，而我们不断创造的关于我们自己的数据也在不断被获取。像谷歌和 Facebook 这样的大公司已经利用我们的数据成为了今天主宰世界的科技巨头。然而，最近密码学的突破和区块链的兴起使一种新的方法能够帮助保护我们的数据和身份，甚至保护我们与之交互的组织。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可能就是如何保护数据隐私的答案。\n\n# 2.零知识证明的原则\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明是麻省理工学院研究人员在 20 世纪 80 年代提出的一种加密方案。零知识证明协议是一方 (证明者) 向另一方证明 (验证者) 某件事情是真实的一种方法。除了该特定声明是真实的以外，没有披露任何其他信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，当前网站将用户密码的哈希值存储在其 web 服务器中。为了验证客户端是否真的知道密码，大多数网站目前使用的方法是对客户端输入的密码进行哈希值计算，并将其与存储的结果进行比较。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可以保护用户的帐号信息不被泄露。如果零知识证明可以实现，那么在客户的密码是未知的情况下，仍然可以在客户端登录进行身份验证。当服务器受到攻击时，用户的帐户仍然是安全的，因为客户的密码没有存储在 web 服务器中。\n\n# 3.交互式零知识证明\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明协议的基础是交互式的。它要求验证者不断地提出一系列关于证明者所知道的 “知识” 的问题。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，如果有人声称知道九宫格谜题的答案，零知识证明就是验证者随机指定按列、行或九个正方形进行验证。每个测试不需要知道具体的答案，只需要检测数字 “1” 到“9”是否包含在其内。只要验证的次数足够多，就有可能判断证明者是否知道九宫格谜题的答案。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，这种简单的验证方式并不能使人们相信证明者和验证者都未做伪证。在九宫格游戏中，两者可能会事先串通，以便证明者在不知道答案的情况下通过验证。如果他们想说服第三方相信这个结果，验证者还必须证明验证过程是随机的，并且它不会将答案泄露给证明者。因此，第三方很难验证交互零知识证明的结果，需要第三方的参与，等额外的努力和成本才能向多人证明某件事是真实的。\n\n# 4.非交互式零知识证明\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非交互式零知识证明，顾名思义，不需要交互式过程，避免了验证者和证明者串通的可能性，但可能需要第三方机器和程序来确定验证的顺序。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，在九宫格游戏中，由第三方程序决定要验证哪一列或哪一行。验证序列必须保密，否则验证者可能在不知道真实 “知识” 的情况下通过验证序列。\n\n# 5.零知识证明在区块链中的应用\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币和以太坊网络都使用公共地址来代替验证者和证明者的真实身份，使得交易部分匿名; 只有发送和接收地址，以及交易数量是公众知道的。但是，通过区块链上提供的各种信息，如交互记录等，可以发现地址的真实身份，存在隐私暴露的隐患。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用了零知识证明之后，发送方、接收方和第三方的细节信息可以保持匿名，同时保证交易有效。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最早使用零知识证明技巧的区块链叫做 Zcash，实际的作法叫做 Zk-Snarks，这是许多零知识证明的做法之一，也是最有名的一个。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 是 “零知识简洁无交互知识认证” 的简称，是一种在无需泄露数据本身情况下证明某些数据运算的一种零知识证明。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 技术缩减了证明所需的时间和验证它们所需的计算量。它能够证明有效交易的条件已经满足，而不需要透露交易所涉及的地址或交易量的任何关键信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zcash 可以将交易纪录上的汇款者、收款者和金额都经过加密隐藏起来，因此矿工无从得知这些交易上的细节，但仍然可以验证交易。不过，目前多数使用者在 Zcash 上的交易，还是选择未经加密的作法，因为花费的成本比较高。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，以太坊（Ethereum）上的智能合约目前也已经可以运用 Zk-Snarks 这套零知识证明的作法。但以太坊不完全是从隐私的角度切入，而是从节省运算成本的角度应用零知识证明。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;透过 Zk-Snarks，以太坊矿工可以不用再重新执行交易的运算，而是只要对方提得出证明即可。大概就像我不需要真的知道你会高一到高三的数学，而只要看到高中毕业证就能确定你懂高中数学。不过，这只有在制作证明的成本，远低于实际运算成本的情况下才划算。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 将需要验证的交易内容转化为两个多项式乘积相等的证明，并结合同态加密等高级技术，在执行事务验证的同时保护隐藏的事务量。其过程可简单描述为:\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将代码分解为可验证的逻辑验证步骤，然后将这些步骤分解为由加减乘除组成的计算流程。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行一系列变换，将待验证代码转换为多项式方程，如 t(x)h(x)= w(x)v(x)。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了使证明更加简洁，验证者事先随机选择几个检查点 s，检查这些点上的方程是否为真。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过同态编码或加密，验证者在计算方程时不知道实际输入值，但仍然可以验证。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在等式的左右两边，乘以一个不等于 0 的密值 k。当验证 (t(s)h(s)k) = (w(s)v(s)k) 时，具体的 t(s)、h(s)、w(s)、v(s)是不可知的，可以对信息进行保护。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前履行 Zk-Snarks 算法的一个缺陷是需要在 advanced 中内置参数。如果这些参数泄露，整个网络将面临毁灭性的破坏。因此，用户必须信任在使用这些网络时不会泄露的信息。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能的解决方案包括使用现代的“可信执行环境”，如 Intel SGX 和 ARM TrustZone。对于 Intel 的 SGX 技术，即使应用程序、操作系统、BIOS 或 VMM 受到威胁，私钥也是安全的。此外，最近的一份白皮书揭示了它在零知识密码学中的创新：Zk-Snarkss(零知识可伸缩透明知识参数)。\n\n&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据 Zk-Snarks 白皮书，Zk-Snarks 是第一个不依赖任何信任设置实现区块链验证的系统，而随着计算数据数量的增加，计算速度呈指数增长。它不依赖于公钥加密系统，而且更简单的假设使它在理论上更安全，因为它唯一的加密假设是哈希函数 (如 SHA2) 是不可预测的。零知识证明和 Zk-S(T|N)ARK 等技术的测试和采用需要时间。\n\n\n- - -\n知道一点东西，并不能说明你会写应用，完整的应用是需要经验积累的。","slug":"零知识证明","published":1,"updated":"2019-09-16T15:56:53.140Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl0t1002xfbs665ezx0v5","content":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明（Zero-Knowledge Proof）或零知识协议是一种基于概率的验证方法，包括两部分：宣称某一命题为真的证明者（prover）和确认该命题确实为真的验证者（verifier）。</p>\n<p><img src=\"/2019/09/16/零知识证明/zero-knowledge-proof.jpg\" alt=\"zero_knowledge_proof\"></p>\n<a id=\"more\"></a>\n\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的，在密码学中非常有用。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;顾名思义，零知识证明就是既能充分证明自己是某种权益的合法拥有者，又不把有关的信息泄漏出去，即给外界的 “知识” 为“零”。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“能够在不知道用户是谁，或者他们有多少钱的情况下判断‘一个用户是否有足够的钱发送给另一个用户’的问题，是零知识证明在区块链中的主要应用之一。”——Demiro Massessi</p>\n<h1 id=\"1-为何零知识证明如此重要？\"><a href=\"#1-为何零知识证明如此重要？\" class=\"headerlink\" title=\"1.为何零知识证明如此重要？\"></a>1.为何零知识证明如此重要？</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据隐私是当今社会最重要的课题之一。保护与个人身份有关的个人资料 (出生日期、银行月结单、交易记录、学历) 极为重要，并会不断增加其重要性。在科技时代，我们正在生成前所未有的海量数据，而我们不断创造的关于我们自己的数据也在不断被获取。像谷歌和 Facebook 这样的大公司已经利用我们的数据成为了今天主宰世界的科技巨头。然而，最近密码学的突破和区块链的兴起使一种新的方法能够帮助保护我们的数据和身份，甚至保护我们与之交互的组织。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可能就是如何保护数据隐私的答案。</p>\n<h1 id=\"2-零知识证明的原则\"><a href=\"#2-零知识证明的原则\" class=\"headerlink\" title=\"2.零知识证明的原则\"></a>2.零知识证明的原则</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明是麻省理工学院研究人员在 20 世纪 80 年代提出的一种加密方案。零知识证明协议是一方 (证明者) 向另一方证明 (验证者) 某件事情是真实的一种方法。除了该特定声明是真实的以外，没有披露任何其他信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，当前网站将用户密码的哈希值存储在其 web 服务器中。为了验证客户端是否真的知道密码，大多数网站目前使用的方法是对客户端输入的密码进行哈希值计算，并将其与存储的结果进行比较。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可以保护用户的帐号信息不被泄露。如果零知识证明可以实现，那么在客户的密码是未知的情况下，仍然可以在客户端登录进行身份验证。当服务器受到攻击时，用户的帐户仍然是安全的，因为客户的密码没有存储在 web 服务器中。</p>\n<h1 id=\"3-交互式零知识证明\"><a href=\"#3-交互式零知识证明\" class=\"headerlink\" title=\"3.交互式零知识证明\"></a>3.交互式零知识证明</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明协议的基础是交互式的。它要求验证者不断地提出一系列关于证明者所知道的 “知识” 的问题。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，如果有人声称知道九宫格谜题的答案，零知识证明就是验证者随机指定按列、行或九个正方形进行验证。每个测试不需要知道具体的答案，只需要检测数字 “1” 到“9”是否包含在其内。只要验证的次数足够多，就有可能判断证明者是否知道九宫格谜题的答案。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，这种简单的验证方式并不能使人们相信证明者和验证者都未做伪证。在九宫格游戏中，两者可能会事先串通，以便证明者在不知道答案的情况下通过验证。如果他们想说服第三方相信这个结果，验证者还必须证明验证过程是随机的，并且它不会将答案泄露给证明者。因此，第三方很难验证交互零知识证明的结果，需要第三方的参与，等额外的努力和成本才能向多人证明某件事是真实的。</p>\n<h1 id=\"4-非交互式零知识证明\"><a href=\"#4-非交互式零知识证明\" class=\"headerlink\" title=\"4.非交互式零知识证明\"></a>4.非交互式零知识证明</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非交互式零知识证明，顾名思义，不需要交互式过程，避免了验证者和证明者串通的可能性，但可能需要第三方机器和程序来确定验证的顺序。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，在九宫格游戏中，由第三方程序决定要验证哪一列或哪一行。验证序列必须保密，否则验证者可能在不知道真实 “知识” 的情况下通过验证序列。</p>\n<h1 id=\"5-零知识证明在区块链中的应用\"><a href=\"#5-零知识证明在区块链中的应用\" class=\"headerlink\" title=\"5.零知识证明在区块链中的应用\"></a>5.零知识证明在区块链中的应用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币和以太坊网络都使用公共地址来代替验证者和证明者的真实身份，使得交易部分匿名; 只有发送和接收地址，以及交易数量是公众知道的。但是，通过区块链上提供的各种信息，如交互记录等，可以发现地址的真实身份，存在隐私暴露的隐患。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用了零知识证明之后，发送方、接收方和第三方的细节信息可以保持匿名，同时保证交易有效。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最早使用零知识证明技巧的区块链叫做 Zcash，实际的作法叫做 Zk-Snarks，这是许多零知识证明的做法之一，也是最有名的一个。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 是 “零知识简洁无交互知识认证” 的简称，是一种在无需泄露数据本身情况下证明某些数据运算的一种零知识证明。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 技术缩减了证明所需的时间和验证它们所需的计算量。它能够证明有效交易的条件已经满足，而不需要透露交易所涉及的地址或交易量的任何关键信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zcash 可以将交易纪录上的汇款者、收款者和金额都经过加密隐藏起来，因此矿工无从得知这些交易上的细节，但仍然可以验证交易。不过，目前多数使用者在 Zcash 上的交易，还是选择未经加密的作法，因为花费的成本比较高。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，以太坊（Ethereum）上的智能合约目前也已经可以运用 Zk-Snarks 这套零知识证明的作法。但以太坊不完全是从隐私的角度切入，而是从节省运算成本的角度应用零知识证明。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;透过 Zk-Snarks，以太坊矿工可以不用再重新执行交易的运算，而是只要对方提得出证明即可。大概就像我不需要真的知道你会高一到高三的数学，而只要看到高中毕业证就能确定你懂高中数学。不过，这只有在制作证明的成本，远低于实际运算成本的情况下才划算。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 将需要验证的交易内容转化为两个多项式乘积相等的证明，并结合同态加密等高级技术，在执行事务验证的同时保护隐藏的事务量。其过程可简单描述为:</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将代码分解为可验证的逻辑验证步骤，然后将这些步骤分解为由加减乘除组成的计算流程。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行一系列变换，将待验证代码转换为多项式方程，如 t(x)h(x)= w(x)v(x)。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了使证明更加简洁，验证者事先随机选择几个检查点 s，检查这些点上的方程是否为真。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过同态编码或加密，验证者在计算方程时不知道实际输入值，但仍然可以验证。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在等式的左右两边，乘以一个不等于 0 的密值 k。当验证 (t(s)h(s)k) = (w(s)v(s)k) 时，具体的 t(s)、h(s)、w(s)、v(s)是不可知的，可以对信息进行保护。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前履行 Zk-Snarks 算法的一个缺陷是需要在 advanced 中内置参数。如果这些参数泄露，整个网络将面临毁灭性的破坏。因此，用户必须信任在使用这些网络时不会泄露的信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能的解决方案包括使用现代的“可信执行环境”，如 Intel SGX 和 ARM TrustZone。对于 Intel 的 SGX 技术，即使应用程序、操作系统、BIOS 或 VMM 受到威胁，私钥也是安全的。此外，最近的一份白皮书揭示了它在零知识密码学中的创新：Zk-Snarkss(零知识可伸缩透明知识参数)。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据 Zk-Snarks 白皮书，Zk-Snarks 是第一个不依赖任何信任设置实现区块链验证的系统，而随着计算数据数量的增加，计算速度呈指数增长。它不依赖于公钥加密系统，而且更简单的假设使它在理论上更安全，因为它唯一的加密假设是哈希函数 (如 SHA2) 是不可预测的。零知识证明和 Zk-S(T|N)ARK 等技术的测试和采用需要时间。</p>\n<hr>\n<p>知道一点东西，并不能说明你会写应用，完整的应用是需要经验积累的。</p>\n","site":{"data":{}},"excerpt":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明（Zero-Knowledge Proof）或零知识协议是一种基于概率的验证方法，包括两部分：宣称某一命题为真的证明者（prover）和确认该命题确实为真的验证者（verifier）。</p>\n<p><img src=\"/2019/09/16/零知识证明/zero-knowledge-proof.jpg\" alt=\"zero_knowledge_proof\"></p>","more":"<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明指的是证明者能够在不向验证者提供任何有用的信息的情况下，使验证者相信某个论断是正确的，在密码学中非常有用。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;顾名思义，零知识证明就是既能充分证明自己是某种权益的合法拥有者，又不把有关的信息泄漏出去，即给外界的 “知识” 为“零”。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;“能够在不知道用户是谁，或者他们有多少钱的情况下判断‘一个用户是否有足够的钱发送给另一个用户’的问题，是零知识证明在区块链中的主要应用之一。”——Demiro Massessi</p>\n<h1 id=\"1-为何零知识证明如此重要？\"><a href=\"#1-为何零知识证明如此重要？\" class=\"headerlink\" title=\"1.为何零知识证明如此重要？\"></a>1.为何零知识证明如此重要？</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;数据隐私是当今社会最重要的课题之一。保护与个人身份有关的个人资料 (出生日期、银行月结单、交易记录、学历) 极为重要，并会不断增加其重要性。在科技时代，我们正在生成前所未有的海量数据，而我们不断创造的关于我们自己的数据也在不断被获取。像谷歌和 Facebook 这样的大公司已经利用我们的数据成为了今天主宰世界的科技巨头。然而，最近密码学的突破和区块链的兴起使一种新的方法能够帮助保护我们的数据和身份，甚至保护我们与之交互的组织。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可能就是如何保护数据隐私的答案。</p>\n<h1 id=\"2-零知识证明的原则\"><a href=\"#2-零知识证明的原则\" class=\"headerlink\" title=\"2.零知识证明的原则\"></a>2.零知识证明的原则</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明是麻省理工学院研究人员在 20 世纪 80 年代提出的一种加密方案。零知识证明协议是一方 (证明者) 向另一方证明 (验证者) 某件事情是真实的一种方法。除了该特定声明是真实的以外，没有披露任何其他信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，当前网站将用户密码的哈希值存储在其 web 服务器中。为了验证客户端是否真的知道密码，大多数网站目前使用的方法是对客户端输入的密码进行哈希值计算，并将其与存储的结果进行比较。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明可以保护用户的帐号信息不被泄露。如果零知识证明可以实现，那么在客户的密码是未知的情况下，仍然可以在客户端登录进行身份验证。当服务器受到攻击时，用户的帐户仍然是安全的，因为客户的密码没有存储在 web 服务器中。</p>\n<h1 id=\"3-交互式零知识证明\"><a href=\"#3-交互式零知识证明\" class=\"headerlink\" title=\"3.交互式零知识证明\"></a>3.交互式零知识证明</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;零知识证明协议的基础是交互式的。它要求验证者不断地提出一系列关于证明者所知道的 “知识” 的问题。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，如果有人声称知道九宫格谜题的答案，零知识证明就是验证者随机指定按列、行或九个正方形进行验证。每个测试不需要知道具体的答案，只需要检测数字 “1” 到“9”是否包含在其内。只要验证的次数足够多，就有可能判断证明者是否知道九宫格谜题的答案。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;然而，这种简单的验证方式并不能使人们相信证明者和验证者都未做伪证。在九宫格游戏中，两者可能会事先串通，以便证明者在不知道答案的情况下通过验证。如果他们想说服第三方相信这个结果，验证者还必须证明验证过程是随机的，并且它不会将答案泄露给证明者。因此，第三方很难验证交互零知识证明的结果，需要第三方的参与，等额外的努力和成本才能向多人证明某件事是真实的。</p>\n<h1 id=\"4-非交互式零知识证明\"><a href=\"#4-非交互式零知识证明\" class=\"headerlink\" title=\"4.非交互式零知识证明\"></a>4.非交互式零知识证明</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;非交互式零知识证明，顾名思义，不需要交互式过程，避免了验证者和证明者串通的可能性，但可能需要第三方机器和程序来确定验证的顺序。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;例如，在九宫格游戏中，由第三方程序决定要验证哪一列或哪一行。验证序列必须保密，否则验证者可能在不知道真实 “知识” 的情况下通过验证序列。</p>\n<h1 id=\"5-零知识证明在区块链中的应用\"><a href=\"#5-零知识证明在区块链中的应用\" class=\"headerlink\" title=\"5.零知识证明在区块链中的应用\"></a>5.零知识证明在区块链中的应用</h1><p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;比特币和以太坊网络都使用公共地址来代替验证者和证明者的真实身份，使得交易部分匿名; 只有发送和接收地址，以及交易数量是公众知道的。但是，通过区块链上提供的各种信息，如交互记录等，可以发现地址的真实身份，存在隐私暴露的隐患。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;用了零知识证明之后，发送方、接收方和第三方的细节信息可以保持匿名，同时保证交易有效。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;最早使用零知识证明技巧的区块链叫做 Zcash，实际的作法叫做 Zk-Snarks，这是许多零知识证明的做法之一，也是最有名的一个。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 是 “零知识简洁无交互知识认证” 的简称，是一种在无需泄露数据本身情况下证明某些数据运算的一种零知识证明。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 技术缩减了证明所需的时间和验证它们所需的计算量。它能够证明有效交易的条件已经满足，而不需要透露交易所涉及的地址或交易量的任何关键信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zcash 可以将交易纪录上的汇款者、收款者和金额都经过加密隐藏起来，因此矿工无从得知这些交易上的细节，但仍然可以验证交易。不过，目前多数使用者在 Zcash 上的交易，还是选择未经加密的作法，因为花费的成本比较高。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;另外，以太坊（Ethereum）上的智能合约目前也已经可以运用 Zk-Snarks 这套零知识证明的作法。但以太坊不完全是从隐私的角度切入，而是从节省运算成本的角度应用零知识证明。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;透过 Zk-Snarks，以太坊矿工可以不用再重新执行交易的运算，而是只要对方提得出证明即可。大概就像我不需要真的知道你会高一到高三的数学，而只要看到高中毕业证就能确定你懂高中数学。不过，这只有在制作证明的成本，远低于实际运算成本的情况下才划算。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Zk-Snarks 将需要验证的交易内容转化为两个多项式乘积相等的证明，并结合同态加密等高级技术，在执行事务验证的同时保护隐藏的事务量。其过程可简单描述为:</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;将代码分解为可验证的逻辑验证步骤，然后将这些步骤分解为由加减乘除组成的计算流程。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;进行一系列变换，将待验证代码转换为多项式方程，如 t(x)h(x)= w(x)v(x)。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;为了使证明更加简洁，验证者事先随机选择几个检查点 s，检查这些点上的方程是否为真。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;通过同态编码或加密，验证者在计算方程时不知道实际输入值，但仍然可以验证。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;在等式的左右两边，乘以一个不等于 0 的密值 k。当验证 (t(s)h(s)k) = (w(s)v(s)k) 时，具体的 t(s)、h(s)、w(s)、v(s)是不可知的，可以对信息进行保护。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;当前履行 Zk-Snarks 算法的一个缺陷是需要在 advanced 中内置参数。如果这些参数泄露，整个网络将面临毁灭性的破坏。因此，用户必须信任在使用这些网络时不会泄露的信息。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;可能的解决方案包括使用现代的“可信执行环境”，如 Intel SGX 和 ARM TrustZone。对于 Intel 的 SGX 技术，即使应用程序、操作系统、BIOS 或 VMM 受到威胁，私钥也是安全的。此外，最近的一份白皮书揭示了它在零知识密码学中的创新：Zk-Snarkss(零知识可伸缩透明知识参数)。</p>\n<p>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;根据 Zk-Snarks 白皮书，Zk-Snarks 是第一个不依赖任何信任设置实现区块链验证的系统，而随着计算数据数量的增加，计算速度呈指数增长。它不依赖于公钥加密系统，而且更简单的假设使它在理论上更安全，因为它唯一的加密假设是哈希函数 (如 SHA2) 是不可预测的。零知识证明和 Zk-S(T|N)ARK 等技术的测试和采用需要时间。</p>\n<hr>\n<p>知道一点东西，并不能说明你会写应用，完整的应用是需要经验积累的。</p>"},{"title":"java操作hbase工具类","date":"2018-03-29T11:23:22.000Z","_content":"HBase是一个基于HDFS的数据库，拥有高可用、大量数据存储、列式存储等特点，在非结构化数据与半结构化数据存储方面，有很大的优势。我们一般测试时使用hbase shell命令行的方式来操作hbase数据库比较方便，但是在数据逻辑处理比较复杂时，那肯定是用它提供的API来操作更方便啦，下面就来给出一个java版操作hbase的工具类，提供给大家，我自己也一直使用这个类。\n<!-- more -->\n备注：本工具类使用的环境：hbase1.4.1\tjdk1.8\t\thadoop3.0\n# maven项目添加依赖\n```\n<!--hadoop/hbase都要依赖(RPC通信)，注意protobuf-java的版本，hbase1.4.1自带的protobuf-java版本是2.5.0的，所以如果你的程序是跑在服务器上的，需要跟服务器一致，不然会出现NoClsssFoundError-->\n<!--https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-->\n<dependency>\n\t<groupId>com.google.protobuf</groupId>\n\t<artifactId>protobuf-java</artifactId>\n\t<version>3.5.1</version>\n</dependency>\n<!--hbase-->\n<dependency>\n\t<groupId>org.apache.zookeeper</groupId>\n\t<artifactId>zookeeper</artifactId>\n\t<version>${zookeeper.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-client</artifactId>\n\t<version>${hbase.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-common</artifactId>\n\t<version>${hbase.version}</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase -->\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase</artifactId>\n\t<version>1.4.1</version>\n\t<type>pom</type>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-spark -->\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-spark</artifactId>\n\t<version>1.2.0-cdh5.14.0</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-server -->\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-server</artifactId>\n\t<version>1.4.1</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/fastutil/fastutil 这里使用fastutil，对比javautil自带集合类，它的读写性能更优，尤其在大数据的情况下，所以当你写的mr或者spark程序，使用到fastutil，会提升一些性能-->\n<dependency>\n\t<groupId>fastutil</groupId>\n\t<artifactId>fastutil</artifactId>\n\t<version>5.0.5</version>\n</dependency>\n```\n# 代码\n```\npackage com.payegis.czl.util;\n\nimport it.unimi.dsi.fastutil.objects.ObjectArrayList;\nimport net.sf.json.JSONObject;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.HColumnDescriptor;\nimport org.apache.hadoop.hbase.HTableDescriptor;\nimport org.apache.hadoop.hbase.TableName;\nimport org.apache.hadoop.hbase.client.*;\nimport org.apache.hadoop.hbase.filter.*;\nimport org.apache.hadoop.hbase.io.compress.Compression;\nimport org.apache.hadoop.hbase.util.Bytes;\nimport org.apache.log4j.Logger;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\n/**\n * User: chenzuoli\n * Date: 2018/3/29\n * Time: 9:20\n * Description: Java操作HBase工具类\n * Ps: Java HBase\n */\n\npublic class HBaseUtil {\n    public static Configuration conf;\n    public static Connection connection;\n    public static Admin admin;\n    public static Table table;\n    private static Logger logger = Logger.getLogger(HBaseUtil.class);\n\n    static {\n        try {\n            conf = HBaseConfiguration.create();\n            conf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n            conf.set(\"hbase.zookeeper.quorum\", \"dev11,dev13,dev14\");\n            connection = ConnectionFactory.createConnection(conf);\n            admin = connection.getAdmin();\n            logger.info(\"初始化hbase连接成功！\");\n        } catch (IOException e) {\n            logger.error(\"初始化hbase连接异常！\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"初始化hbase连接异常！\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @Description: 建表，如果表存在，那么不创建。如果未指定列族名称，默认定义一个cf1\n     * @Param: [tableName, familyName]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:24\n     */\n    public static boolean createTable(String tableName, String familyName) {\n        boolean flag = false;\n        if (familyName == null || familyName.length() == 0) {\n            familyName = \"cf1\";\n        }\n        TableName tbl = TableName.valueOf(tableName);\n        Admin admin = null;\n        try {\n            admin = connection.getAdmin();\n            if (admin.tableExists(tbl)) {\n                logger.info(\"Table \" + tbl.getNameAsString() + \" is already exists!\");\n                return flag;\n            }\n            HTableDescriptor tableDescriptor = new HTableDescriptor(tbl);\n            tableDescriptor.addFamily(new HColumnDescriptor(familyName).setCompressionType(Compression.Algorithm.SNAPPY));\n            admin.createTable(tableDescriptor);\n            logger.info(\"Create table \" + tbl.getNameAsString() + \" success!\");\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"Create table failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"Create table failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 插入一条数据到hbase\n     * @Param: [connection, tableName, rowkey, columnFamily, key, value]\n     * @return: void\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/28\n     * @Time: 14:06\n     */\n    public static void insertOne(String tableName, String rowkey, String columnFamily, String key, String value) {\n        Table table = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            Put put = new Put(Bytes.toBytes(rowkey));\n            put.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(key), Bytes.toBytes(value));\n            table.put(put);\n        } catch (IOException e) {\n            logger.error(\"insert hbase failed: \" + rowkey + \",\" + columnFamily + \",\" + key + \",\" + value);\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"insert hbase failed: \" + rowkey + \",\" + columnFamily + \",\" + key + \",\" + value);\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, null);\n        }\n    }\n\n    /**\n     * @Description: 批量插入数据到hbase\n     * @Param: [filePath, tableName, familyName]\n     * @return: void\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/30\n     * @Time: 13:31\n     */\n    public static void insertBatch(String filePath, String tableName, String familyName) {\n        ObjectArrayList<Put> puts = new ObjectArrayList<>();\n        Table table = null;\n        FileInputStream fis = null;\n        BufferedReader br = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            fis = new FileInputStream(filePath);\n            br = new BufferedReader(new InputStreamReader(fis));\n            String line = br.readLine();\n            while (line != null) {\n                JSONObject lineJsonObject = JSONObject.fromObject(line);\n                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());\n                Set<String> keys = lineJsonObject.keySet();\n                Put put = new Put(Bytes.toBytes(rowkey));\n                for (String key : keys) {\n                    put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(lineJsonObject.optString(key)));\n                    puts.add(put);\n                }\n                line = br.readLine();\n            }\n            table.put(puts);\n        } catch (IOException e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } finally {\n            try {\n                if (table != null) table.close();\n                if (fis != null) fis.close();\n                if (br != null) br.close();\n            } catch (IOException e) {\n                logger.error(\"close table or stream failed!\");\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * @Description: 批量插入数据到hbase\n     * @Param: [rows, tableName, familyName]\n     * @return: void\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/4/2\n     * @Time: 10:19\n     */\n    public static void insertBatch(List<Map<String, Object>> rows, String tableName, String familyName) {\n        ObjectArrayList<Put> puts = new ObjectArrayList<>();\n        Table table = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            for (Map<String, Object> row : rows) {\n                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());\n                Put put = new Put(Bytes.toBytes(rowkey));\n                for (Map.Entry<String, Object> kv : row.entrySet()) {\n                    String key = kv.getKey();\n                    Object value = kv.getValue();\n                    if (value == null) {\n                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), null);\n                    } else {\n                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(value.toString()));\n                    }\n                }\n                puts.add(put);\n            }\n            table.put(puts);\n        } catch (IOException e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, null);\n        }\n    }\n\n    /**\n     * @Description: 删除一张表\n     * @Param: [tableName]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:40\n     */\n    public static boolean dropTable(String tableName) {\n        boolean flag = false;\n        try {\n            admin.disableTable(TableName.valueOf(tableName));\n            admin.deleteTable(TableName.valueOf(tableName));\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"delete \" + tableName + \" table failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"delete \" + tableName + \" table failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 根据rowkey删除一条记录\n     * @Param: [tablename, rowkey]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:40\n     */\n    public static boolean deleteOneRowByRowkey(String tablename, String rowkey) {\n        boolean flag = false;\n        try {\n            Delete d = new Delete(rowkey.getBytes());\n            table.delete(d);\n            logger.info(\"delete row \" + rowkey + \" success!\");\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"delete row \" + rowkey + \" failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"delete row \" + rowkey + \" failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 批量删除rowkey\n     * @Param: [tablename, rowkeyList]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:47\n     */\n    public static boolean deleteBatchRowByRowkey(String tablename, List<String> rowkeyList) {\n        boolean flag = false;\n        ObjectArrayList<Delete> listDelete = new ObjectArrayList<>();\n        try {\n            for (int i = 0; i < rowkeyList.size(); i++) {\n                Delete delete = new Delete(rowkeyList.get(i).getBytes());\n                listDelete.add(delete);\n            }\n            table.delete(listDelete);\n            logger.info(\"delete row list \" + rowkeyList + \" success!\");\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"delete row \" + rowkeyList + \" failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"delete row \" + rowkeyList + \" failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 查询表中所有数据\n     * @Param: [tableName]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:51\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryAll(String tableName) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n//            ResultScanner rs = table.getScanner(new Scan().setMaxVersions()); // 获取所有版本数据\n            rs = table.getScanner(new Scan());\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n        } catch (IOException e) {\n            logger.error(\"Get all table data failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 单条件查询, 根据rowkey查询唯一一条记录\n     * @Param: [tableName, rowKey]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 10:47\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryByCondition(String tableName, String rowKey) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        try {\n            Get get = new Get(rowKey.getBytes());\n//            get.setMaxVersions(); // 获取所有版本数据\n            table = connection.getTable(TableName.valueOf(tableName));\n            Result r = table.get(get);\n            rowMapList.add(resolveResult(r));\n            logger.info(\"获得到rowkey: \" + new String(r.getRow()));\n        } catch (IOException e) {\n            logger.error(\"Get table one data failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, null);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 单条件按查询，查询多条记录\n     * @Param: [tableName]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 13:16\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryByCondition(String tableName, String familyName, String columnName, String columnValue) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(columnName), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(columnValue)); // 当列columnName的值为columnValue时进行查询\n            Scan s = new Scan();\n            s.setFilter(filter);\n            rs = table.getScanner(s);\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n        } catch (Exception e) {\n            logger.error(\"query with one filter failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 组合条件查询\n     * @Param: [tableName]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 13:26\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryByCondition(String tableName, String familyName, HashMap<String, String> paramMap) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            FilterList filterList = new FilterList();\n            for (Map.Entry<String, String> entry : paramMap.entrySet()) {\n                Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(entry.getKey()), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(entry.getValue()));\n                filterList.addFilter(filter);\n            }\n            Scan scan = new Scan();\n            scan.setFilter(filterList);\n            rs = table.getScanner(scan);\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n            rs.close();\n        } catch (Exception e) {\n            logger.error(\"query with more filter failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n    * @Description: 查询hbase，匹配rowkey前缀为dianRong的行\n    * @Param: [tableName]\n    * @return: java.util.List<java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>>>\n    * @Author: CHEN ZUOLI\n    * @Date: 2018/4/3\n    * @Time: 20:21\n    */\n    public static List<HashMap<String, HashMap<String, String>>> rowkeyFuzzyQuery(String tableName){\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>();\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            Scan scan = new Scan();\n            Filter filter = new RowFilter(CompareFilter.CompareOp.EQUAL, new RegexStringComparator(\"dianRong.*\"));\n            scan.setFilter(filter);\n            rs = table.getScanner(scan);\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n        } catch (Exception e) {\n            logger.error(\"query with more filter failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 解析查询hbase得到的结果，放入到HashMap中\n     * @Param: [result]\n     * @return: java.util.HashMap<String,HashMap<String,String>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 13:52\n     */\n    public static HashMap<String, HashMap<String, String>> resolveResult(Result result) {\n        HashMap<String, HashMap<String, String>> rowMap = new HashMap<>(); // <familyName, <columnName, columnValue>>\n        HashMap<String, String> kvMap = new HashMap<>();\n        NavigableMap<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> map = result.getMap();\n        for (Map.Entry<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> entry : map.entrySet()) {\n            String familyName = new String(entry.getKey());\n            NavigableMap<byte[], NavigableMap<Long, byte[]>> valueInfoMap = entry.getValue();\n            for (Map.Entry<byte[], NavigableMap<Long, byte[]>> valueInfo : valueInfoMap.entrySet()) {\n                String key = new String(valueInfo.getKey());\n                NavigableMap<Long, byte[]> values = valueInfo.getValue();\n                Map.Entry<Long, byte[]> firstEntry = values.firstEntry();\n                Long timestampLastest = firstEntry.getKey();\n                String valueLastest = new String(firstEntry.getValue());\n                logger.info(\"familyName: \" + familyName + \", key: \" + key + \", value: \" + valueLastest + \", timestamp: \" + timestampLastest);\n//                for (Map.Entry<Long, byte[]> vals : values.entrySet()) {\n//                    Long timestamp = vals.getKey();\n//                    String value = new String(vals.getValue());\n//                }\n                kvMap.put(key, valueLastest);\n                rowMap.put(familyName, kvMap);\n            }\n        }\n        return rowMap;\n    }\n\n    public static void closeTableAndResult(Table table, ResultScanner rs){\n        try {\n            if (rs != null) rs.close();\n            if (table != null) table.close();\n        } catch (IOException e) {\n            logger.error(\"close table failed!\");\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n好了，文章到这里就结束了，如果大家在使用过程中，遇到什么问题，请联系我chenzuoli709@gmail.com。","source":"_posts/java操作hbase工具类.md","raw":"---\ntitle: java操作hbase工具类\ndate: 2018-03-29 19:23:22\ntags: HBase\ncategories: HBase\n---\nHBase是一个基于HDFS的数据库，拥有高可用、大量数据存储、列式存储等特点，在非结构化数据与半结构化数据存储方面，有很大的优势。我们一般测试时使用hbase shell命令行的方式来操作hbase数据库比较方便，但是在数据逻辑处理比较复杂时，那肯定是用它提供的API来操作更方便啦，下面就来给出一个java版操作hbase的工具类，提供给大家，我自己也一直使用这个类。\n<!-- more -->\n备注：本工具类使用的环境：hbase1.4.1\tjdk1.8\t\thadoop3.0\n# maven项目添加依赖\n```\n<!--hadoop/hbase都要依赖(RPC通信)，注意protobuf-java的版本，hbase1.4.1自带的protobuf-java版本是2.5.0的，所以如果你的程序是跑在服务器上的，需要跟服务器一致，不然会出现NoClsssFoundError-->\n<!--https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-->\n<dependency>\n\t<groupId>com.google.protobuf</groupId>\n\t<artifactId>protobuf-java</artifactId>\n\t<version>3.5.1</version>\n</dependency>\n<!--hbase-->\n<dependency>\n\t<groupId>org.apache.zookeeper</groupId>\n\t<artifactId>zookeeper</artifactId>\n\t<version>${zookeeper.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-client</artifactId>\n\t<version>${hbase.version}</version>\n</dependency>\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-common</artifactId>\n\t<version>${hbase.version}</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase -->\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase</artifactId>\n\t<version>1.4.1</version>\n\t<type>pom</type>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-spark -->\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-spark</artifactId>\n\t<version>1.2.0-cdh5.14.0</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-server -->\n<dependency>\n\t<groupId>org.apache.hbase</groupId>\n\t<artifactId>hbase-server</artifactId>\n\t<version>1.4.1</version>\n</dependency>\n<!-- https://mvnrepository.com/artifact/fastutil/fastutil 这里使用fastutil，对比javautil自带集合类，它的读写性能更优，尤其在大数据的情况下，所以当你写的mr或者spark程序，使用到fastutil，会提升一些性能-->\n<dependency>\n\t<groupId>fastutil</groupId>\n\t<artifactId>fastutil</artifactId>\n\t<version>5.0.5</version>\n</dependency>\n```\n# 代码\n```\npackage com.payegis.czl.util;\n\nimport it.unimi.dsi.fastutil.objects.ObjectArrayList;\nimport net.sf.json.JSONObject;\nimport org.apache.hadoop.conf.Configuration;\nimport org.apache.hadoop.hbase.HBaseConfiguration;\nimport org.apache.hadoop.hbase.HColumnDescriptor;\nimport org.apache.hadoop.hbase.HTableDescriptor;\nimport org.apache.hadoop.hbase.TableName;\nimport org.apache.hadoop.hbase.client.*;\nimport org.apache.hadoop.hbase.filter.*;\nimport org.apache.hadoop.hbase.io.compress.Compression;\nimport org.apache.hadoop.hbase.util.Bytes;\nimport org.apache.log4j.Logger;\n\nimport java.io.BufferedReader;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.util.*;\n\n/**\n * User: chenzuoli\n * Date: 2018/3/29\n * Time: 9:20\n * Description: Java操作HBase工具类\n * Ps: Java HBase\n */\n\npublic class HBaseUtil {\n    public static Configuration conf;\n    public static Connection connection;\n    public static Admin admin;\n    public static Table table;\n    private static Logger logger = Logger.getLogger(HBaseUtil.class);\n\n    static {\n        try {\n            conf = HBaseConfiguration.create();\n            conf.set(\"hbase.zookeeper.property.clientPort\", \"2181\");\n            conf.set(\"hbase.zookeeper.quorum\", \"dev11,dev13,dev14\");\n            connection = ConnectionFactory.createConnection(conf);\n            admin = connection.getAdmin();\n            logger.info(\"初始化hbase连接成功！\");\n        } catch (IOException e) {\n            logger.error(\"初始化hbase连接异常！\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"初始化hbase连接异常！\");\n            e.printStackTrace();\n        }\n    }\n\n    /**\n     * @Description: 建表，如果表存在，那么不创建。如果未指定列族名称，默认定义一个cf1\n     * @Param: [tableName, familyName]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:24\n     */\n    public static boolean createTable(String tableName, String familyName) {\n        boolean flag = false;\n        if (familyName == null || familyName.length() == 0) {\n            familyName = \"cf1\";\n        }\n        TableName tbl = TableName.valueOf(tableName);\n        Admin admin = null;\n        try {\n            admin = connection.getAdmin();\n            if (admin.tableExists(tbl)) {\n                logger.info(\"Table \" + tbl.getNameAsString() + \" is already exists!\");\n                return flag;\n            }\n            HTableDescriptor tableDescriptor = new HTableDescriptor(tbl);\n            tableDescriptor.addFamily(new HColumnDescriptor(familyName).setCompressionType(Compression.Algorithm.SNAPPY));\n            admin.createTable(tableDescriptor);\n            logger.info(\"Create table \" + tbl.getNameAsString() + \" success!\");\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"Create table failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"Create table failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 插入一条数据到hbase\n     * @Param: [connection, tableName, rowkey, columnFamily, key, value]\n     * @return: void\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/28\n     * @Time: 14:06\n     */\n    public static void insertOne(String tableName, String rowkey, String columnFamily, String key, String value) {\n        Table table = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            Put put = new Put(Bytes.toBytes(rowkey));\n            put.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(key), Bytes.toBytes(value));\n            table.put(put);\n        } catch (IOException e) {\n            logger.error(\"insert hbase failed: \" + rowkey + \",\" + columnFamily + \",\" + key + \",\" + value);\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"insert hbase failed: \" + rowkey + \",\" + columnFamily + \",\" + key + \",\" + value);\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, null);\n        }\n    }\n\n    /**\n     * @Description: 批量插入数据到hbase\n     * @Param: [filePath, tableName, familyName]\n     * @return: void\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/30\n     * @Time: 13:31\n     */\n    public static void insertBatch(String filePath, String tableName, String familyName) {\n        ObjectArrayList<Put> puts = new ObjectArrayList<>();\n        Table table = null;\n        FileInputStream fis = null;\n        BufferedReader br = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            fis = new FileInputStream(filePath);\n            br = new BufferedReader(new InputStreamReader(fis));\n            String line = br.readLine();\n            while (line != null) {\n                JSONObject lineJsonObject = JSONObject.fromObject(line);\n                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());\n                Set<String> keys = lineJsonObject.keySet();\n                Put put = new Put(Bytes.toBytes(rowkey));\n                for (String key : keys) {\n                    put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(lineJsonObject.optString(key)));\n                    puts.add(put);\n                }\n                line = br.readLine();\n            }\n            table.put(puts);\n        } catch (IOException e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } finally {\n            try {\n                if (table != null) table.close();\n                if (fis != null) fis.close();\n                if (br != null) br.close();\n            } catch (IOException e) {\n                logger.error(\"close table or stream failed!\");\n                e.printStackTrace();\n            }\n        }\n    }\n\n    /**\n     * @Description: 批量插入数据到hbase\n     * @Param: [rows, tableName, familyName]\n     * @return: void\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/4/2\n     * @Time: 10:19\n     */\n    public static void insertBatch(List<Map<String, Object>> rows, String tableName, String familyName) {\n        ObjectArrayList<Put> puts = new ObjectArrayList<>();\n        Table table = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            for (Map<String, Object> row : rows) {\n                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());\n                Put put = new Put(Bytes.toBytes(rowkey));\n                for (Map.Entry<String, Object> kv : row.entrySet()) {\n                    String key = kv.getKey();\n                    Object value = kv.getValue();\n                    if (value == null) {\n                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), null);\n                    } else {\n                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(value.toString()));\n                    }\n                }\n                puts.add(put);\n            }\n            table.put(puts);\n        } catch (IOException e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"insert batch data to hbase failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, null);\n        }\n    }\n\n    /**\n     * @Description: 删除一张表\n     * @Param: [tableName]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:40\n     */\n    public static boolean dropTable(String tableName) {\n        boolean flag = false;\n        try {\n            admin.disableTable(TableName.valueOf(tableName));\n            admin.deleteTable(TableName.valueOf(tableName));\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"delete \" + tableName + \" table failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"delete \" + tableName + \" table failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 根据rowkey删除一条记录\n     * @Param: [tablename, rowkey]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:40\n     */\n    public static boolean deleteOneRowByRowkey(String tablename, String rowkey) {\n        boolean flag = false;\n        try {\n            Delete d = new Delete(rowkey.getBytes());\n            table.delete(d);\n            logger.info(\"delete row \" + rowkey + \" success!\");\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"delete row \" + rowkey + \" failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"delete row \" + rowkey + \" failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 批量删除rowkey\n     * @Param: [tablename, rowkeyList]\n     * @return: boolean\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:47\n     */\n    public static boolean deleteBatchRowByRowkey(String tablename, List<String> rowkeyList) {\n        boolean flag = false;\n        ObjectArrayList<Delete> listDelete = new ObjectArrayList<>();\n        try {\n            for (int i = 0; i < rowkeyList.size(); i++) {\n                Delete delete = new Delete(rowkeyList.get(i).getBytes());\n                listDelete.add(delete);\n            }\n            table.delete(listDelete);\n            logger.info(\"delete row list \" + rowkeyList + \" success!\");\n            flag = true;\n        } catch (IOException e) {\n            logger.error(\"delete row \" + rowkeyList + \" failed!\");\n            e.printStackTrace();\n        } catch (Exception e) {\n            logger.error(\"delete row \" + rowkeyList + \" failed!\");\n            e.printStackTrace();\n        }\n        return flag;\n    }\n\n    /**\n     * @Description: 查询表中所有数据\n     * @Param: [tableName]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 9:51\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryAll(String tableName) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n//            ResultScanner rs = table.getScanner(new Scan().setMaxVersions()); // 获取所有版本数据\n            rs = table.getScanner(new Scan());\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n        } catch (IOException e) {\n            logger.error(\"Get all table data failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 单条件查询, 根据rowkey查询唯一一条记录\n     * @Param: [tableName, rowKey]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 10:47\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryByCondition(String tableName, String rowKey) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        try {\n            Get get = new Get(rowKey.getBytes());\n//            get.setMaxVersions(); // 获取所有版本数据\n            table = connection.getTable(TableName.valueOf(tableName));\n            Result r = table.get(get);\n            rowMapList.add(resolveResult(r));\n            logger.info(\"获得到rowkey: \" + new String(r.getRow()));\n        } catch (IOException e) {\n            logger.error(\"Get table one data failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, null);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 单条件按查询，查询多条记录\n     * @Param: [tableName]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 13:16\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryByCondition(String tableName, String familyName, String columnName, String columnValue) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(columnName), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(columnValue)); // 当列columnName的值为columnValue时进行查询\n            Scan s = new Scan();\n            s.setFilter(filter);\n            rs = table.getScanner(s);\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n        } catch (Exception e) {\n            logger.error(\"query with one filter failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 组合条件查询\n     * @Param: [tableName]\n     * @return: List<HashMap<String,HashMap<String,String>>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 13:26\n     */\n    public static List<HashMap<String, HashMap<String, String>>> queryByCondition(String tableName, String familyName, HashMap<String, String> paramMap) {\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>(); // <familyName, <columnName, columnValue>>\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            FilterList filterList = new FilterList();\n            for (Map.Entry<String, String> entry : paramMap.entrySet()) {\n                Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(entry.getKey()), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(entry.getValue()));\n                filterList.addFilter(filter);\n            }\n            Scan scan = new Scan();\n            scan.setFilter(filterList);\n            rs = table.getScanner(scan);\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n            rs.close();\n        } catch (Exception e) {\n            logger.error(\"query with more filter failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n    * @Description: 查询hbase，匹配rowkey前缀为dianRong的行\n    * @Param: [tableName]\n    * @return: java.util.List<java.util.HashMap<java.lang.String,java.util.HashMap<java.lang.String,java.lang.String>>>\n    * @Author: CHEN ZUOLI\n    * @Date: 2018/4/3\n    * @Time: 20:21\n    */\n    public static List<HashMap<String, HashMap<String, String>>> rowkeyFuzzyQuery(String tableName){\n        ObjectArrayList<HashMap<String, HashMap<String, String>>> rowMapList = new ObjectArrayList<>();\n        Table table = null;\n        ResultScanner rs = null;\n        try {\n            table = connection.getTable(TableName.valueOf(tableName));\n            Scan scan = new Scan();\n            Filter filter = new RowFilter(CompareFilter.CompareOp.EQUAL, new RegexStringComparator(\"dianRong.*\"));\n            scan.setFilter(filter);\n            rs = table.getScanner(scan);\n            for (Result r : rs) {\n                rowMapList.add(resolveResult(r));\n            }\n        } catch (Exception e) {\n            logger.error(\"query with more filter failed!\");\n            e.printStackTrace();\n        } finally {\n            closeTableAndResult(table, rs);\n        }\n        return rowMapList;\n    }\n\n    /**\n     * @Description: 解析查询hbase得到的结果，放入到HashMap中\n     * @Param: [result]\n     * @return: java.util.HashMap<String,HashMap<String,String>>\n     * @Author: CHEN ZUOLI\n     * @Date: 2018/3/29\n     * @Time: 13:52\n     */\n    public static HashMap<String, HashMap<String, String>> resolveResult(Result result) {\n        HashMap<String, HashMap<String, String>> rowMap = new HashMap<>(); // <familyName, <columnName, columnValue>>\n        HashMap<String, String> kvMap = new HashMap<>();\n        NavigableMap<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> map = result.getMap();\n        for (Map.Entry<byte[], NavigableMap<byte[], NavigableMap<Long, byte[]>>> entry : map.entrySet()) {\n            String familyName = new String(entry.getKey());\n            NavigableMap<byte[], NavigableMap<Long, byte[]>> valueInfoMap = entry.getValue();\n            for (Map.Entry<byte[], NavigableMap<Long, byte[]>> valueInfo : valueInfoMap.entrySet()) {\n                String key = new String(valueInfo.getKey());\n                NavigableMap<Long, byte[]> values = valueInfo.getValue();\n                Map.Entry<Long, byte[]> firstEntry = values.firstEntry();\n                Long timestampLastest = firstEntry.getKey();\n                String valueLastest = new String(firstEntry.getValue());\n                logger.info(\"familyName: \" + familyName + \", key: \" + key + \", value: \" + valueLastest + \", timestamp: \" + timestampLastest);\n//                for (Map.Entry<Long, byte[]> vals : values.entrySet()) {\n//                    Long timestamp = vals.getKey();\n//                    String value = new String(vals.getValue());\n//                }\n                kvMap.put(key, valueLastest);\n                rowMap.put(familyName, kvMap);\n            }\n        }\n        return rowMap;\n    }\n\n    public static void closeTableAndResult(Table table, ResultScanner rs){\n        try {\n            if (rs != null) rs.close();\n            if (table != null) table.close();\n        } catch (IOException e) {\n            logger.error(\"close table failed!\");\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n好了，文章到这里就结束了，如果大家在使用过程中，遇到什么问题，请联系我chenzuoli709@gmail.com。","slug":"java操作hbase工具类","published":1,"updated":"2018-12-11T13:57:12.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck0tpl11r0086fbs6lqvhsj1e","content":"<p>HBase是一个基于HDFS的数据库，拥有高可用、大量数据存储、列式存储等特点，在非结构化数据与半结构化数据存储方面，有很大的优势。我们一般测试时使用hbase shell命令行的方式来操作hbase数据库比较方便，但是在数据逻辑处理比较复杂时，那肯定是用它提供的API来操作更方便啦，下面就来给出一个java版操作hbase的工具类，提供给大家，我自己也一直使用这个类。</p>\n<a id=\"more\"></a>\n<p>备注：本工具类使用的环境：hbase1.4.1    jdk1.8        hadoop3.0</p>\n<h1 id=\"maven项目添加依赖\"><a href=\"#maven项目添加依赖\" class=\"headerlink\" title=\"maven项目添加依赖\"></a>maven项目添加依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--hadoop/hbase都要依赖(RPC通信)，注意protobuf-java的版本，hbase1.4.1自带的protobuf-java版本是2.5.0的，所以如果你的程序是跑在服务器上的，需要跟服务器一致，不然会出现NoClsssFoundError--&gt;</span><br><span class=\"line\">&lt;!--https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--hbase--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;$&#123;zookeeper.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-client&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;$&#123;hbase.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-common&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;$&#123;hbase.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class=\"line\">\t&lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-spark --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-spark&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.2.0-cdh5.14.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-server --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-server&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/fastutil/fastutil 这里使用fastutil，对比javautil自带集合类，它的读写性能更优，尤其在大数据的情况下，所以当你写的mr或者spark程序，使用到fastutil，会提升一些性能--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;fastutil&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;fastutil&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;5.0.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.payegis.czl.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import it.unimi.dsi.fastutil.objects.ObjectArrayList;</span><br><span class=\"line\">import net.sf.json.JSONObject;</span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class=\"line\">import org.apache.hadoop.hbase.HColumnDescriptor;</span><br><span class=\"line\">import org.apache.hadoop.hbase.HTableDescriptor;</span><br><span class=\"line\">import org.apache.hadoop.hbase.TableName;</span><br><span class=\"line\">import org.apache.hadoop.hbase.client.*;</span><br><span class=\"line\">import org.apache.hadoop.hbase.filter.*;</span><br><span class=\"line\">import org.apache.hadoop.hbase.io.compress.Compression;</span><br><span class=\"line\">import org.apache.hadoop.hbase.util.Bytes;</span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * User: chenzuoli</span><br><span class=\"line\"> * Date: 2018/3/29</span><br><span class=\"line\"> * Time: 9:20</span><br><span class=\"line\"> * Description: Java操作HBase工具类</span><br><span class=\"line\"> * Ps: Java HBase</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class HBaseUtil &#123;</span><br><span class=\"line\">    public static Configuration conf;</span><br><span class=\"line\">    public static Connection connection;</span><br><span class=\"line\">    public static Admin admin;</span><br><span class=\"line\">    public static Table table;</span><br><span class=\"line\">    private static Logger logger = Logger.getLogger(HBaseUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conf = HBaseConfiguration.create();</span><br><span class=\"line\">            conf.set(&quot;hbase.zookeeper.property.clientPort&quot;, &quot;2181&quot;);</span><br><span class=\"line\">            conf.set(&quot;hbase.zookeeper.quorum&quot;, &quot;dev11,dev13,dev14&quot;);</span><br><span class=\"line\">            connection = ConnectionFactory.createConnection(conf);</span><br><span class=\"line\">            admin = connection.getAdmin();</span><br><span class=\"line\">            logger.info(&quot;初始化hbase连接成功！&quot;);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;初始化hbase连接异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;初始化hbase连接异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 建表，如果表存在，那么不创建。如果未指定列族名称，默认定义一个cf1</span><br><span class=\"line\">     * @Param: [tableName, familyName]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:24</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean createTable(String tableName, String familyName) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        if (familyName == null || familyName.length() == 0) &#123;</span><br><span class=\"line\">            familyName = &quot;cf1&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TableName tbl = TableName.valueOf(tableName);</span><br><span class=\"line\">        Admin admin = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            admin = connection.getAdmin();</span><br><span class=\"line\">            if (admin.tableExists(tbl)) &#123;</span><br><span class=\"line\">                logger.info(&quot;Table &quot; + tbl.getNameAsString() + &quot; is already exists!&quot;);</span><br><span class=\"line\">                return flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            HTableDescriptor tableDescriptor = new HTableDescriptor(tbl);</span><br><span class=\"line\">            tableDescriptor.addFamily(new HColumnDescriptor(familyName).setCompressionType(Compression.Algorithm.SNAPPY));</span><br><span class=\"line\">            admin.createTable(tableDescriptor);</span><br><span class=\"line\">            logger.info(&quot;Create table &quot; + tbl.getNameAsString() + &quot; success!&quot;);</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Create table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Create table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 插入一条数据到hbase</span><br><span class=\"line\">     * @Param: [connection, tableName, rowkey, columnFamily, key, value]</span><br><span class=\"line\">     * @return: void</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/28</span><br><span class=\"line\">     * @Time: 14:06</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void insertOne(String tableName, String rowkey, String columnFamily, String key, String value) &#123;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Put put = new Put(Bytes.toBytes(rowkey));</span><br><span class=\"line\">            put.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(key), Bytes.toBytes(value));</span><br><span class=\"line\">            table.put(put);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert hbase failed: &quot; + rowkey + &quot;,&quot; + columnFamily + &quot;,&quot; + key + &quot;,&quot; + value);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert hbase failed: &quot; + rowkey + &quot;,&quot; + columnFamily + &quot;,&quot; + key + &quot;,&quot; + value);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 批量插入数据到hbase</span><br><span class=\"line\">     * @Param: [filePath, tableName, familyName]</span><br><span class=\"line\">     * @return: void</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/30</span><br><span class=\"line\">     * @Time: 13:31</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void insertBatch(String filePath, String tableName, String familyName) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;Put&gt; puts = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        FileInputStream fis = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            fis = new FileInputStream(filePath);</span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(fis));</span><br><span class=\"line\">            String line = br.readLine();</span><br><span class=\"line\">            while (line != null) &#123;</span><br><span class=\"line\">                JSONObject lineJsonObject = JSONObject.fromObject(line);</span><br><span class=\"line\">                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());</span><br><span class=\"line\">                Set&lt;String&gt; keys = lineJsonObject.keySet();</span><br><span class=\"line\">                Put put = new Put(Bytes.toBytes(rowkey));</span><br><span class=\"line\">                for (String key : keys) &#123;</span><br><span class=\"line\">                    put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(lineJsonObject.optString(key)));</span><br><span class=\"line\">                    puts.add(put);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                line = br.readLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            table.put(puts);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (table != null) table.close();</span><br><span class=\"line\">                if (fis != null) fis.close();</span><br><span class=\"line\">                if (br != null) br.close();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                logger.error(&quot;close table or stream failed!&quot;);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 批量插入数据到hbase</span><br><span class=\"line\">     * @Param: [rows, tableName, familyName]</span><br><span class=\"line\">     * @return: void</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/4/2</span><br><span class=\"line\">     * @Time: 10:19</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void insertBatch(List&lt;Map&lt;String, Object&gt;&gt; rows, String tableName, String familyName) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;Put&gt; puts = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            for (Map&lt;String, Object&gt; row : rows) &#123;</span><br><span class=\"line\">                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());</span><br><span class=\"line\">                Put put = new Put(Bytes.toBytes(rowkey));</span><br><span class=\"line\">                for (Map.Entry&lt;String, Object&gt; kv : row.entrySet()) &#123;</span><br><span class=\"line\">                    String key = kv.getKey();</span><br><span class=\"line\">                    Object value = kv.getValue();</span><br><span class=\"line\">                    if (value == null) &#123;</span><br><span class=\"line\">                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), null);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(value.toString()));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                puts.add(put);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            table.put(puts);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 删除一张表</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:40</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean dropTable(String tableName) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            admin.disableTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            admin.deleteTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete &quot; + tableName + &quot; table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete &quot; + tableName + &quot; table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 根据rowkey删除一条记录</span><br><span class=\"line\">     * @Param: [tablename, rowkey]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:40</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean deleteOneRowByRowkey(String tablename, String rowkey) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Delete d = new Delete(rowkey.getBytes());</span><br><span class=\"line\">            table.delete(d);</span><br><span class=\"line\">            logger.info(&quot;delete row &quot; + rowkey + &quot; success!&quot;);</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkey + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkey + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 批量删除rowkey</span><br><span class=\"line\">     * @Param: [tablename, rowkeyList]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean deleteBatchRowByRowkey(String tablename, List&lt;String&gt; rowkeyList) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        ObjectArrayList&lt;Delete&gt; listDelete = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; rowkeyList.size(); i++) &#123;</span><br><span class=\"line\">                Delete delete = new Delete(rowkeyList.get(i).getBytes());</span><br><span class=\"line\">                listDelete.add(delete);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            table.delete(listDelete);</span><br><span class=\"line\">            logger.info(&quot;delete row list &quot; + rowkeyList + &quot; success!&quot;);</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkeyList + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkeyList + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 查询表中所有数据</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:51</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryAll(String tableName) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">//            ResultScanner rs = table.getScanner(new Scan().setMaxVersions()); // 获取所有版本数据</span><br><span class=\"line\">            rs = table.getScanner(new Scan());</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Get all table data failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 单条件查询, 根据rowkey查询唯一一条记录</span><br><span class=\"line\">     * @Param: [tableName, rowKey]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 10:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryByCondition(String tableName, String rowKey) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Get get = new Get(rowKey.getBytes());</span><br><span class=\"line\">//            get.setMaxVersions(); // 获取所有版本数据</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Result r = table.get(get);</span><br><span class=\"line\">            rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            logger.info(&quot;获得到rowkey: &quot; + new String(r.getRow()));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Get table one data failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 单条件按查询，查询多条记录</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 13:16</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryByCondition(String tableName, String familyName, String columnName, String columnValue) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(columnName), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(columnValue)); // 当列columnName的值为columnValue时进行查询</span><br><span class=\"line\">            Scan s = new Scan();</span><br><span class=\"line\">            s.setFilter(filter);</span><br><span class=\"line\">            rs = table.getScanner(s);</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;query with one filter failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 组合条件查询</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 13:26</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryByCondition(String tableName, String familyName, HashMap&lt;String, String&gt; paramMap) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            FilterList filterList = new FilterList();</span><br><span class=\"line\">            for (Map.Entry&lt;String, String&gt; entry : paramMap.entrySet()) &#123;</span><br><span class=\"line\">                Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(entry.getKey()), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(entry.getValue()));</span><br><span class=\"line\">                filterList.addFilter(filter);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Scan scan = new Scan();</span><br><span class=\"line\">            scan.setFilter(filterList);</span><br><span class=\"line\">            rs = table.getScanner(scan);</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            rs.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;query with more filter failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * @Description: 查询hbase，匹配rowkey前缀为dianRong的行</span><br><span class=\"line\">    * @Param: [tableName]</span><br><span class=\"line\">    * @return: java.util.List&lt;java.util.HashMap&lt;java.lang.String,java.util.HashMap&lt;java.lang.String,java.lang.String&gt;&gt;&gt;</span><br><span class=\"line\">    * @Author: CHEN ZUOLI</span><br><span class=\"line\">    * @Date: 2018/4/3</span><br><span class=\"line\">    * @Time: 20:21</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowkeyFuzzyQuery(String tableName)&#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Scan scan = new Scan();</span><br><span class=\"line\">            Filter filter = new RowFilter(CompareFilter.CompareOp.EQUAL, new RegexStringComparator(&quot;dianRong.*&quot;));</span><br><span class=\"line\">            scan.setFilter(filter);</span><br><span class=\"line\">            rs = table.getScanner(scan);</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;query with more filter failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 解析查询hbase得到的结果，放入到HashMap中</span><br><span class=\"line\">     * @Param: [result]</span><br><span class=\"line\">     * @return: java.util.HashMap&lt;String,HashMap&lt;String,String&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 13:52</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static HashMap&lt;String, HashMap&lt;String, String&gt;&gt; resolveResult(Result result) &#123;</span><br><span class=\"line\">        HashMap&lt;String, HashMap&lt;String, String&gt;&gt; rowMap = new HashMap&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        HashMap&lt;String, String&gt; kvMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        NavigableMap&lt;byte[], NavigableMap&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt;&gt; map = result.getMap();</span><br><span class=\"line\">        for (Map.Entry&lt;byte[], NavigableMap&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">            String familyName = new String(entry.getKey());</span><br><span class=\"line\">            NavigableMap&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt; valueInfoMap = entry.getValue();</span><br><span class=\"line\">            for (Map.Entry&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt; valueInfo : valueInfoMap.entrySet()) &#123;</span><br><span class=\"line\">                String key = new String(valueInfo.getKey());</span><br><span class=\"line\">                NavigableMap&lt;Long, byte[]&gt; values = valueInfo.getValue();</span><br><span class=\"line\">                Map.Entry&lt;Long, byte[]&gt; firstEntry = values.firstEntry();</span><br><span class=\"line\">                Long timestampLastest = firstEntry.getKey();</span><br><span class=\"line\">                String valueLastest = new String(firstEntry.getValue());</span><br><span class=\"line\">                logger.info(&quot;familyName: &quot; + familyName + &quot;, key: &quot; + key + &quot;, value: &quot; + valueLastest + &quot;, timestamp: &quot; + timestampLastest);</span><br><span class=\"line\">//                for (Map.Entry&lt;Long, byte[]&gt; vals : values.entrySet()) &#123;</span><br><span class=\"line\">//                    Long timestamp = vals.getKey();</span><br><span class=\"line\">//                    String value = new String(vals.getValue());</span><br><span class=\"line\">//                &#125;</span><br><span class=\"line\">                kvMap.put(key, valueLastest);</span><br><span class=\"line\">                rowMap.put(familyName, kvMap);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void closeTableAndResult(Table table, ResultScanner rs)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (rs != null) rs.close();</span><br><span class=\"line\">            if (table != null) table.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;close table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，文章到这里就结束了，如果大家在使用过程中，遇到什么问题，请联系我<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>。</p>\n","site":{"data":{}},"excerpt":"<p>HBase是一个基于HDFS的数据库，拥有高可用、大量数据存储、列式存储等特点，在非结构化数据与半结构化数据存储方面，有很大的优势。我们一般测试时使用hbase shell命令行的方式来操作hbase数据库比较方便，但是在数据逻辑处理比较复杂时，那肯定是用它提供的API来操作更方便啦，下面就来给出一个java版操作hbase的工具类，提供给大家，我自己也一直使用这个类。</p>","more":"<p>备注：本工具类使用的环境：hbase1.4.1    jdk1.8        hadoop3.0</p>\n<h1 id=\"maven项目添加依赖\"><a href=\"#maven项目添加依赖\" class=\"headerlink\" title=\"maven项目添加依赖\"></a>maven项目添加依赖</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--hadoop/hbase都要依赖(RPC通信)，注意protobuf-java的版本，hbase1.4.1自带的protobuf-java版本是2.5.0的，所以如果你的程序是跑在服务器上的，需要跟服务器一致，不然会出现NoClsssFoundError--&gt;</span><br><span class=\"line\">&lt;!--https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;com.google.protobuf&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;protobuf-java&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;3.5.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!--hbase--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.zookeeper&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;zookeeper&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;$&#123;zookeeper.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-client&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;$&#123;hbase.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-common&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;$&#123;hbase.version&#125;&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class=\"line\">\t&lt;type&gt;pom&lt;/type&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-spark --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-spark&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.2.0-cdh5.14.0&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/org.apache.hbase/hbase-server --&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;org.apache.hbase&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;hbase-server&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br><span class=\"line\">&lt;!-- https://mvnrepository.com/artifact/fastutil/fastutil 这里使用fastutil，对比javautil自带集合类，它的读写性能更优，尤其在大数据的情况下，所以当你写的mr或者spark程序，使用到fastutil，会提升一些性能--&gt;</span><br><span class=\"line\">&lt;dependency&gt;</span><br><span class=\"line\">\t&lt;groupId&gt;fastutil&lt;/groupId&gt;</span><br><span class=\"line\">\t&lt;artifactId&gt;fastutil&lt;/artifactId&gt;</span><br><span class=\"line\">\t&lt;version&gt;5.0.5&lt;/version&gt;</span><br><span class=\"line\">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.payegis.czl.util;</span><br><span class=\"line\"></span><br><span class=\"line\">import it.unimi.dsi.fastutil.objects.ObjectArrayList;</span><br><span class=\"line\">import net.sf.json.JSONObject;</span><br><span class=\"line\">import org.apache.hadoop.conf.Configuration;</span><br><span class=\"line\">import org.apache.hadoop.hbase.HBaseConfiguration;</span><br><span class=\"line\">import org.apache.hadoop.hbase.HColumnDescriptor;</span><br><span class=\"line\">import org.apache.hadoop.hbase.HTableDescriptor;</span><br><span class=\"line\">import org.apache.hadoop.hbase.TableName;</span><br><span class=\"line\">import org.apache.hadoop.hbase.client.*;</span><br><span class=\"line\">import org.apache.hadoop.hbase.filter.*;</span><br><span class=\"line\">import org.apache.hadoop.hbase.io.compress.Compression;</span><br><span class=\"line\">import org.apache.hadoop.hbase.util.Bytes;</span><br><span class=\"line\">import org.apache.log4j.Logger;</span><br><span class=\"line\"></span><br><span class=\"line\">import java.io.BufferedReader;</span><br><span class=\"line\">import java.io.FileInputStream;</span><br><span class=\"line\">import java.io.IOException;</span><br><span class=\"line\">import java.io.InputStreamReader;</span><br><span class=\"line\">import java.util.*;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * User: chenzuoli</span><br><span class=\"line\"> * Date: 2018/3/29</span><br><span class=\"line\"> * Time: 9:20</span><br><span class=\"line\"> * Description: Java操作HBase工具类</span><br><span class=\"line\"> * Ps: Java HBase</span><br><span class=\"line\"> */</span><br><span class=\"line\"></span><br><span class=\"line\">public class HBaseUtil &#123;</span><br><span class=\"line\">    public static Configuration conf;</span><br><span class=\"line\">    public static Connection connection;</span><br><span class=\"line\">    public static Admin admin;</span><br><span class=\"line\">    public static Table table;</span><br><span class=\"line\">    private static Logger logger = Logger.getLogger(HBaseUtil.class);</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            conf = HBaseConfiguration.create();</span><br><span class=\"line\">            conf.set(&quot;hbase.zookeeper.property.clientPort&quot;, &quot;2181&quot;);</span><br><span class=\"line\">            conf.set(&quot;hbase.zookeeper.quorum&quot;, &quot;dev11,dev13,dev14&quot;);</span><br><span class=\"line\">            connection = ConnectionFactory.createConnection(conf);</span><br><span class=\"line\">            admin = connection.getAdmin();</span><br><span class=\"line\">            logger.info(&quot;初始化hbase连接成功！&quot;);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;初始化hbase连接异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;初始化hbase连接异常！&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 建表，如果表存在，那么不创建。如果未指定列族名称，默认定义一个cf1</span><br><span class=\"line\">     * @Param: [tableName, familyName]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:24</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean createTable(String tableName, String familyName) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        if (familyName == null || familyName.length() == 0) &#123;</span><br><span class=\"line\">            familyName = &quot;cf1&quot;;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        TableName tbl = TableName.valueOf(tableName);</span><br><span class=\"line\">        Admin admin = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            admin = connection.getAdmin();</span><br><span class=\"line\">            if (admin.tableExists(tbl)) &#123;</span><br><span class=\"line\">                logger.info(&quot;Table &quot; + tbl.getNameAsString() + &quot; is already exists!&quot;);</span><br><span class=\"line\">                return flag;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            HTableDescriptor tableDescriptor = new HTableDescriptor(tbl);</span><br><span class=\"line\">            tableDescriptor.addFamily(new HColumnDescriptor(familyName).setCompressionType(Compression.Algorithm.SNAPPY));</span><br><span class=\"line\">            admin.createTable(tableDescriptor);</span><br><span class=\"line\">            logger.info(&quot;Create table &quot; + tbl.getNameAsString() + &quot; success!&quot;);</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Create table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Create table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 插入一条数据到hbase</span><br><span class=\"line\">     * @Param: [connection, tableName, rowkey, columnFamily, key, value]</span><br><span class=\"line\">     * @return: void</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/28</span><br><span class=\"line\">     * @Time: 14:06</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void insertOne(String tableName, String rowkey, String columnFamily, String key, String value) &#123;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Put put = new Put(Bytes.toBytes(rowkey));</span><br><span class=\"line\">            put.addColumn(Bytes.toBytes(columnFamily), Bytes.toBytes(key), Bytes.toBytes(value));</span><br><span class=\"line\">            table.put(put);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert hbase failed: &quot; + rowkey + &quot;,&quot; + columnFamily + &quot;,&quot; + key + &quot;,&quot; + value);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert hbase failed: &quot; + rowkey + &quot;,&quot; + columnFamily + &quot;,&quot; + key + &quot;,&quot; + value);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 批量插入数据到hbase</span><br><span class=\"line\">     * @Param: [filePath, tableName, familyName]</span><br><span class=\"line\">     * @return: void</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/30</span><br><span class=\"line\">     * @Time: 13:31</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void insertBatch(String filePath, String tableName, String familyName) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;Put&gt; puts = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        FileInputStream fis = null;</span><br><span class=\"line\">        BufferedReader br = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            fis = new FileInputStream(filePath);</span><br><span class=\"line\">            br = new BufferedReader(new InputStreamReader(fis));</span><br><span class=\"line\">            String line = br.readLine();</span><br><span class=\"line\">            while (line != null) &#123;</span><br><span class=\"line\">                JSONObject lineJsonObject = JSONObject.fromObject(line);</span><br><span class=\"line\">                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());</span><br><span class=\"line\">                Set&lt;String&gt; keys = lineJsonObject.keySet();</span><br><span class=\"line\">                Put put = new Put(Bytes.toBytes(rowkey));</span><br><span class=\"line\">                for (String key : keys) &#123;</span><br><span class=\"line\">                    put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(lineJsonObject.optString(key)));</span><br><span class=\"line\">                    puts.add(put);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                line = br.readLine();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            table.put(puts);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            try &#123;</span><br><span class=\"line\">                if (table != null) table.close();</span><br><span class=\"line\">                if (fis != null) fis.close();</span><br><span class=\"line\">                if (br != null) br.close();</span><br><span class=\"line\">            &#125; catch (IOException e) &#123;</span><br><span class=\"line\">                logger.error(&quot;close table or stream failed!&quot;);</span><br><span class=\"line\">                e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 批量插入数据到hbase</span><br><span class=\"line\">     * @Param: [rows, tableName, familyName]</span><br><span class=\"line\">     * @return: void</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/4/2</span><br><span class=\"line\">     * @Time: 10:19</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void insertBatch(List&lt;Map&lt;String, Object&gt;&gt; rows, String tableName, String familyName) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;Put&gt; puts = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            for (Map&lt;String, Object&gt; row : rows) &#123;</span><br><span class=\"line\">                String rowkey = MD5Utils.strToMd5_16(UUID.randomUUID().toString());</span><br><span class=\"line\">                Put put = new Put(Bytes.toBytes(rowkey));</span><br><span class=\"line\">                for (Map.Entry&lt;String, Object&gt; kv : row.entrySet()) &#123;</span><br><span class=\"line\">                    String key = kv.getKey();</span><br><span class=\"line\">                    Object value = kv.getValue();</span><br><span class=\"line\">                    if (value == null) &#123;</span><br><span class=\"line\">                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), null);</span><br><span class=\"line\">                    &#125; else &#123;</span><br><span class=\"line\">                        put.addColumn(Bytes.toBytes(familyName), Bytes.toBytes(key), Bytes.toBytes(value.toString()));</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                puts.add(put);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            table.put(puts);</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;insert batch data to hbase failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 删除一张表</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:40</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean dropTable(String tableName) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            admin.disableTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            admin.deleteTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete &quot; + tableName + &quot; table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete &quot; + tableName + &quot; table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 根据rowkey删除一条记录</span><br><span class=\"line\">     * @Param: [tablename, rowkey]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:40</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean deleteOneRowByRowkey(String tablename, String rowkey) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Delete d = new Delete(rowkey.getBytes());</span><br><span class=\"line\">            table.delete(d);</span><br><span class=\"line\">            logger.info(&quot;delete row &quot; + rowkey + &quot; success!&quot;);</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkey + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkey + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 批量删除rowkey</span><br><span class=\"line\">     * @Param: [tablename, rowkeyList]</span><br><span class=\"line\">     * @return: boolean</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static boolean deleteBatchRowByRowkey(String tablename, List&lt;String&gt; rowkeyList) &#123;</span><br><span class=\"line\">        boolean flag = false;</span><br><span class=\"line\">        ObjectArrayList&lt;Delete&gt; listDelete = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            for (int i = 0; i &lt; rowkeyList.size(); i++) &#123;</span><br><span class=\"line\">                Delete delete = new Delete(rowkeyList.get(i).getBytes());</span><br><span class=\"line\">                listDelete.add(delete);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            table.delete(listDelete);</span><br><span class=\"line\">            logger.info(&quot;delete row list &quot; + rowkeyList + &quot; success!&quot;);</span><br><span class=\"line\">            flag = true;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkeyList + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;delete row &quot; + rowkeyList + &quot; failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return flag;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 查询表中所有数据</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 9:51</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryAll(String tableName) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">//            ResultScanner rs = table.getScanner(new Scan().setMaxVersions()); // 获取所有版本数据</span><br><span class=\"line\">            rs = table.getScanner(new Scan());</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Get all table data failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 单条件查询, 根据rowkey查询唯一一条记录</span><br><span class=\"line\">     * @Param: [tableName, rowKey]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 10:47</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryByCondition(String tableName, String rowKey) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            Get get = new Get(rowKey.getBytes());</span><br><span class=\"line\">//            get.setMaxVersions(); // 获取所有版本数据</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Result r = table.get(get);</span><br><span class=\"line\">            rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            logger.info(&quot;获得到rowkey: &quot; + new String(r.getRow()));</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;Get table one data failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, null);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 单条件按查询，查询多条记录</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 13:16</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryByCondition(String tableName, String familyName, String columnName, String columnValue) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(columnName), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(columnValue)); // 当列columnName的值为columnValue时进行查询</span><br><span class=\"line\">            Scan s = new Scan();</span><br><span class=\"line\">            s.setFilter(filter);</span><br><span class=\"line\">            rs = table.getScanner(s);</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;query with one filter failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 组合条件查询</span><br><span class=\"line\">     * @Param: [tableName]</span><br><span class=\"line\">     * @return: List&lt;HashMap&lt;String,HashMap&lt;String,String&gt;&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 13:26</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; queryByCondition(String tableName, String familyName, HashMap&lt;String, String&gt; paramMap) &#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            FilterList filterList = new FilterList();</span><br><span class=\"line\">            for (Map.Entry&lt;String, String&gt; entry : paramMap.entrySet()) &#123;</span><br><span class=\"line\">                Filter filter = new SingleColumnValueFilter(Bytes.toBytes(familyName), Bytes.toBytes(entry.getKey()), CompareFilter.CompareOp.EQUAL, Bytes.toBytes(entry.getValue()));</span><br><span class=\"line\">                filterList.addFilter(filter);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            Scan scan = new Scan();</span><br><span class=\"line\">            scan.setFilter(filterList);</span><br><span class=\"line\">            rs = table.getScanner(scan);</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            rs.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;query with more filter failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">    * @Description: 查询hbase，匹配rowkey前缀为dianRong的行</span><br><span class=\"line\">    * @Param: [tableName]</span><br><span class=\"line\">    * @return: java.util.List&lt;java.util.HashMap&lt;java.lang.String,java.util.HashMap&lt;java.lang.String,java.lang.String&gt;&gt;&gt;</span><br><span class=\"line\">    * @Author: CHEN ZUOLI</span><br><span class=\"line\">    * @Date: 2018/4/3</span><br><span class=\"line\">    * @Time: 20:21</span><br><span class=\"line\">    */</span><br><span class=\"line\">    public static List&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowkeyFuzzyQuery(String tableName)&#123;</span><br><span class=\"line\">        ObjectArrayList&lt;HashMap&lt;String, HashMap&lt;String, String&gt;&gt;&gt; rowMapList = new ObjectArrayList&lt;&gt;();</span><br><span class=\"line\">        Table table = null;</span><br><span class=\"line\">        ResultScanner rs = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            table = connection.getTable(TableName.valueOf(tableName));</span><br><span class=\"line\">            Scan scan = new Scan();</span><br><span class=\"line\">            Filter filter = new RowFilter(CompareFilter.CompareOp.EQUAL, new RegexStringComparator(&quot;dianRong.*&quot;));</span><br><span class=\"line\">            scan.setFilter(filter);</span><br><span class=\"line\">            rs = table.getScanner(scan);</span><br><span class=\"line\">            for (Result r : rs) &#123;</span><br><span class=\"line\">                rowMapList.add(resolveResult(r));</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            logger.error(&quot;query with more filter failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            closeTableAndResult(table, rs);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMapList;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * @Description: 解析查询hbase得到的结果，放入到HashMap中</span><br><span class=\"line\">     * @Param: [result]</span><br><span class=\"line\">     * @return: java.util.HashMap&lt;String,HashMap&lt;String,String&gt;&gt;</span><br><span class=\"line\">     * @Author: CHEN ZUOLI</span><br><span class=\"line\">     * @Date: 2018/3/29</span><br><span class=\"line\">     * @Time: 13:52</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static HashMap&lt;String, HashMap&lt;String, String&gt;&gt; resolveResult(Result result) &#123;</span><br><span class=\"line\">        HashMap&lt;String, HashMap&lt;String, String&gt;&gt; rowMap = new HashMap&lt;&gt;(); // &lt;familyName, &lt;columnName, columnValue&gt;&gt;</span><br><span class=\"line\">        HashMap&lt;String, String&gt; kvMap = new HashMap&lt;&gt;();</span><br><span class=\"line\">        NavigableMap&lt;byte[], NavigableMap&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt;&gt; map = result.getMap();</span><br><span class=\"line\">        for (Map.Entry&lt;byte[], NavigableMap&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class=\"line\">            String familyName = new String(entry.getKey());</span><br><span class=\"line\">            NavigableMap&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt; valueInfoMap = entry.getValue();</span><br><span class=\"line\">            for (Map.Entry&lt;byte[], NavigableMap&lt;Long, byte[]&gt;&gt; valueInfo : valueInfoMap.entrySet()) &#123;</span><br><span class=\"line\">                String key = new String(valueInfo.getKey());</span><br><span class=\"line\">                NavigableMap&lt;Long, byte[]&gt; values = valueInfo.getValue();</span><br><span class=\"line\">                Map.Entry&lt;Long, byte[]&gt; firstEntry = values.firstEntry();</span><br><span class=\"line\">                Long timestampLastest = firstEntry.getKey();</span><br><span class=\"line\">                String valueLastest = new String(firstEntry.getValue());</span><br><span class=\"line\">                logger.info(&quot;familyName: &quot; + familyName + &quot;, key: &quot; + key + &quot;, value: &quot; + valueLastest + &quot;, timestamp: &quot; + timestampLastest);</span><br><span class=\"line\">//                for (Map.Entry&lt;Long, byte[]&gt; vals : values.entrySet()) &#123;</span><br><span class=\"line\">//                    Long timestamp = vals.getKey();</span><br><span class=\"line\">//                    String value = new String(vals.getValue());</span><br><span class=\"line\">//                &#125;</span><br><span class=\"line\">                kvMap.put(key, valueLastest);</span><br><span class=\"line\">                rowMap.put(familyName, kvMap);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return rowMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void closeTableAndResult(Table table, ResultScanner rs)&#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            if (rs != null) rs.close();</span><br><span class=\"line\">            if (table != null) table.close();</span><br><span class=\"line\">        &#125; catch (IOException e) &#123;</span><br><span class=\"line\">            logger.error(&quot;close table failed!&quot;);</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>好了，文章到这里就结束了，如果大家在使用过程中，遇到什么问题，请联系我<a href=\"mailto:chenzuoli709@gmail.com\" target=\"_blank\" rel=\"noopener\">chenzuoli709@gmail.com</a>。</p>"}],"PostAsset":[{"_id":"source/_posts/世界十大语言排名/language_index.jpeg","slug":"language_index.jpeg","post":"ck0tpl0kl0015fbs6hp2w1dug","modified":1,"renderable":0},{"_id":"source/_posts/全球最受欢迎的无广告网站-维基百科/Www.wikipedia.org_screenshot_2018.png","slug":"Www.wikipedia.org_screenshot_2018.png","post":"ck0tpl0kt001efbs6wd6y4wap","modified":1,"renderable":0},{"_id":"source/_posts/全球最受欢迎的无广告网站-维基百科/Wiki-donate.jpg","slug":"Wiki-donate.jpg","post":"ck0tpl0kt001efbs6wd6y4wap","modified":1,"renderable":0},{"_id":"source/_posts/大O表示法（时间复杂度）/3.png","slug":"3.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/大O表示法（时间复杂度）/5.png","slug":"5.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/大O表示法（时间复杂度）/time_complex_degree.png","slug":"time_complex_degree.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/区块链三大共识机制/blockchain.jpeg","slug":"blockchain.jpeg","post":"ck0tpl0sr002ofbs61q8xby1z","modified":1,"renderable":0},{"_id":"source/_posts/大O表示法（时间复杂度）/2.png","slug":"2.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/比特币双花攻击/btc.jpeg","slug":"btc.jpeg","post":"ck0tpl0lj001yfbs6aik2r88x","modified":1,"renderable":0},{"_id":"source/_posts/美国软件巨头Oracle简介/tech.jpeg","slug":"tech.jpeg","post":"ck0tpl0lp0025fbs69rymmq4v","modified":1,"renderable":0},{"_id":"source/_posts/重温《头号玩家》VR游戏中的区块链世界/ready-player-one.jpg","slug":"ready-player-one.jpg","post":"ck0tpl0lu002afbs6rv42vvrt","modified":1,"renderable":0},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解/vnc_viewer_connect_appearance.png","slug":"vnc_viewer_connect_appearance.png","post":"ck0tpl0k6000pfbs6134rr85c","modified":1,"renderable":0},{"_id":"source/_posts/人们最有可能帮助陌生人的十大国家/soldier-military-uniform-american.jpg","post":"ck0tpl0kp0019fbs675k2xjm7","slug":"soldier-military-uniform-american.jpg","modified":1,"renderable":1},{"_id":"source/_posts/以太坊/Ethereum.jpeg","slug":"Ethereum.jpeg","post":"ck0tpl0sg002hfbs6p5eta6a1","modified":1,"renderable":0},{"_id":"source/_posts/公链如此多，而应用却寥寥无几/pexels-photo-730552.jpeg","slug":"pexels-photo-730552.jpeg","post":"ck0tpl0sl002kfbs6zanhuqif","modified":1,"renderable":0},{"_id":"source/_posts/简单排序/select_sort.png","post":"ck0tpl0ln0023fbs6j00el5gt","slug":"select_sort.png","modified":1,"renderable":1},{"_id":"source/_posts/2018年全球各国谋杀比例/anonymous-black-and-white-blackmailing-64699.jpg","slug":"anonymous-black-and-white-blackmailing-64699.jpg","post":"ck0tpl0j90001fbs6qzinggbp","modified":1,"renderable":0},{"_id":"source/_posts/ElasticSearch集群环境搭建/es.jpeg","post":"ck0tpl0js000bfbs6fa9yxgq4","slug":"es.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Linux命令相关/linux.jpeg","post":"ck0tpl0jy000ffbs6hnjwy7qk","slug":"linux.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Japan Economy Data/japan_economy_data.jpg","post":"ck0tpl0jy000gfbs6eplpop4h","slug":"japan_economy_data.jpg","modified":1,"renderable":1},{"_id":"source/_posts/MVC设计模式/mvc.png","post":"ck0tpl0jz000hfbs6qtuxt39o","slug":"mvc.png","modified":1,"renderable":1},{"_id":"source/_posts/Starbucks/starbucks.jpeg","post":"ck0tpl0k1000jfbs6nkbube0o","slug":"starbucks.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/Turkish/Turkishjpeg.jpeg","post":"ck0tpl0k4000nfbs6a88801ag","slug":"Turkishjpeg.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/ambari管理监控hadoop生态系统的环境安装及问题解答/VBoxManageError.png","post":"ck0tpl0k7000rfbs6mrghw2q7","slug":"VBoxManageError.png","modified":1,"renderable":1},{"_id":"source/_posts/世界各国人民平均汽车拥有量/car_model.jpeg","post":"ck0tpl0km0016fbs6fj0my90j","slug":"car_model.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/世界失业率排行/unemployment.jpeg","slug":"unemployment.jpeg","post":"ck0tpl0kn0017fbs6bail6orj","modified":1,"renderable":0},{"_id":"source/_posts/儿童贫困率排行/child_poverty_rate.jpeg","post":"ck0tpl0kq001bfbs6qafv7ovb","slug":"child_poverty_rate.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/全球奢侈珠宝品牌排名/hand-bricks-rings-ring.jpg","post":"ck0tpl0ks001dfbs64r8r2p5v","slug":"hand-bricks-rings-ring.jpg","modified":1,"renderable":1},{"_id":"source/_posts/单台服务器安装spark、hadoop服务文档/spark-default.conf.png","post":"ck0tpl0kw001ifbs6uoq1fgdo","slug":"spark-default.conf.png","modified":1,"renderable":1},{"_id":"source/_posts/并发与并行/concurrency_and_parallelism.png","post":"ck0tpl0l3001nfbs64mtq2nrk","slug":"concurrency_and_parallelism.png","modified":1,"renderable":1},{"_id":"source/_posts/截至2019年5月5日世界上最富有的人排行/kindle.jpeg","post":"ck0tpl0l7001qfbs6s6rq1m8c","slug":"kindle.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/拜占庭问题/Byzantine.jpeg","slug":"Byzantine.jpeg","post":"ck0tpl0l8001rfbs6ivpg0067","modified":1,"renderable":0},{"_id":"source/_posts/搭建zookeeper集群/zookeeper_small.gif","post":"ck0tpl0lb001tfbs6ju3k26vl","slug":"zookeeper_small.gif","modified":1,"renderable":1},{"_id":"source/_posts/比原链-共享经济平台简介/structure-light-led-movement-158826.jpeg","slug":"structure-light-led-movement-158826.jpeg","post":"ck0tpl0lh001wfbs61m1udnpx","modified":1,"renderable":0},{"_id":"source/_posts/比特币本质其实是UTXO/btc.jpeg","post":"ck0tpl0lj001zfbs6ccde09pc","slug":"btc.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/程序设计/program_design.jpeg","slug":"program_design.jpeg","post":"ck0tpl0lm0022fbs6cx4tqrey","modified":1,"renderable":0},{"_id":"source/_posts/Flink学习/flink-header-logo.svg","post":"ck0tpl0jv000dfbs6fcvk41j2","slug":"flink-header-logo.svg","modified":1,"renderable":1},{"_id":"source/_posts/Flink学习/water_mark-event_time-process_time.png","post":"ck0tpl0jv000dfbs6fcvk41j2","slug":"water_mark-event_time-process_time.png","modified":1,"renderable":1},{"_id":"source/_posts/debezium实时同步mysql、postgresql数据介绍/5DCA7786FF43D058BBB827BC521EFBDE","post":"ck0tpl0ka000ufbs6dawdt9b5","slug":"5DCA7786FF43D058BBB827BC521EFBDE","modified":1,"renderable":1},{"_id":"source/_posts/debezium实时同步mysql、postgresql数据介绍/A91E335CC16D805E66B44CD76ADF4383","post":"ck0tpl0ka000ufbs6dawdt9b5","slug":"A91E335CC16D805E66B44CD76ADF4383","modified":1,"renderable":1},{"_id":"source/_posts/go语言学习/go_execute_process.png","slug":"go_execute_process.png","post":"ck0tpl0kb000vfbs6qtebx5l0","modified":1,"renderable":0},{"_id":"source/_posts/go语言学习/golanguage.png","post":"ck0tpl0kb000vfbs6qtebx5l0","slug":"golanguage.png","modified":1,"renderable":1},{"_id":"source/_posts/世界上钻石价格排行/400px-Koh-i-Noor_old_version_copy.jpg","post":"ck0tpl0kk0014fbs67phsr5na","slug":"400px-Koh-i-Noor_old_version_copy.jpg","modified":1,"renderable":1},{"_id":"source/_posts/世界上钻石价格排行/Koh-i-Noor.jpeg","post":"ck0tpl0kk0014fbs67phsr5na","slug":"Koh-i-Noor.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/世界十大语言排名/language.jpeg","slug":"language.jpeg","post":"ck0tpl0kl0015fbs6hp2w1dug","modified":1,"renderable":0},{"_id":"source/_posts/以太坊（Ethereum）简介/500px-VitalikButerinProfile.jpg","post":"ck0tpl0kq001afbs6xx4vcc0d","slug":"500px-VitalikButerinProfile.jpg","modified":1,"renderable":1},{"_id":"source/_posts/以太坊（Ethereum）简介/800px-Ethereum_logo_2014.svg.png","post":"ck0tpl0kq001afbs6xx4vcc0d","slug":"800px-Ethereum_logo_2014.svg.png","modified":1,"renderable":1},{"_id":"source/_posts/全球各国人均GDP排行/index_of_per_capita_gdp_countries.png","slug":"index_of_per_capita_gdp_countries.png","post":"ck0tpl0kr001cfbs6wmvp9kht","modified":1,"renderable":0},{"_id":"source/_posts/全球各国人均GDP排行/lusenbao.png","post":"ck0tpl0kr001cfbs6wmvp9kht","slug":"lusenbao.png","modified":1,"renderable":1},{"_id":"source/_posts/北京租房小中介骗局/daxionghouse.jpg","slug":"daxionghouse.jpg","post":"ck0tpl0ku001ffbs6207t2nbp","modified":1,"renderable":0},{"_id":"source/_posts/北京租房小中介骗局/leavehouse.jpg","slug":"leavehouse.jpg","post":"ck0tpl0ku001ffbs6207t2nbp","modified":1,"renderable":0},{"_id":"source/_posts/数据库、数据仓库、数据集市的区别与联系/data-relationship.jpeg","post":"ck0tpl0lf001ufbs6nrwys8o2","slug":"data-relationship.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/数据库、数据仓库、数据集市的区别与联系/data_warehouse.jpeg","post":"ck0tpl0lf001ufbs6nrwys8o2","slug":"data_warehouse.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/美国软件巨头Oracle简介/oracle_cloud.jpg","post":"ck0tpl0lp0025fbs69rymmq4v","slug":"oracle_cloud.jpg","modified":1,"renderable":1},{"_id":"source/_posts/说英语的国家/English_country.png","slug":"English_country.png","post":"ck0tpl0lr0026fbs607gbswb4","modified":1,"renderable":0},{"_id":"source/_posts/说英语的国家/English_letter.jpeg","post":"ck0tpl0lr0026fbs607gbswb4","slug":"English_letter.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/DAPP到底是什么？/blockchain.jpeg","post":"ck0tpl0jq0009fbs668g0jjav","slug":"blockchain.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/DAPP到底是什么？/dapp.jpg","post":"ck0tpl0jq0009fbs668g0jjav","slug":"dapp.jpg","modified":1,"renderable":1},{"_id":"source/_posts/DAPP到底是什么？/dapp_app.png","post":"ck0tpl0jq0009fbs668g0jjav","slug":"dapp_app.png","modified":1,"renderable":1},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解/deskNumMappingPort.png","post":"ck0tpl0k6000pfbs6134rr85c","slug":"deskNumMappingPort.png","modified":1,"renderable":1},{"_id":"source/_posts/Windows远程连接linux图形界面配置详解/vnc_viewer_connect_test.png","post":"ck0tpl0k6000pfbs6134rr85c","slug":"vnc_viewer_connect_test.png","modified":1,"renderable":1},{"_id":"source/_posts/createWebsiteHelp/customDomain1.png","post":"ck0tpl0k9000tfbs670ndb006","slug":"customDomain1.png","modified":1,"renderable":1},{"_id":"source/_posts/createWebsiteHelp/customDomain2.png","post":"ck0tpl0k9000tfbs670ndb006","slug":"customDomain2.png","modified":1,"renderable":1},{"_id":"source/_posts/createWebsiteHelp/domainMapping.png","post":"ck0tpl0k9000tfbs670ndb006","slug":"domainMapping.png","modified":1,"renderable":1},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/node.jpg","post":"ck0tpl0k0000ifbs63lcm8tfm","slug":"node.jpg","modified":1,"renderable":1},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/p2p_network.jpg","post":"ck0tpl0k0000ifbs63lcm8tfm","slug":"p2p_network.jpg","modified":1,"renderable":1},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/p2p_new.jpg","post":"ck0tpl0k0000ifbs63lcm8tfm","slug":"p2p_new.jpg","modified":1,"renderable":1},{"_id":"source/_posts/P2P（PeerToPeer）网络原理/peer2peer.jpeg","post":"ck0tpl0k0000ifbs63lcm8tfm","slug":"peer2peer.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/windows下vim打开文件中文乱码/gvim客户端.png","post":"ck0tpl0kj0012fbs6l5s1aben","slug":"gvim客户端.png","modified":1,"renderable":1},{"_id":"source/_posts/windows下vim打开文件中文乱码/gvim客户端菜单乱码.png","post":"ck0tpl0kj0012fbs6l5s1aben","slug":"gvim客户端菜单乱码.png","modified":1,"renderable":1},{"_id":"source/_posts/windows下vim打开文件中文乱码/gvim查找.png","post":"ck0tpl0kj0012fbs6l5s1aben","slug":"gvim查找.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构与算法/city_data.jpeg","post":"ck0tpl0li001xfbs6s2ailnry","slug":"city_data.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/数据结构与算法/data.jpeg","post":"ck0tpl0li001xfbs6s2ailnry","slug":"data.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/数据结构与算法/delete_from_array.png","post":"ck0tpl0li001xfbs6s2ailnry","slug":"delete_from_array.png","modified":1,"renderable":1},{"_id":"source/_posts/数据结构与算法/half_search.png","post":"ck0tpl0li001xfbs6s2ailnry","slug":"half_search.png","modified":1,"renderable":1},{"_id":"source/_posts/比特币双花攻击/attack_chain.png","post":"ck0tpl0lj001yfbs6aik2r88x","slug":"attack_chain.png","modified":1,"renderable":1},{"_id":"source/_posts/比特币双花攻击/back_chain.png","post":"ck0tpl0lj001yfbs6aik2r88x","slug":"back_chain.png","modified":1,"renderable":1},{"_id":"source/_posts/比特币双花攻击/chain.png","post":"ck0tpl0lj001yfbs6aik2r88x","slug":"chain.png","modified":1,"renderable":1},{"_id":"source/_posts/英国构成国/Britain.png","slug":"Britain.png","post":"ck0tpl0lo0024fbs63rpxhxqr","modified":1,"renderable":0},{"_id":"source/_posts/英国构成国/Britain_countris.png","post":"ck0tpl0lo0024fbs63rpxhxqr","slug":"Britain_countris.png","modified":1,"renderable":1},{"_id":"source/_posts/英国构成国/TheBritainCounties.png","post":"ck0tpl0lo0024fbs63rpxhxqr","slug":"TheBritainCounties.png","modified":1,"renderable":1},{"_id":"source/_posts/英国构成国/William Wallace.webp","post":"ck0tpl0lo0024fbs63rpxhxqr","slug":"William Wallace.webp","modified":1,"renderable":1},{"_id":"source/_posts/简单排序/bubble_sort.png","post":"ck0tpl0ln0023fbs6j00el5gt","slug":"bubble_sort.png","modified":1,"renderable":1},{"_id":"source/_posts/简单排序/insert_sort_1.png","slug":"insert_sort_1.png","post":"ck0tpl0ln0023fbs6j00el5gt","modified":1,"renderable":0},{"_id":"source/_posts/简单排序/insert_sort_2.png","slug":"insert_sort_2.png","post":"ck0tpl0ln0023fbs6j00el5gt","modified":1,"renderable":0},{"_id":"source/_posts/简单排序/insert_sort_3.png","slug":"insert_sort_3.png","post":"ck0tpl0ln0023fbs6j00el5gt","modified":1,"renderable":0},{"_id":"source/_posts/简单排序/simple_sort.jpeg","post":"ck0tpl0ln0023fbs6j00el5gt","slug":"simple_sort.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/大O表示法（时间复杂度）/1.png","slug":"1.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/大O表示法（时间复杂度）/4.png","slug":"4.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/大O表示法（时间复杂度）/6.png","slug":"6.png","post":"ck0tpl0l1001lfbs68ci3cwt5","modified":1,"renderable":0},{"_id":"source/_posts/数据仓库元数据管理系统/warehouse.jpeg","post":"ck0tpl0st002sfbs6f1qd9e1j","slug":"warehouse.jpeg","modified":1,"renderable":1},{"_id":"source/_posts/kafka集群搭建/kafka-logo.png","post":"ck0tpl0se002gfbs6burrmkow","slug":"kafka-logo.png","modified":1,"renderable":1},{"_id":"source/_posts/比特币原理/exchange.png","post":"ck0tpl0sz002vfbs69l4elbva","slug":"exchange.png","modified":1,"renderable":1},{"_id":"source/_posts/零知识证明/zero-knowledge-proof.jpg","post":"ck0tpl0t1002xfbs665ezx0v5","slug":"zero-knowledge-proof.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Solidity学习/solidity.jpg","post":"ck0tpl0rw002dfbs6jhgor9or","slug":"solidity.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Solidity学习/solidity_Ballot_error.png","slug":"solidity_Ballot_error.png","post":"ck0tpl0rw002dfbs6jhgor9or","modified":1,"renderable":0},{"_id":"source/_posts/以太坊/Ethereum_founder.jpg","post":"ck0tpl0sg002hfbs6p5eta6a1","slug":"Ethereum_founder.jpg","modified":1,"renderable":1},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_state.png","post":"ck0tpl0so002lfbs6s0g78pec","slug":"platform_state.png","modified":1,"renderable":1},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比/platform_tps.png","post":"ck0tpl0so002lfbs6s0g78pec","slug":"platform_tps.png","modified":1,"renderable":1},{"_id":"source/_posts/区块链三大公链Dapp平台ETH、EOS、TRON对比/xrp_speed.png","post":"ck0tpl0so002lfbs6s0g78pec","slug":"xrp_speed.png","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/galaxy_schema.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"galaxy_schema.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/galaxy_schema_example.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"galaxy_schema_example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/schema_difference.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"schema_difference.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/snowflake_schema.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"snowflake_schema.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/snowflake_schema_example.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"snowflake_schema_example.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/star-model.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"star-model.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/star_schema.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"star_schema.jpg","modified":1,"renderable":1},{"_id":"source/_posts/数据仓库模型设计/star_schema_example.jpg","post":"ck0tpl0sx002tfbs65qh5osaz","slug":"star_schema_example.jpg","modified":1,"renderable":1}],"PostCategory":[{"post_id":"ck0tpl0j90001fbs6qzinggbp","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl11u008afbs6xq46x8bp"},{"post_id":"ck0tpl0jh0003fbs6844sy1un","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl11v008cfbs66csqcpz5"},{"post_id":"ck0tpl0jj0005fbs67fnk5zqb","category_id":"ck0tpl0sq002mfbs6nsfm2tcb","_id":"ck0tpl11w008efbs6cdqqz96b"},{"post_id":"ck0tpl0jm0007fbs64vay1x5b","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl11y008ifbs6cn1s4flb"},{"post_id":"ck0tpl0jm0008fbs6p0z01vxn","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl11z008kfbs6sf0u0g3v"},{"post_id":"ck0tpl0jr000afbs6jeecoqb8","category_id":"ck0tpl0t30030fbs6tkxm44jq","_id":"ck0tpl120008ofbs6veuqyg1j"},{"post_id":"ck0tpl0js000bfbs6fa9yxgq4","category_id":"ck0tpl0t60032fbs61cwi7q42","_id":"ck0tpl121008qfbs6bw7d5vud"},{"post_id":"ck0tpl0jt000cfbs6w7i5225l","category_id":"ck0tpl0t70034fbs6wf6e3i7t","_id":"ck0tpl123008tfbs6ds5c2hx9"},{"post_id":"ck0tpl0jx000efbs63x4212xx","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl123008vfbs6lqulnmhp"},{"post_id":"ck0tpl0jy000ffbs6hnjwy7qk","category_id":"ck0tpl0tf003afbs67vvfip0h","_id":"ck0tpl124008yfbs6mnw9pakr"},{"post_id":"ck0tpl0jy000gfbs6eplpop4h","category_id":"ck0tpl0tj003cfbs6miost6jd","_id":"ck0tpl1240090fbs6bh6vz5x7"},{"post_id":"ck0tpl0jz000hfbs6qtuxt39o","category_id":"ck0tpl0tl003efbs6q9vqll6k","_id":"ck0tpl1250093fbs6xhel6hw8"},{"post_id":"ck0tpl0k0000ifbs63lcm8tfm","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl1250095fbs6kggzz16a"},{"post_id":"ck0tpl0k1000jfbs6nkbube0o","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl1250097fbs62d4h1340"},{"post_id":"ck0tpl0k2000kfbs6wxd11uv5","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl126009afbs6yqw9yppy"},{"post_id":"ck0tpl0k3000lfbs6bylq73rh","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl126009cfbs6xk9cjc4w"},{"post_id":"ck0tpl0k4000mfbs6qbswg1o0","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl127009ffbs649brsrrh"},{"post_id":"ck0tpl0k5000ofbs6uefdblmd","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl127009hfbs6dxu70xn1"},{"post_id":"ck0tpl0k6000pfbs6134rr85c","category_id":"ck0tpl0tf003afbs67vvfip0h","_id":"ck0tpl128009kfbs6xzwv41gi"},{"post_id":"ck0tpl0k6000qfbs65qh4tm69","category_id":"ck0tpl0u1003tfbs6wfk96nm7","_id":"ck0tpl128009mfbs6x4qmpru1"},{"post_id":"ck0tpl0k7000rfbs6mrghw2q7","category_id":"ck0tpl0u3003vfbs6aplhh18y","_id":"ck0tpl128009pfbs6u6ae4mgc"},{"post_id":"ck0tpl0k8000sfbs6y099y1nq","category_id":"ck0tpl0u5003xfbs6lbbr34jc","_id":"ck0tpl129009rfbs68cz2dwj4"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","category_id":"ck0tpl0u6003zfbs6i095c8ja","_id":"ck0tpl129009tfbs6syqey7fm"},{"post_id":"ck0tpl0kb000vfbs6qtebx5l0","category_id":"ck0tpl0u70041fbs63auap945","_id":"ck0tpl129009vfbs67d6i1qts"},{"post_id":"ck0tpl0kd000xfbs6jhgy91pq","category_id":"ck0tpl0u90045fbs6b3ju8dq9","_id":"ck0tpl12a009xfbs6jb9fmwgn"},{"post_id":"ck0tpl0ke000yfbs6b1thl2yw","category_id":"ck0tpl0tf003afbs67vvfip0h","_id":"ck0tpl12a009zfbs6itvlfmoi"},{"post_id":"ck0tpl0ke000zfbs6d9wzw9j9","category_id":"ck0tpl0sq002mfbs6nsfm2tcb","_id":"ck0tpl12e00a1fbs6egjy5ztc"},{"post_id":"ck0tpl0kg0010fbs67qbstdzy","category_id":"ck0tpl0ud004bfbs61rhcar6d","_id":"ck0tpl12e00a3fbs6kijtie94"},{"post_id":"ck0tpl0ki0011fbs6r2fzf95r","category_id":"ck0tpl0ue004dfbs6nzo82j43","_id":"ck0tpl12e00a5fbs6xdadngdr"},{"post_id":"ck0tpl0kj0012fbs6l5s1aben","category_id":"ck0tpl0tf003afbs67vvfip0h","_id":"ck0tpl12f00a7fbs6cxsgr789"},{"post_id":"ck0tpl0kk0013fbs6hpk3enlq","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12f00a9fbs6xqnw5p8b"},{"post_id":"ck0tpl0kk0014fbs67phsr5na","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12f00abfbs6velu4qbt"},{"post_id":"ck0tpl0kl0015fbs6hp2w1dug","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12f00adfbs6gh2prqhm"},{"post_id":"ck0tpl0km0016fbs6fj0my90j","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12g00affbs6isz668oj"},{"post_id":"ck0tpl0kn0017fbs6bail6orj","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12g00ahfbs6lex4bj88"},{"post_id":"ck0tpl0ko0018fbs6thw16fwz","category_id":"ck0tpl0ul004qfbs6d7wa321x","_id":"ck0tpl12h00ajfbs6yn3qbd4h"},{"post_id":"ck0tpl0kp0019fbs675k2xjm7","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12i00alfbs609h8d2f4"},{"post_id":"ck0tpl0kq001afbs6xx4vcc0d","category_id":"ck0tpl0ul004qfbs6d7wa321x","_id":"ck0tpl12j00anfbs63xhfc8se"},{"post_id":"ck0tpl0kq001bfbs6qafv7ovb","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12j00apfbs6kx9vkots"},{"post_id":"ck0tpl0kr001cfbs6wmvp9kht","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12k00arfbs6iqb3um1f"},{"post_id":"ck0tpl0ks001dfbs64r8r2p5v","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12k00atfbs6fqttfkqd"},{"post_id":"ck0tpl0kt001efbs6wd6y4wap","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl12k00avfbs64qzyyyt4"},{"post_id":"ck0tpl0ku001ffbs6207t2nbp","category_id":"ck0tpl0uw0054fbs6h5u31t6c","_id":"ck0tpl12k00axfbs6wbic0xeo"},{"post_id":"ck0tpl0kv001gfbs67e3whdpp","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl12l00azfbs6sdmfhxpd"},{"post_id":"ck0tpl0kw001hfbs6mhics6zb","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl12l00b1fbs6ozydv3xz"},{"post_id":"ck0tpl0kw001ifbs6uoq1fgdo","category_id":"ck0tpl0sq002mfbs6nsfm2tcb","_id":"ck0tpl13000b3fbs68s1314f0"},{"post_id":"ck0tpl0l0001jfbs68dlql9o4","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13100b5fbs672ffgp2c"},{"post_id":"ck0tpl0l1001kfbs6h0ujawgs","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13100b7fbs6zleku2q6"},{"post_id":"ck0tpl0l1001lfbs68ci3cwt5","category_id":"ck0tpl0v3005ffbs61whl9yr0","_id":"ck0tpl13100b9fbs6xfw5cqze"},{"post_id":"ck0tpl0l2001mfbs686e5408o","category_id":"ck0tpl0v4005hfbs6hujedwpy","_id":"ck0tpl13100bbfbs6td6rv8lx"},{"post_id":"ck0tpl0l3001nfbs64mtq2nrk","category_id":"ck0tpl0u70041fbs63auap945","_id":"ck0tpl13100bdfbs66ofhkwkp"},{"post_id":"ck0tpl0l4001ofbs6rt88ymuz","category_id":"ck0tpl0ul004qfbs6d7wa321x","_id":"ck0tpl13100bffbs6oqtkau8w"},{"post_id":"ck0tpl0l5001pfbs61aitigm2","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13200bhfbs6kum3w6gb"},{"post_id":"ck0tpl0l7001qfbs6s6rq1m8c","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13200bjfbs631fnqgn3"},{"post_id":"ck0tpl0l8001rfbs6ivpg0067","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13200blfbs6iuwpg3hz"},{"post_id":"ck0tpl0l9001sfbs6w2bo9u1y","category_id":"ck0tpl0vc005tfbs6qpbfhtbg","_id":"ck0tpl13200bnfbs6nicb8h1k"},{"post_id":"ck0tpl0lb001tfbs6ju3k26vl","category_id":"ck0tpl0t60032fbs61cwi7q42","_id":"ck0tpl13200bpfbs6alznhfcr"},{"post_id":"ck0tpl0lf001ufbs6nrwys8o2","category_id":"ck0tpl0vf005xfbs6dubyvkbx","_id":"ck0tpl13200brfbs634pfo8ev"},{"post_id":"ck0tpl0lg001vfbs602hxesqz","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13200btfbs6w1vsx7s4"},{"post_id":"ck0tpl0lh001wfbs61m1udnpx","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13200bvfbs6q79cok98"},{"post_id":"ck0tpl0li001xfbs6s2ailnry","category_id":"ck0tpl0vj0063fbs6u9fnbh3z","_id":"ck0tpl13300bxfbs6llrfozcq"},{"post_id":"ck0tpl0lj001yfbs6aik2r88x","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13300bzfbs6nzkla7ck"},{"post_id":"ck0tpl0lj001zfbs6ccde09pc","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13300c1fbs6ww2d2181"},{"post_id":"ck0tpl0lk0020fbs62udcee4l","category_id":"ck0tpl0ul004qfbs6d7wa321x","_id":"ck0tpl13300c3fbs6is9t3m4z"},{"post_id":"ck0tpl0ll0021fbs6e8edzk44","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13300c5fbs6a9gzgl6l"},{"post_id":"ck0tpl0lm0022fbs6cx4tqrey","category_id":"ck0tpl0tl003efbs6q9vqll6k","_id":"ck0tpl13300c7fbs6qsdv8mrm"},{"post_id":"ck0tpl0ln0023fbs6j00el5gt","category_id":"ck0tpl0v3005ffbs61whl9yr0","_id":"ck0tpl13300c9fbs6tgpamrva"},{"post_id":"ck0tpl0lo0024fbs63rpxhxqr","category_id":"ck0tpl0vs006gfbs646lnf51h","_id":"ck0tpl13300cbfbs6ltcskas7"},{"post_id":"ck0tpl0lp0025fbs69rymmq4v","category_id":"ck0tpl0vt006ifbs6um1y5zsr","_id":"ck0tpl13300cdfbs636i3u55a"},{"post_id":"ck0tpl0lr0026fbs607gbswb4","category_id":"ck0tpl0vu006kfbs6vihxwq2l","_id":"ck0tpl13300cffbs6dbbkukvk"},{"post_id":"ck0tpl0ls0027fbs6yy6xv6n2","category_id":"ck0tpl0t30030fbs6tkxm44jq","_id":"ck0tpl13400chfbs6gsz4zxcu"},{"post_id":"ck0tpl0ls0028fbs64aw0s35n","category_id":"ck0tpl0t30030fbs6tkxm44jq","_id":"ck0tpl13400cjfbs62pqk4rcr"},{"post_id":"ck0tpl0lt0029fbs67vh7hcjz","category_id":"ck0tpl0rx002efbs6rkx0yyzr","_id":"ck0tpl13400clfbs6bk29wgtx"},{"post_id":"ck0tpl0lu002afbs6rv42vvrt","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13400cnfbs6w1b2q0jp"},{"post_id":"ck0tpl0lv002bfbs6oejfwsec","category_id":"ck0tpl0w3006ufbs6wp5xgjgl","_id":"ck0tpl13400cpfbs6rr6bel21"},{"post_id":"ck0tpl0lx002cfbs6jydonpf7","category_id":"ck0tpl0w4006wfbs6tkcehvt1","_id":"ck0tpl13400crfbs6t18t39g0"},{"post_id":"ck0tpl0rw002dfbs6jhgor9or","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13400ctfbs6ltwa74w3"},{"post_id":"ck0tpl0se002gfbs6burrmkow","category_id":"ck0tpl0t60032fbs61cwi7q42","_id":"ck0tpl13500cvfbs6aotgjpz5"},{"post_id":"ck0tpl0sg002hfbs6p5eta6a1","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13500cxfbs6b05i84ug"},{"post_id":"ck0tpl0sl002kfbs6zanhuqif","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13500czfbs6cm68l8gj"},{"post_id":"ck0tpl0so002lfbs6s0g78pec","category_id":"ck0tpl0ul004qfbs6d7wa321x","_id":"ck0tpl13500d1fbs6h3pb1lp7"},{"post_id":"ck0tpl0sr002ofbs61q8xby1z","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13500d3fbs675bujfom"},{"post_id":"ck0tpl0ss002pfbs6xjkycen1","category_id":"ck0tpl0t30030fbs6tkxm44jq","_id":"ck0tpl13600d5fbs6dag6cmv0"},{"post_id":"ck0tpl0st002sfbs6f1qd9e1j","category_id":"ck0tpl0vf005xfbs6dubyvkbx","_id":"ck0tpl13600d7fbs6v31xkgpg"},{"post_id":"ck0tpl0sx002tfbs65qh5osaz","category_id":"ck0tpl0vf005xfbs6dubyvkbx","_id":"ck0tpl13700d9fbs6ar2x75ab"},{"post_id":"ck0tpl0sz002vfbs69l4elbva","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13700dbfbs648r89tch"},{"post_id":"ck0tpl0t1002xfbs665ezx0v5","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl13700ddfbs67gk67j8f"},{"post_id":"ck0tpl0jq0009fbs668g0jjav","category_id":"ck0tpl0t2002yfbs6xdhgmwet","_id":"ck0tpl16l00ehfbs6g2pt6t7s"},{"post_id":"ck0tpl0jq0009fbs668g0jjav","category_id":"ck0tpl11t0088fbs6vbzlcdpb","_id":"ck0tpl16s00ejfbs64rr77o0t"},{"post_id":"ck0tpl0jv000dfbs6fcvk41j2","category_id":"ck0tpl0sq002mfbs6nsfm2tcb","_id":"ck0tpl16u00elfbs6w5gn65yr"},{"post_id":"ck0tpl0jv000dfbs6fcvk41j2","category_id":"ck0tpl11x008ffbs66mx4ehoz","_id":"ck0tpl16w00enfbs6b8p9nzr3"},{"post_id":"ck0tpl0kc000wfbs6pd4ssp8l","category_id":"ck0tpl0u80043fbs63cx00gry","_id":"ck0tpl16x00epfbs62uu302xp"},{"post_id":"ck0tpl0kc000wfbs6pd4ssp8l","category_id":"ck0tpl11z008lfbs6hbuf3xb5","_id":"ck0tpl16y00erfbs6a1v0o1g4"},{"post_id":"ck0tpl11r0086fbs6lqvhsj1e","category_id":"ck0tpl16l00effbs6jmvvz0gk","_id":"ck0tpl1ap00f1fbs69ut64c4d"}],"PostTag":[{"post_id":"ck0tpl0j90001fbs6qzinggbp","tag_id":"ck0tpl0sb002ffbs6b8c2g09h","_id":"ck0tpl11t0087fbs6n28e599w"},{"post_id":"ck0tpl0jh0003fbs6844sy1un","tag_id":"ck0tpl0sh002jfbs6zldqie49","_id":"ck0tpl11v008bfbs6lvxvmoz9"},{"post_id":"ck0tpl0jj0005fbs67fnk5zqb","tag_id":"ck0tpl0sq002nfbs6vi42km91","_id":"ck0tpl11w008dfbs6d4t1kx9t"},{"post_id":"ck0tpl0jm0007fbs64vay1x5b","tag_id":"ck0tpl0st002rfbs6jsf7kgjy","_id":"ck0tpl11y008hfbs6e6uc97sf"},{"post_id":"ck0tpl0jm0008fbs6p0z01vxn","tag_id":"ck0tpl0t0002wfbs6qmdzm4e3","_id":"ck0tpl11z008jfbs6zsrt2pxz"},{"post_id":"ck0tpl0jq0009fbs668g0jjav","tag_id":"ck0tpl0t3002zfbs6ljqm1iiu","_id":"ck0tpl120008nfbs63z0rhrvu"},{"post_id":"ck0tpl0jr000afbs6jeecoqb8","tag_id":"ck0tpl0t40031fbs6wlix8xxa","_id":"ck0tpl121008pfbs65poin1ad"},{"post_id":"ck0tpl0js000bfbs6fa9yxgq4","tag_id":"ck0tpl0t70033fbs6p2mz51mz","_id":"ck0tpl122008sfbs63duz9ilm"},{"post_id":"ck0tpl0jt000cfbs6w7i5225l","tag_id":"ck0tpl0t90035fbs61x9p6srq","_id":"ck0tpl123008ufbs6jibnfqja"},{"post_id":"ck0tpl0jv000dfbs6fcvk41j2","tag_id":"ck0tpl0tc0037fbs6m8ysci8y","_id":"ck0tpl123008wfbs696xti1pj"},{"post_id":"ck0tpl0jx000efbs63x4212xx","tag_id":"ck0tpl0te0039fbs6eitctztw","_id":"ck0tpl124008zfbs6ad1xsym8"},{"post_id":"ck0tpl0jy000ffbs6hnjwy7qk","tag_id":"ck0tpl0ti003bfbs6z9c6d5od","_id":"ck0tpl1250091fbs61jyz3aeq"},{"post_id":"ck0tpl0jy000gfbs6eplpop4h","tag_id":"ck0tpl0tk003dfbs6cq14muel","_id":"ck0tpl1250094fbs6suoh3d43"},{"post_id":"ck0tpl0jz000hfbs6qtuxt39o","tag_id":"ck0tpl0tm003ffbs6tti5dfjv","_id":"ck0tpl1250096fbs6hajsdtvn"},{"post_id":"ck0tpl0jz000hfbs6qtuxt39o","tag_id":"ck0tpl0tq003hfbs6jz3n4a6c","_id":"ck0tpl1260099fbs6c6tsk114"},{"post_id":"ck0tpl0k0000ifbs63lcm8tfm","tag_id":"ck0tpl0tt003jfbs6kglr41i9","_id":"ck0tpl126009bfbs6f2g7wzkn"},{"post_id":"ck0tpl0k1000jfbs6nkbube0o","tag_id":"ck0tpl0tu003lfbs650mggq5i","_id":"ck0tpl127009efbs60nmbhk3l"},{"post_id":"ck0tpl0k2000kfbs6wxd11uv5","tag_id":"ck0tpl0tx003ofbs6r48b1r7f","_id":"ck0tpl127009gfbs6w3aj7qk0"},{"post_id":"ck0tpl0k3000lfbs6bylq73rh","tag_id":"ck0tpl0tz003qfbs6n0z4f3bt","_id":"ck0tpl127009jfbs65sfjy07m"},{"post_id":"ck0tpl0k4000mfbs6qbswg1o0","tag_id":"ck0tpl0u1003sfbs6ym02bd6u","_id":"ck0tpl128009lfbs6s6l7abkp"},{"post_id":"ck0tpl0k5000ofbs6uefdblmd","tag_id":"ck0tpl0u2003ufbs6p5vj51fm","_id":"ck0tpl128009nfbs6tyac1v1u"},{"post_id":"ck0tpl0k6000pfbs6134rr85c","tag_id":"ck0tpl0u3003wfbs69p4yf1ok","_id":"ck0tpl129009qfbs618plb7gw"},{"post_id":"ck0tpl0k6000pfbs6134rr85c","tag_id":"ck0tpl0ti003bfbs6z9c6d5od","_id":"ck0tpl129009sfbs6ci2vb91d"},{"post_id":"ck0tpl0k6000pfbs6134rr85c","tag_id":"ck0tpl0u60040fbs6yim34ruc","_id":"ck0tpl129009ufbs6f3f0myum"},{"post_id":"ck0tpl0k6000qfbs65qh4tm69","tag_id":"ck0tpl0u70042fbs67map0lun","_id":"ck0tpl12a009wfbs69lphbrqv"},{"post_id":"ck0tpl0k7000rfbs6mrghw2q7","tag_id":"ck0tpl0u80044fbs6xk72cdzf","_id":"ck0tpl12a009yfbs6kflyehwh"},{"post_id":"ck0tpl0k7000rfbs6mrghw2q7","tag_id":"ck0tpl0u90046fbs6t0rkkyal","_id":"ck0tpl12c00a0fbs6mqzswh6c"},{"post_id":"ck0tpl0k8000sfbs6y099y1nq","tag_id":"ck0tpl0ub0048fbs6nfe80pui","_id":"ck0tpl12e00a2fbs62yksxayb"},{"post_id":"ck0tpl0k8000sfbs6y099y1nq","tag_id":"ck0tpl0uc004afbs6ccg5vwf1","_id":"ck0tpl12e00a4fbs6awchjotb"},{"post_id":"ck0tpl0k9000tfbs670ndb006","tag_id":"ck0tpl0ud004cfbs6245wctg9","_id":"ck0tpl12f00a6fbs65kyqev9t"},{"post_id":"ck0tpl0k9000tfbs670ndb006","tag_id":"ck0tpl0ue004efbs6408g5nob","_id":"ck0tpl12f00a8fbs6263k1jtq"},{"post_id":"ck0tpl0k9000tfbs670ndb006","tag_id":"ck0tpl0uf004gfbs6l7jvqmda","_id":"ck0tpl12f00aafbs6i4mmsv35"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","tag_id":"ck0tpl0ug004ifbs6kdr60sie","_id":"ck0tpl12f00acfbs60a0rkyz4"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","tag_id":"ck0tpl0uh004kfbs6bj52k0id","_id":"ck0tpl12f00aefbs6ntun5ai4"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","tag_id":"ck0tpl0ui004mfbs6q5r3e5nb","_id":"ck0tpl12g00agfbs6y73xq3tj"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","tag_id":"ck0tpl0uj004pfbs6w9ccakh3","_id":"ck0tpl12h00aifbs6klvo3ixw"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","tag_id":"ck0tpl0ul004rfbs6zvjh4vno","_id":"ck0tpl12i00akfbs6aomk06go"},{"post_id":"ck0tpl0ka000ufbs6dawdt9b5","tag_id":"ck0tpl0um004tfbs6pg6jup0h","_id":"ck0tpl12j00amfbs6hselk0xl"},{"post_id":"ck0tpl0kb000vfbs6qtebx5l0","tag_id":"ck0tpl0uo004vfbs6xwt9xb66","_id":"ck0tpl12j00aofbs61592ioxp"},{"post_id":"ck0tpl0kc000wfbs6pd4ssp8l","tag_id":"ck0tpl0uq004xfbs6zd4j2uo8","_id":"ck0tpl12k00aqfbs6rmug4y07"},{"post_id":"ck0tpl0kd000xfbs6jhgy91pq","tag_id":"ck0tpl0us004zfbs6b9ac8a3x","_id":"ck0tpl12k00asfbs6eksx7ujh"},{"post_id":"ck0tpl0ke000yfbs6b1thl2yw","tag_id":"ck0tpl0ti003bfbs6z9c6d5od","_id":"ck0tpl12k00aufbs6ok9y3of5"},{"post_id":"ck0tpl0ke000yfbs6b1thl2yw","tag_id":"ck0tpl0uw0053fbs6jqief9lk","_id":"ck0tpl12k00awfbs6t3njhe64"},{"post_id":"ck0tpl0ke000zfbs6d9wzw9j9","tag_id":"ck0tpl0ux0055fbs651971tmy","_id":"ck0tpl12l00ayfbs6czx34jyh"},{"post_id":"ck0tpl0ke000zfbs6d9wzw9j9","tag_id":"ck0tpl0uy0057fbs6ee9159gf","_id":"ck0tpl12l00b0fbs6t8lw3a0z"},{"post_id":"ck0tpl0kg0010fbs67qbstdzy","tag_id":"ck0tpl0u3003wfbs69p4yf1ok","_id":"ck0tpl12z00b2fbs61afi4pli"},{"post_id":"ck0tpl0kg0010fbs67qbstdzy","tag_id":"ck0tpl0v1005bfbs65950benr","_id":"ck0tpl13000b4fbs6dz21qt0i"},{"post_id":"ck0tpl0ki0011fbs6r2fzf95r","tag_id":"ck0tpl0v2005efbs6pmr1c6wl","_id":"ck0tpl13100b6fbs67ywox508"},{"post_id":"ck0tpl0ki0011fbs6r2fzf95r","tag_id":"ck0tpl0v4005gfbs655vhmsox","_id":"ck0tpl13100b8fbs6wu1498xv"},{"post_id":"ck0tpl0kj0012fbs6l5s1aben","tag_id":"ck0tpl0u3003wfbs69p4yf1ok","_id":"ck0tpl13100bafbs615ojg0c3"},{"post_id":"ck0tpl0kj0012fbs6l5s1aben","tag_id":"ck0tpl0v6005kfbs68v9u1l7r","_id":"ck0tpl13100bcfbs6tg73xoqz"},{"post_id":"ck0tpl0kk0013fbs6hpk3enlq","tag_id":"ck0tpl0v8005mfbs69lu8f12k","_id":"ck0tpl13100befbs6wfvdfqks"},{"post_id":"ck0tpl0kk0014fbs67phsr5na","tag_id":"ck0tpl0v9005ofbs6r7aivjg5","_id":"ck0tpl13200bgfbs6egi1iqi8"},{"post_id":"ck0tpl0kl0015fbs6hp2w1dug","tag_id":"ck0tpl0va005qfbs6njnt9nkx","_id":"ck0tpl13200bifbs6rll3m6rl"},{"post_id":"ck0tpl0km0016fbs6fj0my90j","tag_id":"ck0tpl0vb005sfbs6lw8imfx6","_id":"ck0tpl13200bkfbs6qlhcstnj"},{"post_id":"ck0tpl0kn0017fbs6bail6orj","tag_id":"ck0tpl0vd005ufbs6kuyizuv7","_id":"ck0tpl13200bmfbs65yvk5iju"},{"post_id":"ck0tpl0ko0018fbs6thw16fwz","tag_id":"ck0tpl0ve005wfbs6n8yu041x","_id":"ck0tpl13200bofbs67tyf9gpk"},{"post_id":"ck0tpl0ko0018fbs6thw16fwz","tag_id":"ck0tpl0vg005yfbs6wk40tgkz","_id":"ck0tpl13200bqfbs6q9dwkqv3"},{"post_id":"ck0tpl0ko0018fbs6thw16fwz","tag_id":"ck0tpl0vh0060fbs6ezwnfs1h","_id":"ck0tpl13200bsfbs6thizs0zu"},{"post_id":"ck0tpl0kq001afbs6xx4vcc0d","tag_id":"ck0tpl0vi0062fbs6kli34erz","_id":"ck0tpl13200bufbs6i4fhtdgq"},{"post_id":"ck0tpl0kq001bfbs6qafv7ovb","tag_id":"ck0tpl0vj0064fbs61fdvmsnv","_id":"ck0tpl13300bwfbs61g7lj0ta"},{"post_id":"ck0tpl0kq001bfbs6qafv7ovb","tag_id":"ck0tpl0vm0067fbs65pxmuo2m","_id":"ck0tpl13300byfbs6zv6ijstu"},{"post_id":"ck0tpl0kr001cfbs6wmvp9kht","tag_id":"ck0tpl0vn0069fbs66dmzrjok","_id":"ck0tpl13300c0fbs60gt0g3i7"},{"post_id":"ck0tpl0ks001dfbs64r8r2p5v","tag_id":"ck0tpl0vo006bfbs69jeng10z","_id":"ck0tpl13300c2fbs6ronp7qg5"},{"post_id":"ck0tpl0kt001efbs6wd6y4wap","tag_id":"ck0tpl0vq006dfbs6p18znofq","_id":"ck0tpl13300c4fbs6uyv7j0j3"},{"post_id":"ck0tpl0ku001ffbs6207t2nbp","tag_id":"ck0tpl0vr006ffbs6k6ecpz2f","_id":"ck0tpl13300c6fbs6ynhmrhga"},{"post_id":"ck0tpl0ku001ffbs6207t2nbp","tag_id":"ck0tpl0vt006hfbs641zu91q5","_id":"ck0tpl13300c8fbs6gdd6ldmy"},{"post_id":"ck0tpl0kv001gfbs67e3whdpp","tag_id":"ck0tpl0vt006jfbs63fje5t29","_id":"ck0tpl13300cafbs6g0pj3wiv"},{"post_id":"ck0tpl0kw001hfbs6mhics6zb","tag_id":"ck0tpl0vt006jfbs63fje5t29","_id":"ck0tpl13300ccfbs6wfyqfsbn"},{"post_id":"ck0tpl0kw001ifbs6uoq1fgdo","tag_id":"ck0tpl0ux0055fbs651971tmy","_id":"ck0tpl13300cefbs6oqmey1xm"},{"post_id":"ck0tpl0kw001ifbs6uoq1fgdo","tag_id":"ck0tpl0u90046fbs6t0rkkyal","_id":"ck0tpl13400cgfbs681dl3wsk"},{"post_id":"ck0tpl0l0001jfbs68dlql9o4","tag_id":"ck0tpl0w1006rfbs6htamefph","_id":"ck0tpl13400cifbs6yqak11et"},{"post_id":"ck0tpl0l1001kfbs6h0ujawgs","tag_id":"ck0tpl0w3006tfbs6wb5oj6b8","_id":"ck0tpl13400ckfbs60rgmgzd9"},{"post_id":"ck0tpl0l1001lfbs68ci3cwt5","tag_id":"ck0tpl0w4006vfbs6vx21ewwd","_id":"ck0tpl13400cmfbs6jvcmehv7"},{"post_id":"ck0tpl0l1001lfbs68ci3cwt5","tag_id":"ck0tpl0w4006xfbs6omhtboot","_id":"ck0tpl13400cofbs6eaod77vp"},{"post_id":"ck0tpl0l2001mfbs686e5408o","tag_id":"ck0tpl0w4006yfbs6uhd8ij33","_id":"ck0tpl13400cqfbs6565gmzw2"},{"post_id":"ck0tpl0l3001nfbs64mtq2nrk","tag_id":"ck0tpl0w5006zfbs69fnvfpo9","_id":"ck0tpl13400csfbs6k6qlspnu"},{"post_id":"ck0tpl0l3001nfbs64mtq2nrk","tag_id":"ck0tpl0w50070fbs6lgxb7bv2","_id":"ck0tpl13500cufbs6ljjk0hbx"},{"post_id":"ck0tpl0l4001ofbs6rt88ymuz","tag_id":"ck0tpl0w60071fbs6v3or2kl2","_id":"ck0tpl13500cwfbs6ljqulvha"},{"post_id":"ck0tpl0l4001ofbs6rt88ymuz","tag_id":"ck0tpl0w60072fbs61v777asp","_id":"ck0tpl13500cyfbs620m2vx1w"},{"post_id":"ck0tpl0l5001pfbs61aitigm2","tag_id":"ck0tpl0w70073fbs6nzzaud9k","_id":"ck0tpl13500d0fbs6bec7cgau"},{"post_id":"ck0tpl0l7001qfbs6s6rq1m8c","tag_id":"ck0tpl0w70074fbs6oyp3k11h","_id":"ck0tpl13500d2fbs6lv51mwoi"},{"post_id":"ck0tpl0l8001rfbs6ivpg0067","tag_id":"ck0tpl0w90075fbs63uxg1fuy","_id":"ck0tpl13600d4fbs6f4nouwqz"},{"post_id":"ck0tpl0l9001sfbs6w2bo9u1y","tag_id":"ck0tpl0wb0076fbs6kmxa1r2f","_id":"ck0tpl13600d6fbs6lo765guo"},{"post_id":"ck0tpl0l9001sfbs6w2bo9u1y","tag_id":"ck0tpl0wb0077fbs6u2etlnxn","_id":"ck0tpl13700d8fbs64ym7baqn"},{"post_id":"ck0tpl0lb001tfbs6ju3k26vl","tag_id":"ck0tpl0uy0057fbs6ee9159gf","_id":"ck0tpl13700dafbs61t57yol5"},{"post_id":"ck0tpl0lf001ufbs6nrwys8o2","tag_id":"ck0tpl0ub0048fbs6nfe80pui","_id":"ck0tpl13700dcfbs6s2mfh7z9"},{"post_id":"ck0tpl0lf001ufbs6nrwys8o2","tag_id":"ck0tpl0we007afbs6l0ramn9l","_id":"ck0tpl13700defbs65zyur5a0"},{"post_id":"ck0tpl0lf001ufbs6nrwys8o2","tag_id":"ck0tpl0we007bfbs6733v6f5a","_id":"ck0tpl13700dffbs6cr3xgodc"},{"post_id":"ck0tpl0lg001vfbs602hxesqz","tag_id":"ck0tpl0wf007cfbs6pa4ge30w","_id":"ck0tpl13700dgfbs6g9uadskv"},{"post_id":"ck0tpl0lh001wfbs61m1udnpx","tag_id":"ck0tpl0wf007dfbs6d6q0v34z","_id":"ck0tpl13700dhfbs6hv7ul0tg"},{"post_id":"ck0tpl0lh001wfbs61m1udnpx","tag_id":"ck0tpl0wg007efbs682592oxz","_id":"ck0tpl13700difbs6dbt9v88j"},{"post_id":"ck0tpl0li001xfbs6s2ailnry","tag_id":"ck0tpl0wg007ffbs68xxqtcdy","_id":"ck0tpl13800djfbs6j28dojqo"},{"post_id":"ck0tpl0lj001yfbs6aik2r88x","tag_id":"ck0tpl0wh007gfbs6a333qmay","_id":"ck0tpl13800dkfbs6is4d82zb"},{"post_id":"ck0tpl0lj001yfbs6aik2r88x","tag_id":"ck0tpl0wh007hfbs6ie6vgiep","_id":"ck0tpl13800dlfbs6eod520te"},{"post_id":"ck0tpl0lj001zfbs6ccde09pc","tag_id":"ck0tpl0wh007gfbs6a333qmay","_id":"ck0tpl13800dmfbs6zij8h7az"},{"post_id":"ck0tpl0lj001zfbs6ccde09pc","tag_id":"ck0tpl0wi007jfbs6gsm4s2sm","_id":"ck0tpl13800dnfbs6onnwzji4"},{"post_id":"ck0tpl0lk0020fbs62udcee4l","tag_id":"ck0tpl0wi007kfbs6drhqqjx8","_id":"ck0tpl13800dofbs6q8vol9r3"},{"post_id":"ck0tpl0lk0020fbs62udcee4l","tag_id":"ck0tpl0wi007lfbs6da8j4c06","_id":"ck0tpl13800dpfbs67h88ok81"},{"post_id":"ck0tpl0ll0021fbs6e8edzk44","tag_id":"ck0tpl0wi007mfbs6yxmn5w01","_id":"ck0tpl13800dqfbs6lbizfoi5"},{"post_id":"ck0tpl0lm0022fbs6cx4tqrey","tag_id":"ck0tpl0wj007nfbs692t6lgwe","_id":"ck0tpl13800drfbs6g1dpzggd"},{"post_id":"ck0tpl0ln0023fbs6j00el5gt","tag_id":"ck0tpl0wj007ofbs68ztugs69","_id":"ck0tpl13800dsfbs6i0gsfmq5"},{"post_id":"ck0tpl0ln0023fbs6j00el5gt","tag_id":"ck0tpl0wj007pfbs6axykcy71","_id":"ck0tpl13800dtfbs6shb69204"},{"post_id":"ck0tpl0ln0023fbs6j00el5gt","tag_id":"ck0tpl0wj007qfbs68a3g33m6","_id":"ck0tpl13800dufbs6624dockk"},{"post_id":"ck0tpl0lo0024fbs63rpxhxqr","tag_id":"ck0tpl0wl007rfbs651a4o2cx","_id":"ck0tpl13800dvfbs6ibgrou5q"},{"post_id":"ck0tpl0lo0024fbs63rpxhxqr","tag_id":"ck0tpl0wl007sfbs6ab4jnm0z","_id":"ck0tpl13800dwfbs6opipfc61"},{"post_id":"ck0tpl0lo0024fbs63rpxhxqr","tag_id":"ck0tpl0wl007tfbs6fsl9h8no","_id":"ck0tpl13800dxfbs616a2oxj2"},{"post_id":"ck0tpl0lo0024fbs63rpxhxqr","tag_id":"ck0tpl0wm007ufbs6qkdgmq9a","_id":"ck0tpl13800dyfbs6i9k63fvo"},{"post_id":"ck0tpl0lo0024fbs63rpxhxqr","tag_id":"ck0tpl0wm007vfbs6ykd6vb2x","_id":"ck0tpl13800dzfbs6dy6gityo"},{"post_id":"ck0tpl0lp0025fbs69rymmq4v","tag_id":"ck0tpl0wm007wfbs6p5r1v80k","_id":"ck0tpl13800e0fbs63kd3kost"},{"post_id":"ck0tpl0lr0026fbs607gbswb4","tag_id":"ck0tpl0wm007xfbs6nu5g12a3","_id":"ck0tpl13800e1fbs6kzws6cx5"},{"post_id":"ck0tpl0ls0027fbs6yy6xv6n2","tag_id":"ck0tpl0wn007yfbs6xi0beyoq","_id":"ck0tpl13800e2fbs6vlelq1mc"},{"post_id":"ck0tpl0ls0028fbs64aw0s35n","tag_id":"ck0tpl0wn007zfbs67s67hj55","_id":"ck0tpl13900e3fbs6qixp1kqo"},{"post_id":"ck0tpl0lt0029fbs67vh7hcjz","tag_id":"ck0tpl0wn0080fbs6bqbtkuce","_id":"ck0tpl13900e4fbs6ufqn2xmy"},{"post_id":"ck0tpl0lu002afbs6rv42vvrt","tag_id":"ck0tpl0wp0081fbs6f0mb2sdc","_id":"ck0tpl13900e5fbs61nm5zw5b"},{"post_id":"ck0tpl0lv002bfbs6oejfwsec","tag_id":"ck0tpl0wr0082fbs6ibjgbjso","_id":"ck0tpl13900e6fbs60d0f3wr3"},{"post_id":"ck0tpl0lv002bfbs6oejfwsec","tag_id":"ck0tpl0ws0083fbs6zzawils8","_id":"ck0tpl13900e7fbs6t071m06c"},{"post_id":"ck0tpl0lv002bfbs6oejfwsec","tag_id":"ck0tpl0uh004kfbs6bj52k0id","_id":"ck0tpl13900e8fbs6otf2dhxr"},{"post_id":"ck0tpl0lx002cfbs6jydonpf7","tag_id":"ck0tpl0wu0085fbs6bsy6nwkf","_id":"ck0tpl13900e9fbs6bxqgv2ik"},{"post_id":"ck0tpl0se002gfbs6burrmkow","tag_id":"ck0tpl0us004zfbs6b9ac8a3x","_id":"ck0tpl13900eafbs6i3qz14s3"},{"post_id":"ck0tpl0sg002hfbs6p5eta6a1","tag_id":"ck0tpl0vi0062fbs6kli34erz","_id":"ck0tpl13900ebfbs65p1sjp8p"},{"post_id":"ck0tpl0ss002pfbs6xjkycen1","tag_id":"ck0tpl0uh004kfbs6bj52k0id","_id":"ck0tpl13900ecfbs6bn9emj2n"},{"post_id":"ck0tpl0ss002pfbs6xjkycen1","tag_id":"ck0tpl0wn007zfbs67s67hj55","_id":"ck0tpl13900edfbs6gidz7bhz"},{"post_id":"ck0tpl0rw002dfbs6jhgor9or","tag_id":"ck0tpl11t0089fbs6thn76g1s","_id":"ck0tpl16l00eefbs6ukm3gz3s"},{"post_id":"ck0tpl0rw002dfbs6jhgor9or","tag_id":"ck0tpl11x008gfbs66nniwx3u","_id":"ck0tpl16s00eifbs6ebqb3az5"},{"post_id":"ck0tpl0sl002kfbs6zanhuqif","tag_id":"ck0tpl120008mfbs65wf8dv2n","_id":"ck0tpl16u00ekfbs6s3ky1kyu"},{"post_id":"ck0tpl0sl002kfbs6zanhuqif","tag_id":"ck0tpl0wg007efbs682592oxz","_id":"ck0tpl16v00emfbs6pwd4kak1"},{"post_id":"ck0tpl0sl002kfbs6zanhuqif","tag_id":"ck0tpl121008rfbs6h1coh5cj","_id":"ck0tpl16x00eofbs68gfcbvyb"},{"post_id":"ck0tpl0so002lfbs6s0g78pec","tag_id":"ck0tpl120008mfbs65wf8dv2n","_id":"ck0tpl16y00eqfbs6rn4ggrah"},{"post_id":"ck0tpl0so002lfbs6s0g78pec","tag_id":"ck0tpl0wg007efbs682592oxz","_id":"ck0tpl17000esfbs611vv10fc"},{"post_id":"ck0tpl0so002lfbs6s0g78pec","tag_id":"ck0tpl0t3002zfbs6ljqm1iiu","_id":"ck0tpl17200etfbs6mlcocvwj"},{"post_id":"ck0tpl0sr002ofbs61q8xby1z","tag_id":"ck0tpl1250092fbs6btt5t5nh","_id":"ck0tpl17300eufbs6j0po8ud3"},{"post_id":"ck0tpl0st002sfbs6f1qd9e1j","tag_id":"ck0tpl0we007afbs6l0ramn9l","_id":"ck0tpl17300evfbs6ew2cvnx4"},{"post_id":"ck0tpl0st002sfbs6f1qd9e1j","tag_id":"ck0tpl1250098fbs6000xbvha","_id":"ck0tpl17500ewfbs6xpwhth55"},{"post_id":"ck0tpl0sx002tfbs65qh5osaz","tag_id":"ck0tpl126009dfbs6f62tkrkr","_id":"ck0tpl17500exfbs6vbnosnza"},{"post_id":"ck0tpl0sz002vfbs69l4elbva","tag_id":"ck0tpl127009ifbs6s19xh1yq","_id":"ck0tpl17600eyfbs6uwfv7tcl"},{"post_id":"ck0tpl0t1002xfbs665ezx0v5","tag_id":"ck0tpl128009ofbs6v81u0x12","_id":"ck0tpl17700ezfbs621f9cvpa"},{"post_id":"ck0tpl11r0086fbs6lqvhsj1e","tag_id":"ck0tpl16l00egfbs6kpzuln8w","_id":"ck0tpl1ap00f0fbs6cdx2os9j"}],"Tag":[{"name":"谋杀比例","_id":"ck0tpl0sb002ffbs6b8c2g09h"},{"name":"餐饮","_id":"ck0tpl0sh002jfbs6zldqie49"},{"name":"Spark","_id":"ck0tpl0sq002nfbs6vi42km91"},{"name":"世界机场","_id":"ck0tpl0st002rfbs6jsf7kgjy"},{"name":"移动通信","_id":"ck0tpl0t0002wfbs6qmdzm4e3"},{"name":"Dapp","_id":"ck0tpl0t3002zfbs6ljqm1iiu"},{"name":"tools","_id":"ck0tpl0t40031fbs6wlix8xxa"},{"name":"ElasticSearch","_id":"ck0tpl0t70033fbs6p2mz51mz"},{"name":"git","_id":"ck0tpl0t90035fbs61x9p6srq"},{"name":"flink","_id":"ck0tpl0tc0037fbs6m8ysci8y"},{"name":"离婚率","_id":"ck0tpl0te0039fbs6eitctztw"},{"name":"linux","_id":"ck0tpl0ti003bfbs6z9c6d5od"},{"name":"日本","_id":"ck0tpl0tk003dfbs6cq14muel"},{"name":"MVC","_id":"ck0tpl0tm003ffbs6tti5dfjv"},{"name":"设计模式","_id":"ck0tpl0tq003hfbs6jz3n4a6c"},{"name":"P2P网络","_id":"ck0tpl0tt003jfbs6kglr41i9"},{"name":"Starbucks","_id":"ck0tpl0tu003lfbs650mggq5i"},{"name":"Airports","_id":"ck0tpl0tx003ofbs6r48b1r7f"},{"name":"运动员","_id":"ck0tpl0tz003qfbs6n0z4f3bt"},{"name":"医药大学","_id":"ck0tpl0u1003sfbs6ym02bd6u"},{"name":"城市生活成本","_id":"ck0tpl0u2003ufbs6p5vj51fm"},{"name":"windows","_id":"ck0tpl0u3003wfbs69p4yf1ok"},{"name":"vnc","_id":"ck0tpl0u60040fbs6yim34ruc"},{"name":"airflow","_id":"ck0tpl0u70042fbs67map0lun"},{"name":"ambari","_id":"ck0tpl0u80044fbs6xk72cdzf"},{"name":"hadoop","_id":"ck0tpl0u90046fbs6t0rkkyal"},{"name":"数据库","_id":"ck0tpl0ub0048fbs6nfe80pui"},{"name":"c3p0","_id":"ck0tpl0uc004afbs6ccg5vwf1"},{"name":"hexo","_id":"ck0tpl0ud004cfbs6245wctg9"},{"name":"github pages","_id":"ck0tpl0ue004efbs6408g5nob"},{"name":"blog","_id":"ck0tpl0uf004gfbs6l7jvqmda"},{"name":"实时同步","_id":"ck0tpl0ug004ifbs6kdr60sie"},{"name":"mysql","_id":"ck0tpl0uh004kfbs6bj52k0id"},{"name":"oracle","_id":"ck0tpl0ui004mfbs6q5r3e5nb"},{"name":"postgresql","_id":"ck0tpl0uj004pfbs6w9ccakh3"},{"name":"mongo","_id":"ck0tpl0ul004rfbs6zvjh4vno"},{"name":"sql server","_id":"ck0tpl0um004tfbs6pg6jup0h"},{"name":"go","_id":"ck0tpl0uo004vfbs6xwt9xb66"},{"name":"hive","_id":"ck0tpl0uq004xfbs6zd4j2uo8"},{"name":"kafka","_id":"ck0tpl0us004zfbs6b9ac8a3x"},{"name":"programming","_id":"ck0tpl0uw0053fbs6jqief9lk"},{"name":"spark","_id":"ck0tpl0ux0055fbs651971tmy"},{"name":"zookeeper","_id":"ck0tpl0uy0057fbs6ee9159gf"},{"name":"垃圾清理","_id":"ck0tpl0v1005bfbs65950benr"},{"name":"ubuntu","_id":"ck0tpl0v2005efbs6pmr1c6wl"},{"name":"防火墙","_id":"ck0tpl0v4005gfbs655vhmsox"},{"name":"gvim","_id":"ck0tpl0v6005kfbs68v9u1l7r"},{"name":"三星","_id":"ck0tpl0v8005mfbs69lu8f12k"},{"name":"钻石","_id":"ck0tpl0v9005ofbs6r7aivjg5"},{"name":"语言","_id":"ck0tpl0va005qfbs6njnt9nkx"},{"name":"汽车","_id":"ck0tpl0vb005sfbs6lw8imfx6"},{"name":"失业率","_id":"ck0tpl0vd005ufbs6kuyizuv7"},{"name":"数字货币","_id":"ck0tpl0ve005wfbs6n8yu041x"},{"name":"中本聪","_id":"ck0tpl0vg005yfbs6wk40tgkz"},{"name":"比特币","_id":"ck0tpl0vh0060fbs6ezwnfs1h"},{"name":"以太坊","_id":"ck0tpl0vi0062fbs6kli34erz"},{"name":"儿童","_id":"ck0tpl0vj0064fbs61fdvmsnv"},{"name":"贫困率","_id":"ck0tpl0vm0067fbs65pxmuo2m"},{"name":"GDP","_id":"ck0tpl0vn0069fbs66dmzrjok"},{"name":"珠宝","_id":"ck0tpl0vo006bfbs69jeng10z"},{"name":"维基百科","_id":"ck0tpl0vq006dfbs6p18znofq"},{"name":"租房","_id":"ck0tpl0vr006ffbs6k6ecpz2f"},{"name":"骗局","_id":"ck0tpl0vt006hfbs641zu91q5"},{"name":"blockchain","_id":"ck0tpl0vt006jfbs63fje5t29"},{"name":"诺贝尔奖","_id":"ck0tpl0w1006rfbs6htamefph"},{"name":"印度","_id":"ck0tpl0w3006tfbs6wb5oj6b8"},{"name":"时间复杂度","_id":"ck0tpl0w4006vfbs6vx21ewwd"},{"name":"大O表示法","_id":"ck0tpl0w4006xfbs6omhtboot"},{"name":"特斯拉","_id":"ck0tpl0w4006yfbs6uhd8ij33"},{"name":"并发","_id":"ck0tpl0w5006zfbs69fnvfpo9"},{"name":"并行","_id":"ck0tpl0w50070fbs6lgxb7bv2"},{"name":"XLM","_id":"ck0tpl0w60071fbs6v3or2kl2"},{"name":"恒星币","_id":"ck0tpl0w60072fbs61v777asp"},{"name":"德国","_id":"ck0tpl0w70073fbs6nzzaud9k"},{"name":"世界财富排名","_id":"ck0tpl0w70074fbs6oyp3k11h"},{"name":"拜占庭问题,拜占庭容错","_id":"ck0tpl0w90075fbs63uxg1fuy"},{"name":"maven","_id":"ck0tpl0wb0076fbs6kmxa1r2f"},{"name":"nexus","_id":"ck0tpl0wb0077fbs6u2etlnxn"},{"name":"数据仓库","_id":"ck0tpl0we007afbs6l0ramn9l"},{"name":"数据集市","_id":"ck0tpl0we007bfbs6733v6f5a"},{"name":"健康","_id":"ck0tpl0wf007cfbs6pa4ge30w"},{"name":"比原链","_id":"ck0tpl0wf007dfbs6d6q0v34z"},{"name":"公链","_id":"ck0tpl0wg007efbs682592oxz"},{"name":"数据结构","_id":"ck0tpl0wg007ffbs68xxqtcdy"},{"name":"BTC","_id":"ck0tpl0wh007gfbs6a333qmay"},{"name":"双花攻击","_id":"ck0tpl0wh007hfbs6ie6vgiep"},{"name":"UTXO","_id":"ck0tpl0wi007jfbs6gsm4s2sm"},{"name":"XRP","_id":"ck0tpl0wi007kfbs6drhqqjx8"},{"name":"瑞波币","_id":"ck0tpl0wi007lfbs6da8j4c06"},{"name":"游戏","_id":"ck0tpl0wi007mfbs6yxmn5w01"},{"name":"程序设计","_id":"ck0tpl0wj007nfbs692t6lgwe"},{"name":"冒泡排序","_id":"ck0tpl0wj007ofbs68ztugs69"},{"name":"选择排序","_id":"ck0tpl0wj007pfbs6axykcy71"},{"name":"插入排序","_id":"ck0tpl0wj007qfbs68a3g33m6"},{"name":"英国","_id":"ck0tpl0wl007rfbs651a4o2cx"},{"name":"北爱尔兰","_id":"ck0tpl0wl007sfbs6ab4jnm0z"},{"name":"英格兰","_id":"ck0tpl0wl007tfbs6fsl9h8no"},{"name":"苏格兰","_id":"ck0tpl0wm007ufbs6qkdgmq9a"},{"name":"威尔士","_id":"ck0tpl0wm007vfbs6ykd6vb2x"},{"name":"软件","_id":"ck0tpl0wm007wfbs6p5r1v80k"},{"name":"English","_id":"ck0tpl0wm007xfbs6nu5g12a3"},{"name":"java","_id":"ck0tpl0wn007yfbs6xi0beyoq"},{"name":"utils","_id":"ck0tpl0wn007zfbs67s67hj55"},{"name":"道路质量","_id":"ck0tpl0wn0080fbs6bqbtkuce"},{"name":"头号玩家","_id":"ck0tpl0wp0081fbs6f0mb2sdc"},{"name":"canal","_id":"ck0tpl0wr0082fbs6ibjgbjso"},{"name":"监控","_id":"ck0tpl0ws0083fbs6zzawils8"},{"name":"阿甘正传","_id":"ck0tpl0wu0085fbs6bsy6nwkf"},{"name":"solidity","_id":"ck0tpl11t0089fbs6thn76g1s"},{"name":"智能合约","_id":"ck0tpl11x008gfbs66nniwx3u"},{"name":"区块链","_id":"ck0tpl120008mfbs65wf8dv2n"},{"name":"区块链应用","_id":"ck0tpl121008rfbs6h1coh5cj"},{"name":"共识机制","_id":"ck0tpl1250092fbs6btt5t5nh"},{"name":"元数据管理系统","_id":"ck0tpl1250098fbs6000xbvha"},{"name":"数据仓库模型","_id":"ck0tpl126009dfbs6f62tkrkr"},{"name":"bitcoin","_id":"ck0tpl127009ifbs6s19xh1yq"},{"name":"零知识证明","_id":"ck0tpl128009ofbs6v81u0x12"},{"name":"HBase","_id":"ck0tpl16l00egfbs6kpzuln8w"}]}}